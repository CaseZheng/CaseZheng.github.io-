<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>boost 库学习 bind</title>
    <url>/2017/05/31/002-bind-note/</url>
    <content><![CDATA[<h1 id="boost库-bind学习-boost-1-63"><a href="#boost库-bind学习-boost-1-63" class="headerlink" title="boost库 bind学习 boost_1_63"></a>boost库 bind学习 boost_1_63</h1><ul>
<li>bind是C++98标准库中函数适配器bind1st/bind2nd的泛化和增强，可以适配任意的可调用对象，包含函数指针、函数引用、成员函数指针和函数对象。bind最多可以绑定9个函数参数，而且对绑定对象的要求很低，可以在没有<code>result_type</code>内部类型定义的情况下完成对函数对象的绑定。</li>
<li>bind位于名词空间boost，使用bind组件需包含头文件<code>&lt;boost/bind.hpp&gt;</code>, 即:</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;boost/bind.hpp&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> boost;</span><br></pre></td></tr></table></figure>
<h2 id="1-工作原理"><a href="#1-工作原理" class="headerlink" title="1. 工作原理"></a>1. 工作原理</h2><ul>
<li>bind并不是单独的类或函数，是非常庞大的家族，依据绑定的参数个数和要绑定的调用对象类型，有数十种不同形式，名字都叫做bind，编译器会根据具体的绑定代码自动确定要使用的正确形式。</li>
<li>bind接受的第一个参数必须是一个可调用对象，包括函数指针、函数引用、函数对象和成员函数指针，bind接受最多九个参数。参数数量必须与可调用对象的参数数量相等，这些参数将被传递给可调用对象作为输入参数。</li>
<li>绑定完成后，bind返回一个函数对象，内部保存了可调用对象的拷贝，具有operator(),返回值类型自动推导为可调用对象的返回值类型，在发生调用时，函数对象把之前存储的参数转发给可调用对象完成调用。</li>
<li>bind占位符被定义为_1、_2、_3一直到_9，位于一个匿名名词空间。占位符可以取代bind中参数的位置，在发生函数调用时才接受真正的参数。</li>
<li>bind占位符的名字代表它在调用式中的顺序，而在绑定表达式中没有顺序的要求。</li>
</ul>
<h2 id="2-绑定普通函数"><a href="#2-绑定普通函数" class="headerlink" title="2. 绑定普通函数"></a>2. 绑定普通函数</h2><ul>
<li>bind可以绑定普通函数，包括函数、函数指针。</li>
<li>必须在绑定表达式中提供函数要求的所有参数，无论是真实参数还是占位符均可以。</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f2</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"a:"</span>&lt;&lt;a&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"b:"</span>&lt;&lt;b&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f3</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a+b+c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">f4</span>:</span> <span class="keyword">public</span> <span class="built_in">std</span>::binary_function&lt;<span class="keyword">int</span>,<span class="keyword">int</span>,<span class="keyword">int</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> <span class="keyword">const</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (x + y); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//绑定普通函数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;boost::bind(f2, <span class="number">1</span>, <span class="number">2</span>)()&lt;&lt;<span class="built_in">endl</span>;            <span class="comment">//相当于f2(1, 2)</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;boost::bind(f3, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)()&lt;&lt;<span class="built_in">endl</span>;         <span class="comment">//相当于f3(1, 2, 3)</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;boost::bind(f2, _1, <span class="number">9</span>)(<span class="number">4</span>)&lt;&lt;<span class="built_in">endl</span>;          <span class="comment">//相当于f2(4, 4)</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;bind2nd(f4(), <span class="number">9</span>)(<span class="number">4</span>)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;boost::bind(f2, _1, _2)(<span class="number">4</span>, <span class="number">5</span>)&lt;&lt;<span class="built_in">endl</span>;      <span class="comment">//f2(4, 5)</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;boost::bind(f2, _2, _1)(<span class="number">4</span>, <span class="number">5</span>)&lt;&lt;<span class="built_in">endl</span>;      <span class="comment">//f2(5, 4)</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;boost::bind(f2, _1, _1)(<span class="number">5</span>, <span class="number">4</span>)&lt;&lt;<span class="built_in">endl</span>;      <span class="comment">//f2(5, 5)</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;boost::bind(f3, _1, <span class="number">8</span>, _2)(<span class="number">5</span>, <span class="number">4</span>)&lt;&lt;<span class="built_in">endl</span>;      <span class="comment">//f3(5, 8, 4)</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;boost::bind(f3, _3, _2, _2)(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)&lt;&lt;<span class="built_in">endl</span>;      <span class="comment">//f3(3, 2, 2)</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">typedef</span> <span class="title">int</span> <span class="params">(*f2_type)</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">typedef</span> <span class="title">int</span> <span class="params">(*f3_type)</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>, <span class="keyword">int</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    f2_type pf2 = f2;</span><br><span class="line">    f3_type pf3 = f3;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;boost::bind(pf2, <span class="number">1</span>, <span class="number">2</span>)()&lt;&lt;<span class="built_in">endl</span>;            <span class="comment">//相当于*pf2(1, 2)</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;boost::bind(pf3, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)()&lt;&lt;<span class="built_in">endl</span>;         <span class="comment">//相当于*pf3(1, 2, 3)</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="3-绑定成员函数"><a href="#3-绑定成员函数" class="headerlink" title="3. 绑定成员函数"></a>3. 绑定成员函数</h2><ul>
<li>bind可以绑定类的成员函数。类的成员函数指针不能直接调用operator()，必须绑定一个对象或者函数，通过this指针调用成员函数。因此bind需要用一个占位符的位置让用户提供一个类的实例、引用或者指针，通过对象作为第一个参数来调用成员函数。所以使用成员函数最多只能绑定8个参数。</li>
<li>bind可以代替标准库中的mem_fun和mem_fun_ref帮顶起，用来配合标准算法操作容器中对象。</li>
<li>bind同样支持绑定虚拟成员函数，用法与非虚函数相同，虚函数的行为将由实际调用发生时的实例来决定。</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Test</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Test():x(<span class="number">0</span>)&#123;&#125;</span><br><span class="line">    Test(<span class="keyword">int</span> _x):x(_x)&#123;&#125;</span><br><span class="line">    ~Test()&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">f2</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"a:"</span>&lt;&lt;a&lt;&lt;<span class="string">" b:"</span>&lt;&lt;b&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> a+b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;x&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_test</span><span class="params">(Test &amp;t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    t.print();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_test_p</span><span class="params">(Test *t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="literal">NULL</span> != t) &#123; t-&gt;print(); &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//绑定成员函数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Test t;</span><br><span class="line">    Test &amp;yt = t;</span><br><span class="line">    Test *pt = &amp;t;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;boost::bind(&amp;Test::f2, t, _1, <span class="number">10</span>)(<span class="number">10</span>)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;boost::bind(&amp;Test::f2, yt, <span class="number">9</span>, <span class="number">10</span>)()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;boost::bind(&amp;Test::f2, pt, _1, _2)(<span class="number">20</span>, <span class="number">10</span>)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;boost::bind(&amp;Test::f2, pt, _2, _1)(<span class="number">20</span>, <span class="number">10</span>)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">vector</span>&lt;Test&gt; vecTest;</span><br><span class="line">    vecTest.push_back(Test(<span class="number">1</span>));</span><br><span class="line">    vecTest.push_back(Test(<span class="number">2</span>));</span><br><span class="line">    vecTest.push_back(Test(<span class="number">3</span>));</span><br><span class="line">    vecTest.push_back(Test(<span class="number">4</span>));</span><br><span class="line"></span><br><span class="line">    for_each(vecTest.begin(), vecTest.end(), print_test);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    for_each(vecTest.begin(), vecTest.end(), mem_fun_ref(&amp;Test::print));    <span class="comment">//mem_fun_ref用于容器存储对象实体时</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    for_each(vecTest.begin(), vecTest.end(), boost::bind(&amp;Test::print, _1));</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">vector</span>&lt;Test*&gt; vecTest_p;</span><br><span class="line">    vecTest_p.push_back(<span class="keyword">new</span> Test(<span class="number">5</span>));</span><br><span class="line">    vecTest_p.push_back(<span class="keyword">new</span> Test(<span class="number">6</span>));</span><br><span class="line">    vecTest_p.push_back(<span class="keyword">new</span> Test(<span class="number">7</span>));</span><br><span class="line">    for_each(vecTest_p.begin(), vecTest_p.end(), print_test_p);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    for_each(vecTest_p.begin(), vecTest_p.end(), mem_fun(&amp;Test::print));    <span class="comment">//mem_fen用于容器存储对象指针时</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    for_each(vecTest_p.begin(), vecTest_p.end(), boost::bind(&amp;Test::print, _1));</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="4-绑定成员变量"><a href="#4-绑定成员变量" class="headerlink" title="4. 绑定成员变量"></a>4. 绑定成员变量</h2><ul>
<li>bind可以绑定public成员变量</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;Test&gt; v;</span><br><span class="line">    v.push_back(Test(<span class="number">1</span>));</span><br><span class="line">    v.push_back(Test(<span class="number">2</span>));</span><br><span class="line">    v.push_back(Test(<span class="number">3</span>));</span><br><span class="line">    v.push_back(Test(<span class="number">4</span>));</span><br><span class="line">    for_each(v.begin(), v.end(), boost::bind(&amp;Test::print, _1));</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">v2</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line">    transform(v.begin(), v.end(), v2.begin(), bind(&amp;Test::x, _1));  <span class="comment">//bind取出Test对象的成员变量x，transform算法调用bind表达式操作容器v，逐个吧变量填入到v2中</span></span><br><span class="line">    for_each(v2.begin(), v2.end(), boost::bind(print_test_int, _1));</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="built_in">string</span>&gt; <span class="keyword">pair_t</span>;</span><br><span class="line">    <span class="function"><span class="keyword">pair_t</span> <span class="title">p</span><span class="params">(<span class="number">123</span>, <span class="string">"bind"</span>)</span></span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;boost::bind(&amp;<span class="keyword">pair_t</span>::first, p)()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;boost::bind(&amp;<span class="keyword">pair_t</span>::second, p)()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="5-绑定函数对象"><a href="#5-绑定函数对象" class="headerlink" title="5. 绑定函数对象"></a>5. 绑定函数对象</h2><ul>
<li>bind可以绑定函数对象，包括标准库中的所有预定义的函数对象</li>
<li>如果函数对象有内部定义result_type,bind可以自动推导出返回值类型，如果函数对象未定义result_type,则需要用模版参数指明返回值类型。</li>
<li>标准库和boost库大部分函数对象都具有result_type定义。</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">f</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x + y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">g</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">int</span> result_type;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x + y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//绑定函数对象</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;boost::bind(greater&lt;<span class="keyword">int</span>&gt;(), _1, <span class="number">10</span>)(<span class="number">13</span>)&lt;&lt;<span class="built_in">endl</span>;     <span class="comment">//标准库 具有result_type类型定义</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;boost::bind&lt;<span class="keyword">int</span>&gt;(f(), _1, _2)(<span class="number">10</span>, <span class="number">15</span>)&lt;&lt;<span class="built_in">endl</span>;      <span class="comment">//自定义函数对象，可以通过模版制定返回值类型</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;boost::bind(g(), _1, _2)(<span class="number">15</span>, <span class="number">15</span>)&lt;&lt;<span class="built_in">endl</span>;           <span class="comment">//自定义函数对象，定义result_type</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="6-使用ref库"><a href="#6-使用ref库" class="headerlink" title="6. 使用ref库"></a>6. 使用ref库</h2><ul>
<li>bind采用拷贝的方式存储绑定对象和参数，如果函数对象或值参数很大、拷贝代价很高，或者无法拷贝，bind的使用会受到限制。因此bind可以搭配ref库，ref库包装对象的引用，让bind存储对象引用的拷贝，降低拷贝的代价。</li>
<li>使用ref传对象引用时，必须保证bind被调用时引用时有效的。</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//使用ref库</span></span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> y = <span class="number">20</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;boost::bind(greater&lt;<span class="keyword">int</span>&gt;(), _1, cref(x))(<span class="number">13</span>)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    g gf;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;boost::bind(ref(gf), _1, <span class="number">20</span>)(<span class="number">10</span>)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    BOOST_AUTO(r, ref(x));</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> *y = <span class="keyword">new</span> <span class="keyword">int</span>(<span class="number">5</span>);</span><br><span class="line">        r = ref(*y);</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;r&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;bind(f3, r, <span class="number">1</span>, <span class="number">1</span>)()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">delete</span> y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> *w = <span class="keyword">new</span> <span class="keyword">int</span>(<span class="number">8</span>);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;bind(f3, r, <span class="number">1</span>, <span class="number">1</span>)()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="7-高级议题"><a href="#7-高级议题" class="headerlink" title="7. 高级议题"></a>7. 高级议题</h2><h3 id="为占位符更名"><a href="#为占位符更名" class="headerlink" title="为占位符更名"></a>为占位符更名</h3><ul>
<li>最简单的方法：为原占位符使用引用创建别名，可以使用<code>BOOST_AUTO</code>，无需关心占位符的真实类型，将推导的工作交给编译器。<h3 id="存储bind表达式"><a href="#存储bind表达式" class="headerlink" title="存储bind表达式"></a>存储bind表达式</h3></li>
<li>bind表达式生成的函数对象类型声明非常复杂，可以使用typedef库BOOST_AUTO宏辅助，也可以用function库。<h3 id="嵌套绑定"><a href="#嵌套绑定" class="headerlink" title="嵌套绑定"></a>嵌套绑定</h3></li>
<li>bind可以嵌套，一个bind表达式生成的函数对象可以被另一个bind再绑定，实现类似<code>f(g(x))</code>的形式。bind嵌套要特别小心，不容易写正确和理解。<h3 id="操作符重载"><a href="#操作符重载" class="headerlink" title="操作符重载"></a>操作符重载</h3></li>
<li>bind重载了比较操作符和逻辑非操作符,可以将多个bind绑定组合起来，形成复杂的逻辑表达式，配合标准库实现语法简单但语义复杂的操作。<h3 id="绑定非标准函数"><a href="#绑定非标准函数" class="headerlink" title="绑定非标准函数"></a>绑定非标准函数</h3></li>
<li>有的非标准函数bind无法推导出返回值，必须显式地指定bind的返回值类型。</li>
<li>bind不支持使用了不同调用方式(如<code>__stdcall</code>、<code>__fastcall</code>、<code>extern &quot;C&quot;</code>)的函数，bind将它们看做函数对象，需要显式指定bind的返回值类型。或者在<code>&lt;boost/bind.hpp&gt;</code>之前加上<code>BOOST_BIND_ENABLE_STDCALL</code>、<code>BOOST_BIND_ENABLE_FASTCALL</code>、<code>BOOST_BIND_ENABLE_PASCAL</code>等宏，明确告诉bind支持这些调用。</li>
</ul>
]]></content>
      <categories>
        <category>cpp</category>
      </categories>
      <tags>
        <tag>cpp</tag>
        <tag>boost</tag>
      </tags>
  </entry>
  <entry>
    <title>boost 库学习 ref</title>
    <url>/2017/05/31/003-ref-note/</url>
    <content><![CDATA[<h1 id="boost库-ref学习-boost-1-63"><a href="#boost库-ref学习-boost-1-63" class="headerlink" title="boost库 ref学习 boost_1_63"></a>boost库 ref学习 boost_1_63</h1><ul>
<li>STL和Boost中的算法和函数大量使用函数对象作为判断式或谓词参数，这些参数都是传值语义，算法和函数在内部保留函数对象的拷贝并使用。</li>
<li>特殊情况下作为参数的函数对象拷贝代价过高或者不希望拷贝对象或者拷贝是不可行的。<code>boost.ref</code>应用代理模式，引入对象引用的包装器概念解决这个问题，为了使用ref需要包含头文件:</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;boost/ref.hpp&gt;</span></span></span><br></pre></td></tr></table></figure>
<h2 id="1-类摘要"><a href="#1-类摘要" class="headerlink" title="1. 类摘要"></a>1. 类摘要</h2><ul>
<li>ref库定义了一个很小很简单的引用类型的包装器，reference_wrapper,</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">class</span> <span class="title">reference_wrapper</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">reference_wrapper</span><span class="params">(T&amp; t)</span>: <span class="title">t_</span><span class="params">(&amp;t)</span> </span>&#123;&#125;</span><br><span class="line">    <span class="keyword">operator</span> T&amp; () <span class="keyword">const</span> &#123; <span class="keyword">return</span> *t_; &#125;</span><br><span class="line">    <span class="function">T&amp; <span class="title">get</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> *t_; &#125;</span><br><span class="line">    <span class="function">T* <span class="title">get_pointer</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> t_; &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    T* t_;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<ul>
<li>reference_wrapper的构造函数接受类型T的引用类型，内部使用指针存储t的引用，构造出一个reference_wrapper对象，包装了引用。get()和get_pointer()这两个函数分别返回存储的引用和指针，相当于揭开对t的包装。</li>
</ul>
<h2 id="2-基本用法"><a href="#2-基本用法" class="headerlink" title="2. 基本用法"></a>2. 基本用法</h2><ul>
<li>reference_wrapper只在使用T的语境下才会执行隐式转换，其它情况下需要调用类型转换函数或者get()函数得到真正操作被包装对象。</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">10</span>;</span><br><span class="line">    <span class="function">reference_wrapper&lt;<span class="keyword">int</span>&gt; <span class="title">rw</span><span class="params">(x)</span></span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;(x==rw)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    (<span class="keyword">int</span> &amp;)rw = <span class="number">100</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;(<span class="number">100</span>==rw)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">reference_wrapper&lt;<span class="keyword">int</span>&gt; <span class="title">rw2</span><span class="params">(rw)</span></span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;(rw2.get()==<span class="number">100</span>)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">string</span> str;</span><br><span class="line">    <span class="function">reference_wrapper&lt;<span class="built_in">string</span>&gt; <span class="title">rws</span><span class="params">(str)</span></span>;</span><br><span class="line">    *rws.get_pointer() = <span class="string">"ref"</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;str&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;rws.get().size()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="3-工厂函数"><a href="#3-工厂函数" class="headerlink" title="3. 工厂函数"></a>3. 工厂函数</h2><ul>
<li>ref库提供了两个便捷的工厂函数ref()和cref()，通过参数类型推导构造reference_wrapper对象。</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">reference_wrapper&lt;T&gt; <span class="title">ref</span><span class="params">(T&amp; t)</span></span>;</span><br><span class="line"><span class="function">reference_wrapper&lt;T <span class="keyword">const</span>&gt; <span class="title">cref</span><span class="params">(T <span class="keyword">const</span>&amp; t)</span></span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>ref可以根据参数类型自动推导正确的<code>reference_wrapper&lt;T&gt;</code>对象，<code>ref()</code>产生类型为T，<code>cref()</code>产生类型为T const。</li>
<li>reference_wrapper支持拷贝，因此ref()和cref()可以直接总在需要拷贝语义的函数参数中。</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> x = <span class="number">2.12345</span>;</span><br><span class="line">    BOOST_AUTO(rw, cref(x));</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="keyword">typeid</span>(rw).name()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">string</span> str = <span class="string">"hahahahah"</span>;</span><br><span class="line">    BOOST_AUTO(rws, ref(str));</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="keyword">typeid</span>(rws).name()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">sqrt</span>(ref(x))&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="4-操作包装"><a href="#4-操作包装" class="headerlink" title="4. 操作包装"></a>4. 操作包装</h2><ul>
<li>ref库运用模版元编程技术提供两个特征类is_reference_wrapper和unwrap_reference，用于检测reference_wrapper对象。<code>is_reference_wrapper&lt;T&gt;</code>的bool成员变量value可以判断T是否为一个reference_wrapper。<code>unwrap_reference&lt;T&gt;</code>的内部定义type表明了T的真实类型，无论它是否经过reference_wrapper包装。</li>
<li><code>unwrap_ref()</code>利用<code>unwrap_reference&lt;T&gt;</code>直接解开reference_wrapper的包装(如果有的话)，返回被包装对象的引用。直接对一个未包装的对象使用<code>unwrap_ref()</code>直接返回对象自身的引用。<code>unwrap_ref()</code>可以安全地用在泛型代码中，而不必关心对象的包装特性，总能够正确地操作对象。</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">v</span><span class="params">(<span class="number">10</span>, <span class="number">2</span>)</span></span>;</span><br><span class="line">    BOOST_AUTO(rw, ref(v));</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;is_reference_wrapper&lt;BOOST_TYPEOF(rw)&gt;::value&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;is_reference_wrapper&lt;BOOST_TYPEOF(v)&gt;::value&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="keyword">typeid</span>(unwrap_reference&lt;BOOST_TYPEOF(rw)&gt;::type).name()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="keyword">typeid</span>(unwrap_reference&lt;BOOST_TYPEOF(v)&gt;::type).name()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> x = (<span class="keyword">int</span>)<span class="number">2.12345</span>;</span><br><span class="line">    BOOST_AUTO(rwd, cref(x));</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;is_reference_wrapper&lt;BOOST_TYPEOF(rwd)&gt;::value&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;is_reference_wrapper&lt;BOOST_TYPEOF(x)&gt;::value&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="keyword">typeid</span>(unwrap_reference&lt;BOOST_TYPEOF(rwd)&gt;::type).name()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="keyword">typeid</span>(unwrap_reference&lt;BOOST_TYPEOF(x)&gt;::type).name()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    unwrap_ref(rw).push_back(<span class="number">4</span>);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;unwrap_ref(rw)[<span class="number">10</span>]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">str</span><span class="params">(<span class="string">"hahaha"</span>)</span></span>;</span><br><span class="line">    BOOST_AUTO(rws, cref(str));</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;unwrap_ref(rws)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="5-为ref增加函数调用功能"><a href="#5-为ref增加函数调用功能" class="headerlink" title="5. 为ref增加函数调用功能"></a>5. 为ref增加函数调用功能</h2><ul>
<li>ref将对象包装为引用语义，降低了复制成本，使引用的行为更像对象，可以让容器安全地持有被包装的引用对象，可以称为”智能引用”</li>
<li>ref库没有实现TR1的全部定义，不能提供函数调用操作operator(),无法包装一个函数对象的引用并传递给标准库算法。可以修改boost::ref库添加函数调用功能。</li>
</ul>
]]></content>
      <categories>
        <category>cpp</category>
      </categories>
      <tags>
        <tag>cpp</tag>
        <tag>boost</tag>
        <tag>asio</tag>
      </tags>
  </entry>
  <entry>
    <title>boost 库学习 asio</title>
    <url>/2017/05/31/001-asio-note/</url>
    <content><![CDATA[<h1 id="boost库-asio学习-boost-1-63"><a href="#boost库-asio学习-boost-1-63" class="headerlink" title="boost库 asio学习 boost_1_63"></a>boost库 asio学习 boost_1_63</h1><h1 id="高性能服务器程序框架-基础知识复习-（书籍-Linux高性能服务器编程）"><a href="#高性能服务器程序框架-基础知识复习-（书籍-Linux高性能服务器编程）" class="headerlink" title="高性能服务器程序框架 基础知识复习 （书籍 Linux高性能服务器编程）"></a>高性能服务器程序框架 基础知识复习 （书籍 Linux高性能服务器编程）</h1><ul>
<li>按照服务器一般原理，可将服务器解构为以下三个主要模块：<ol>
<li>I/O处理单元。</li>
<li>逻辑单元。</li>
<li>存储单元。</li>
</ol>
</li>
</ul>
<h2 id="1-服务器模型"><a href="#1-服务器模型" class="headerlink" title="1 服务器模型"></a>1 服务器模型</h2><h3 id="1-1-C-S模型"><a href="#1-1-C-S模型" class="headerlink" title="1.1 C/S模型"></a>1.1 C/S模型</h3><ul>
<li>C/S(客户端/服务器)模型：所有客户端都通过访问服务器来获取所需的资源。<br><img src="/Picture/asio_CS.jpg" alt="TCP服务器和TCP客户端的工作流程"></li>
<li>C/S模型适合资源相对集中的场合，其实现也很简单，缺点明显：服务器是通信的中心，当访问量很大时，所有客户都讲得到很慢的响应。</li>
</ul>
<h3 id="1-2-P2P模型"><a href="#1-2-P2P模型" class="headerlink" title="1.2 P2P模型"></a>1.2 P2P模型</h3><ul>
<li>P2P(点对点)模型摒弃了以服务器为中心的格局，让网络上所有主机重新回归对等的地位。P2P模型让每台机器在消耗服务的同时也在给别人提供服务，让资源充分、自由地共享。缺点：当用户之间传输的请求过多时，网络的负载将加重。P2P模式通常带有一个专门的发现服务器，提供查找服务甚至提供内容服务，让每个客户尽快地找到自己需要的资源。P2P模型可以看做C/S模型的扩展：每台主机既是客户端，也是服务器。<br><img src="/Picture/asio_P2P.jpg" alt="P2P模型 带有发现服务器的P2P模型"></li>
</ul>
<h2 id="2-服务器编程框架"><a href="#2-服务器编程框架" class="headerlink" title="2 服务器编程框架"></a>2 服务器编程框架</h2><ul>
<li>服务器基本框架都一样，不同在于逻辑处理。<br><img src="/Picture/asio_service_1.jpg" alt="服务器基本框架"></li>
</ul>
<p><img src="/Picture/asio_service_2.jpg" alt="服务器基本模块功能描述"></p>
<ul>
<li>I/O处理单元是服务器管理客户连接的模块。主要工作：1.等待并接受新的客户连接;2.接收客户数据;3.将服务器响应的数据返回客户端。对于服务器集群，I/O处理单元是一个专门的接入服务器，实现负载均衡，在所有逻辑服务器中选取负荷最小的一台为新客户服务。</li>
<li>一个逻辑单元是一个进程或线程，主要工作：分析并处理客户数据，并将结果传递给I/O处理单元或者直接发送给客户端。对服务器集群，一个逻辑单元就是一台逻辑服务器，服务器通常拥有多个逻辑单元，实现对多个客户任务的并行处理。</li>
<li>网络存储单元可以是数据库、缓存和文件，甚至一台独立服务器，但它不是必须的。</li>
<li>请求队列是各个单元间通信方式的抽象。对服务器集群，请求队列是各台服务器之间预先建立的、静态的、永久的TCP连接，该TCP连接提高服务器间交换数据的效率，避免动态建立TCP连接的额外的系统开销。</li>
</ul>
<h2 id="3-I-O模型"><a href="#3-I-O模型" class="headerlink" title="3 I/O模型"></a>3 I/O模型</h2><ul>
<li>阻塞I/O，系统调用可能无法立即完成而被操作系统挂起，直到等待的事件发生为止。socket在创建时默认是阻塞的。通过给socket系统调用第二个参数传递SOCK_NONBLOCK标志，或通过fcntl系统调用的F_SETFL命令，可将socket设置为非阻塞的。对非阻塞I/O的系统调用总是立即返回，而不管事件是否已经发生。非阻塞I/O只有在事件已经发生的情况下操作，才能提高程序效率，因此非阻塞I/O通常和其它I/O通知机制一起使用。</li>
<li>I/O复用，应用程序通过I/O复用函数向内核注册一组事件，内核通过I/O复用函数把其中就绪的事件通知给应用程序。</li>
<li>SIGIO信号，为一个目标文件描述符指定宿主进程，被指定的宿主进程将捕获到SIGIO信号。当目标文件描述符上有事件发生时，SIGIO信号的信号处理函数将被触发。</li>
<li>理论上：阻塞I/O、I/O复用和信号驱动I/O都是同步I/O模型。因为在以上三种模型中，I/O的读写操作都是在I/O事件发生之后，由应用程序来完成的。</li>
<li>对于POSIX规范定义的异步I/O模型，用户可以直接对I/O执行读写操作，读写操作告诉内核用户读写缓冲区的位置，以及I/O操作完成后内核通知应用程序的方式，异步I/O的读写总是立即返回，不论I/O是否阻塞，因为真正的读写操作由内核接管。同步I/O模型要求用户代码自执行I/O操作，而异步I/O由内核来执行I/O操作。同步I/O向应用程序通知的是I/O就绪事件，而异步I/O向引用程序通知的是I/O完成事件。<br><img src="/Picture/asio_IO.jpg" alt="IO模型对比"></li>
</ul>
<h2 id="4-两种高效的事件处理模式"><a href="#4-两种高效的事件处理模式" class="headerlink" title="4 两种高效的事件处理模式"></a>4 两种高效的事件处理模式</h2><ul>
<li>服务器通常需要处理三类事件:I/O事件、信号及定时器事件。</li>
<li>同步I/O模型通常用于Reactor模式，异步I/O模型则用于实现Proactor模式。</li>
</ul>
<h3 id="4-1-Reactor模式"><a href="#4-1-Reactor模式" class="headerlink" title="4.1 Reactor模式"></a>4.1 Reactor模式</h3><p><img src="/Picture/asio_Reactor_1.jpg" alt="Reactor介绍"><br><img src="/Picture/asio_Reactor_2.jpg" alt="Reactor模式"></p>
<h3 id="4-2-Proactor模式"><a href="#4-2-Proactor模式" class="headerlink" title="4.2 Proactor模式"></a>4.2 Proactor模式</h3><ul>
<li>Proactor模式将所有I/O操作都交给主线程和内核来处理，工作线程仅仅负责业务逻辑。因此，Proactor模式更加符合服务器基本框架。<br><img src="/Picture/asio_Proactor_1.jpg" alt="Proactor介绍"><br><img src="/Picture/asio_Proactor_2.jpg" alt="Proactor模式"></li>
</ul>
<h3 id="4-3-模拟Proactor模式"><a href="#4-3-模拟Proactor模式" class="headerlink" title="4.3 模拟Proactor模式"></a>4.3 模拟Proactor模式</h3><ul>
<li>使用同步I/O方式模拟Proactor模式，原理：主线程执行数据读写操作，读写完成之后，主线程向工作线程通知这一”完成时间”。从工作线程角度，直接获得了数据读写的结果，下面只是对读写的结果进行逻辑处理。<br><img src="/Picture/asio_Proactor_3.jpg" alt="模拟Proactor模式"></li>
</ul>
<h1 id="Boost-Asio-学习"><a href="#Boost-Asio-学习" class="headerlink" title="Boost.Asio 学习"></a>Boost.Asio 学习</h1><ul>
<li>asio库基于操作系统提供的异步机制，采用前摄器设计模式(Proactor)实现可移植的异步或者同步IO操作，并且并不要求使用多线程和锁定，有效避免多线程编程带来的诸多有害副作用(如条件竞争、死锁等)。</li>
<li>Boost.Asio是一个跨平台、主要用于网络和其他一些底层输入/输出编程的C++库。</li>
<li>Boost.Asio在网络通信、COM串行端口和文件上成功地抽象了输入输出的概念。</li>
<li>Boost.Asio依赖如下库：<ol>
<li>Boost.System:为Boost库提供操作系统支持。</li>
<li>Boost.Regex(可选的):以便重载Read_until()或者async_read_until()是使用boost::regex参数。</li>
<li>Boost.DateTime(可选的):以便使用Boost.Asio中的计时器。</li>
<li>OpenSSL(可选的):以便使用Boost.Asio提供的SSL支持。</li>
</ol>
</li>
<li>asio 位于名字空间boost::asio ,需要包含头文件如下:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#define BOOST_REGEX_NO_LIB</span><br><span class="line">#define BOOST_DATE_TIME_SOURCE</span><br><span class="line">#define BOOST_SYSTEM_NO_LIB</span><br><span class="line">#include &lt;boost/asio.hpp&gt;</span><br><span class="line">using namespace boost::asio;</span><br></pre></td></tr></table></figure>
<h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h2><ul>
<li>asio库基于Proactor封装了操作系统的select、poll/epoll、kqueue、overlappedI/O等机制，实现异步IO模型。</li>
<li>asio的核心类是io_service, 相当于前摄器模式中的Proactor角色，asio的任何操作都需要io_service的参与。</li>
<li>同步模式下，程序发起一个I/O操作，向io_service提交请求，io_service把操作转交给操作系统，同步等待，等I/O操作完成，操作系统通知io_service，然后io_service将结果发回程序，完成整个同步流程。</li>
<li>异步模式下，程序除了发起I/O操作，还需要定义一个用于回调的完成处理函数。io_service同样把IO操作转交给操作系统，但不同步等待，而是立即返回，调用io_service的run()成员函数等待异步操作完成，当异步操作完成时io_service从操作系统获取执行结果，调用完成处理函数。</li>
<li>asio不直接使用操作系统提供的线程，而是定义了一个自己的线程概念：stand，保证多线程环境中代码可以正确执行，而无需使用互斥量。io_service::stand::wrap()函数可以包装一个函数在strand中执行。</li>
<li>asio专门用两个类mutable_buffer和const_buffer来封装缓存区，它们可以安全的应用到异步的读写当中,使用自由函数buffer()可以包装常用的C++容器类型(array,vector,string等),用read()、write()函数读取缓存区。</li>
<li>asio使用system库的error_code和system_error表示程序运行错误。基本所有函数有两种重载，一是有error_code的输出参数，调用后检查这个参数验证错误，二是没有error_code参数，发生错误则抛出system_error异常, 调用代码用try-catch块捕获错误。</li>
</ul>
<h2 id="2-定时器"><a href="#2-定时器" class="headerlink" title="2. 定时器"></a>2. 定时器</h2><ul>
<li>定时器功能的主要类是deadline_timer</li>
<li>定时器deadline_timer有两种形式的构造函数，都要求有io_service对象，用于提交IO请求，另一个参数是posix_time的绝对时间点或者是自当前时间开始的时间长度。</li>
<li>定时器对象创建，立即开始计时，可用成员函数wait()同步等待定时器终止，或使用async_wait()异步等待，当定时器终止时会调用handler函数。</li>
<li>如果创建定时器不制定终止时间，定时器不会工作，可用成员函数expires_at()和expires_from_now()分别设定定时器终止的绝对时间和相对时间，然后调用wait()或async_wait()等待。expires_at()和expires_from_now()的无参重载形式可以获得定时器的终止时间。</li>
<li>定时器cancel()函数。通知所有异步操作取消，转而等待定时器终止。</li>
</ul>
<h2 id="3-定时器用法"><a href="#3-定时器用法" class="headerlink" title="3. 定时器用法"></a>3. 定时器用法</h2><h3 id="同步定时器"><a href="#同步定时器" class="headerlink" title="同步定时器"></a>同步定时器</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//同步定时器</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    io_service service;             <span class="comment">//所有asio程序必须有一个io_service对象</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;time(<span class="number">0</span>)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">deadline_timer <span class="title">t</span><span class="params">(service,               <span class="comment">//定时器，io_service作为构造函数的参数。</span></span></span></span><br><span class="line"><span class="function"><span class="params">            boost::posix_time::seconds(<span class="number">2</span>))</span></span>; <span class="comment">//2s后定时器终止。</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;t.expires_at()&lt;&lt;<span class="built_in">endl</span>;             <span class="comment">//查看定时器停止时的绝对时间</span></span><br><span class="line"></span><br><span class="line">    t.wait();                               <span class="comment">//调用wait()同步等待。</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;time(<span class="number">0</span>)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"timer over"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>io_service对象，是前摄器中最重要的proactor角色。<h3 id="异步定时器"><a href="#异步定时器" class="headerlink" title="异步定时器"></a>异步定时器</h3></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//异步定时器</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(<span class="keyword">const</span> boost::system::error_code &amp;e)</span>     <span class="comment">//异步定时器回调函数 asio库要求回调函数只能有一个参数，而且必须是const asio::error_code &amp;类型。</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;time(<span class="number">0</span>)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"timer over"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;e&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    io_service service;             <span class="comment">//所有asio程序必须有一个io_service对象</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;time(<span class="number">0</span>)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">deadline_timer <span class="title">t</span><span class="params">(service,               <span class="comment">//定时器，io_service作为构造函数的参数。</span></span></span></span><br><span class="line"><span class="function"><span class="params">            boost::posix_time::seconds(<span class="number">2</span>))</span></span>; <span class="comment">//2s后定时器终止。</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;t.expires_at()&lt;&lt;<span class="built_in">endl</span>;             <span class="comment">//查看定时器停止时的绝对时间</span></span><br><span class="line"></span><br><span class="line">    t.async_wait(handle);                   <span class="comment">//调用wait()异步等待，传入回调函数。</span></span><br><span class="line"></span><br><span class="line">    service.run();                  <span class="comment">//启动前摄器的事件处理循环，阻塞等待所有的操作完成并分派事件。</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"not wait"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="异步绑定器使用bind"><a href="#异步绑定器使用bind" class="headerlink" title="异步绑定器使用bind"></a>异步绑定器使用bind</h3><ul>
<li>由于async_wait()接受的回调函数类型是固定的，必须使用bind库来绑定参数以适配它的接口。</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_t</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"print"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">timer_test</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> count;</span><br><span class="line">    <span class="keyword">int</span> count_max;</span><br><span class="line">    function&lt;<span class="keyword">void</span>()&gt; f;</span><br><span class="line">    deadline_timer t;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> F&gt;</span><br><span class="line">    timer_test(io_service &amp;ios, <span class="keyword">int</span> x, F func):</span><br><span class="line">        f(func), count_max(x), count(<span class="number">0</span>),t(ios, posix_time::millisec(<span class="number">500</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        t.async_wait(bind(&amp;timer_test::call_func, <span class="keyword">this</span>, boost::asio::placeholders::error));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">call_func</span><span class="params">(<span class="keyword">const</span> system::error_code &amp;)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(count &gt;= count_max)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ++count;</span><br><span class="line">        f();</span><br><span class="line">        t.expires_at(t.expires_at() + posix_time::millisec(<span class="number">500</span>));</span><br><span class="line">        t.async_wait(bind(&amp;timer_test::call_func, <span class="keyword">this</span>, boost::asio::placeholders::error));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    io_service service;             <span class="comment">//所有asio程序必须有一个io_service对象</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;time(<span class="number">0</span>)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="function">deadline_timer <span class="title">t</span><span class="params">(service,               <span class="comment">//定时器，io_service作为构造函数的参数。</span></span></span></span><br><span class="line"><span class="function"><span class="params">            boost::posix_time::seconds(<span class="number">2</span>))</span></span>; <span class="comment">//2s后定时器终止。</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;t.expires_at()&lt;&lt;<span class="built_in">endl</span>;             <span class="comment">//查看定时器停止时的绝对时间</span></span><br><span class="line">    t.async_wait(handle);                   <span class="comment">//调用wait()异步等待，传入回调函数。</span></span><br><span class="line">    <span class="function">timer_test <span class="title">tt</span><span class="params">(service, <span class="number">6</span>, <span class="keyword">print_t</span>)</span></span>;</span><br><span class="line">    service.run();                  <span class="comment">//启动前摄器的事件处理循环，阻塞等待所有的操作完成并分派事件。</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"not wait"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="4-网络通信简述"><a href="#4-网络通信简述" class="headerlink" title="4.网络通信简述"></a>4.网络通信简述</h2><ul>
<li>asio库支持TCP、UDP和TCMP通信协议。</li>
<li>boost::asio::ip名字空间提供网络通信方面的函数和类，封装原始的Berkeley Socket API。 </li>
<li>ip::tcp类是asio网络通信(TCP)部分主要的类，其中定义了用于TCP通信的typedef类型，用于协作完成网络通信。typedef包括端点类endpoint、套接字类socket、流类iostream、接受器acceptor、解析器resolver等。</li>
</ul>
<h2 id="5-IP地址和端点"><a href="#5-IP地址和端点" class="headerlink" title="5. IP地址和端点"></a>5. IP地址和端点</h2><ul>
<li>IP地址独立于TCP、UDP等通信协议，asio库使用类ip::address来表示IP地址，可以同时支持ipv4和ipv6两种地址。</li>
<li>address类最重要的方法是静态成员函数from_string()，是工厂函数，可以从字符串产生ip地址，地址的版本可以用is_v4()和is_v6()来检测。address成员函数to_string()把ip地址转化为字符串。</li>
<li>端口在asio库中用ip::tcp::endpoint类来表示。主要用法是通过构造函数创建一个用于socket通信的端口对象，端口地址和端口号用address()和port()获得。</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ip::address addr;</span><br><span class="line">    addr = addr.from_string(<span class="string">"127.0.0.1"</span>);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;addr.is_v4()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;addr.is_v6()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;addr.to_string()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    addr = addr.from_string(<span class="string">"ab::12:13:14"</span>);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;addr.is_v4()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;addr.is_v6()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;addr.to_string()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    ip::<span class="function">tcp::endpoint <span class="title">epp</span><span class="params">(addr, <span class="number">8000</span>)</span></span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;epp.address()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;epp.port()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="6-同步socket处理"><a href="#6-同步socket处理" class="headerlink" title="6. 同步socket处理"></a>6. 同步socket处理</h2><ul>
<li>ip::tcp的内部类型socket、acceptor和resolver是asio库TCP通信中最核心的一组类，封装了socket的连接、断开、数据收发。</li>
<li>socket类是TCP通信的基本类。调用成员函数connect()可以连接到一个指定的通信端口，连接成功后用local_endpoint()和remote_endpoint()获得连接两端的端点信息，用read_some()和write_some()阻塞读写数据，当操作完成后使用close()函数关闭socket。如果不关闭socket，在socket析构时会自动调用close()关闭。</li>
<li>acceptor类用于服务器端，对用socket API的accept()函数功能，用于服务器端，在指点的端口号接受连接，必须配合socket类才能完成通信。</li>
<li>resolver类用于客户端解析网址获得可用的IP地址，解析到的IP地址可以使用socket对象连接。对应socket API的getaddrinfo()系列函数。</li>
<li>buffer()函数可以包装很多种类的容器成为asio组件可用的缓冲区类型，通常不能直接把数组、vector等容器作为asio的读写参数，必须要buffer()函数包装。</li>
</ul>
<h2 id="7-异步socket处理"><a href="#7-异步socket处理" class="headerlink" title="7. 异步socket处理"></a>7. 异步socket处理</h2><ul>
<li>异步程序的处理流程与同步程序基本相同，需要将同步调用函数换成异步调用函数，并增加回调函数，在回调函数中再启动一个异步调用。</li>
</ul>
<h2 id="8-查询网络地址"><a href="#8-查询网络地址" class="headerlink" title="8. 查询网络地址"></a>8. 查询网络地址</h2><ul>
<li>resolver类通过域名获得可用的IP，实现与IP版本无关的网址解析。</li>
<li>resolver使用内部类query和iterator共同完成查询IP地址的工作：首先使用网址和服务名创建queruy对象，然后由resolve()函数生成iterator对象，它代表了查询到的ip端点，使用socket对象尝试连接，知道找到一个可用的为止。</li>
<li>resolver不仅能够解析域名，也支持使用IP和服务名。</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    io_service service;</span><br><span class="line">    ip::<span class="function">tcp::resolver <span class="title">rlv</span><span class="params">(service)</span></span>;</span><br><span class="line">    ip::tcp::tcp::endpoint endpoint;</span><br><span class="line">    ip::tcp::<span class="function">resolver::query <span class="title">qry</span><span class="params">(<span class="string">"www.google.com"</span>, <span class="string">"http"</span>)</span></span>;</span><br><span class="line">    ip::tcp::resolver::iterator iter = rlv.resolve(qry);</span><br><span class="line">    ip::tcp::resolver::iterator end;</span><br><span class="line">    system::error_code ec = error::host_not_found;</span><br><span class="line">    <span class="keyword">for</span>(;ec &amp;&amp; iter!=end; ++iter)</span><br><span class="line">    &#123;</span><br><span class="line">        endpoint = *iter;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;endpoint.address().to_string()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="7-高级议题"><a href="#7-高级议题" class="headerlink" title="7.高级议题"></a>7.高级议题</h2><h3 id="超时处理"><a href="#超时处理" class="headerlink" title="超时处理"></a>超时处理</h3><ul>
<li>使用定时器，在网络通信中实现超时处理，在异步调用后声明一个deadline_timer对象，然后设定等待时间和回调函数。</li>
</ul>
<h3 id="流操作"><a href="#流操作" class="headerlink" title="流操作"></a>流操作</h3><ul>
<li>对于有连接的TCP协议，asio库专门提供了一个ip::tcp::iostream类贱货socket通信，ip::tcp::iostream是std::basic_iostream的子类，可以像标准流一样操作，内部集成了resolver的域名解析功能和acceptor的接受连接功能。</li>
</ul>
<h3 id="UDP协议通信"><a href="#UDP协议通信" class="headerlink" title="UDP协议通信"></a>UDP协议通信</h3><ul>
<li>asio的udp和tcp处理流程相似，由于udp协议无连接，故不需要建立连接，使用send_to()和receive_from()直接通过端点发送数据。</li>
</ul>
<h3 id="串口通信"><a href="#串口通信" class="headerlink" title="串口通信"></a>串口通信</h3>]]></content>
      <categories>
        <category>网络库</category>
      </categories>
      <tags>
        <tag>cpp</tag>
        <tag>boost</tag>
        <tag>asio</tag>
      </tags>
  </entry>
  <entry>
    <title>boost 实用工具 noncopyable学习</title>
    <url>/2017/05/31/boost-noncopyable/</url>
    <content><![CDATA[<h1 id="noncopyable"><a href="#noncopyable" class="headerlink" title="noncopyable"></a>noncopyable</h1><ul>
<li>noncopyable允许程序轻松地实现一个禁止复制的类。</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//包含noncopyable</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;boost/noncopyable.hpp&gt;</span></span></span><br><span class="line"><span class="comment">//或者包含utility，utility包含数个小工具的实现</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;boost/utility.hpp&gt;</span></span></span><br></pre></td></tr></table></figure>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><pre><code>在C++中定义一个类，如果不明确定义拷贝构造函数和拷贝复制操作符，编译器会自动生成。
如果不需要类的复制语义，希望禁止复制类的实例，只需要私有化拷贝构造函数和复制操作符。
</code></pre><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><pre><code>noncopyable为实现不可拷贝的类提供了简单清晰的解决方案，从boost::noncopyable派生即可。
继承使用默认的私有继承是允许的，显示写出private或者public修饰符，效果是一样的。使用noncopyable明确表达类设计者的意图，对用户友好，与其它boost库配合良好。
</code></pre><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">do_not_copy</span> :</span> boost::noncopyable</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>cpp</category>
      </categories>
      <tags>
        <tag>cpp</tag>
        <tag>boost</tag>
      </tags>
  </entry>
  <entry>
    <title>boost库 typeof 实用工具学习</title>
    <url>/2017/05/31/boost-typeof/</url>
    <content><![CDATA[<h1 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a>typeof</h1><p>typeof库使用宏模拟C++0x新增加的typeof和auto关键字，减轻书写烦琐的变量声明工作，简化代码。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;boost/typeof/typeof.hpp&gt;</span></span></span><br></pre></td></tr></table></figure>
<h2 id="动机"><a href="#动机" class="headerlink" title="动机"></a>动机</h2><p>C++是静态强类型语言，所有变量在使用前必须声明类型，让C++具有运行速度快，代码规范等很多优点，但在引入名词空间特性后会导致烦琐的类型声明。<br>C++0x中typeof/auto关键字，可以让C++编译器在运行时自动推导表达式的类型。</p>
<h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><p>头文件<boost typeof.hpp>中定义的两个宏:BOOST_TYPEOF和BOOST_AUTO,分别仿真C++新标准的typeof和auto关键字，在编译器自动推导表达式类型，不仅能够推导C++语言内建类型，也支持标准库中的容器类型。BOOST_TYPEOF和BOOST_AUTO完全模仿typeof和auto关键词。</boost></p>
<p>宏的简要声明如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BOOST_TYPEOF(Expr)\</span></span><br><span class="line">    boost::type_of::decode_begin&lt;BOOST_TYPEOF_ENCODED_VECTOR(Expr) &gt;::type</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BOOST_AUTO(Var, Expr) BOOST_TYPEOF(Expr) Var = Expr</span></span><br></pre></td></tr></table></figure>
<p>BOOST_TYPEOF使用一个表达式作为宏的参数，推导Expr的类型。BOOST_AUTO实际调用BOOST_TYPEOF，因此BOOST_AUTO不仅可以声明普通变量，也可以在变量名前加&amp;或者*修饰，声明引用或者指针变量。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//typeof</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TestTypeof</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//typeof(1) tint = 1;</span></span><br><span class="line">    <span class="comment">//typeof(1&gt;0) tbool = 1&gt;0;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> tint1 = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">auto</span> tbool1 = <span class="number">1</span>&gt;<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;tint1&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;tbool1&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    BOOST_TYPEOF(<span class="number">1</span>) tint2 = <span class="number">1</span>;</span><br><span class="line">    BOOST_TYPEOF(<span class="number">3.14</span>) tdouble2 = <span class="number">3.14</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;tint2&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;tdouble2&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    BOOST_AUTO(tdp, <span class="keyword">new</span> <span class="keyword">double</span>[<span class="number">20</span>]);</span><br><span class="line">    BOOST_AUTO(tpair, make_pair(<span class="number">1</span>, <span class="string">"string"</span>));</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;tpair.second&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="向typeof库注册自定义类"><a href="#向typeof库注册自定义类" class="headerlink" title="向typeof库注册自定义类"></a>向typeof库注册自定义类</h2><p>typeof库支持C++内建的基本类型和STL中的大多数类型，但并不能支持所有类型，如果用户自定义类向应用于typeof库，需要使用库提供的一组宏注册。<br>向typeof库注册类型，先使用以下语句开始 #include BOOST_TYPEOF_INCREMENT_REGISTRATION_GROUP() 后面注册类型使用宏BOOST_TYPEOF_REGISTER_TYPE，必须在全局名字空间使用，宏的参数是类型的完全名称，包括名字空间限定。</p>
<h2 id="高级议题"><a href="#高级议题" class="headerlink" title="高级议题"></a>高级议题</h2><h3 id="为BOOST-AUTO更名"><a href="#为BOOST-AUTO更名" class="headerlink" title="为BOOST_AUTO更名"></a>为BOOST_AUTO更名</h3><p>BOOST_AUTO名字有点长，书写不便，可以用auto_t代替BOOST_AUTO</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> auto_t BOOST_AUTO</span></span><br></pre></td></tr></table></figure>
<h3 id="模版类型自动推导"><a href="#模版类型自动推导" class="headerlink" title="模版类型自动推导"></a>模版类型自动推导</h3><p>typeof库不仅能推导一般表达式的类型，也能推导带有模版的复杂表达式。在模版语境中需要时使用BOOST_TYPEOF_TPL和BOOST_AUTO_TPL。</p>
]]></content>
      <categories>
        <category>cpp</category>
      </categories>
      <tags>
        <tag>cpp</tag>
        <tag>boost</tag>
      </tags>
  </entry>
  <entry>
    <title>git的使用</title>
    <url>/2017/05/27/git/</url>
    <content><![CDATA[<h1 id="git色彩显示"><a href="#git色彩显示" class="headerlink" title="git色彩显示"></a>git色彩显示</h1><p>git默认不显示色彩</p>
<p>进行全局设置<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global color.diff auto</span><br><span class="line">git config --global color.status auto</span><br><span class="line">git config --global color.branch auto</span><br><span class="line">git config --global color.interactive auto</span><br><span class="line">git config --global color.ui auto</span><br></pre></td></tr></table></figure></p>
<p>或者在.gitconfig写入配置<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[color]</span><br><span class="line">    diff = auto</span><br><span class="line">    branch = auto</span><br><span class="line">    status = auto</span><br><span class="line">    interactive = auto</span><br></pre></td></tr></table></figure></p>
<p>查看自己配置<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --list</span><br></pre></td></tr></table></figure></p>
<h1 id="Git-status乱码"><a href="#Git-status乱码" class="headerlink" title="Git status乱码"></a>Git status乱码</h1><p>设置core.quotepath为false<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git status</span><br><span class="line">... ...</span><br><span class="line">        &quot;source/Picture/\350\277\233\347\250\213\347\212\266\346\200\201\345\233</span><br><span class="line">... ...</span><br><span class="line">$git config --global core.quotepath false</span><br><span class="line">$ git status</span><br><span class="line">... ...</span><br><span class="line">        source/Picture/进程状态图.jpg</span><br><span class="line">... ...</span><br></pre></td></tr></table></figure></p>
<h1 id="Git组成"><a href="#Git组成" class="headerlink" title="Git组成"></a>Git组成</h1><h2 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h2><ol>
<li>克隆现有仓库 <code>git clone ssh://user@domain.com/repo.git</code></li>
<li>创建一个新的本地仓库 <code>git init</code></li>
</ol>
<h2 id="本地修改"><a href="#本地修改" class="headerlink" title="本地修改"></a>本地修改</h2><ol>
<li>查看本地仓库已更改文件信息 <code>git status</code></li>
<li>查看对已版本控制文件的修改 <code>git diff</code></li>
<li>添加当前工作空间所有修改到暂存区 <code>git add .</code></li>
<li>添加单一文件修改到暂存区 <code>git add -p &lt;file&gt;</code></li>
<li>将所有修改(工作空间和暂存区，工作空间修改可以省略git add)提交到当前分支 <code>git commit -a</code></li>
<li>提交暂存区修改到当前分支 <code>git commit</code></li>
<li>Change the last commit. Don‘t amend published commits!  <code>git commit --amend</code></li>
</ol>
<h2 id="提交历史查看"><a href="#提交历史查看" class="headerlink" title="提交历史查看"></a>提交历史查看</h2><ol>
<li>显示所有提交历史记录，从最新的开始 <code>git log</code></li>
<li>显示特定文件详细的修改历史 <code>git log -p &lt;file&gt;</code></li>
<li>查看历史提交历史，只显示commit_id和注释 <code>git log --pretty=oneline</code></li>
<li>逐行显示当前文件修改内容和修改时间 <code>git blame &lt;file&gt;</code></li>
<li>一条综合信息展示的git log命令<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git log --graph --pretty=format:&apos;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen (%cr) %C(bold blue)&lt;%an&gt;%Creset&apos; --abbrev-commit --</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="分支和标签"><a href="#分支和标签" class="headerlink" title="分支和标签"></a>分支和标签</h2><ol>
<li>列出所有现有分支 <code>git branch -av</code></li>
<li>选择分支 <code>git checkout &lt;branch&gt;</code></li>
<li>基于当前分支，创建一个新分支 <code>git branch &lt;new-branch&gt;</code></li>
<li>创建一个分支，并切换过去 <code>git checkout -b &lt;new-branch&gt;</code></li>
<li>基于远程分支，创建一个新的分支 <code>git checkout --track &lt;remote/branch&gt;</code></li>
<li>删除本地分支 <code>git branch -d &lt;branch&gt;</code></li>
<li>创建一个标签 <code>git tag &lt;tag-name&gt;</code></li>
</ol>
<h2 id="跟新和发布"><a href="#跟新和发布" class="headerlink" title="跟新和发布"></a>跟新和发布</h2><ol>
<li>列出远程库的名称 加-v显示详细信息 <code>git remote -v</code></li>
<li>显示特定远程库的信息 <code>git remote show &lt;remote&gt;</code></li>
<li>添加一个远程库 <code>git remote add &lt;shortname&gt; &lt;url&gt;</code></li>
<li>从远程库获取所有更新，但不合并 <code>git fetch &lt;remote&gt;</code></li>
<li>从远程库获取所有更新，并合并到指定分支 <code>git pull &lt;remote&gt; &lt;branch&gt;</code></li>
<li>将branch分支推送到远程库remote <code>git push &lt;remote&gt; &lt;branch&gt;</code></li>
<li>从远程库删除一个分支 <code>git branch -dr &lt;remote/branch&gt;</code></li>
<li>推送所有本地新增的标签 <code>git push --tags</code></li>
</ol>
<h2 id="合并"><a href="#合并" class="headerlink" title="合并"></a>合并</h2><ol>
<li>合并某个分支到当前分支 <code>git merge &lt;branch&gt;</code></li>
</ol>
<h2 id="撤销"><a href="#撤销" class="headerlink" title="撤销"></a>撤销</h2><ol>
<li>丢弃工作环境中的所有本地修改 <code>git reset --hard HEAD</code></li>
<li>丢弃特定文件中的本地修改 <code>git checkout HEAD &lt;file&gt;</code></li>
<li>Revert a commit (by producing a new commit with contrary changes) <code>git revert &lt;commit&gt;</code></li>
<li>将头指针指向commit提交，并放弃所有修改 <code>git reset --hard &lt;commit&gt;</code></li>
</ol>
<h1 id="将一个git仓库同时推送到两个源配置"><a href="#将一个git仓库同时推送到两个源配置" class="headerlink" title="将一个git仓库同时推送到两个源配置"></a>将一个git仓库同时推送到两个源配置</h1><p>在.git下找到config文件编辑，加入以下以下内容<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">... ...</span><br><span class="line"># 仓库名</span><br><span class="line">[remote &quot;blog&quot;]</span><br><span class="line">    # 要推送到仓库地址  可以填多个</span><br><span class="line">    url = git@github.com:CaseZheng/CaseZheng.github.io.git</span><br><span class="line">    url = git@git.coding.net:CaseZheng/Blog.git</span><br></pre></td></tr></table></figure></p>
<h1 id="Git碰到问题"><a href="#Git碰到问题" class="headerlink" title="Git碰到问题"></a>Git碰到问题</h1><h2 id="fatal-no-submodule-mapping-found-in-gitmodules-for-path-‘xxx-xxx’"><a href="#fatal-no-submodule-mapping-found-in-gitmodules-for-path-‘xxx-xxx’" class="headerlink" title="fatal: no submodule mapping found in .gitmodules for path ‘xxx/xxx’"></a>fatal: no submodule mapping found in .gitmodules for path ‘xxx/xxx’</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git rm --cached xxx/xxx</span><br></pre></td></tr></table></figure>
<h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><ul>
<li><a href="https://blog.csdn.net/u012145252/article/details/81775362" target="_blank" rel="noopener">git status 显示中文和解决中文乱码</a></li>
</ul>
]]></content>
      <categories>
        <category>other</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>boost 实用工具 optional学习</title>
    <url>/2017/06/01/boost-optional/</url>
    <content><![CDATA[<h1 id="optional"><a href="#optional" class="headerlink" title="optional"></a>optional</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;boost/optional.hpp&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> boost;</span><br></pre></td></tr></table></figure>
<h2 id="“无意义”的值"><a href="#“无意义”的值" class="headerlink" title="“无意义”的值"></a>“无意义”的值</h2><p>函数正确执行，结果不一定是有效的返回值，也可能是“无意义”的值。例如，求一个值得倒数，传入参数为0。</p>
<h2 id="类摘要"><a href="#类摘要" class="headerlink" title="类摘要"></a>类摘要</h2><p>optional像一个仅能存放一个元素的容器，实现“未初始化”的概念：如果元素未初始化，容器就是空的，否则，容器内就是有效的、已经初始化的值。</p>
<p><img src="/Picture/boost_optional.jpg" alt="optional类摘要"></p>
<h2 id="操作函数"><a href="#操作函数" class="headerlink" title="操作函数"></a>操作函数</h2><p>optional的模版类型参数T可以是任何类型，但必须是可拷贝构造的。创建optional对象的方法：</p>
<ul>
<li>无参optional()或者optional(boost::none)构造未初始化optional对象。boost::none是一个类似空指针的none_t类型常量，表示未初始化。</li>
<li>optional(v)构造一个已初始化的optional对象，其值未v的拷贝。如果模版类型为T&amp;，optional内部持有对引用的包装。</li>
<li>optional(condition, v)根据条件condition来构造optional对象，如果条件成立则初始化为v，否则为未初始化。</li>
<li>optional支持拷贝构造和赋值操作，可以从另一个optional对象构造。可以给optional对象赋none值，恢复初未初始化状态。</li>
</ul>
<p>optional采用指针语义来访问内部保存的额元素，因此optional未初始化的行为就像一个空指针。optional重载了operator*和operator-&gt;实现与指针相同的操作，get()和get_ptr()可以以函数形式获得元素的引用的指针。</p>
<p>成员函数get_value_or(default)是一个特别的访问函数，保证返回一个有效值，如果optional已初始化，返回内部元素，否则返回default。</p>
<p>optional用隐式类型转换进行bool测试(用于条件判断)，就像对一个指针的判断。</p>
<p>optional支持比较运算，包括==、!=、&lt;、&gt;、&lt;=、&gt;=。optional进行”深比较”，同时加入对未初始化的判断。</p>
<h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">optional&lt;<span class="keyword">double</span>&gt; <span class="title">calc</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> optional&lt;<span class="keyword">double</span>&gt;(x!=<span class="number">0</span>, <span class="number">1.0</span>/x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//optional</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TestOptional</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    optional&lt;<span class="keyword">int</span>&gt; op0;</span><br><span class="line">    <span class="function">optional&lt;<span class="keyword">int</span>&gt; <span class="title">op1</span><span class="params">(op0)</span></span>;</span><br><span class="line">    assert(!op0);</span><br><span class="line">    assert(op0==op1);</span><br><span class="line">    assert(op1.get_value_or(<span class="number">253</span>) == <span class="number">253</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="function">optional&lt;<span class="built_in">string</span>&gt; <span class="title">ops</span><span class="params">(<span class="string">"test"</span>)</span></span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;*ops&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">v</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line">    <span class="function">optional&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;&gt; <span class="title">opv</span><span class="params">(v)</span></span>;</span><br><span class="line">    assert(opv);</span><br><span class="line"></span><br><span class="line">    opv-&gt;push_back(<span class="number">5</span>);</span><br><span class="line">    assert(opv-&gt;size() == <span class="number">11</span>);</span><br><span class="line"></span><br><span class="line">    opv = none;</span><br><span class="line">    assert(!opv);</span><br><span class="line"></span><br><span class="line">    optional&lt;<span class="keyword">double</span>&gt; d = calc(<span class="number">10</span>);</span><br><span class="line">    <span class="keyword">if</span>(d)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;*d&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    BOOST_AUTO(x, make_optional(<span class="number">5</span>));    <span class="comment">//工厂函数</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;*x&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="工厂函数"><a href="#工厂函数" class="headerlink" title="工厂函数"></a>工厂函数</h2><p>optional提供工厂函数make_optional()，根据参数类型自动推导optional的类型，辅助创建optional对象。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">optional&lt;T&gt; <span class="title">make_optional</span><span class="params">(T <span class="keyword">const</span> &amp;v)</span></span>;</span><br><span class="line"><span class="function">optional&lt;T&gt; <span class="title">make_optional</span><span class="params">(<span class="keyword">bool</span> condition, T <span class="keyword">const</span> &amp;v)</span></span>;</span><br></pre></td></tr></table></figure>
<p>make_optional()无法推导T引用类型的optional对象，如果需要一个optional<t&>的对象，不能使用make_optional函数。</t&></p>
<h2 id="高级议题"><a href="#高级议题" class="headerlink" title="高级议题"></a>高级议题</h2><h3 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h3><p>optional<t>同STL容器一样，值提供基本的异常保证，不会超过被包装的类型T,它自身不会抛出任何异常，只有在T构造时可能会抛出异常。</t></p>
<h3 id="就地创建"><a href="#就地创建" class="headerlink" title="就地创建"></a>就地创建</h3><p>optional<t>要求类型T具有拷贝语义，因为optional<t>内部会保存值得拷贝，但很多复杂对象的拷贝代价很高，而仅仅是个拷贝的临时用途，因此optional库提出“就地创建”的概念，可以不要求类型具有拷贝语义，直接用构造函数所需的参数创建对象。boost库in_place_factory。</t></t></p>
<h3 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h3><p>optional的模版参数类型可以是引用(T&amp;)，在很多方面和原始类型T有不同(无法使用就地创建、就地赋值，可以声明时不指定初值、在赋值时转移包装的对象，而不是对原包装的对象赋值)，</p>
]]></content>
      <categories>
        <category>cpp</category>
      </categories>
      <tags>
        <tag>cpp</tag>
        <tag>boost</tag>
      </tags>
  </entry>
  <entry>
    <title>linux命令</title>
    <url>/2017/05/27/liunx-cmd/</url>
    <content><![CDATA[<h1 id="df"><a href="#df" class="headerlink" title="df"></a>df</h1><p>df可显示磁盘的文件系统与使用情形</p>
<h2 id="常用参数"><a href="#常用参数" class="headerlink" title="常用参数"></a>常用参数</h2><ul>
<li>-a 包含所有文件系统</li>
<li>-h 以较高可读性显示信息</li>
<li>-i 显示inode的信息</li>
<li>-l 显示本地端的文件系统</li>
<li>-m 以m为单位显示</li>
</ul>
<p><img src="/Picture/df.png" alt="示例图片"></p>
<h1 id="free"><a href="#free" class="headerlink" title="free"></a>free</h1><h2 id="显示内存状态"><a href="#显示内存状态" class="headerlink" title="显示内存状态"></a>显示内存状态</h2><ul>
<li>free指令会显示内存的使用情况，包括实体内存，虚拟的交换文件内存，共享内存区段，以及系统核心使用的缓冲区等。</li>
</ul>
<h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><ul>
<li>-b 以byte为单位显示内存使用情况</li>
<li>-k 以kb为单位显示内存使用情况</li>
<li>-m 以m为单位显示内存使用情况</li>
<li>-o 不显示缓存起调节列</li>
<li>-t 显示内存总和列</li>
<li>-s&lt;间隔秒数&gt; 持续观察内存使用情况</li>
</ul>
<p><img src="/Picture/free.png" alt="示例图片"></p>
<h3 id="第一部分Mem行解释"><a href="#第一部分Mem行解释" class="headerlink" title="第一部分Mem行解释"></a>第一部分Mem行解释</h3><ul>
<li>total:总计物理内存的大小。</li>
<li>used:已使用多大。</li>
<li>free:可用有多少。</li>
<li>Shared:多个进程共享的内存总额。</li>
<li>Buffers/cached:磁盘缓存的大小</li>
</ul>
<p>关系：total = used + free</p>
<h3 id="第二部分-buffers-cache"><a href="#第二部分-buffers-cache" class="headerlink" title="第二部分(-/+ buffers/cache)"></a>第二部分(-/+ buffers/cache)</h3><ul>
<li>(-buffers/cache) used内存数：第一部分Mem行中的 used – buffers – cached</li>
<li>(+buffers/cache) free内存数: 第一部分Mem行中的 free + buffers + cached</li>
</ul>
<p>可见-buffers/cache反映的是被程序实实在在吃掉的内存，而+buffers/cache反映的是可以挪用的内存总数。</p>
<h3 id="第三部分"><a href="#第三部分" class="headerlink" title="第三部分"></a>第三部分</h3><p>第三部分是指交换分区</p>
<h1 id="tcpdump"><a href="#tcpdump" class="headerlink" title="tcpdump"></a>tcpdump</h1><h2 id="1、常用选项"><a href="#1、常用选项" class="headerlink" title="1、常用选项"></a>1、常用选项</h2><ul>
<li>-i 指定监听的网络接口 “-i any”表示抓取所有网卡接口上的数据包。</li>
<li>-t 不打印时间戳。</li>
<li>-e 显示以太网帧头部信息。</li>
<li>-n 使用IP地址表示主机，而不是主机名；使用数字表示端口号，而不是服务名称。</li>
<li>-c 仅抓取指定数量的数据报</li>
<li>-v 输出稍微详细点的信息，例如，显示IP数据包中的TTL和TOS信息。</li>
<li>-vv 输出详细报文信息。</li>
<li>-x 以十六进制显示数据包的内容，单步显示包中以太网帧的头部信息。</li>
<li>-X 与-x类似，不过还打印每个十六进制对应的ASCII字符。</li>
<li>-XX 与-X相同，不过还打印以太网帧的头部信息。</li>
<li>-S 以绝对值来显示TCP报文段的序号，而不是相对值。</li>
<li>-w 将tcpdump的输出以特殊的格式定向到某个文件。</li>
<li>-r 从文件中读取数据报信息并显示。</li>
</ul>
<h2 id="2、包的过滤"><a href="#2、包的过滤" class="headerlink" title="2、包的过滤"></a>2、包的过滤</h2><p>tcpdump支持用表达式进一步过滤数据包。<br>tcpdump的操作数分为3种：类型（type）、方向（dir）、协议（proto）<br>类型，解释后面跟着的参数的含义。tcpdump支持的类型包括host（主机名或ip地址）、net（用CIDR方法表示的网络地址）、port（端口号）和portrange（端口范围）。</p>
<ol>
<li>方向，src指定数据包的发送端，dst指定数据报的目的端。</li>
<li>协议，指定目标协议。</li>
<li>tcpdump支持的逻辑操作符。<br>and（或&amp;&amp;），or（或||），not（或!）<br>如果表达式比较复杂，可以使用括号将它们分组。不过使用括号时，需要使用“\”对它转义，或者用单引号“’”将其括住，避免齐备shell所解释。</li>
</ol>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>C++11 初探</title>
    <url>/2017/06/01/cplusplus11/</url>
    <content><![CDATA[<h1 id="C-11-列表初始化"><a href="#C-11-列表初始化" class="headerlink" title="C++11 列表初始化"></a>C++11 列表初始化</h1><ul>
<li><p>初始化不是赋值，初始化的含义是创建变量时赋予其一个初始值，而赋值的含义是把对象的当前值擦除，而以一个新值来替代。</p>
</li>
<li><p>定义一个int变量并初始化</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> a = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">a</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="keyword">int</span> a&#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> b[] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> b[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">c</span><span class="params">(<span class="number">3.1234567</span>)</span></span>;   <span class="comment">//警告, 编译器会有警告信息</span></span><br><span class="line"><span class="keyword">int</span> c&#123;<span class="number">3.1234567</span>&#125;;   <span class="comment">//错误，编译器会报错</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>初始化对象或者给对象赋新值，都可以使用一组由花括号括起来的初始值。</p>
</li>
<li>当用于内置类型的变量时，这种初始化方式存在一个重要特点：如果使用列表初始化且初始值存在丢失信息的风险，则编译器会报错。</li>
</ul>
<h1 id="C-11-constexpr-变量"><a href="#C-11-constexpr-变量" class="headerlink" title="C++11 constexpr 变量"></a>C++11 constexpr 变量</h1><ul>
<li>将变量声明为constexpr类型以便由编译器来检验变量的值是否是一个常量表达式。声明为constexpr的变量一定是一个常量，而且必须用常量表达式初始化。</li>
<li>常量表达式的值需要在编译时就得到计算，因此对声明constexpr时用到的类型必须有所限制。因为这些类型一般比较简单，值也显而易见、容易得到，这些类型称为”字面值类型”</li>
<li>算数类型、引用和指针都属于字面值类型。指针和引用定义为constexpr，它们的初始值受到严格限制。一个constexpr指针的初始值必须是nullptr或者0，或者是存储于某个固定地址中的对象。</li>
<li>在constexpr定义了一个指针，限定符constexpr仅对指针有效，与指针所指对象无关。</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> *p = <span class="literal">nullptr</span>;     <span class="comment">//p是一个指向整型常量的指针 *p不可改变 p可以改变</span></span><br><span class="line"><span class="keyword">constexpr</span> <span class="keyword">int</span> *q = <span class="literal">nullptr</span>; <span class="comment">//q是一个指向整数的常量指针  等同于 int * const q = nullptr; *q可以改变 q不可改变</span></span><br></pre></td></tr></table></figure>
<h1 id="C-11-nullptr"><a href="#C-11-nullptr" class="headerlink" title="C++11 nullptr"></a>C++11 nullptr</h1><ul>
<li><p>空指针不指向任何对象。</p>
</li>
<li><p>生成空指针的方法：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> *p = <span class="literal">nullptr</span>;</span><br><span class="line"><span class="keyword">int</span> *p = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//需要包含cstdlib头文件</span></span><br><span class="line"><span class="keyword">int</span> *p = <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>nullptr是一种特殊类型的字面值，可以被转化成任意其他的指针类型。</p>
</li>
<li>NULL欲处理变量在cstdlib中定义，实际值就是0，因此用NULL初始化指针和用0初始化是一样的。新标准下最好使用nullptr，同时尽量避免使用NULL。</li>
</ul>
<h1 id="C-11-类型别名"><a href="#C-11-类型别名" class="headerlink" title="C++11 类型别名"></a>C++11 类型别名</h1><ul>
<li><p>类型别名是一个名字，它是某种类型的同义词。使用类型别名可以使复杂的类型名字简单明了、易于理解和使用，有助于程序员清楚的知道使用该类型的真实目的。</p>
</li>
<li><p>两种定义类型别名的方法：</p>
<ol>
<li>typedef</li>
<li>别名声明 using<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> mydouble;</span><br><span class="line"><span class="keyword">using</span> mydouble = <span class="keyword">double</span>;</span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><p>指针、常量和类型别名</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> *pstring;</span><br><span class="line"><span class="keyword">const</span> pstring cstr = <span class="number">0</span>;     <span class="comment">//cstr的类型为 char *const 而不是 const char*</span></span><br><span class="line"><span class="keyword">const</span> pstring *ps;          <span class="comment">//ps的类型为 char *cosnt* 而不是 const char**</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="C-11-auto"><a href="#C-11-auto" class="headerlink" title="C++11 auto"></a>C++11 auto</h1><ul>
<li><p>auto类型说明符，让编译器分析表达式所属的类型。auto让编译器通过初始值类推算变量的类型。auto定义的变量必须有初始值。</p>
</li>
<li><p>使用引用其实是使用引用的对象，此时编译器以引用对象的类型做为auto的类型。</p>
</li>
<li>auto一般会忽略顶层const, 底层const则会保留下来。如果需要推断出的auto类型是一个顶层const，需要明确指出。</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>, &amp;r = i;</span><br><span class="line"><span class="keyword">auto</span> a = r;			<span class="comment">// int a</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ci = i, &amp;cr = ci;</span><br><span class="line"><span class="keyword">auto</span> b = ci;		<span class="comment">// int b = ci;</span></span><br><span class="line"><span class="keyword">auto</span> c = cr;		<span class="comment">// int c = cr;</span></span><br><span class="line"><span class="keyword">auto</span> d = &amp;i;		<span class="comment">// int *d = &amp;i;</span></span><br><span class="line"><span class="keyword">auto</span> e = &amp;ci;		<span class="comment">// const int *e = &amp;ci;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">auto</span> f = ci;	<span class="comment">// const int f = ci;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> &amp;g = ci;		<span class="comment">// const int &amp;g = ci;</span></span><br><span class="line"><span class="comment">//auto &amp;h = 42;  错误，不能为非常量引用绑定字面值</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">auto</span> &amp;j = <span class="number">42</span>;	<span class="comment">// const int &amp;j = 42;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> k = ci, &amp;l = i;		<span class="comment">// int k = ci, &amp;l = i;</span></span><br><span class="line"><span class="keyword">auto</span> &amp;m = ci, *p = &amp;ci;		<span class="comment">// const int &amp;m	= ci, *p = &amp;ci;</span></span><br><span class="line"><span class="comment">//auto &amp;n = i, *p2 = &amp;ci; 错误，i的类型是int，而&amp;ci的类型为const int</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>cpp</category>
      </categories>
      <tags>
        <tag>cpp</tag>
      </tags>
  </entry>
  <entry>
    <title>redis数据库详细介绍</title>
    <url>/2017/06/01/db-redis-note/</url>
    <content><![CDATA[<p>Redis是key-value数据库</p>
<h1 id="Redis优势"><a href="#Redis优势" class="headerlink" title="Redis优势"></a>Redis优势</h1><ol>
<li>高性能,数据存在内存</li>
<li>支持多种数据结构(字符串,列表,哈希表,集合,有序集合)</li>
<li>单个操作和多个操作(MULTI和EXEC执行包裹)均支持事物,即原子性</li>
<li>支持发布订阅</li>
<li>支持key过期(秒和毫秒),过期key删除有惰性删除和定期删除两种策略</li>
<li>支持持久化(数据保存到磁盘), RDB(保存快照,有数据丢失风险,但恢复快,文件小,性能消耗低(会fork子进程进行备份,对父进程性能无影响))和AOF(保存操作日志,数据完整,但恢复慢,文件大(有优化策略,可能合并多个操作),性能消耗大)</li>
<li>支持主从</li>
</ol>
<h1 id="服务器中的数据库"><a href="#服务器中的数据库" class="headerlink" title="服务器中的数据库"></a>服务器中的数据库</h1><ul>
<li><p>Redis服务器将所有数据库保存在服务器状态server.h/redisServer结构的db数组中，db数组中每个项是一个server.h/redisDb结构，每个redisDb结构代表一个数据库。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">struct redisServer &#123;</span><br><span class="line">    //...</span><br><span class="line">    redisDb *db;    // 一个数组，保存着服务器中的所有数据库 数组大小为dbnum</span><br><span class="line">    //...</span><br><span class="line">    int dbnum;      // 服务器的数据库数量 由服务器配置的database选项决定 默认情况下该值为16</span><br><span class="line">    //...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>初始化服务器时，程序更具服务器状态的dbnum属性决定创建多少个数据库。dbnum属性的值有服务器配置的database选项决定。该值默认是16，所以Redis数据库默认情况下会创建16个数据库。</p>
</li>
</ul>
<h1 id="切换数据库"><a href="#切换数据库" class="headerlink" title="切换数据库"></a>切换数据库</h1><ul>
<li>每个Redis客户端都有自己的目标数据库，每当客户端执行数据库写命令或读命令的时候，目标数据库就会成为这些命令的操作对象。</li>
<li><p>默认情况下，Redis客户端的目标数据库为0号数据库。使用SELECT命令切换数据库。在客户端状态client结构的db属性中记录了客户端当前的目标数据库。client.db指针指向redisServer.db数组中的其中一个元素，被指向的元素就是客户端的目标数据库。通过修改client.db指针，让它指向服务器中的不同数据库，实现切换目标是数据库的功能，这就是SELECT命令的实现原理。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">typedef struct client &#123;</span><br><span class="line">    //...</span><br><span class="line">    redisDb *db;            // 记录客户端目前的目标数据库</span><br><span class="line">    //...</span><br><span class="line">&#125; client;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Redis没有返回客户端目标数据库的命令。如果使用多数据库，那么最好每次在执行危险操作时，先显示地切换到指定的数据库，然后才执行别的命令。</p>
</li>
</ul>
<h1 id="数据库键空间"><a href="#数据库键空间" class="headerlink" title="数据库键空间"></a>数据库键空间</h1><ul>
<li>Redis是一个键值对数据库服务器，服务器中的每个数据库都由server.h/redisDb结构表示。redisDb结构的dict字典保存了数据库中的所有键值对, 称为键空间。</li>
<li>键空间和用户所见的数据库直接对应：<ol>
<li>键空间的键即数据库的键，每个键都是一个字符串对象。</li>
<li>键空间的值即数据库的值，每个值可以是字符串对象，列表对象，哈希表对象，集合对象，有序集合对象中的任意一种Redis对象。</li>
</ol>
</li>
</ul>
<h2 id="添加新键"><a href="#添加新键" class="headerlink" title="添加新键"></a>添加新键</h2><ul>
<li>添加一个新键值对到数据库，实际就是将一个新键值对添加到键空间字典里面。</li>
</ul>
<h2 id="删除键"><a href="#删除键" class="headerlink" title="删除键"></a>删除键</h2><ul>
<li>删除数据库中的一个键，实际上就是在键空间里面删除键对应的键值对对象。</li>
</ul>
<h2 id="更新键"><a href="#更新键" class="headerlink" title="更新键"></a>更新键</h2><ul>
<li>对一个数据库键进行更新，实际上是对键空间里面键对应的值对象进行更新，根据值对象的类型不同，更新的具体方法也有所不同。</li>
</ul>
<h2 id="对键取值"><a href="#对键取值" class="headerlink" title="对键取值"></a>对键取值</h2><ul>
<li>对一个数据库键取值，实际就是去除键所对应的值对象，根据值对象的类型不同，具体的取值方法也不同。</li>
</ul>
<h2 id="其它键空间操作"><a href="#其它键空间操作" class="headerlink" title="其它键空间操作"></a>其它键空间操作</h2><h2 id="读写键空间时的维护操作"><a href="#读写键空间时的维护操作" class="headerlink" title="读写键空间时的维护操作"></a>读写键空间时的维护操作</h2><ul>
<li>当使用Redis命令对数据库进行读写操作时，服务器不仅会对键空间执行指定的读写操作，还会执行一些额外的维护操作：<ol>
<li>读取一个键之后(读操作和写操作)，服务器会根据键释放存在来更新服务器的键空间命中次数和不命中次数，这两个值在INFO stats命令的keyspace_hits属性和keyspace_misses属性中可查看。</li>
<li>读取一个键之后，服务器会更新键的LRU(最后一次使用)时间，用于计算键的闲置时间，使用OBJECT idletime <key>命令可以查看键的闲置时间。</key></li>
<li>服务器读取一个键，发现这个键过期了，会先删除这个过期键，在执行余下的操作。</li>
<li>如果客户端使用WATCH命令监视了某个键，服务器会对被监视的键进行修改后标记为脏，让事物注意到这个键已经被修改。</li>
<li>服务器每修改一次键，都会对脏键计数器的值增1，该计数器会触发服务器的持久化以及复制操作。</li>
<li>如果服务器开启了数据库通知功能，那么键更新后服务器会按照配置发送相应的数据库通知。</li>
</ol>
</li>
</ul>
<h1 id="设置键的生存时间或过期时间"><a href="#设置键的生存时间或过期时间" class="headerlink" title="设置键的生存时间或过期时间"></a>设置键的生存时间或过期时间</h1><ul>
<li>通过EXPIRE命令或者PEXPIRE命令，客户端可以以秒或者毫秒精度为数据库中的某个键设置生存时间(TTL)，在经过指定时间后，服务器会自动删除生存时间为0的键。</li>
<li>通过EXPIREAT命令或者PEXPIREAT命令，客户端可以以秒或者毫秒精度给数据库中的某个键设置过期时间，过期时间是一个UNIX时间戳，当键的过期时间来临，服务器就会自动删除这个键。</li>
<li>TTL命令和PTTL命令接受一个带有生存时间或者过期时间的键，返回这个键的剩余生存时间，即该键被服务器自动删除还有多长时间。</li>
</ul>
<h2 id="设置过期时间"><a href="#设置过期时间" class="headerlink" title="设置过期时间"></a>设置过期时间</h2><ul>
<li>Redis有四个不同命令用于设置键的生存时间或过期时间。<ol>
<li>EXPIPE <key> <ttl> 命令用于键key的生存是假设置为ttl秒</ttl></key></li>
<li>PEXPIPE <key> <ttl> 命令用于键key的生存是假设置为ttl毫秒</ttl></key></li>
<li>EXPIPEAT <key> <timestamp> 命令用于将键key的过期时间设置为timestamp所制定的秒数时间戳</timestamp></key></li>
<li>PEXPIPEAT <key> <timestamp> 命令用于将键key的过期时间设置为timestamp所制定的毫秒数时间戳</timestamp></key></li>
</ol>
</li>
<li>EXPIPE、PEXPIPE、EXPIPEAT最终都会转化为PEXPIPEAT命令。</li>
</ul>
<h2 id="保存过期时间"><a href="#保存过期时间" class="headerlink" title="保存过期时间"></a>保存过期时间</h2><ul>
<li>redisDb结构的expires字典保存了数据库中所有键的过期时间，称为过期字典<ol>
<li>过期字典的键是一个指针，指向键空间中的某个键对象</li>
<li>过期字典的值是一个long long类型的整数，保存了键所指向的数据库键的过期时间(一个毫秒精度的UNIX时间戳)。</li>
</ol>
</li>
<li>当客户端执行PEXPIREAT命令(或其它三个命令)为一个数据库键设置过期时间时，服务器会在数据库的过期字典中关联给定的数据库键和过期时间。</li>
</ul>
<h2 id="移除过期时间"><a href="#移除过期时间" class="headerlink" title="移除过期时间"></a>移除过期时间</h2><ul>
<li>PERSIST命令移除一个键的过期时间，PERSIST命令是PEXPIREAT命令的反操作，PERSIST命令在过期字典中查找给定的键，并解除键和值在过期字典中的关联。</li>
</ul>
<h2 id="计算并返回剩余生存时间"><a href="#计算并返回剩余生存时间" class="headerlink" title="计算并返回剩余生存时间"></a>计算并返回剩余生存时间</h2><ul>
<li>TTL命令以秒为单位返回键的剩余生存时间，而PTTL命令则以毫秒为单位返回键的剩余生存时间，这两个命令都是通过计算键的过期时间和当前时间之间的差来实现的。</li>
</ul>
<h2 id="过期键的判定"><a href="#过期键的判定" class="headerlink" title="过期键的判定"></a>过期键的判定</h2><ul>
<li>通过过期字典，1.检查给定键是否存在于过期字典，如果存在，取得键的过期时间，2.检查当前UNIX时间戳是否大于键的过期时间，如果是的话，那么键已经过期，否则键未过期。</li>
</ul>
<h1 id="Redis的过期键删除策略"><a href="#Redis的过期键删除策略" class="headerlink" title="Redis的过期键删除策略"></a>Redis的过期键删除策略</h1><ul>
<li>Redis实际使用惰性删除和定期删除两种过期键删除策略。</li>
</ul>
<h2 id="惰性删除策略的实现"><a href="#惰性删除策略的实现" class="headerlink" title="惰性删除策略的实现"></a>惰性删除策略的实现</h2><ul>
<li>过期键的惰性删除策略由db.c/expireIfNeeded函数实现，所有读写数据库的Redis命令在执行之前都会调用expireIfNeeded函数对输入键进行检查：1.如果输入键已经过期，expireIfNeeded函数将输入键从数据库中删除。2.如果输入键未过期，expireIfNeeded函数不做动作。<h2 id="定期删除策略的实现"><a href="#定期删除策略的实现" class="headerlink" title="定期删除策略的实现"></a>定期删除策略的实现</h2></li>
<li>过期键的定期删除策略由server.c/activeExpireCycle函数实现，每当Redis的服务器周期性操作server.c/serverCron函数执行时，activeExpireCycle函数就会被调用，在规定时间内，分多次遍历服务器中的各个数据库，从数据库的expires字典中随机检查一部分键的过期时间，并删除其中的过期键。</li>
<li>activeExpireCycle函数的工作模式如下：<ol>
<li>函数每次运行时，都从一定数量的数据库中取出一定数量的随机键进行检查，并删除其中的过期键</li>
<li>全局变量current_db记录当前activeExpireCycle函数检查的进度，并在下次activeExpireCycle函数调用时从上次的进度进行处理。</li>
<li>当服务器中所有数据库都被检查一遍，current_db变量重置为0，然后再开始下一轮的检查。</li>
</ol>
</li>
</ul>
<h1 id="AOF、RDB和复制功能对过期键的处理"><a href="#AOF、RDB和复制功能对过期键的处理" class="headerlink" title="AOF、RDB和复制功能对过期键的处理"></a>AOF、RDB和复制功能对过期键的处理</h1><h2 id="生成RDB文件"><a href="#生成RDB文件" class="headerlink" title="生成RDB文件"></a>生成RDB文件</h2><ul>
<li>执行SAVE命令或者BGSAVE命令创建一个新的RDB文件时，程序会对数据库中的键进行检查，已过期的键不会被保存到新创建的RDB文件中。</li>
</ul>
<h2 id="载入RDB文件"><a href="#载入RDB文件" class="headerlink" title="载入RDB文件"></a>载入RDB文件</h2><ul>
<li>启动服务器时，如果服务器开启RDB功能，服务器将对RDB文件进行载入<ol>
<li>服务器以主服务器模式运行，载入RDB文件时，程序会对文件中保存的键进行检查，未过期的键会被载入数据库，过期键会被忽略。</li>
<li>服务器以从服务器模式运行，载入RDB文件时，文件中保存的所有键都会被载入数据库。因为主从服务器进行数据同步时，从服务器数据库会被清空，所以过期键对载入RDB文件的从服务器不会造成影响。</li>
</ol>
</li>
</ul>
<h2 id="AOF文件写入"><a href="#AOF文件写入" class="headerlink" title="AOF文件写入"></a>AOF文件写入</h2><ul>
<li>当服务器以AOF持久化模式运行时，如果数据中的某个键已经过期，但它还没有被惰性删除或者定期删除，那么AOF文件不会因为这个过期键而产生任何影响。当过期键被惰性删除或定期删除后，程序会向AOF文件追加一条DEL命令，来显示记录该键已被删除。</li>
</ul>
<h2 id="AOF重写"><a href="#AOF重写" class="headerlink" title="AOF重写"></a>AOF重写</h2><ul>
<li>在执行AOF重写的过程中，程序对数据库中的键进行检查，已过期的键不会被保存到重写后的AOF文件中。</li>
</ul>
<h2 id="复制"><a href="#复制" class="headerlink" title="复制"></a>复制</h2><ul>
<li>当服务器运行在复制模式下时，从夫妻的过期键删除动作由主服务器控制：<ol>
<li>主服务器在删除一个过期键之后，会显式地向所有从服务器发送一个DEL命令，告知从服务器删除这个过期键。</li>
<li>从服务器在执行客户端发送的读命令时，即使碰到过期键也不删除，而是继续像处理未过期键一样来处理过期键。</li>
<li>从服务器只有在接到主服务器发来的DEL命令之后，才会删除过期键。</li>
</ol>
</li>
</ul>
<h1 id="数据库通知"><a href="#数据库通知" class="headerlink" title="数据库通知"></a>数据库通知</h1><ul>
<li>该功能让客户端通过订阅给定的频道或者模式，获知数据库中键的变化，以及数据库中命令的执行情况。</li>
<li>关注某个键执行了什么命令的通知称为键空间通知。</li>
<li>关注某个命令被什么键执行了的通知成为键事件通知。</li>
</ul>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="http://www.runoob.com/redis/redis-tutorial.html" target="_blank" rel="noopener">Redis 教程</a></li>
<li><a href="https://www.cnblogs.com/tdws/p/5754706.html" target="_blank" rel="noopener">Redis两种持久化方式(RDB&amp;AOF)</a></li>
<li><a href="http://doc.redisfans.com/index.html" target="_blank" rel="noopener">Redis 命令参考</a></li>
</ul>
]]></content>
      <categories>
        <category>redis</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>boost 库实用工具 assign</title>
    <url>/2017/06/01/boost-assign/</url>
    <content><![CDATA[<h1 id="assign"><a href="#assign" class="headerlink" title="assign"></a>assign</h1><p>assign库重载赋值操作符、逗号操作符、括号操作符，用难以想象的简洁语法非常方便的对STL容器赋值或者初始化。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;boost/assign.hpp&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> boost::assign;</span><br></pre></td></tr></table></figure>
<h2 id="1-使用操作符-向容器增加元素"><a href="#1-使用操作符-向容器增加元素" class="headerlink" title="1. 使用操作符+=向容器增加元素"></a>1. 使用操作符+=向容器增加元素</h2><p>在使用assign库时必须使用using指示符，让重载的+=,等操作符在作用域内生效。<br>+=操作符后可以接若干个可被容器容纳的元素，元素间用逗号分隔。对于map容器，必须用makr_pair()辅助函数生成容器元素。</p>
<h2 id="2-使用操作符-向容器增加元素"><a href="#2-使用操作符-向容器增加元素" class="headerlink" title="2. 使用操作符()向容器增加元素"></a>2. 使用操作符()向容器增加元素</h2><p>assign库提供三个辅助函数<code>insert()</code>、<code>push_front()</code>、<code>push_back()</code>,可作用于同名成员函数的容器，接受容器变量作为参数，返回一个代理对象list_inserter,重载<code>operator(),=</code>等操作符实现向容器填入数据的功能。<br>对于set和map只能使用<code>assign::insert()</code>。</p>
<h2 id="3-初始化容器元素"><a href="#3-初始化容器元素" class="headerlink" title="3. 初始化容器元素"></a>3. 初始化容器元素</h2><p><code>list_of()</code>函数返回一个匿名的列表，可以赋值给任意容器。<br><code>map_list_of()</code>和<code>pair_list_of()</code>，map_list_of()可以接受两个参数，自动构造std::pair对象插入map容器，pair_list_of和map_list_of用法功能完全相同。<br><code>tuple_list_of()</code>用于初始化元素类型为tuple的容器，tuple是Boost引入的一种新的容器/数据结构。</p>
<h2 id="4-减少重复输入"><a href="#4-减少重复输入" class="headerlink" title="4. 减少重复输入"></a>4. 减少重复输入</h2><p>repeat()将第二个参数作为要填入的值，重复第一个参数指定的次数。<br>repeat_fun()将第二个参数作为要填入的值，重复第一个参数指定的次数，但第二个参数是无参的函数或函数对象，返回填入的数量。<br>range()将一个序列全部或部分元素插入另一个序列里。</p>
<h2 id="5-与非标准容器工作"><a href="#5-与非标准容器工作" class="headerlink" title="5. 与非标准容器工作"></a>5. 与非标准容器工作</h2><p>assign支持8个STL标准容器(vector、string、deque、list、set、multiset、map、multimap)，也对STL中的适配器提供适当支持(stack、queue、priority_queue)。因为stack等容器适配器不符合容器定义，没有insert、push_back等成员函数，不能使用赋值方法填入元素，只能使用初始化的方式，并在list_of表达式最后使用to_adapter()成员函数来适配到非标准容器。如果使用逗号操作符需要把整个表达式用括号括起来，才能使用点号调用to_adapter()。<br>assign支持部分不在STL中定期的非标准容器,因为它们符合容器的定义，用法和标准容器没什么区别。<br>assign库从支持大部分Boost库容器，用法与标准容器类似。</p>
<h2 id="6-高级用法。"><a href="#6-高级用法。" class="headerlink" title="6. 高级用法。"></a>6. 高级用法。</h2><h3 id="list-of-的嵌套使用"><a href="#list-of-的嵌套使用" class="headerlink" title="list_of()的嵌套使用"></a>list_of()的嵌套使用</h3><p>list_of()可以就地创建匿名列表，可以嵌套在assign库用法中，创建复杂的数据结构。</p>
<h3 id="引用初始化列表"><a href="#引用初始化列表" class="headerlink" title="引用初始化列表"></a>引用初始化列表</h3><p>ref_list_of()和cref_list_of()两个函数接受变量的引用作为参数创建初始化匿名列表。<br>assign库支持Boost库中的指针容器，提供ptr_push_back()、ptr_list_of()等函数。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//assign</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TestAssign</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> boost::assign;</span><br><span class="line">    <span class="comment">//向容器中增加元素</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line">    v += <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">9</span>*<span class="number">9</span>; </span><br><span class="line">    for_each(v.begin(), v.end(), print&lt;<span class="keyword">int</span>&gt;);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">set</span>&lt;<span class="built_in">string</span>&gt; s;</span><br><span class="line">    s += <span class="string">"cpp"</span>, <span class="string">"md"</span>;</span><br><span class="line">    for_each(s.begin(), s.end(), print&lt;<span class="built_in">string</span>&gt;);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="built_in">string</span>&gt; m;</span><br><span class="line">    m += make_pair(<span class="number">1</span>, <span class="string">"one"</span>), make_pair(<span class="number">2</span>, <span class="string">"two"</span>);</span><br><span class="line">    for_each(m.begin(), m.end(), print&lt;pair&lt;<span class="keyword">int</span>, <span class="built_in">string</span>&gt;&gt;);</span><br><span class="line"></span><br><span class="line">    push_back(v)(<span class="number">7</span>)(<span class="number">8</span>)(<span class="number">9</span>);</span><br><span class="line">    for_each(v.begin(), v.end(), print&lt;<span class="keyword">int</span>&gt;);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">list</span>&lt;<span class="built_in">string</span>&gt; l;</span><br><span class="line">    push_front(l)(<span class="string">"cpp"</span>)(<span class="string">"java"</span>);</span><br><span class="line">    for_each(l.begin(), l.end(), print&lt;<span class="built_in">string</span>&gt;);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">set</span>&lt;<span class="keyword">double</span>&gt; sd;</span><br><span class="line">    insert(sd)(<span class="number">1.1</span>)(<span class="number">2.2</span>)(<span class="number">3.3</span>);</span><br><span class="line">    for_each(sd.begin(), sd.end(), print&lt;<span class="keyword">double</span>&gt;);</span><br><span class="line"></span><br><span class="line">    insert(m)(<span class="number">3</span>, <span class="string">"t"</span>)(<span class="number">4</span>, <span class="string">"f"</span>);</span><br><span class="line">    for_each(m.begin(), m.end(), print&lt;pair&lt;<span class="keyword">int</span>, <span class="built_in">string</span>&gt;&gt;);</span><br><span class="line"></span><br><span class="line">    push_back(v), <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>;</span><br><span class="line">    push_back(v)(<span class="number">6</span>), <span class="number">7</span>, <span class="number">8</span>, (<span class="number">9</span>), <span class="number">10</span>;</span><br><span class="line">    for_each(v.begin(), v.end(), print&lt;<span class="keyword">int</span>&gt;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化容器元素</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec = list_of(<span class="number">1</span>)(<span class="number">2</span>)(<span class="number">3</span>)(<span class="number">4</span>)(<span class="number">5</span>);</span><br><span class="line">    for_each(vec.begin(), vec.end(), print&lt;<span class="keyword">int</span>&gt;);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">deque</span>&lt;<span class="built_in">string</span>&gt; deq = (list_of(<span class="string">"one"</span>)(<span class="string">"two"</span>), <span class="string">"t"</span>, (<span class="string">"f"</span>));</span><br><span class="line">    for_each(deq.begin(), deq.end(), print&lt;<span class="built_in">string</span>&gt;);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="built_in">string</span>&gt; mp = (list_of(make_pair(<span class="number">1</span>, <span class="string">"one"</span>))(make_pair(<span class="number">2</span>, <span class="string">"two"</span>)), make_pair(<span class="number">3</span>, <span class="string">"t"</span>));</span><br><span class="line">    for_each(mp.begin(), mp.end(), print&lt;pair&lt;<span class="keyword">int</span>, <span class="built_in">string</span>&gt;&gt;);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="built_in">string</span>&gt; mp2 = map_list_of(<span class="number">1</span>, <span class="string">"cpp"</span>)(<span class="number">2</span>, <span class="string">"java"</span>);</span><br><span class="line">    for_each(mp2.begin(), mp2.end(), print&lt;pair&lt;<span class="keyword">int</span>, <span class="built_in">string</span>&gt;&gt;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//减少重复输入</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v2 = list_of(<span class="number">1</span>).repeat(<span class="number">3</span>, <span class="number">100</span>).repeat(<span class="number">4</span>, <span class="number">1000</span>);</span><br><span class="line">    for_each(v2.begin(), v2.end(), print&lt;<span class="keyword">int</span>&gt;);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v3;</span><br><span class="line">    push_back(v3).range(v.begin(), v.begin()+<span class="number">5</span>);</span><br><span class="line">    for_each(v3.begin(), v3.end(), print&lt;<span class="keyword">int</span>&gt;);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; stk = (list_of(<span class="number">1</span>), <span class="number">2</span>, <span class="number">3</span>).to_adapter();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="built_in">string</span>&gt; q = (list_of(<span class="string">"java"</span>)(<span class="string">"md"</span>)(<span class="string">"c"</span>)).to_adapter();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; vv;</span><br><span class="line">    vv += list_of(<span class="number">5</span>)(<span class="number">6</span>), list_of(<span class="number">7</span>)(<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">1</span>, b = <span class="number">2</span>, c = <span class="number">3</span>;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v4 = ref_list_of&lt;<span class="number">3</span>&gt;(a)(b)(c);</span><br><span class="line">    for_each(v4.begin(), v4.end(), print&lt;<span class="keyword">int</span>&gt;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>cpp</category>
      </categories>
      <tags>
        <tag>cpp</tag>
        <tag>boost</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis数据库整数集合大概介绍</title>
    <url>/2017/06/01/redis-intset-note/</url>
    <content><![CDATA[<h1 id="Redis-intset-整数集合-笔记"><a href="#Redis-intset-整数集合-笔记" class="headerlink" title="Redis intset 整数集合 笔记"></a>Redis intset 整数集合 笔记</h1><ul>
<li>整数集合是集合键的底层实现之一，当一个集合值包含整数值元素，并且这个集合的元素数量不多时，Redis就会使用整数集合做为集合键的底层实现。</li>
</ul>
<h2 id="整数集合的实现"><a href="#整数集合的实现" class="headerlink" title="整数集合的实现"></a>整数集合的实现</h2><ul>
<li>整数集合(intset)是Redis用于保存整数值的集合抽象数据结构，可以保存类型为int16_t、int32_t、int64_t的整数值，并且保证集合中不会出现重复元素。</li>
<li><p>每个intset.h/intset结构表示一个整数集合：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#define INTSET_ENC_INT16 (sizeof(int16_t))</span><br><span class="line">#define INTSET_ENC_INT32 (sizeof(int32_t))</span><br><span class="line">#define INTSET_ENC_INT64 (sizeof(int64_t))</span><br><span class="line"></span><br><span class="line">typedef struct intset &#123;</span><br><span class="line">    uint32_t encoding;  //编码方式</span><br><span class="line">    uint32_t length;    //集合包含的元素数量 即contents数组的长度</span><br><span class="line">    int8_t contents[];  //保存元素的数组 整数集合的每个元素都是contents数组的一个数组项，各个项在数组中按值的大小从小到大排序，并且数组中不包含任何重复项。</span><br><span class="line">&#125; intset;</span><br></pre></td></tr></table></figure>
</li>
<li><p>contents结构类型声明为int8_t，但实际上contents不保存任何int8_t类型的值，contents数组的真正类型取决于encoding属性的值。encoding的值可以是INTSET_ENC_INT16,INTSET_ENC_INT32,INTSET_ENC_INT64。</p>
</li>
</ul>
<h2 id="升级"><a href="#升级" class="headerlink" title="升级"></a>升级</h2><ul>
<li>当添加一个新元素到整数集合里面，并且新的类型比集合现有所有元素的类型都长时，整数集合需要升级，然后将新元素添加到整数集合里面。</li>
<li>升级整数集合三步进行<ol>
<li>根据新元素类型，扩展整数集合底层数组空间大小，并为新元素分配空间</li>
<li>将底层数组现有元素转换成与新元素相同的类型，并将类型转化后的元素放在争取的位上，在放置元素的过程中，需要继续维持底层数组的有序性质不变。</li>
<li>将新元素添加到底层数组里面。 </li>
</ol>
</li>
<li>想整数集合添加新元素的时间复杂度为O(N)</li>
</ul>
<h2 id="升级的好处"><a href="#升级的好处" class="headerlink" title="升级的好处"></a>升级的好处</h2><pre><code>1. 提高数组集合操作的灵活性, C语言为静态类型语言，为了避免类型错误，通常不会将两种不同类型的值放在同一个数据结构中。整数集合通过自动升级底层数组来适应新元素，所以我们可以随意将int16_t, int32_t, int64_t类型的整数添加到集合中，而不必担心类型错误。
2. 尽可能节约内存
</code></pre><h2 id="整数数组不支持降级，一旦对数组进行了升级，编码会一直保持升级后的状态。"><a href="#整数数组不支持降级，一旦对数组进行了升级，编码会一直保持升级后的状态。" class="headerlink" title="整数数组不支持降级，一旦对数组进行了升级，编码会一直保持升级后的状态。"></a>整数数组不支持降级，一旦对数组进行了升级，编码会一直保持升级后的状态。</h2>]]></content>
      <categories>
        <category>redis</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis数据库字典大概介绍</title>
    <url>/2017/06/01/redis-dict-note/</url>
    <content><![CDATA[<h1 id="Redis-dict-笔记"><a href="#Redis-dict-笔记" class="headerlink" title="Redis dict 笔记"></a>Redis dict 笔记</h1><h2 id="字典的实现"><a href="#字典的实现" class="headerlink" title="字典的实现"></a>字典的实现</h2><ul>
<li>Redis的字典使用哈希表作为底层实现。</li>
</ul>
<h3 id="hash表"><a href="#hash表" class="headerlink" title="hash表"></a>hash表</h3><ul>
<li>Redis的hash表有dict.h中的dictht结构定义。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">typedef struct dictht</span><br><span class="line">&#123;</span><br><span class="line">    dictEntry **table;  //哈希表数组</span><br><span class="line">    unsigned long size; //哈希表大小</span><br><span class="line">    unsigned long sizemask; //哈希表大小掩码 用于计算索引值 总是等于size-1</span><br><span class="line">    unsigned long used; //表示已有节点的数量</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="hash表节点"><a href="#hash表节点" class="headerlink" title="hash表节点"></a>hash表节点</h3><ul>
<li>Redis的hash表节点在dict.h中定义<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">typedef stuct dictEntry</span><br><span class="line">&#123;</span><br><span class="line">    void *key;          //键</span><br><span class="line">    union &#123;</span><br><span class="line">        void *val;</span><br><span class="line">        uint64_t u64;</span><br><span class="line">        int64_t s64;</span><br><span class="line">        double d;</span><br><span class="line">    &#125; v;                //值</span><br><span class="line">    struct dictEntry *next;     //指向下一个hash表节点 形成链表 开链法解决hash冲突</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h3><ul>
<li>Redis中的字典在dict.h中由dict结构表示<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">typedef struct dict &#123;</span><br><span class="line">    dictType *type;     //类型特点函数</span><br><span class="line">    void *privdata;     //私有数据 保存需要传给类型特定函数的可选参数</span><br><span class="line">    dictht ht[2];       //hash表  一般使用ht[0] ht[1]用于rehash</span><br><span class="line">    long rehashidx;     //rehash索引 记录rehash进度 当rehash不在进行时,值为-1</span><br><span class="line">    int iterators;      // number of iterators currently running</span><br><span class="line">&#125; dict;</span><br><span class="line">//保存用于操作特定类型键值对的函数</span><br><span class="line">typedef struct dictType &#123;</span><br><span class="line">    //hash值计算函数</span><br><span class="line">    unsigned int (*hashFunction)(const void *key);</span><br><span class="line">    //复制键函数</span><br><span class="line">    void *(*keyDup)(void *privdata, const void *key);</span><br><span class="line">    //复制值函数</span><br><span class="line">    void *(*valDup)(void *privdata, const void *obj);</span><br><span class="line">    //对比键函数</span><br><span class="line">    int (*keyCompare)(void *privdata, const void *key1, const void *key2);</span><br><span class="line">    //销毁键函数</span><br><span class="line">    void (*keyDestructor)(void *privdata, void *key);</span><br><span class="line">    //销毁值函数</span><br><span class="line">    void (*valDestructor)(void *privdata, void *obj);</span><br><span class="line">&#125; dictType;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="哈希算法-键位冲突-rehash"><a href="#哈希算法-键位冲突-rehash" class="headerlink" title="哈希算法 键位冲突 rehash"></a>哈希算法 键位冲突 rehash</h2><ul>
<li>先使用hashFunction函数算出hash值，再由hash值算出索引值，索引冲突使用开链法解决。当字典被用作数据库的底层实现或hash键的底层实现时，Redis使用MurmurHash算法计算键的hash值 该算法优点在于即使输入的键有规律, 仍然可以给出很好的随机分布性, 并且算法的计算速度也很快。</li>
<li>hash表保存的值会随操作不断变大或变小，为了让hash表的负载因子在合理范围，需要对hash表rehash。扩展操作后的大小为 第一次大于等于used*2的2^n（2的n次幂）。缩小操作后的大小为 第一次大于等于used的2^n（2的n次幂）</li>
<li>rehash 在ht[0]和ht[1]中渐进进行，即每次操作时才rehash ht[0]中的键到ht[1]等ht[0]空了 就可以将ht[0]释放将ht[1]设置ht[0],然后为ht[1]重新生成空hash表,为下次rehash做准备.</li>
<li>hash表负载因子计算 负载因子=ht[0].used/ht[0].size </li>
<li>hash表扩展操作</li>
<li><ol>
<li>当服务器当前没有执行BGSAVE命令或者BGREWRITEAOF命令, 并且hash表的负载大于等于1</li>
</ol>
</li>
<li><ol>
<li>当服务器当前执行BGSAVE命令或者BGREWRITEAOF命令, 并且hash表的负载大于等于5</li>
</ol>
</li>
<li>hash表收缩操作 hash表负载因子小于0.1</li>
</ul>
]]></content>
      <categories>
        <category>redis</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis数据库链表大概介绍</title>
    <url>/2017/06/01/redis-list-note/</url>
    <content><![CDATA[<h1 id="Redis-list-笔记"><a href="#Redis-list-笔记" class="headerlink" title="Redis list 笔记"></a>Redis list 笔记</h1><h2 id="链表和链表节点的实现"><a href="#链表和链表节点的实现" class="headerlink" title="链表和链表节点的实现"></a>链表和链表节点的实现</h2><ul>
<li><p>在adlist.h中listNode结构表示链表节点</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">typedef struct listNode</span><br><span class="line">&#123;</span><br><span class="line">    struct listNode *prev;                  //前置节点</span><br><span class="line">    struct listNode *next;                  //后置节点</span><br><span class="line">    void *value;                            //节点的值</span><br><span class="line">&#125;listNode;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在adlist.h中list结构表示链表头</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">typedef struct list</span><br><span class="line">&#123;</span><br><span class="line">    listNode *head;                         //表头节点</span><br><span class="line">    listNode *tail;                         //表尾节点</span><br><span class="line">    void *(*dup)(void *ptr);                //节点值复制函数</span><br><span class="line">    void (*free)(void *ptr);                //节点值释放函数</span><br><span class="line">    int (*match)(void *ptr, void *key);     //节点值对比函数</span><br><span class="line">    unsigned long len;                      //链表所含节点数量</span><br><span class="line">&#125;list;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Redis链表的特点"><a href="#Redis链表的特点" class="headerlink" title="Redis链表的特点"></a>Redis链表的特点</h2><ul>
<li>双端:链表节点有前后指针，找到一个节点前置节点和后置节点的复杂度都是O(1)</li>
<li>无环:表头节点的prev指针和表尾节点的next指针都指向NULL，对链表的访问以NULL为终点。</li>
<li>表头保存了表头指针和表尾指针，程序获取链表头节点和尾节点的复杂度为O(1)</li>
<li>表头保存了链表长度，获取链表长度的操作复杂度为O(1)</li>
<li>通过(void*) 保存节点值，可以保存不同类型的值，带有dup，free，match属性，为节点值设置类型特定函数。</li>
</ul>
]]></content>
      <categories>
        <category>redis</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis数据库对象大概介绍</title>
    <url>/2017/06/01/redis-object-note/</url>
    <content><![CDATA[<h1 id="Redis-笔记-对象"><a href="#Redis-笔记-对象" class="headerlink" title="Redis 笔记 对象"></a>Redis 笔记 对象</h1><h2 id="对象的类型与编码"><a href="#对象的类型与编码" class="headerlink" title="对象的类型与编码"></a>对象的类型与编码</h2><ul>
<li>Redis使用对象来表示数据库中的键和值。每次在Redis的数据库中新常见键值对时，至少会创建两个对象，一个对象用作键值对的键，另一个用作键值对的值。</li>
<li>Redis中每个对象都会由一个redisObject结构表示：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">typedef struct redisObject &#123;</span><br><span class="line">    unsigned type:4;            //类型</span><br><span class="line">    unsigned encoding:4;        //编码</span><br><span class="line">    unsigned lru:LRU_BITS;      //对象最后一次被命令程序访问的时间</span><br><span class="line">    int refcount;               //引用计数</span><br><span class="line">    void *ptr;                  //指向底层实现数据结构的指针</span><br><span class="line">&#125; robj;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h3><ul>
<li><p>对象的type属性记录的对象的类型</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#define OBJ_STRING 0        //字符串对象 string</span><br><span class="line">#define OBJ_LIST 1          //列表对象 list</span><br><span class="line">#define OBJ_SET 2           //哈希对象 hash</span><br><span class="line">#define OBJ_ZSET 3          //集合对象 set </span><br><span class="line">#define OBJ_HASH 4          //有序集合对象 zset</span><br></pre></td></tr></table></figure>
</li>
<li><p>对于redis数据库保存的键值对来说，键总是一个字符串对象，而值可以是字符串对象、列表对象、哈希对象、集合对象或者有序集合对象的其中一种。</p>
</li>
<li>TYPE命令返回的结果为数据库键队形的值对象的类型，而不是键对应的类型。</li>
</ul>
<h3 id="编码和底层实现"><a href="#编码和底层实现" class="headerlink" title="编码和底层实现"></a>编码和底层实现</h3><ul>
<li>对象的ptr指针指向对象的底层实现数据结构，数据结构由对象的encoding属性决定</li>
<li>使用OBJECT ENCODING命令可以查看一个数据库键的值的编码。</li>
<li>通过encoding属性设定对象所使用的编码，而不是为特定类型的对象关联一种固定的编码，极大的提高了Redis的灵活性和效率，因为Redis可以根据不同的使用场景来为一个对象设置不同的编码,从而优化在某个场景下的效率。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#define OBJ_ENCODING_RAW 0     /* 简单动态字符串 Raw representation */</span><br><span class="line">#define OBJ_ENCODING_INT 1     /* long类型的整数 Encoded as integer */</span><br><span class="line">#define OBJ_ENCODING_HT 2      /* 字典 Encoded as hash table */</span><br><span class="line">#define OBJ_ENCODING_ZIPMAP 3  /* Encoded as zipmap */</span><br><span class="line">#define OBJ_ENCODING_LINKEDLIST 4 /* 双端链表 Encoded as regular linked list */</span><br><span class="line">#define OBJ_ENCODING_ZIPLIST 5 /* 压缩列表 Encoded as ziplist */</span><br><span class="line">#define OBJ_ENCODING_INTSET 6  /* 整数集合 Encoded as intset */</span><br><span class="line">#define OBJ_ENCODING_SKIPLIST 7  /* 跳跃表和字典 Encoded as skiplist */</span><br><span class="line">#define OBJ_ENCODING_EMBSTR 8  /* embstr编码的简单动态字符串 </span><br><span class="line">                                  Embedded sds string encoding */</span><br><span class="line">#define OBJ_ENCODING_QUICKLIST 9 /* Encoded as linked list of ziplists */</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="字符串对象"><a href="#字符串对象" class="headerlink" title="字符串对象"></a>字符串对象</h2><ul>
<li>字符串对象的编码可以是int，raw或者embstr</li>
<li>如果一个字符串对象保存的是整数值，并且这个整数值可以用long类型来表示，那么字符串对象会将整数值保存在字符串结构的pr属相里面(将void*转换为long)，并将字符串对象的编码设置为int。</li>
<li>如果字符串对象保存的是一个字符串值，并且这个字符串值的长度大于32字节，那么字符串对象将使用一个简单动态字符串来保存这个字符串值，变鬼将对象的编码设置为raw</li>
<li><p>如果字符串对象保存的是一个字符串值，并且这个字符串值的长度小于等于32字节，那么字符串数组将使用embstr编码的方式来保存这个字符串值。embstr是专门用来保存短字符串的一种优化编码方式，它和raw编码一样都是用redisObjct结构和sdshdr结构，而embstr编码则通过调用一次内存分配函数来得到一块连续的空间，空间中依次包含redisObjec和sdshdr两个结构。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">|-------------------------------|------------------|</span><br><span class="line">|---------redisObject-----------|-------sdshdr-----|</span><br><span class="line">| type | encoding | ptr | ...   | free | len | buf |</span><br><span class="line">|-------------------------------|------------------|</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用embstr编码的字符串对象保存短字符串的好处：</p>
<ol>
<li>分配内存次数由两次降低为1次</li>
<li>释放内存次数有两次降低为1次</li>
<li>数据在一个连续的内存里面，可以更改好地利用缓存带来的优势。</li>
</ol>
</li>
<li>用long double类型表示的浮点数在Redis中做为字符串值来保存。保存一个浮点数到字符串对象里面，先把浮点数转化为字符串值，在保存转化的字符串。如果需要对保存的浮点数进行某种操作，先将其转化为浮点数，操作后再转化为字符串值，再保存到字符串对象中。</li>
</ul>
<h3 id="编码的转化"><a href="#编码的转化" class="headerlink" title="编码的转化"></a>编码的转化</h3><ul>
<li>int编码和embstr编码的字符串对象在条件满足的条件下会被转化为raw编码的字符串对象。</li>
<li>embstr编码的字符串是只读的，对embstr编码的字符串进行任何修改命令时，程序先将编码从embstr转为raw，再执行修改命令。因此embstr编码的字符串对象在执行修改命令后，会变成一个raw编码的字符串对象。<h3 id="字符串命令的实现"><a href="#字符串命令的实现" class="headerlink" title="字符串命令的实现"></a>字符串命令的实现</h3></li>
<li>因为字符串键的值为字符串对象，所有用于字符串键的所有命令都是针对字符串对象来构建的。<br><img src="/Picture/string_object_realization.jpg" alt></li>
</ul>
<h2 id="列表对象"><a href="#列表对象" class="headerlink" title="列表对象"></a>列表对象</h2><ul>
<li>列表对象的编码可以是ziplist或者linkedlist</li>
<li>ziplist编码的列表对象使用压缩列表做为底层实现，每个压缩列表节点保存一个列表元素。</li>
<li>linkedlist编码的列表对象使用双端链表做为底层实现，每个双端链表节点都保存了一个字符串对象，而每个字符串对象都保存了一个列表对象。</li>
<li>字符串对象是Redis五种类型的对象中唯一一个会被其他四种类型对象嵌套的对象。<h3 id="编码转换"><a href="#编码转换" class="headerlink" title="编码转换"></a>编码转换</h3></li>
<li>当列表对象同时满足以下两个条件时，列表对象使用ziplist编码：<ol>
<li>列表对象保存的所有字符串元素的长度都小于64字节；</li>
<li>列表对象保存的元素数量小于512个；不能满足这两个条件的列表对象需要使用linkedlist编码。</li>
</ol>
</li>
<li>对于使用ziplist编码的列表对象，以上两个条件任意一个不被满足就会进行编码转化。<h3 id="列表命令的实现"><a href="#列表命令的实现" class="headerlink" title="列表命令的实现"></a>列表命令的实现</h3></li>
<li>因为列表键的值为列表对象，所以用于列表键的所有命令都是针对列表对象来构建的。<br><img src="/Picture/list_object_realization.jpg" alt></li>
</ul>
<h2 id="哈希对象"><a href="#哈希对象" class="headerlink" title="哈希对象"></a>哈希对象</h2><ul>
<li>哈希对象的编码可以是ziplist或者hashtable</li>
<li>ziplist编码的哈希对象使用压缩列表做为底层实现，每当有新的键值对要加入到哈希对象时，程序会先将保存了键的压缩列表节点推入到压缩列表表尾，然后再将保存了之的压缩列表节点推入到压缩列表表尾，因此：保存了同一键值对的两个节点总是紧挨在一起，保存键的节点在前，保存值的节点在后；先添加到哈希对象的键值对会被放在压缩列表的表头方向，而后面添加的哈希对象会被放在压缩列表的表尾方向。</li>
<li>hashtable编码的哈希对象使用字典做为底层实现，哈希对象中的每个键值对都使用一个字典键值对来保存：字典的每个键都是一个字符串对象，对象中保存了键值对的键；字典中的每个值都是一个字符串对象，对象中保存了键值对的值。<h3 id="编码转化"><a href="#编码转化" class="headerlink" title="编码转化"></a>编码转化</h3></li>
<li>当哈希对象同事满足以下两个条件时，哈希对象使用ziplist编码：<ol>
<li>哈希对象保存的所有键值对的键和值的字符串长度都小于64字节；</li>
<li>哈希对象保存的键值对数量小于512个； 不能满足这两个条件的哈希对象需要使用hashtable编码。</li>
</ol>
</li>
<li>对使用ziplist编码的哈希对象来说，当以上两个条件任意一个不满足时，对象的编码转换操作就会被执行。<h3 id="哈希命令的实现"><a href="#哈希命令的实现" class="headerlink" title="哈希命令的实现"></a>哈希命令的实现</h3></li>
<li>因为哈希键的值为哈希对象，所有用户哈希键的所有命令<br><img src="/Picture/hash_object_realization.jpg" alt></li>
</ul>
<h2 id="集合对象"><a href="#集合对象" class="headerlink" title="集合对象"></a>集合对象</h2><ul>
<li>集合对象的编码可以是intset或者hashtable</li>
<li>intset编码的集合对象使用整数集合做为底层实现，集合对象包含的所有元素都被保存在整数集合里面。</li>
<li>hashtable编码的集合对象使用字典做为底层实现，字典的每个键都是一个字符串对象，每个字符串对象包含了一个集合元素，而字典的值则全部被设置为NULL<h3 id="编码转换-1"><a href="#编码转换-1" class="headerlink" title="编码转换"></a>编码转换</h3></li>
<li>当集合对象同事满足以下两个条件时，对象使用intset编码：<ol>
<li>集合对象保存的所有元素都是整数值</li>
<li>集合对象保存的额元素数量不超过512个。不满足这两个条件的集合对象需要使用hashtable编码</li>
</ol>
</li>
<li>对使用intset编码的集合对象来说，当以上两个条件任意一个不满足时，对象的编码转换操作就会被执行。<h3 id="集合命令的实现"><a href="#集合命令的实现" class="headerlink" title="集合命令的实现"></a>集合命令的实现</h3></li>
<li>因为集合键的值为集合对象，所有用于集合键的所有命令都是针对集合对象来构建的。<br><img src="/Picture/set_object_realization.jpg" alt></li>
</ul>
<h2 id="有序集合对象"><a href="#有序集合对象" class="headerlink" title="有序集合对象"></a>有序集合对象</h2><ul>
<li>有序集合的编码可以是ziplist或者skiplist</li>
<li>ziplist编码的压缩列表对象使用压缩列表做为底层实现，每个集合元素使用两个紧挨在一起的压缩列表节点来保存，第一个节点保存元素的成员, 第二个元素保存元素的分值。压缩列表内的集合元素按分值从小到大进行排序，分值较小的元素被放置在靠近表头的方向，而分值较大的元素则被放置在靠近表尾的方向。</li>
<li><p>skiplist编码的有序集合对象使用zset结构做为底层实现，一个zset结构同事包含一个字典和一个跳跃表</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">typedef struct zset &#123;</span><br><span class="line">    dict *dict;</span><br><span class="line">    zskiplist *zsl;</span><br><span class="line">&#125; zset;</span><br></pre></td></tr></table></figure>
</li>
<li><p>zset结构中的zsl跳跃表按照分值从小到大保存了所有结合元素，每个跳跃表节点都保存了一个集合元素：跳跃表节点的object属性保存了元素的成员，而跳跃表的score属性则保存了元素的分值。通过跳跃表可以对有序集合进行范围型操作。</p>
</li>
<li>zset结构镇南关的dict字典为有序集合创建了一个从成员到分值的映射，字典中的每个键值对都保存了一个集合元素：字典的键保存了元素的成员，而字典的值则保存了元素的分值。通过字典。可以用O(1)复杂度查找给定成员的分值。</li>
<li>有序集合每个元素的成员都是一个字符串对象，而每个元素的分值都是一个double类型的浮点数。虽然zset结构同事使用跳跃表和字典保存有序集合元素，但这两种数据结构都会通过指针共享相同元素的成员和分值，所以同时使用跳跃表和字典来保存集合元素不会产生任何重复成员或者分值，也不会浪费额外内存。</li>
</ul>
<h3 id="编码转换-2"><a href="#编码转换-2" class="headerlink" title="编码转换"></a>编码转换</h3><ul>
<li>当有序集合对象同事满足以下两个条件时。对象使用ziplist编码：<ol>
<li>有序集合保存的元素数量小雨128个；</li>
<li>有序集合保存的所有元素成员的长度小于64字节；</li>
</ol>
</li>
<li>不满足以上两个条件的有序集合对象使用skiplist编码。对于使用ziplist编码的有序集合对象，不满足以上任意一条时就会执行对象的编码转化操作。<h3 id="有序集合实现"><a href="#有序集合实现" class="headerlink" title="有序集合实现"></a>有序集合实现</h3></li>
<li>因为有序集合键的值为哈希对象，所以对于有序集合键的所有命令都是针对哈希对象来构建的。<br><img src="/Picture/zset_object_realization.jpg" alt></li>
</ul>
<h2 id="类型检查与命令多态"><a href="#类型检查与命令多态" class="headerlink" title="类型检查与命令多态"></a>类型检查与命令多态</h2><ul>
<li>Redis中用于操作键的命令基本分为两种类型。<ol>
<li>对任何类型的键操作 如:del、expire、type等</li>
<li>对特定类型的键操作 如:set、sadd、hdel等<h3 id="类型检查的实现"><a href="#类型检查的实现" class="headerlink" title="类型检查的实现"></a>类型检查的实现</h3></li>
</ol>
</li>
<li>为了确保支队特定类型的键执行某些特定命令，在执行一个类型特定命令前，Redis会对键的类型进行检查。</li>
<li>类型特定命令进行的类型检查是通过redisObject结构的type属性来实现的。在执行一个类型特定命令前，服务器先检查输入数据库键的值对象是否为执行命令所需的类型，如果是的话服务器就对键执行指点的命令，否则服务器拒绝执行命令，并向客户端返回类型错误。<h3 id="多态命令的实现"><a href="#多态命令的实现" class="headerlink" title="多态命令的实现"></a>多态命令的实现</h3></li>
<li>Redis会根据值对象的编码方式，选择正确的命令实现代码来执行命令。</li>
</ul>
<h2 id="内存回收"><a href="#内存回收" class="headerlink" title="内存回收"></a>内存回收</h2><ul>
<li>Redis构建了一个引用计数技术实现的内存回收机制，在适当的时候自动释放对象并进行内存回收。</li>
<li>每个对象的引用计数信息由redisObject结构的refcount属性记录。</li>
<li>对象引用计数信息随着对象的使用状态而不断变化：<ol>
<li>创建一个新对象，引用计数初始化为1</li>
<li>被新引用，引用计数新增1</li>
<li>不再被引用, 引用计数减1</li>
<li>引用计数为0时，对象被释放</li>
</ol>
</li>
</ul>
<h2 id="对象共享"><a href="#对象共享" class="headerlink" title="对象共享"></a>对象共享</h2><ul>
<li>Redis只会对包含整数值的字符串对象进行共享。因为要共享一个对象先要检查给定对象和新创建的对象是否完全相同，而一个对象保存的值约复杂。验证共享对象与目标对象相同所需的复杂度就越高，消耗的CPU时间也就越多。</li>
</ul>
<h2 id="对象的空转时长"><a href="#对象的空转时长" class="headerlink" title="对象的空转时长"></a>对象的空转时长</h2><ul>
<li>redisObject结构lru属性记录了对象最后一次被命令程序访问的时间。</li>
<li>OBJECT IDLETIME命令可以打印出给定键的空转时长。空转时长是通过当前时间减去对象的lru时间计算得出的。</li>
<li>OBJECT IDLETIME命令不会修改值对象的lru属性。</li>
<li>当服务器打开了maxmemory选项，并且服务器用于回收内存的算法为volatile-lru或者allkeys-lru，当服务器占用的内存超过maxmemory选项设置的上限值时，空转时长较高的那部分键会有限被服务器释放。</li>
</ul>
]]></content>
      <categories>
        <category>redis</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis数据库跳跃表大概介绍</title>
    <url>/2017/06/01/redis-skiplist-note/</url>
    <content><![CDATA[<h1 id="Redis-skiplist-跳跃表-笔记"><a href="#Redis-skiplist-跳跃表-笔记" class="headerlink" title="Redis skiplist 跳跃表  笔记"></a>Redis skiplist 跳跃表  笔记</h1><h2 id="跳跃表简介"><a href="#跳跃表简介" class="headerlink" title="跳跃表简介"></a>跳跃表简介</h2><ul>
<li>skiplist 是一种有序数据结构, 通过在每个节点维持多个指向其它节点的指针，达到快速访问节点的目的。</li>
<li>skiplist 支持平均O(logN)、最坏O(N)复杂度的节点查找。大部分情况下和平衡树相媲美，并且比平衡树实现简单。</li>
<li>redis使用skiplist做为有序集合键的底层实现之一。</li>
</ul>
<h2 id="跳跃表实现"><a href="#跳跃表实现" class="headerlink" title="跳跃表实现"></a>跳跃表实现</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">zskiplistNode</span> &#123;</span>  <span class="comment">//跳跃表节点</span></span><br><span class="line">    robj *obj;                  <span class="comment">//所保存的成员对象 在同一个跳跃表中，各个节点保存的成员对象</span></span><br><span class="line">                                <span class="comment">//必须是唯一的，但各个节点保存的分值却可以是相同的，分值相同</span></span><br><span class="line">                                <span class="comment">//的节点按成员对象在字典序中的大小来进行排序。</span></span><br><span class="line">    <span class="keyword">double</span> score;               <span class="comment">//分值 跳跃表中，节点按各自所保存的分值从小到大排列</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">zskiplistNode</span> *<span class="title">backward</span>;</span>     <span class="comment">//后退指针，指向位于当前节点的前一个节点。</span></span><br><span class="line">                                        <span class="comment">//后退指针在程序从表尾向表头遍历时使用</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">zskiplistLevel</span> &#123;</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">zskiplistNode</span> *<span class="title">forward</span>;</span>  <span class="comment">//前进指针, 用于从表头向表尾方向访问节点。</span></span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">int</span> span;              <span class="comment">//跨度, 用于记录两个节点之间的距离。两个节点之间的跨</span></span><br><span class="line">                                        <span class="comment">//度越大，他们相聚得就越远。指向NULL的所有前进指针的</span></span><br><span class="line">                                        <span class="comment">//跨度都为0, 因为它们没有连向任何节点。跨度用于计算</span></span><br><span class="line">                                        <span class="comment">//排位，在查找某个节点的过程中，将沿途访问过的所有曾</span></span><br><span class="line">                                        <span class="comment">//的跨度累计起来，得到的结果就是目标节点在跳跃表中的排名。</span></span><br><span class="line">    &#125; level[];                  <span class="comment">//层 包含多个元素，每个元素包含一个指向其它节点的指针，</span></span><br><span class="line">                                <span class="comment">//程序可以通过这些层加快访问其它节点的速度, 一般来说，层</span></span><br><span class="line">                                <span class="comment">//的数量越多，访问其它节点的速度就越快。每次创建新跳跃表</span></span><br><span class="line">                                <span class="comment">//节点的时候，程序根据幂次定律随机生成一个介于1到32之间的值</span></span><br><span class="line">                                <span class="comment">//做为levle数组的大小，这个大小就是层的"高度"</span></span><br><span class="line">&#125; zskiplistNode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">zskiplist</span> &#123;</span>      <span class="comment">//跳跃表节点相关信息</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">zskiplistNode</span> *<span class="title">header</span>, *<span class="title">tail</span>;</span>    <span class="comment">//指向跳跃表表头节点和表尾节点</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> length;       <span class="comment">//跳跃表的长度，即跳跃表目前包含节点的数量</span></span><br><span class="line">    <span class="keyword">int</span> level;                  <span class="comment">//记录目前跳跃表内，层数最大的那个节点的层数(表头节点的层数不计算在内)</span></span><br><span class="line">&#125; zskiplist;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>redis</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis数据库string SDS大概介绍</title>
    <url>/2017/06/01/redis-string-note/</url>
    <content><![CDATA[<h1 id="Redis-string-笔记-简单动态字符串SDS"><a href="#Redis-string-笔记-简单动态字符串SDS" class="headerlink" title="Redis string 笔记 简单动态字符串SDS"></a>Redis string 笔记 简单动态字符串SDS</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul>
<li>Redis没有使用C语言传统的字符串(以空格结尾的字符串数组)表示，而是自己构建了一种简单动态字符串(SDS)的抽象类型，并将SDS作为Redis的默认字符串表示。</li>
<li>Redis中C字符串只会作为字符串字面量用在一些无须对字符串值进行修改的地方。当Redis需要的是一个可以修改的字符串值时，Redis会使用SDS来表示字符串值。</li>
</ul>
<h2 id="SDS定义"><a href="#SDS定义" class="headerlink" title="SDS定义"></a>SDS定义</h2><ul>
<li>在sds.h中每一个sdshdr结构体表示一个SDS值。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">struct sdshdr</span><br><span class="line">&#123;</span><br><span class="line">    uint32_t len;       //字符串长度</span><br><span class="line">    uint32_t alloc;     //分配的buf长度</span><br><span class="line">    unsigned char flag; //sds标记 低三位用于标记sds类型 高五位未使用</span><br><span class="line">    char buf[];         //保存C字符串 会在末尾处加&apos;\0&apos;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="SDS和字符串的区别"><a href="#SDS和字符串的区别" class="headerlink" title="SDS和字符串的区别"></a>SDS和字符串的区别</h2><h3 id="常数复杂度获取字符串长度"><a href="#常数复杂度获取字符串长度" class="headerlink" title="常数复杂度获取字符串长度"></a>常数复杂度获取字符串长度</h3><ul>
<li>C字符串不记录字符串长度，获取字符串长度时需要遍历,时间复杂度O(N)。SDS记录了字符串长度，获取字符串长度时间复杂度为O(1)。</li>
</ul>
<h3 id="杜绝缓冲区溢出"><a href="#杜绝缓冲区溢出" class="headerlink" title="杜绝缓冲区溢出"></a>杜绝缓冲区溢出</h3><ul>
<li>C字符串不记录字符串长度，那么字符串拼接等操作不会检查缓冲区的大小，而SDS会检查缓冲区大小，如果不足会自动扩充，防止缓冲区溢出。C字符串API不安全可能会造成缓冲区溢出，SDS API是安全的。</li>
</ul>
<h3 id="减少修改字符串时带来的内存重分配次数"><a href="#减少修改字符串时带来的内存重分配次数" class="headerlink" title="减少修改字符串时带来的内存重分配次数"></a>减少修改字符串时带来的内存重分配次数</h3><ul>
<li>C字符串每次增长或缩短都会牵扯到内存的重新分配和释放。SDS通过生成字符串时预分配空间、惰性释放空间对其进行优化。C字符串修改N次字符串长度必然执行N次内存分配，SDS修改字符串长度N次最多执行N次内存分配。</li>
</ul>
<h3 id="二进制安全"><a href="#二进制安全" class="headerlink" title="二进制安全"></a>二进制安全</h3><ul>
<li>C字符串只能保存文本数据，不能保存用空字符分割多个单词的特殊数据结构。SDS保存的是二进制数据。</li>
</ul>
<h3 id="兼容部分C字符串函数"><a href="#兼容部分C字符串函数" class="headerlink" title="兼容部分C字符串函数"></a>兼容部分C字符串函数</h3><ul>
<li>SDS在保存数据时总是多分配一个字节存放’\0’，让保存文本数据的SDS重用一部分C字符串库函数，避免代码重复。</li>
</ul>
]]></content>
      <categories>
        <category>redis</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>boost 库实用工具 swap</title>
    <url>/2017/06/02/boost-swap/</url>
    <content><![CDATA[<h1 id="swap"><a href="#swap" class="headerlink" title="swap"></a>swap</h1><p>boost::swap是对标准库提供的std::swap的增强和泛化，未交换两个变量的值提供便捷的方法。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;boost/swap.hpp&gt;</span></span></span><br></pre></td></tr></table></figure>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>std::swap()的经典实现。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(T&amp; a, T&amp; b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">T <span class="title">tmp</span><span class="params">(a)</span></span>;</span><br><span class="line">    a = b;</span><br><span class="line">    b = tmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>std::swap()要求交换的对象必须是可拷贝构造和可拷贝赋值的，提供的是最通用效率最低的方法，需要进行一次拷贝构造和两次赋值操作。</p>
<p>boost::swap的工作原理:</p>
<ul>
<li>直接利用函数重载，编写同名swap函数，调用类内部高效成员交换函数。</li>
<li>使用ADL(参数依赖查找)查找模版特化的swap。</li>
</ul>
<p>boost::swap()函数声明:<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T1, <span class="keyword">typename</span> T2&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">seap</span><span class="params">(T1 &amp;left, T2 &amp;right)</span></span>;</span><br></pre></td></tr></table></figure></p>
<h2 id="交换数组"><a href="#交换数组" class="headerlink" title="交换数组"></a>交换数组</h2><p>boost::swap交换数组使用for循环，对数组中每个元素调用但个元素版的boost::swap完成整个数组内容的交换。要求交换的数组必须具有相同长度，否则无法编译通过。</p>
<h2 id="特化std-swap"><a href="#特化std-swap" class="headerlink" title="特化std::swap"></a>特化std::swap</h2><p>在std名字空间中添加自定义swap函数。</p>
<h2 id="特殊ADL可找到的swap"><a href="#特殊ADL可找到的swap" class="headerlink" title="特殊ADL可找到的swap"></a>特殊ADL可找到的swap</h2><p>boost::swap会通过ADL规则找到特化的交换函数。</p>
<h2 id="使用建议"><a href="#使用建议" class="headerlink" title="使用建议"></a>使用建议</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(test &amp;l)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"test swap"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(test &amp;r, test &amp;l)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    r.swap(l);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//swap</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TestSwap</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">int</span> y[<span class="number">10</span>];</span><br><span class="line">    fill_n(x, <span class="number">10</span>, <span class="number">5</span>);</span><br><span class="line">    fill_n(y, <span class="number">10</span>, <span class="number">10</span>);</span><br><span class="line">    boost::swap(x, y);</span><br><span class="line">    for_each(x, x+<span class="number">10</span>, print&lt;<span class="keyword">int</span>&gt;);</span><br><span class="line">    for_each(y, y+<span class="number">10</span>, print&lt;<span class="keyword">int</span>&gt;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> x2[<span class="number">20</span>];</span><br><span class="line">    <span class="keyword">int</span> y2[<span class="number">10</span>];</span><br><span class="line">    fill_n(x2, <span class="number">20</span>, <span class="number">5</span>);</span><br><span class="line">    fill_n(y2, <span class="number">10</span>, <span class="number">10</span>);</span><br><span class="line">    <span class="comment">//boost::swap(x2, y2); //编译报错</span></span><br><span class="line"></span><br><span class="line">    test a;</span><br><span class="line">    test b;</span><br><span class="line">    <span class="built_in">std</span>::swap(a, b);</span><br><span class="line">    boost::swap(a, b);  <span class="comment">//会调用swap(test &amp;, test &amp;);</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>cpp</category>
      </categories>
      <tags>
        <tag>cpp</tag>
        <tag>boost</tag>
      </tags>
  </entry>
  <entry>
    <title>boost 库实用工具singleton</title>
    <url>/2017/06/02/boost-singleton/</url>
    <content><![CDATA[<h1 id="singleton"><a href="#singleton" class="headerlink" title="singleton"></a>singleton</h1><p>singleton即单件模式，单件模式的类在程序生命周期中只会存在一个且仅有一个实例。</p>
<p>Boost库没有专门的单件库，仅在其它库中有不完善的实现。</p>
<h2 id="singlton-default的单件实现"><a href="#singlton-default的单件实现" class="headerlink" title="singlton_default的单件实现"></a>singlton_default的单件实现</h2><p>singlton_default泛型单件类。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;boost/container/detail/singleton.hpp&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> boost::container::container_detail::singleton_default;</span><br></pre></td></tr></table></figure>
<h3 id="类摘要"><a href="#类摘要" class="headerlink" title="类摘要"></a>类摘要</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">singlton_default</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">typedef</span> T object_type;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> object_type &amp; <span class="title">instance</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>singlton_default把模版参数T实现为一个单件类，唯一实例只能通过静态成员函数instance()访问。在main()运行前创建单件。对类型T要求有缺省(无参)构造函数，构造和析构不能抛出异常，因为单件在main()前后构造和析构，发生异常无法捕获。</p>
<h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><p>把想要成为单件的类作为singlton_default的模版参数。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> boost::container::container_detail::singleton_default;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestSingletonDefault</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    TestSingletonDefault()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"ctor"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ~TestSingletonDefault()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"dtor"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"singleton"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//singleton</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TestSingleton</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">typedef</span> singleton_default&lt;TestSingletonDefault&gt; origin;</span><br><span class="line">    origin::instance().print();</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="boost-serialzation的单件实现"><a href="#boost-serialzation的单件实现" class="headerlink" title="boost.serialzation的单件实现"></a>boost.serialzation的单件实现</h2><p>序列化库serialzation中单件实现类singleton。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;boost/serialization/singleton.hpp&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> boost::serialization::singleton;</span><br></pre></td></tr></table></figure>
<h3 id="类摘要-1"><a href="#类摘要-1" class="headerlink" title="类摘要"></a>类摘要</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">singleton</span> :</span> <span class="keyword">public</span> boost::noncopyable</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">const</span> T&amp; <span class="title">get_const_instance</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> T&amp; <span class="title">get_mutable_instance</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>singleton对模版参数要求有缺省构造函数，构造析构不抛异常。访问单件分为常对象和可变对象，常对象单件总是线程安全的，因为它不会改变内部状态，而可变对象则不是线程安全的，可能发生线程竞争问题。</p>
<h3 id="用法-1"><a href="#用法-1" class="headerlink" title="用法"></a>用法</h3><ul>
<li>使用模版参数的方式。</li>
<li>通过继承的方法，把singleton作为单件类的基类，并把单件类作为singleton的模版参数。</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> boost::serialization::singleton;</span><br><span class="line"><span class="comment">//singleton1</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TestSingleton1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">typedef</span> singleton&lt;TestSingletonDefault&gt; origin;</span><br><span class="line">    origin::get_const_instance().print();</span><br><span class="line">    <span class="comment">//origin::get_mutable_instance().print();</span></span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestSingletonClass</span>:</span> <span class="keyword">public</span> singleton&lt;TestSingletonClass&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    TestSingletonClass()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"ctor c"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ~TestSingletonClass()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"dtor c"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"singleton"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//singleton2</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TestSingleton2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    TestSingletonClass::get_const_instance().print();</span><br><span class="line">    <span class="comment">//TestSingletonClass::get_mutable_instance().print();</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>继承方式比模版方式实现单件更加彻底，使单件化的类成为真正的单件类，模版参数方式包装了被单件化的类，对原始类没任何影响。</p>
]]></content>
      <categories>
        <category>cpp</category>
      </categories>
      <tags>
        <tag>cpp</tag>
        <tag>boost</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis数据库压缩列表大概介绍</title>
    <url>/2017/06/01/redis-ziplist-note/</url>
    <content><![CDATA[<h1 id="Redis-ziplist-笔记-压缩列表"><a href="#Redis-ziplist-笔记-压缩列表" class="headerlink" title="Redis ziplist 笔记 压缩列表"></a>Redis ziplist 笔记 压缩列表</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul>
<li>压缩列表是列表键和哈希键的底层实现之一。</li>
<li>当一个列表键只包含少量列表项，并且每个列表项要么就是小整数值，要么就是长度比较短的字符串，那么Redis就会使用压缩列表来做列表键的底层实现。</li>
<li>当一个哈希键只包含少量列表项，并且每个键值对的键和值要么就是小整数值，要么就是长度比较短的字符串，那么Redis就会使用压缩列表来做哈希键键的底层实现。</li>
</ul>
<h2 id="压缩列表的构成"><a href="#压缩列表的构成" class="headerlink" title="压缩列表的构成"></a>压缩列表的构成</h2><ul>
<li>压缩列表是Redis为了节约内存而开发的，是一些列特殊编码的连续内存块组成的顺序型数据结构。一个压缩列表可以包含任意多个节点，每个节点可以保存一个字节数组或者一个整数值。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">|----------------------------------------------------------------------|</span><br><span class="line">| zlbytes | zltail | zllen | entry1 | entry2 |   ...  | entryN | zlend |</span><br><span class="line">|----------------------------------------------------------------------|</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ol>
<li>zlbytes uint32_t 4字节 记录整个压缩列表所占的内存字节数:在对压缩列表进行内存重分配, 或者计算zlend的位置时使用。</li>
<li>zltail uint32_t 4字节 记录压缩列表表尾节点距离压缩列表的起始地址有多少字节：通过这个偏移量，程序无须遍历整个压缩列表就可以确定表尾节点的地址。</li>
<li>zllen uint16_t 2字节 记录压缩列表包含的节点数量：当这个属性小于UINT16_MAX(65535)时，这个属性的值就是压缩列表包含节点的数量；当这个值等于UINT16_MAX时，节点的真实数量需要遍历整个压缩列表计算得出。</li>
<li>entryX 列表节点 不定 压缩列表包含的各个节点，节点的长度由节点保存的内容决定。</li>
<li>zlend uint8_t 1字节 特殊值0xFF，用于标记压缩列表的末端。</li>
</ol>
<h2 id="压缩列表节点的构成"><a href="#压缩列表节点的构成" class="headerlink" title="压缩列表节点的构成"></a>压缩列表节点的构成</h2><ul>
<li>每个压缩列表节点可以保存一个字节数组或者一个整数值。</li>
<li>字节数组可以以下三种长度中的其中一种：<ol>
<li>长度小于等于2^6-1字节的字节数组</li>
<li>长度小于等于2^14-1字节的字节数组</li>
<li>长度小于等于2^32-1字节的字节数组</li>
</ol>
</li>
<li>整数值可以是以下6种长度中的其中一种：<ol>
<li>4位长，介于0-12之间的无符号整型</li>
<li>1字节长的有符号整型</li>
<li>3字节长的有符号整型</li>
<li>int16_t类型整数</li>
<li>int32_t类型整数</li>
<li>int64_t类型整数<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">|--------------------------------------------|</span><br><span class="line">| previous_entry_length | encoding | content |</span><br><span class="line">|--------------------------------------------|</span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
</ul>
<h3 id="previous-entry-length"><a href="#previous-entry-length" class="headerlink" title="previous_entry_length"></a>previous_entry_length</h3><ul>
<li>previous_entry_length属性以字节为单位，记录压缩列表中前一个节点的额长度。previous_entry_length属性的长度可以是1字节或者5字节。当前一个节点的长度小于254字节，previous_entry_length属性长度为1字节。当前一个节点的长度大于等于254字节，previous_entry_length属性长度为5字节，其中第一个字节设置为0xFE，后面四个字节保存前一节点长度。</li>
</ul>
<h3 id="encoding"><a href="#encoding" class="headerlink" title="encoding"></a>encoding</h3><ul>
<li>encoding记录节点的content属性所保存数据的类型以及长度</li>
</ul>
<h3 id="content"><a href="#content" class="headerlink" title="content"></a>content</h3><ul>
<li>content负责保存节点的值</li>
</ul>
<h2 id="连锁更新"><a href="#连锁更新" class="headerlink" title="连锁更新"></a>连锁更新</h2><ul>
<li>添加新节点到压缩列表或者从压缩列表删除节点都可能引发连锁更新操作，但这种操作出现几率并不高。</li>
<li>ziplistPush、ziplistInsert、ziplistDeleteRange、ziplistDelete如果发生了连锁更新最坏时间复杂度为O(N^2),</li>
<li>ziplistPush等命令平均时间复杂度为O(N)</li>
</ul>
]]></content>
      <categories>
        <category>redis</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>fedora 安装配置记录</title>
    <url>/2017/06/04/fedora25-to-configure/</url>
    <content><![CDATA[<h1 id="1-安装wget-man手册"><a href="#1-安装wget-man手册" class="headerlink" title="1.安装wget man手册"></a>1.安装wget man手册</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#yum install man-pages</span><br><span class="line">#yum install wget</span><br></pre></td></tr></table></figure>
<h1 id="2-安装yum源"><a href="#2-安装yum源" class="headerlink" title="2.安装yum源"></a>2.安装yum源</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># cd /etc/yum.repos.d</span><br><span class="line"># wget http://mirrors.163.com/.help/fedora-163.repo //(网易开源镜像)</span><br><span class="line"># wget http://mirrors.163.com/.help/fedora-updates-163.repo</span><br><span class="line"># wget http://mirrors.sohu.com/help/fedora-sohu.repo //(搜狐开源镜像)</span><br><span class="line"># wget http://mirrors.sohu.com/help/fedora-updates-sohu.repo</span><br><span class="line"># wget http://lug.ustc.edu.cn/wiki/_export/code/mirrors/help/fedora?codeblock=0 //(中国科技大学开源镜像 下载后注意将名称更名为fedora-ustc.repo)</span><br><span class="line"># wget http://lug.ustc.edu.cn/wiki/_export/code/mirrors/help/fedora?codeblock=1 //将名称改为fedora-updates-ustc.repo</span><br><span class="line"># yum makecache //(更新缓存)</span><br></pre></td></tr></table></figure>
<h1 id="3-升级更新系统"><a href="#3-升级更新系统" class="headerlink" title="3. 升级更新系统"></a>3. 升级更新系统</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># yum update   #升级所有包，改变软件设置和系统设置,系统版本内核都升级 刚开始软件系统配置都没有，选择第一种</span><br><span class="line"># yum upgrade   #升级所有包，不改变软件设置和系统设置，系统版本升级，内核不改变</span><br><span class="line">（查看Linux版本的方法：</span><br><span class="line">      #uname -r        #查看当前linux系统的内核版本号</span><br><span class="line">      #uname -a       #可以查看包括内核版本号、机器硬件信息、网络节点名、操作系统名字等信息     ）</span><br></pre></td></tr></table></figure>
<h1 id="4-安装右键启动终端功能"><a href="#4-安装右键启动终端功能" class="headerlink" title="4. 安装右键启动终端功能"></a>4. 安装右键启动终端功能</h1><p>Nautilus-Open-Terminal 是一个让你随处都可以打开终端的nautilus插件。尤其是当你想在一个包含子目录的目录中对某个特定目录做命令行操作的时候，它特别有用。如果你安装了这个插件，那么你只需要做的就是右键点击这个目录，然后选择菜单项’在终端打开’。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#yum install nautilus-open-terminal</span><br></pre></td></tr></table></figure>
<p><img src="/Picture/linux-nautilus-open-terminal.jpg" alt="效果图"></p>
<h1 id="5-安装镜像选择工具，这个工具会从所有已配置的镜像中选择速度最快的下载"><a href="#5-安装镜像选择工具，这个工具会从所有已配置的镜像中选择速度最快的下载" class="headerlink" title="5. 安装镜像选择工具，这个工具会从所有已配置的镜像中选择速度最快的下载"></a>5. 安装镜像选择工具，这个工具会从所有已配置的镜像中选择速度最快的下载</h1><p>fastestirror让yum在更新时先根据ping值进行判断，然后从最快响应的地址下载。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#yum install yum-plugin-fastestmirror</span><br></pre></td></tr></table></figure>
<p>注：安装priority yum的插件，用来设定安装软件时候软件仓库的优先级，一般是默认先从官方base或者镜像安装，然后从社区用户contribute的软件中安装，再从第三方软件仓库中安装。手动编辑 /etc/yum.repos.d/ 目录中后缀为.repo的文件来设置软件仓库的优先级， priority=N(N是整数，范围从1-99，数字越小代表优先级越高) 官方推荐配置是：[base], [addons], [updates], [extras] 这几部分 priority=1<br>[centosplus],[contrib] 这几部分priority=2<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#yum install yum-priorities</span><br></pre></td></tr></table></figure></p>
<h1 id="6-将用户添加到sudo用户组，取消sudo每次都输入密码的限制，需要root权限"><a href="#6-将用户添加到sudo用户组，取消sudo每次都输入密码的限制，需要root权限" class="headerlink" title="6. 将用户添加到sudo用户组，取消sudo每次都输入密码的限制，需要root权限"></a>6. 将用户添加到sudo用户组，取消sudo每次都输入密码的限制，需要root权限</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># vim /etc/sudoers</span><br></pre></td></tr></table></figure>
<p>找到root ALL=(ALL) ALL 在下一行加上 ‘username ALL=(ALL) ALL’ username 是要添加的用户名, 引号中的空格都为tab</p>
<p>每次sudo命令都提示是如根密码，移动到’#%wheel ALL=(ALL) ALL’ 这一行，去掉#注释，移动到’#%wheel ALL=(ALL)NOPASSWD:ALL’这一行，去掉#注释。保存后退出。</p>
<p>添加用户到wheel用户组<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># usermod -G wheel username</span><br></pre></td></tr></table></figure></p>
<h1 id="7-安装axelget插件"><a href="#7-安装axelget插件" class="headerlink" title="7. 安装axelget插件"></a>7. 安装axelget插件</h1><p>axelget是一个多线程下载工具，yum本身是单线程下载, 安装方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># yum install yum-axelget</span><br></pre></td></tr></table></figure>
<p>注意：在YUM的时可能会遇到很长时间都没有速度的现象，可以Ctrl+C。终止从当前站点的下载，然后会自动选择其他站点下载，速度往往快很多。</p>
<h1 id="8-加入第三方源rpmfusion"><a href="#8-加入第三方源rpmfusion" class="headerlink" title="8. 加入第三方源rpmfusion"></a>8. 加入第三方源rpmfusion</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># wget http://download1.rpmfusion.org/free/Fedora/rpmfusion-free-release-stable.noarch.rpm</span><br><span class="line"># wget http://download1.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-stable.noarch.rpm</span><br><span class="line">#rpm -ivh rpmfusion-free-release-stable.noarch.rpm</span><br><span class="line">#rpm -ivh rpmfusion-nonfree-release-stable.noarch.rpm</span><br></pre></td></tr></table></figure>
<h1 id="9-给LibreOffice安装中文字体"><a href="#9-给LibreOffice安装中文字体" class="headerlink" title="9. 给LibreOffice安装中文字体"></a>9. 给LibreOffice安装中文字体</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#yum install libreoffice-langpack-zh-Hans</span><br></pre></td></tr></table></figure>
<h1 id="10-安装开发工具-vim-gcc-g-cmake-make-python2-python3-lua-cscope-tags"><a href="#10-安装开发工具-vim-gcc-g-cmake-make-python2-python3-lua-cscope-tags" class="headerlink" title="10. 安装开发工具 vim gcc g++ cmake make python2 python3 lua cscope tags"></a>10. 安装开发工具 vim gcc g++ cmake make python2 python3 lua cscope tags</h1><p>直接用yum安装</p>
<h1 id="11-创建SSH密钥-加入github-设置git"><a href="#11-创建SSH密钥-加入github-设置git" class="headerlink" title="11. 创建SSH密钥 加入github 设置git"></a>11. 创建SSH密钥 加入github 设置git</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C &quot;youremail&quot;</span><br></pre></td></tr></table></figure>
<p>在~/.ssh下找到.pub文件，将其中的内容复制出来，打开github网站，并登陆，将其加入到github ssh keys中</p>
<p>测试下<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ ssh -T Git@github.com</span><br></pre></td></tr></table></figure></p>
<p>再设置下github账户名和email</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;yourname&quot;</span><br><span class="line">git config --global user.email &quot;youremail&quot;</span><br></pre></td></tr></table></figure>
<p>设置github参考另一篇文章’使git显示彩色’</p>
<h1 id="11-安装rz和sz命令"><a href="#11-安装rz和sz命令" class="headerlink" title="11.安装rz和sz命令"></a>11.安装rz和sz命令</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo yum install lrzsz</span><br></pre></td></tr></table></figure>
<h1 id="12-添加CentOS-SCLo软件集合仓库"><a href="#12-添加CentOS-SCLo软件集合仓库" class="headerlink" title="12.添加CentOS SCLo软件集合仓库"></a>12.添加CentOS SCLo软件集合仓库</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install centos-release-scl-rh centos-release-scl</span><br></pre></td></tr></table></figure>
<h1 id="13-安装man中文文档"><a href="#13-安装man中文文档" class="headerlink" title="13.安装man中文文档"></a>13.安装man中文文档</h1><p><a href="https://github.com/man-pages-zh/manpages-zh" target="_blank" rel="noopener">中文man手册</a><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo yum install man-pages-zh-CN</span><br></pre></td></tr></table></figure></p>
<p><code>.bashrc</code>加入别名<code>alias cman=&#39;man -M /usr/share/man/zh_CN&#39;</code></p>
<h1 id="gnome扩展管理"><a href="#gnome扩展管理" class="headerlink" title="gnome扩展管理"></a>gnome扩展管理</h1><p>需要安装浏览器插件GNOME Shell integration，再使用yum安装chrome-gnome-shell，即可访问<a href="https://extensions.gnome.org/" target="_blank" rel="noopener">extensions.gnome.org/</a>管理gnome插件<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo yum install chrome-gnome-shell</span><br></pre></td></tr></table></figure></p>
<h2 id="gnome扩展安装"><a href="#gnome扩展安装" class="headerlink" title="gnome扩展安装"></a>gnome扩展安装</h2><p>访问<a href="https://extensions.gnome.org/" target="_blank" rel="noopener">extensions.gnome.org/</a>安装插件</p>
<h1 id="gnome插件推荐"><a href="#gnome插件推荐" class="headerlink" title="gnome插件推荐"></a>gnome插件推荐</h1><ol>
<li>Applications Menu</li>
<li>Coverflow Alt-Tab</li>
<li>Dash to Dock</li>
<li>Dynamic Top Bar</li>
<li>NetSpeed</li>
<li>System Monitor</li>
<li>Window List</li>
<li>AlternateTab</li>
<li>Background Logo</li>
</ol>
<h2 id="gnome优化插件"><a href="#gnome优化插件" class="headerlink" title="gnome优化插件"></a>gnome优化插件</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo yum install gnome-tweak-tool</span><br></pre></td></tr></table></figure>
<p>可通过gnome优化工具打开窗口的最小化和最大化按钮<br>可通过gnome优化工具管理安装的插件</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ol>
<li><a href="http://blog.csdn.net/zhanghuoding/article/details/39999547" target="_blank" rel="noopener">安装Fedora 20桌面版并配置（gnome桌面环境）</a></li>
<li><a href="http://www.jquerycn.cn/a_7441" target="_blank" rel="noopener">Fedora 把用户添加到sudo用户组的方法</a></li>
<li><a href="http://blog.csdn.net/makenothing/article/details/8450417" target="_blank" rel="noopener">创建SSH密钥 </a></li>
<li><a href="https://blog.csdn.net/jack_nichao/article/details/77967159?locationNum=5&amp;fps=1" target="_blank" rel="noopener">Centos 7安装完成后需要做的事情</a></li>
<li><a href="https://blog.csdn.net/gatieme/article/details/51656707" target="_blank" rel="noopener">linux下man手册的安装和使用</a></li>
</ol>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>boost 库 内存管理 shared_ptr shared_array 3</title>
    <url>/2017/06/05/boost-shared-ptr/</url>
    <content><![CDATA[<h1 id="shared-ptr"><a href="#shared-ptr" class="headerlink" title="shared_ptr"></a>shared_ptr</h1><p>shared_ptr包装new操作符从堆上分配的动态对象，实现引用计数型的智能指针，可以被自由地拷贝和赋值，在任意地方共享它，当引用计数未0时，删除被包装的动态分配对象，可以被安全地放在标准容器中。</p>
<h2 id="1-类摘要"><a href="#1-类摘要" class="headerlink" title="1. 类摘要"></a>1. 类摘要</h2><p><img src="/Picture/shared_ptr_class_summary.jpg" alt="shared_ptr类摘要"></p>
<h2 id="2-操作函数"><a href="#2-操作函数" class="headerlink" title="2. 操作函数"></a>2. 操作函数</h2><p>shared_ptr用来管理new动态分配对象，重载了*和-&gt;操作符模拟原始指针行为，提供隐式bool类型转化判断指针有效性，get()获得原始指针，未提供指针算数操作。<br>shared_ptr有各种形式的构造函数</p>
<ul>
<li>无参的shared_ptr()创建持有空指针的shared_ptr。</li>
<li><code>shared_ptr(Y *)</code>获得指向类型T的指针p的管理权，同时引用计数置为1。要求Y类型必须能够转化为T类型。</li>
<li><code>shared_ptr(shared_ptr const &amp;r)</code>从另一个shared_ptr获得指针的管理权，同时引用计数加1，两个shared_ptr共享一个指针的管理权。</li>
<li><code>shared_ptr(std::auto_ptr&lt;Y&gt; &amp;r)</code>从一个<code>auto_ptr</code>获得指针管理权，引用计数置为1，<code>auto_ptr</code>自动失去管理权。</li>
<li>operator=赋值操作符从另一个shared_ptr或者<code>auto_ptr</code>获得指针管理权。</li>
<li><code>shared_ptr(Y *p, D d)</code>，参数d指定析构时的定制删除器，而不是简单的delete。</li>
</ul>
<p>shared_ptr的<code>reset()</code>函数将引用计数减1，停止对指针的共享，除非引用计数为0，否则不会发生删除操作。带参数的<code>reset()</code>对原指针引用计数减1，同时改为管理另一指针。<br>shared_ptr中<code>unique()</code>和<code>use_count()</code>检查引用计数，<code>unique()</code>在shared_ptr是指针的唯一拥有者时返回true，<code>use_count()</code>返回当前指针的引用计数。<code>use_count()</code>不提供高效率的操作，有时候不可用(极少数情况)。<code>unique()</code>总是可用的，而且速度比<code>use_count()==1</code>速度更快。<br>shared_ptr支持比较运算，等于、不等于、小于，基于内部保存的指针，shared_ptr可以被用于标准关联容器(set和map)。<br>shared_ptr指针转化<code>static_pointer_cast&lt;T&gt;()</code>、<code>const_pointer_cast&lt;T&gt;()</code>、<code>dynamic_pointer_cast&lt;T&gt;()</code>，和标准的转型操作<code>static_cast&lt;T&gt;</code>、<code>const_cast&lt;T&gt;</code>、<code>dynamic_cast&lt;T&gt;</code>类似，但返回的是转型后的shared_ptr。<br>shared_ptr支持流输出操作符<code>operator&lt;&lt;</code>，输出内部的指针值，方便调试。<br>shared_ptr提供基本的线程安全保证。</p>
<h2 id="3-用法"><a href="#3-用法" class="headerlink" title="3. 用法"></a>3. 用法</h2><h2 id="4-工厂函数"><a href="#4-工厂函数" class="headerlink" title="4. 工厂函数"></a>4. 工厂函数</h2><p>shared_ptr在<code>&lt;boost/make_shared.hpp&gt;</code>中提供了自由工厂函数<code>make_shared&lt;T&gt;()</code>，消除显示new的调用。<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="title">class</span>... <span class="title">Argss</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="title">shared_ptr</span>&lt;T&gt; <span class="title">make_shared</span>(<span class="title">Args</span> &amp;&amp; .. <span class="title">args</span>);</span></span><br></pre></td></tr></table></figure></p>
<p><code>make_shared()</code>函数最多可以接受10个参数，传递给类型T的构造函数，<code>创建shared_ptr&lt;T&gt;</code>的对象并返回。<code>make_shared()</code>函数比直接创建shared_ptr对象的方式快且高效，因为它内部仅分配一次内存。<br><code>allocate_shared()</code>比<code>make_shared()</code>多接受一个定制的内存分配器类型参数，其它方面相同。</p>
<h2 id="5-应用于标准容器"><a href="#5-应用于标准容器" class="headerlink" title="5. 应用于标准容器"></a>5. 应用于标准容器</h2><ul>
<li>将容器作为shared_ptr管理的对象。</li>
<li>将shared_ptr作为容器的元素。</li>
</ul>
<h2 id="6-应用于桥接模式"><a href="#6-应用于桥接模式" class="headerlink" title="6. 应用于桥接模式"></a>6. 应用于桥接模式</h2><p>桥接模式(brideg)是一种结构型设计模式，把类的具体实现细节对用于隐藏起来，达到类之间的最小耦合关系。可以将头文件的依赖关系降到最小，减少编译事件，而且可以不使用虚函数实现多态。</p>
<h2 id="7-应用于工厂模式"><a href="#7-应用于工厂模式" class="headerlink" title="7. 应用于工厂模式"></a>7. 应用于工厂模式</h2><p>工厂模式是一种创建性设计模式，包装new操作符的使用，让对象的创建集中在工程类或者工厂函数中，更容易的适应变化。</p>
<h2 id="8-定制删除器"><a href="#8-定制删除器" class="headerlink" title="8. 定制删除器"></a>8. 定制删除器</h2><p><code>shared_ptr(Y *p, D d)</code>第一个参数是被管理的指针，第二个删除器参数d则告诉shared_ptr在析构时不是使用delete操作指针p，而是要用d来操作，即把delte p换成d(p)。删除器d可以是函数对象、函数指针，只要能够像函数一样调用使得d(p)成立即可。对删除器的要求是必须是可拷贝的，不能抛出异常。shared_ptr提供自由函数<code>get_deleter(shared_ptr&lt;T&gt; const &amp;p)</code>，返回删除器指针。有了删除器可以实现管理任意资源。只要该资源提供它的释放操作，shared_ptr保证自动释放。</p>
<h2 id="9-高级议题"><a href="#9-高级议题" class="headerlink" title="9. 高级议题"></a>9. 高级议题</h2><h3 id="shared-ptr-1"><a href="#shared-ptr-1" class="headerlink" title="shared_ptr"></a>shared_ptr<void></void></h3><p><code>shared_ptr&lt;void&gt;</code>可以存储<code>void*</code>的指针，<code>而void*</code>型指针可以指向任意类型，因此<code>shared_ptr&lt;void&gt;</code>拥有了容纳任意类型的能力。但将指针存储为<code>void*</code>会丧失原来的类型信息，在使用时使用转型函数转为原来的指针，但这设计运行时动态类型转换，使代码不够安全，建议不要这样使用。</p>
<h3 id="删除器的高级用法"><a href="#删除器的高级用法" class="headerlink" title="删除器的高级用法"></a>删除器的高级用法</h3><p>基于<code>shared_ptr&lt;void&gt;</code>和定制删除器，shared_ptr可以实现退出作用域调用任意函数。</p>
<h3 id="其它高级用法"><a href="#其它高级用法" class="headerlink" title="其它高级用法"></a>其它高级用法</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span>     //让<span class="title">C</span>代理<span class="title">B</span>，对<span class="title">B</span>的方法做一次封装</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">B</span>;</span></span><br><span class="line">    boost::<span class="built_in">shared_ptr</span>&lt;B&gt; p;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    C();</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span>:</span>:B</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"B ctor :"</span>&lt;&lt;<span class="keyword">this</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">C::C():p(<span class="keyword">new</span> B)&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">C::print</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    p-&gt;print();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">E</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    E()&#123;<span class="built_in">cout</span>&lt;&lt;<span class="string">"E ctor"</span>&lt;&lt;<span class="built_in">endl</span>;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">g</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="keyword">virtual</span> ~E()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"E dtor"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">F</span> :</span> <span class="keyword">public</span> E</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"class F f"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">g</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"class F g"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">E* <span class="title">create1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (E*)(<span class="keyword">new</span> F);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">boost::<span class="built_in">shared_ptr</span>&lt;E&gt; <span class="title">create2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> boost::<span class="built_in">shared_ptr</span>&lt;E&gt;(<span class="keyword">new</span> F);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">G</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    G()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"ctor G :"</span>&lt;&lt;<span class="keyword">this</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ~G()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"dtor G :"</span>&lt;&lt;<span class="keyword">this</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DeleteG</span><span class="params">(G *g)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(g != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"delete G :"</span>&lt;&lt;g&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">delete</span> g;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AryF</span><span class="params">(<span class="keyword">void</span> * p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"AryF"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TestSharedPtr</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">boost::<span class="built_in">shared_ptr</span>&lt;<span class="keyword">int</span>&gt; <span class="title">sp1</span><span class="params">(<span class="keyword">new</span> <span class="keyword">int</span>(<span class="number">10</span>))</span></span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"sp1 unique :"</span>&lt;&lt;sp1.unique()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"sp1 use_count :"</span>&lt;&lt;sp1.use_count()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">boost::<span class="built_in">shared_ptr</span>&lt;<span class="keyword">int</span>&gt; <span class="title">sp2</span><span class="params">(sp1)</span></span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"sp1 unique :"</span>&lt;&lt;sp1.unique()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"sp1 use_count :"</span>&lt;&lt;sp1.use_count()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"sp2 unique :"</span>&lt;&lt;sp2.unique()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"sp2 use_count :"</span>&lt;&lt;sp2.use_count()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    sp2.reset();</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"sp2 reset after"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"sp1 unique :"</span>&lt;&lt;sp1.unique()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"sp1 use_count :"</span>&lt;&lt;sp1.use_count()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"sp2 unique :"</span>&lt;&lt;sp2.unique()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"sp2 use_count :"</span>&lt;&lt;sp2.use_count()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">boost::<span class="built_in">shared_ptr</span>&lt;A&gt; <span class="title">spA1</span><span class="params">(<span class="keyword">new</span> A())</span></span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"spA :"</span>&lt;&lt;spA1.get()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//工厂函数</span></span><br><span class="line">    boost::<span class="built_in">shared_ptr</span>&lt;A&gt; spA2 = boost::make_shared&lt;A&gt;();</span><br><span class="line"></span><br><span class="line">    boost::<span class="built_in">shared_ptr</span>&lt;A&gt; spA3 = boost::make_shared&lt;A, <span class="keyword">int</span>, <span class="keyword">int</span>&gt;(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//应用于标准容器</span></span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;boost::<span class="built_in">shared_ptr</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">v</span><span class="params">(<span class="number">3</span>)</span></span>;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; it : v)</span><br><span class="line">    &#123;</span><br><span class="line">        it = boost::make_shared&lt;<span class="keyword">int</span>&gt;(++i);</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;*(it)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    boost::<span class="built_in">shared_ptr</span>&lt;<span class="keyword">int</span>&gt; sp3 = v[<span class="number">2</span>];</span><br><span class="line">    *sp3 = <span class="number">100</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;*v[<span class="number">2</span>]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//应用于桥接模式</span></span><br><span class="line">    C c;</span><br><span class="line">    c.print();</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//应用于工厂模式</span></span><br><span class="line">        E * E1 = create1();</span><br><span class="line">        boost::<span class="built_in">shared_ptr</span>&lt;E&gt; E2 = create2();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">delete</span> (F*)E1;              <span class="comment">//E1必须手动调用delete 而E2在出作用域后自动调用 E的析构函数是protected的，所需需要转型为F再delete</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"桥接模式结束"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定制删除器</span></span><br><span class="line">    <span class="function">boost::<span class="built_in">shared_ptr</span>&lt;G&gt; <span class="title">pg</span><span class="params">(<span class="keyword">new</span> G(), DeleteG)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">boost::<span class="built_in">shared_ptr</span>&lt;<span class="keyword">void</span>&gt; <span class="title">pv</span><span class="params">(<span class="literal">NULL</span>, AryF)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="shared-array"><a href="#shared-array" class="headerlink" title="shared_array"></a>shared_array</h1><p>包装<code>new[]</code>操作符在堆上分配的动态数组，使用引用计数机制为动态数组提供代理，可在程序的生命周期里长期存在，直到没有任何引用后才释放内存。</p>
<h2 id="类摘要"><a href="#类摘要" class="headerlink" title="类摘要"></a>类摘要</h2><p><img src="/Picture/shared_array_class_summary.jpg" alt></p>
<ul>
<li>shared_array构造函数接受的指针必须是new[]的结果</li>
<li>提供operator[]操作符重载</li>
<li>析构函数使用delete[]，释放资源</li>
</ul>
<h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><p>最好使用<code>shared_ptr&lt;std::vector&gt;</code> 或者 <code>std::vector&lt;shared_ptr&gt;</code>来替代</p>
]]></content>
      <categories>
        <category>cpp</category>
      </categories>
      <tags>
        <tag>cpp</tag>
        <tag>boost</tag>
        <tag>智能指针</tag>
      </tags>
  </entry>
  <entry>
    <title>boost 库 内存管理 weak_ptr intrusive_ptr 4</title>
    <url>/2017/06/06/boost-weak-ptr/</url>
    <content><![CDATA[<h1 id="weak-ptr"><a href="#weak-ptr" class="headerlink" title="weak_ptr"></a>weak_ptr</h1><p>weak_ptr是为了配合shared_ptr而引入的一种智能指针，因为weak_ptr不具有普通指针的行为，没有重载<code>operator*</code>和<code>operator-&gt;</code>。weak_ptr的最大作用用来协助shared_ptr工作，观测资源的使用情况。</p>
<h2 id="类摘要"><a href="#类摘要" class="headerlink" title="类摘要"></a>类摘要</h2><p><img src="/Picture/weak_ptr_class_summary.jpg" alt="weak_ptr类摘要"></p>
<h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><p>weak_ptr被设计为与shared_ptr共同工作，可从一个shared_ptr或者weak_ptr对象构造，获得对象的观测权，但weak_ptr没有共享资源，weak_ptr不会引起指针引用计数的增加，weak_ptr析构也不会导致指针引用计数的减少。<br>weak_ptr成员函数use_count()可以观测资源的引用计数。weak_ptr成员函数expired()的功能等价于use_count()==0，表示观测的资源已经不复存在，但expired的速度更快。<br>weak_ptr没有重载<code>operator*</code>和<code>-&gt;</code>，不共享指针，不能操作资源。weak_ptr可以使用成员函数lock()从观测的shared_ptr获得可用的shared_ptr对象，操作资源，当<code>expired()==true</code>时，lock函数返回存储空指针的shared_ptr。</p>
<h2 id="获得this的shared-ptr"><a href="#获得this的shared-ptr" class="headerlink" title="获得this的shared_ptr"></a>获得this的shared_ptr</h2><p>weak_ptr的一个重要用途是获得this指针的shared_ptr，使对象自己能够生产shared_ptr管理自己，对象使用weak_ptr观测this指针，在需要的时候调用lock()函数，返回符合要求的shared_ptr供外界使用。<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">enable_shared_from_this</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">shared_ptr</span>&lt;T&gt; <span class="title">shared_from_this</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>想被shared_ptr管理的类从enable_shared_from_this继承，成员函数shared_from_this()返回this的shared_ptr。不能从普通对象使用shared_from_this()获取shared_ptr，否则运行时会导致shared_ptr析构时企图删除一个栈上分配的对象。</p>
<h1 id="intrusive-ptr"><a href="#intrusive-ptr" class="headerlink" title="intrusive_ptr"></a>intrusive_ptr</h1><p>intrusive_ptr是侵入式的引用计数型指针，应用于：</p>
<ul>
<li>对内存占用的要求非常严格，要求必须与原始指针一样。</li>
<li>现存代码已经有了引用计数机制管理的对象。</li>
</ul>
<p>Boost库不推荐使用intrusive_ptr，shared_ptr足够啦。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">H</span> :</span> <span class="keyword">public</span> boost::enable_shared_from_this&lt;H&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    H(<span class="keyword">int</span> _n) : n(_n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"H ctor"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"H n:"</span>&lt;&lt;n&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TestWeakPtr</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">boost::<span class="built_in">shared_ptr</span>&lt;<span class="keyword">int</span>&gt; <span class="title">sp1</span><span class="params">(<span class="keyword">new</span> <span class="keyword">int</span>(<span class="number">10</span>))</span></span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"sp1 use_count:"</span>&lt;&lt;sp1.use_count()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="function">boost::weak_ptr&lt;<span class="keyword">int</span>&gt; <span class="title">wp1</span><span class="params">(sp1)</span></span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"sp1 use_count:"</span>&lt;&lt;sp1.use_count()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"wp1 use_count:"</span>&lt;&lt;wp1.use_count()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!wp1.expired())</span><br><span class="line">    &#123;</span><br><span class="line">        boost::<span class="built_in">shared_ptr</span>&lt;<span class="keyword">int</span>&gt; sp2 = wp1.lock();</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"sp1 use_count:"</span>&lt;&lt;sp1.use_count()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"sp2 use_count:"</span>&lt;&lt;sp2.use_count()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"sp1 use_count:"</span>&lt;&lt;sp1.use_count()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    sp1.reset();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"wp1 use_count:"</span>&lt;&lt;wp1.use_count()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    boost::<span class="built_in">shared_ptr</span>&lt;H&gt; sh = boost::make_shared&lt;H&gt;(<span class="number">314</span>);</span><br><span class="line">    sh-&gt;print();</span><br><span class="line">    boost::<span class="built_in">shared_ptr</span>&lt;H&gt; sh2 = sh-&gt;shared_from_this();</span><br><span class="line">    sh-&gt;n = <span class="number">1000</span>;</span><br><span class="line">    sh2-&gt;print();</span><br><span class="line">    sh-&gt;print();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>cpp</category>
      </categories>
      <tags>
        <tag>cpp</tag>
        <tag>boost</tag>
        <tag>智能指针</tag>
      </tags>
  </entry>
  <entry>
    <title>skynet</title>
    <url>/2017/06/08/skynet/</url>
    <content><![CDATA[<h1 id="skynet配置文件说明"><a href="#skynet配置文件说明" class="headerlink" title="skynet配置文件说明"></a>skynet配置文件说明</h1><h2 id="简单配置文件示例"><a href="#简单配置文件示例" class="headerlink" title="简单配置文件示例"></a>简单配置文件示例</h2><pre><code>root = &quot;./&quot;
thread = 8
logger = nil
harbor = 1
address = &quot;127.0.0.1:2526&quot;
master = &quot;127.0.0.1:2013&quot;
start = &quot;main&quot;  -- main script
bootstrap = &quot;snlua bootstrap&quot;   -- The service for bootstrap
standalone = &quot;0.0.0.0:2013&quot;
luaservice = root..&quot;service/?.lua;&quot;..root..&quot;test/?.lua;&quot;..root..&quot;examples/?.lua&quot;
lualoader = &quot;lualib/loader.lua&quot;
snax = root..&quot;examples/?.lua;&quot;..root..&quot;test/?.lua&quot;
cpath = root..&quot;cservice/?.so&quot;
</code></pre><h2 id="必要配置项"><a href="#必要配置项" class="headerlink" title="必要配置项"></a>必要配置项</h2><ul>
<li>thread 启动多少个工作线程。通常不要将它配置超过你实际拥有的 CPU 核心数。</li>
<li>bootstrap skynet 启动的第一个服务以及其启动参数。默认配置为 snlua bootstrap ，即启动一个名为 bootstrap 的 lua 服务。通常指的是 service/bootstrap.lua 这段代码。</li>
<li>cpath 用 C 编写的服务模块的位置，通常指 cservice 下那些 .so 文件。如果你的系统的动态库不是以 .so 为后缀，需要做相应的修改。这个路径可以配置多项，以 ; 分割。</li>
</ul>
<h2 id="bootstrap代码中用到的一些配置项"><a href="#bootstrap代码中用到的一些配置项" class="headerlink" title="bootstrap代码中用到的一些配置项"></a>bootstrap代码中用到的一些配置项</h2><ul>
<li>logger 它决定了 skynet 内建的 skynet_error 这个 C API 将信息输出到什么文件中。如果 logger 配置为 nil ，将输出到标准输出。你可以配置一个文件名来将信息记录在特定文件中。</li>
<li>logservice 默认为 “logger” ，你可以配置为你定制的 log 服务（比如加上时间戳等更多信息）。可以参考 service_logger.c 来实现它。注：如果你希望用 lua 来编写这个服务，可以在这里填写 snlua ，然后在 logger 配置具体的 lua 服务的名字。在 examples 目录下，有 config.userlog 这个范例可供参考。</li>
<li>logpath 配置一个路径，当你运行时为一个服务打开 log 时，这个服务所有的输入消息都会被记录在这个目录下，文件名为服务地址。</li>
<li>standalone 如果把这个 skynet 进程作为主进程启动（skynet 可以由分布在多台机器上的多个进程构成网络），那么需要配置standalone 这一项，表示这个进程是主节点，它需要开启一个控制中心，监听一个端口，让其它节点接入。</li>
<li>master 指定 skynet 控制中心的地址和端口，如果你配置了 standalone 项，那么这一项通常和 standalone 相同。</li>
<li>address 当前 skynet 节点的地址和端口，方便其它节点和它组网。注：即使你只使用一个节点，也需要开启控制中心，并额外配置这个节点的地址和端口。</li>
<li>harbor 可以是 1-255 间的任意整数。一个 skynet 网络最多支持 255 个节点。每个节点有必须有一个唯一的编号。如果 harbor 为 0 ，skynet 工作在单节点模式下。此时 master 和 address 以及 standalone 都不必设置。</li>
<li>start 这是 bootstrap 最后一个环节将启动的 lua 服务，也就是你定制的 skynet 节点的主程序。默认为 main ，即启动 main.lua 这个脚本。这个 lua 服务的路径由下面的 luaservice 指定。</li>
</ul>
<h2 id="集群服务用到的配置项"><a href="#集群服务用到的配置项" class="headerlink" title="集群服务用到的配置项"></a>集群服务用到的配置项</h2><ul>
<li>cluster 它决定了集群配置文件的路径。</li>
</ul>
<h2 id="lua-服务由-snlua-提供，它会查找一些配置项以加载-lua-代码"><a href="#lua-服务由-snlua-提供，它会查找一些配置项以加载-lua-代码" class="headerlink" title="lua 服务由 snlua 提供，它会查找一些配置项以加载 lua 代码"></a>lua 服务由 snlua 提供，它会查找一些配置项以加载 lua 代码</h2><ul>
<li>lualoader 用哪一段 lua 代码加载 lua 服务。通常配置为 lualib/loader.lua ，再由这段代码解析服务名称，进一步加载 lua 代码。snlua 会将下面几个配置项取出，放在初始化好的 lua 虚拟机的全局变量中。具体可参考实现。<ul>
<li>SERVICE_NAME 第一个参数，通常是服务名。</li>
<li>LUA_PATH config 文件中配置的 lua_path 。</li>
<li>LUA_CPATH config 文件中配置的 lua_cpath 。</li>
<li>LUA_PRELOAD config 文件中配置的 preload 。</li>
<li>LUA_SERVICE config 文件中配置的 luaservice 。</li>
</ul>
</li>
<li>luaservice lua 服务代码所在的位置。可以配置多项，以 ; 分割。 如果在创建 lua 服务时，以一个目录而不是单个文件提供，最终找到的路径还会被添加到 package.path 中。比如，在编写 lua 服务时，有时候会希望把该服务用到的库也放到同一个目录下。</li>
<li>lua_path 将添加到 package.path 中的路径，供 require 调用。</li>
<li>lua_cpath 将添加到 package.cpath 中的路径，供 require 调用。</li>
<li>preload 在设置完 package 中的路径后，加载 lua 服务代码前，loader 会尝试先运行一个 preload 制定的脚本，默认为空。</li>
<li>snax 用 snax 框架编写的服务的查找路径。</li>
<li>profile 默认为 true, 可以用来统计每个服务使用了多少 cpu 时间。在 DebugConsole 中可以查看。会对性能造成微弱的影响，设置为 false 可以关闭这个统计。</li>
</ul>
<p>可以把一些配置选项配置在环境变量中。比如，你可以把 thread 配置在 SKYNET_THREAD 这个环境变量里。你可以在 config 文件中写：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">thread=$SKYNET_THREAD</span><br></pre></td></tr></table></figure></p>
<p>在 skynet 启动时，就会用 SKYNET_THREAD 这个环境变量的值替换掉 config 中的 $SKYNET_THREAD 了。</p>
<h2 id="后台模式"><a href="#后台模式" class="headerlink" title="后台模式"></a>后台模式</h2><ul>
<li>daemon 配置 daemon = “./skynet.pid” 可以以后台模式启动 skynet 。注意，同时请配置 logger 项输出 log 。</li>
</ul>
<h1 id="skynet目录结构"><a href="#skynet目录结构" class="headerlink" title="skynet目录结构"></a>skynet目录结构</h1><ol>
<li>3rd：第三方代码，主要生成一些给lua用的so动态库</li>
<li>lualib：lua库</li>
<li>lualib-src =&gt; luaclib：给lua用的c库</li>
<li>service：lua服务</li>
<li>service-src =&gt; cservice：c服务</li>
<li>skynet-src =&gt; skynet：主程序</li>
<li>Makefile</li>
<li>client-src =&gt; client：测试客户端</li>
<li>examples：示例工程</li>
</ol>
<h1 id="skynet重要文件"><a href="#skynet重要文件" class="headerlink" title="skynet重要文件"></a>skynet重要文件</h1><ol>
<li>skynet_server.c：管理服务</li>
<li>skynet_handle.c：管理服务唯一的handle</li>
<li>skynet_module.c：启动c编写的so模块</li>
<li>skynet_monitor.c：监视服务死循环</li>
<li>skynet_mq.c：消息队列</li>
<li>skynet_timer.c：定时器</li>
<li>skynet_socket.c：Socket</li>
<li>skynet_master.c：不同skynet节点服务名字中心服务</li>
<li>skynet_harbor.c：不同skynet节点通讯</li>
</ol>
<h1 id="skynet重要模块和服务"><a href="#skynet重要模块和服务" class="headerlink" title="skynet重要模块和服务"></a>skynet重要模块和服务</h1><ol>
<li>gate.so：为整个skynet提供socket功能</li>
<li>snlua.so：启动多个lua服务</li>
<li>launcher.lua：在lua中启动服务</li>
</ol>
<h1 id="skynet重要库"><a href="#skynet重要库" class="headerlink" title="skynet重要库"></a>skynet重要库</h1><ol>
<li>skynet.lua：lua常用功能封装</li>
<li>skynet.so：lua调用skynet功能</li>
</ol>
]]></content>
      <categories>
        <category>other</category>
      </categories>
      <tags>
        <tag>other</tag>
      </tags>
  </entry>
  <entry>
    <title>SGI STL 标准库 空间配置器 1</title>
    <url>/2017/06/07/stl-alloc-1/</url>
    <content><![CDATA[<h1 id="STL-空间配置器"><a href="#STL-空间配置器" class="headerlink" title="STL 空间配置器"></a>STL 空间配置器</h1><p><a href="https://github.com/CaseZheng/SourceCodeAnalysis" target="_blank" rel="noopener">github源码分析仓库</a></p>
<p>STL实现了两个空间配置器，<code>std::allocator</code>和<code>std::alloc</code>，<code>std::allocator</code>是STL标准的空间配置器，是对C++的<code>::operator new</code>和<code>::operator delete</code>的简单封装。<code>std::alloc</code>是SGI自定义的特殊的空间配置器。<code>std::alloc</code>是SGI STL各个容器的缺省空间配置器。</p>
<h2 id="C-new和delete-在alloc中的分解"><a href="#C-new和delete-在alloc中的分解" class="headerlink" title="C++ new和delete 在alloc中的分解"></a>C++ new和delete 在alloc中的分解</h2><p>C++内存配置操作和释放操作new和delte，分别包含两阶段操作：<br>对new</p>
<ol>
<li>调用<code>::operator new</code>分配空间</li>
<li>调用对象的构造函数</li>
</ol>
<p>对delete</p>
<ol>
<li>调用对象的析构函数</li>
<li>调用<code>::operator delete</code>释放空间</li>
</ol>
<p>STL alloc将new与delete的两个阶段区分开来，内存配置操作<code>alloc::allocate()</code>，内存释放操作<code>alloc::deallocate()</code>，对象构造<code>::construct()</code>，对象析构<code>::destroy()</code></p>
<h2 id="构造和析构工具-construct-和destroy"><a href="#构造和析构工具-construct-和destroy" class="headerlink" title="构造和析构工具 construct()和destroy()"></a>构造和析构工具 construct()和destroy()</h2><p>源代码<code>&lt;stl_construct.h&gt;</code>的部分内容<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;new.h&gt;</span></span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">T1</span>, <span class="title">class</span> _<span class="title">T2</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">void</span> _<span class="title">Construct</span>(_<span class="title">T1</span>* __<span class="title">p</span>, <span class="title">const</span> _<span class="title">T2</span>&amp; __<span class="title">value</span>) &#123;</span></span><br><span class="line">  <span class="keyword">new</span> ((<span class="keyword">void</span>*) __p) _T1(__value);   <span class="comment">//调用 T1::T1(value) 在__p所指的内存空间上构造T1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">T1</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">void</span> _<span class="title">Construct</span>(_<span class="title">T1</span>* __<span class="title">p</span>) &#123;</span></span><br><span class="line">  <span class="keyword">new</span> ((<span class="keyword">void</span>*) __p) _T1();          <span class="comment">//调用 T1::T1() 在__p所指的内存空间上构造T1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">Tp</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">void</span> _<span class="title">Destroy</span>(_<span class="title">Tp</span>* __<span class="title">pointer</span>) &#123;</span></span><br><span class="line">  __pointer-&gt;~_Tp();                <span class="comment">//调用析构函数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//需要调用析构函数 有non-trivial destrucotr</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">ForwardIterator</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span></span></span><br><span class="line"><span class="class">__<span class="title">destroy_aux</span>(_<span class="title">ForwardIterator</span> __<span class="title">first</span>, _<span class="title">ForwardIterator</span> __<span class="title">last</span>, __<span class="title">false_type</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">for</span> ( ; __first != __last; ++__first)</span><br><span class="line">    destroy(&amp;*__first);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//不需要调用析构函数 有trivial destrucotr</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">ForwardIterator</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">void</span> __<span class="title">destroy_aux</span>(_<span class="title">ForwardIterator</span>, _<span class="title">ForwardIterator</span>, __<span class="title">true_type</span>) &#123;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断元素的数值型别(value type)调用具体的函数</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">ForwardIterator</span>, <span class="title">class</span> _<span class="title">Tp</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">void</span></span></span><br><span class="line"><span class="class">__<span class="title">destroy</span>(_<span class="title">ForwardIterator</span> __<span class="title">first</span>, _<span class="title">ForwardIterator</span> __<span class="title">last</span>, _<span class="title">Tp</span>*)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">typedef</span> <span class="keyword">typename</span> __type_traits&lt;_Tp&gt;::has_trivial_destructor</span><br><span class="line">          _Trivial_destructor;</span><br><span class="line">  __destroy_aux(__first, __last, _Trivial_destructor());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//接受两个迭代器，找出元素的数值型别，根据__type_traits&lt;&gt;调用最合适的函数</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">ForwardIterator</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">void</span> _<span class="title">Destroy</span>(_<span class="title">ForwardIterator</span> __<span class="title">first</span>, _<span class="title">ForwardIterator</span> __<span class="title">last</span>) &#123;</span></span><br><span class="line">  __destroy(__first, __last, __VALUE_TYPE(__first));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//对内置类型的特化版本</span></span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">void</span> _Destroy(<span class="keyword">char</span>*, <span class="keyword">char</span>*) &#123;&#125;</span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">void</span> _Destroy(<span class="keyword">int</span>*, <span class="keyword">int</span>*) &#123;&#125;</span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">void</span> _Destroy(<span class="keyword">long</span>*, <span class="keyword">long</span>*) &#123;&#125;</span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">void</span> _Destroy(<span class="keyword">float</span>*, <span class="keyword">float</span>*) &#123;&#125;</span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">void</span> _Destroy(<span class="keyword">double</span>*, <span class="keyword">double</span>*) &#123;&#125;</span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">void</span> _Destroy(<span class="keyword">wchar_t</span>*, <span class="keyword">wchar_t</span>*) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">T1</span>, <span class="title">class</span> _<span class="title">T2</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">void</span> <span class="title">construct</span>(_<span class="title">T1</span>* __<span class="title">p</span>, <span class="title">const</span> _<span class="title">T2</span>&amp; __<span class="title">value</span>) &#123;</span></span><br><span class="line">  _Construct(__p, __value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">T1</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">void</span> <span class="title">construct</span>(_<span class="title">T1</span>* __<span class="title">p</span>) &#123;</span></span><br><span class="line">  _Construct(__p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">Tp</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">void</span> <span class="title">destroy</span>(_<span class="title">Tp</span>* __<span class="title">pointer</span>) &#123;</span></span><br><span class="line">  _Destroy(__pointer);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">ForwardIterator</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">void</span> <span class="title">destroy</span>(_<span class="title">ForwardIterator</span> __<span class="title">first</span>, _<span class="title">ForwardIterator</span> __<span class="title">last</span>) &#123;</span></span><br><span class="line">  _Destroy(__first, __last);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><code>destroy(_Tp *)</code>直接调用<code>_Destroy(_Tp *)</code>执行析构函数。<br><code>destroy(_ForwardIterator, _ForwardIterator)</code>有特化版本则直接调用，否则调用<code>_Destroy(_ForwardIterator, _ForwardIterator)</code>，通过<code>__VALUE_TYPE()</code>得到要析构对象的值类型，调用<code>__destroy(_ForwardIterator __first，_ForwardIterator __last, _Tp )</code>，使用类型萃取，通过<code>_Trivial_destructor()</code>区分调用<code>__destroy_aux(_ForwardIterator, _ForwardIterator, __true_type)</code>或者调用<code>__destroy_aux(_ForwardIterator, _ForwardIterator, __false_type)</code>。</p>
<p><code>construct(_T1*, const _T2&amp;)</code>调用<code>_Construct(_T1* __p, const _T2&amp; __value)</code>，执行<code>new ((void*) __p) _T1(__value)</code>，构造一个对象。<br><code>construct(_T1*)调用_Construct(_T1* __p)</code>，执行<code>new ((void*) __p) _T1()</code>，构造一个对象。</p>
<h2 id="空间的配置和释放"><a href="#空间的配置和释放" class="headerlink" title="空间的配置和释放"></a>空间的配置和释放</h2><p>对象构造前的空间配置和对象析构后的空间释放，由<code>&lt;stl_alloc.h&gt;</code>负责。C++的内存配置基本操作是<code>::operator new()</code>、内存释放操作是<code>::operator delete()</code>，相当于C的<code>malloc()</code>和<code>free()</code>函数，SGI用<code>malloc()</code>和<code>free()</code>完成内存的配置和释放。<br>SGI设计双层空间配置器，解决小块内存可能造成的内存碎片问题，第一级配置器直接使用<code>malloc()</code>和<code>free()</code>，第二级配置器根据不同情况采用不同策略，当要配置的内存块大于<strong>128b</strong>，调用第一次配置器，当配置的内存块小于128b，则采用memory pool整理方式。<code>__USE_MALLOC</code>用来控制配置器的使用，如果定义了<code>__USE_MALLOC</code>则只开放第一级空间配置器。<br>为了使配置器的接口符合STL规格，SGI为alloc包装了接口：<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> __malloc_alloc_template&lt;<span class="number">0</span>&gt; malloc_alloc;</span><br><span class="line"></span><br><span class="line"><span class="meta"># <span class="meta-keyword">ifdef</span> __USE_MALLOC</span></span><br><span class="line"><span class="comment">// 定义__USE_MALLOC则将__malloc_alloc_template定义为alloc</span></span><br><span class="line"><span class="keyword">typedef</span> malloc_alloc alloc;</span><br><span class="line"><span class="meta"># <span class="meta-keyword">else</span></span></span><br><span class="line"><span class="comment">// 否则将__default_alloc_template定义为alloc</span></span><br><span class="line"><span class="keyword">typedef</span> __default_alloc_template&lt;__NODE_ALLOCATOR_THREADS, <span class="number">0</span>&gt; alloc;</span><br><span class="line"><span class="meta"># <span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> _<span class="title">Tp</span>, <span class="title">class</span> _<span class="title">Alloc</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">simple_alloc</span> &#123;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">static</span> _Tp* <span class="title">allocate</span><span class="params">(<span class="keyword">size_t</span> __n)</span></span></span><br><span class="line"><span class="function">      </span>&#123; <span class="keyword">return</span> <span class="number">0</span> == __n ? <span class="number">0</span> : (_Tp*) _Alloc::allocate(__n * <span class="keyword">sizeof</span> (_Tp)); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> _Tp* <span class="title">allocate</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function">      </span>&#123; <span class="keyword">return</span> (_Tp*) _Alloc::allocate(<span class="keyword">sizeof</span> (_Tp)); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">deallocate</span><span class="params">(_Tp* __p, <span class="keyword">size_t</span> __n)</span></span></span><br><span class="line"><span class="function">      </span>&#123; <span class="keyword">if</span> (<span class="number">0</span> != __n) _Alloc::deallocate(__p, __n * <span class="keyword">sizeof</span> (_Tp)); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">deallocate</span><span class="params">(_Tp* __p)</span></span></span><br><span class="line"><span class="function">      </span>&#123; _Alloc::deallocate(__p, <span class="keyword">sizeof</span> (_Tp)); &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>simple<em>alloc的四个成员函数都是单纯的转调用，调用传递给配置器。同时将要配置元素的个数<code>__n</code>转化为要配置的空间大小``(__n*sizeof(_Tp</em>))<code>。实际使用时都调用</code>simple_alloc``。</p>
<p>一级空间配置器 <code>__malloc_alloc_template</code></p>
<ol>
<li><code>allocate()</code>直接使用<code>malloc()</code>，<code>deallocate()</code>直接使用<code>free()</code></li>
<li>模拟C++的<code>set_new_handler()</code>处理内存不足的情况</li>
</ol>
<p>二级空间配置器 <code>__default_alloc_template</code></p>
<ol>
<li>维护16个自由链表，负责16种小块内存的配置，内存池用malloc配置，如果内存不足，调用一级空间配置器</li>
<li>如果需要配置的内存块大于128b，直接调用一级空间配置器</li>
</ol>
<h2 id="一级空间配置器"><a href="#一级空间配置器" class="headerlink" title="一级空间配置器"></a>一级空间配置器</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//没有template型别参数 非型别参数__inst未使用</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">int</span> __inst&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> __<span class="title">malloc_alloc_template</span> &#123;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"></span><br><span class="line">  <span class="comment">//函数指针 所代表的函数用来处理内存不足的情况</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">void</span>* _S_oom_malloc(<span class="keyword">size_t</span>);</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">void</span>* _S_oom_realloc(<span class="keyword">void</span>*, <span class="keyword">size_t</span>);</span><br><span class="line">  <span class="function"><span class="keyword">static</span> <span class="title">void</span> <span class="params">(* __malloc_alloc_oom_handler)</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">static</span> <span class="keyword">void</span>* <span class="title">allocate</span><span class="params">(<span class="keyword">size_t</span> __n)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">void</span>* __result = <span class="built_in">malloc</span>(__n);       <span class="comment">//一级配置器直接使用malloc()</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="number">0</span> == __result) __result = _S_oom_malloc(__n);   <span class="comment">//内存不足，调用_S_oom_malloc</span></span><br><span class="line">    <span class="keyword">return</span> __result;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">deallocate</span><span class="params">(<span class="keyword">void</span>* __p, <span class="keyword">size_t</span> <span class="comment">/* __n */</span>)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="built_in">free</span>(__p);      <span class="comment">//一级配置器直接使用free()释放空间</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">static</span> <span class="keyword">void</span>* <span class="title">reallocate</span><span class="params">(<span class="keyword">void</span>* __p, <span class="keyword">size_t</span> <span class="comment">/* old_sz */</span>, <span class="keyword">size_t</span> __new_sz)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">void</span>* __result = <span class="built_in">realloc</span>(__p, __new_sz);        <span class="comment">//一级配置器直接使用realloc()</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="number">0</span> == __result) __result = _S_oom_realloc(__p, __new_sz);    <span class="comment">//空间不足，调用_S_oom_realloc()</span></span><br><span class="line">    <span class="keyword">return</span> __result;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//设置out-of-memory handler 仿真C++ set_new_handler()</span></span><br><span class="line">  <span class="function"><span class="keyword">static</span> <span class="title">void</span> <span class="params">(* __set_malloc_handler(<span class="keyword">void</span> (*__f)()))</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">void</span> (* __old)() = __malloc_alloc_oom_handler;</span><br><span class="line">    __malloc_alloc_oom_handler = __f;</span><br><span class="line">    <span class="keyword">return</span>(__old);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始值设为0</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">int</span> __inst&gt;</span><br><span class="line"><span class="keyword">void</span> (* __malloc_alloc_template&lt;__inst&gt;::__malloc_alloc_oom_handler)() = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">int</span> __inst&gt;</span><br><span class="line"><span class="keyword">void</span>*</span><br><span class="line">__malloc_alloc_template&lt;__inst&gt;::_S_oom_malloc(<span class="keyword">size_t</span> __n)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">void</span> (* __my_malloc_handler)();</span><br><span class="line">    <span class="keyword">void</span>* __result;</span><br><span class="line">    <span class="comment">//如果存在__malloc_alloc_oom_handler则不断调用，尝试释放、配置、再释放、再配置，</span></span><br><span class="line">    <span class="comment">//直到分配成功。 否则 抛出异常 或者 执行exit(1)退出程序。</span></span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        __my_malloc_handler = __malloc_alloc_oom_handler;</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">0</span> == __my_malloc_handler) &#123; __THROW_BAD_ALLOC; &#125;</span><br><span class="line">        (*__my_malloc_handler)();</span><br><span class="line">        __result = <span class="built_in">malloc</span>(__n);</span><br><span class="line">        <span class="keyword">if</span> (__result) <span class="keyword">return</span>(__result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">int</span> __inst&gt;</span><br><span class="line"><span class="keyword">void</span>* __malloc_alloc_template&lt;__inst&gt;::_S_oom_realloc(<span class="keyword">void</span>* __p, <span class="keyword">size_t</span> __n)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">void</span> (* __my_malloc_handler)();</span><br><span class="line">    <span class="keyword">void</span>* __result;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果存在__malloc_alloc_oom_handler则不断调用，尝试释放、配置、再释放、再配置，</span></span><br><span class="line">    <span class="comment">//直到分配成功。 否则 抛出异常 或者 执行exit(1)退出程序。</span></span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        __my_malloc_handler = __malloc_alloc_oom_handler;</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">0</span> == __my_malloc_handler) &#123; __THROW_BAD_ALLOC; &#125;</span><br><span class="line">        (*__my_malloc_handler)();</span><br><span class="line">        __result = <span class="built_in">realloc</span>(__p, __n);</span><br><span class="line">        <span class="keyword">if</span> (__result) <span class="keyword">return</span>(__result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 直接将参数inst指定为0</span></span><br><span class="line"><span class="keyword">typedef</span> __malloc_alloc_template&lt;<span class="number">0</span>&gt; malloc_alloc;</span><br></pre></td></tr></table></figure>
<p>第一级空间配置器以malloc()、free()、realloc()等C函数执行实际的内存配置、释放、重配置操作，并实现类似C++ new-handler的机制。因为它未使用<code>::operator new</code>配置内存，所以不能直接运用C++ new-handler。C++ new-handler机制，要求系统在内存配置需求无法被满足时，调用一个指定的函数。</p>
<h2 id="第二级空间配置器"><a href="#第二级空间配置器" class="headerlink" title="第二级空间配置器"></a>第二级空间配置器</h2><p>第二级空间配置器避免太多小内存块造成内存碎片。<br>SGI第二级配置器，如果配置内存块大于128B时，调用第一级配置器处理，当配置内存块小于128B时，用内存池管理，即每次配置一大块内存，并维护对应的自由链表(free-list)，下次再分配相同大小的内存快时，从free-list拨出，释放小块内存则加入到free-list中。为了方便管理，SGI二级配置器，将任何小块内存调整为8的倍数，并维护16个free-list，各自管理大小分别为8,16,24,32,40,48,56,64,72,80,88,96,104,112,120,128B的小块内存。<br>free-list节点结构：<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">union</span> _Obj &#123;</span><br><span class="line">    <span class="keyword">union</span> _Obj* _M_free_list_link;</span><br><span class="line">    <span class="keyword">char</span> _M_client_data[<span class="number">1</span>];    <span class="comment">/* The client sees this.        */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>使用union，从第一个字段看，_Obj可看做一个指针，指向相同形式的另一个_Obj，从第二个字段看，指向实际内存。不会为了维护联播所必须的指针造成内存的另一种浪费。<br>空间配置函数allocate()首先判断申请内存块的大小，大于128B，调用第一级空间配置器，小于128B检查对应的free-list，如果free-list有可用内存块，直接拿来用，如果没有，将区块大小上调至8的倍数，调用_S_refill()重新为free-list重新填充空间。<br>空间释放函数deallocate()首先判断内存块大小，大于128B调用第一级配置器，小于128B找到对应free-list将区块回收。<br>填充操作和内存池的实现看下面代码(附注释)<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//threads用于多线程环境</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">bool</span> threads, <span class="keyword">int</span> inst&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> __<span class="title">default_alloc_template</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">enum</span> &#123;_ALIGN = <span class="number">8</span>&#125;;</span><br><span class="line">    <span class="keyword">enum</span> &#123;_MAX_BYTES = <span class="number">128</span>&#125;;</span><br><span class="line">    <span class="keyword">enum</span> &#123;_NFREELISTS = <span class="number">16</span>&#125;; <span class="comment">// _MAX_BYTES/_ALIGN</span></span><br><span class="line">  <span class="comment">//将__bytes上调至8的倍数</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">size_t</span></span><br><span class="line">  _S_round_up(<span class="keyword">size_t</span> __bytes)</span><br><span class="line">    &#123; <span class="keyword">return</span> (((__bytes) + (<span class="keyword">size_t</span>) _ALIGN<span class="number">-1</span>) &amp; ~((<span class="keyword">size_t</span>) _ALIGN - <span class="number">1</span>)); &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//free-lists的节点</span></span><br><span class="line">  <span class="keyword">union</span> _Obj &#123;</span><br><span class="line">        <span class="keyword">union</span> _Obj* _M_free_list_link;      <span class="comment">//指向下一个可用的相同大小的内存块</span></span><br><span class="line">        <span class="keyword">char</span> _M_client_data[<span class="number">1</span>];    <span class="comment">/* The client sees this.        */</span></span><br><span class="line">  &#125;;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">// 16个free_lists</span></span><br><span class="line">    <span class="keyword">static</span> _Obj* __STL_VOLATILE _S_free_list[_NFREELISTS];</span><br><span class="line">    <span class="comment">//根据要分配的内存块大小__bytes决定使用第n号free_lists。n从1起算。</span></span><br><span class="line">    <span class="keyword">static</span>  <span class="keyword">size_t</span> _S_freelist_index(<span class="keyword">size_t</span> __bytes) &#123;</span><br><span class="line">        <span class="keyword">return</span> (((__bytes) + (<span class="keyword">size_t</span>)_ALIGN<span class="number">-1</span>)/(<span class="keyword">size_t</span>)_ALIGN - <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 返回一个大小为n的对象，并可能加入大小为__n的其它内存块到free_lists</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">void</span>* _S_refill(<span class="keyword">size_t</span> __n);</span><br><span class="line">  <span class="comment">// 配置一大块，可容纳__nobjs个大小为"__size"的内存块</span></span><br><span class="line">  <span class="comment">// 如果配置__nobjs个内存块不足，可以减少数量</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">char</span>* _S_chunk_alloc(<span class="keyword">size_t</span> __size, <span class="keyword">int</span>&amp; __nobjs);</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">char</span>* _S_start_free;   <span class="comment">//内存池起始位置，只在_S_chunk_alloc()中改变</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">char</span>* _S_end_free;     <span class="comment">//内存池结束位置，只在_S_chunk_alloc()中改变</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">size_t</span> _S_heap_size;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* __n must be &gt; 0 空间分配函数*/</span></span><br><span class="line">  <span class="function"><span class="keyword">static</span> <span class="keyword">void</span>* <span class="title">allocate</span><span class="params">(<span class="keyword">size_t</span> __n)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">void</span>* __ret = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 大于128直接调用第一级空间配置器</span></span><br><span class="line">    <span class="keyword">if</span> (__n &gt; (<span class="keyword">size_t</span>) _MAX_BYTES) &#123;</span><br><span class="line">      __ret = malloc_alloc::allocate(__n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">//寻找16个free_lists中适当的一个</span></span><br><span class="line">      _Obj* __STL_VOLATILE* __my_free_list</span><br><span class="line">          = _S_free_list + _S_freelist_index(__n);</span><br><span class="line">      <span class="comment">//获取free_lists</span></span><br><span class="line">      _Obj* __RESTRICT __result = *__my_free_list;</span><br><span class="line">      <span class="keyword">if</span> (__result == <span class="number">0</span>)</span><br><span class="line">        <span class="comment">//没有可用的free_lists，准备重新填充free_lists</span></span><br><span class="line">        __ret = _S_refill(_S_round_up(__n));</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//有可用的，free_lists调整下</span></span><br><span class="line">        *__my_free_list = __result -&gt; _M_free_list_link;</span><br><span class="line">        __ret = __result;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> __ret;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* __p may not be 0 空间释放函数*/</span></span><br><span class="line">  <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">deallocate</span><span class="params">(<span class="keyword">void</span>* __p, <span class="keyword">size_t</span> __n)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="comment">// 大于128直接调用艺集空间配置器</span></span><br><span class="line">    <span class="keyword">if</span> (__n &gt; (<span class="keyword">size_t</span>) _MAX_BYTES)</span><br><span class="line">      malloc_alloc::deallocate(__p, __n);</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">//寻找对应的free_lists</span></span><br><span class="line">      _Obj* __STL_VOLATILE*  __my_free_list</span><br><span class="line">          = _S_free_list + _S_freelist_index(__n);</span><br><span class="line">      _Obj* __q = (_Obj*)__p;</span><br><span class="line">      <span class="comment">// 调整free_lists，回收内存块</span></span><br><span class="line">      __q -&gt; _M_free_list_link = *__my_free_list;</span><br><span class="line">      *__my_free_list = __q;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">static</span> <span class="keyword">void</span>* <span class="title">reallocate</span><span class="params">(<span class="keyword">void</span>* __p, <span class="keyword">size_t</span> __old_sz, <span class="keyword">size_t</span> __new_sz)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125; ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> __default_alloc_template&lt;__NODE_ALLOCATOR_THREADS, <span class="number">0</span>&gt; alloc;</span><br><span class="line"><span class="keyword">typedef</span> __default_alloc_template&lt;<span class="literal">false</span>, <span class="number">0</span>&gt; single_client_alloc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">bool</span> __threads, <span class="keyword">int</span> __inst&gt;</span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span>==(<span class="keyword">const</span> __default_alloc_template&lt;__threads, __inst&gt;&amp;,</span><br><span class="line">                       <span class="keyword">const</span> __default_alloc_template&lt;__threads, __inst&gt;&amp;)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 假设__size已经上调至8的倍数</span></span><br><span class="line"><span class="comment">// __nobjs是期望获得的内存块个数，传引用，用来返回实际分配的内存块个数</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">bool</span> __threads, <span class="keyword">int</span> __inst&gt;</span><br><span class="line"><span class="keyword">char</span>*</span><br><span class="line">__default_alloc_template&lt;__threads, __inst&gt;::_S_chunk_alloc(<span class="keyword">size_t</span> __size,</span><br><span class="line">                                                            <span class="keyword">int</span>&amp; __nobjs)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">char</span>* __result;</span><br><span class="line">    <span class="keyword">size_t</span> __total_bytes = __size * __nobjs;            <span class="comment">//总共需要的内存块大小</span></span><br><span class="line">    <span class="keyword">size_t</span> __bytes_left = _S_end_free - _S_start_free;  <span class="comment">//内存池剩余空间</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (__bytes_left &gt;= __total_bytes) &#123;    <span class="comment">//内存池剩余空间足够</span></span><br><span class="line">        __result = _S_start_free;</span><br><span class="line">        _S_start_free += __total_bytes;     <span class="comment">//调整内存池起始位置</span></span><br><span class="line">        <span class="keyword">return</span>(__result);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (__bytes_left &gt;= __size) &#123;</span><br><span class="line">        <span class="comment">//内存池剩余空间不能完全满足需求量，但足够分配一个及以上的内存块</span></span><br><span class="line">        __nobjs = (<span class="keyword">int</span>)(__bytes_left/__size);   <span class="comment">//计算可分配的内存块的个数</span></span><br><span class="line">        __total_bytes = __size * __nobjs;       <span class="comment">//重新计算分配出去的内存块大小</span></span><br><span class="line">        __result = _S_start_free;</span><br><span class="line">        _S_start_free += __total_bytes;         <span class="comment">//调整内存池起始位置</span></span><br><span class="line">        <span class="keyword">return</span>(__result);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//内存池剩余空间不足分配一个内存块</span></span><br><span class="line">        <span class="comment">//计算重新申请内存池的大小</span></span><br><span class="line">        <span class="keyword">size_t</span> __bytes_to_get =</span><br><span class="line">          <span class="number">2</span> * __total_bytes + _S_round_up(_S_heap_size &gt;&gt; <span class="number">4</span>);</span><br><span class="line">        <span class="comment">// Try to make use of the left-over piece.</span></span><br><span class="line">        <span class="keyword">if</span> (__bytes_left &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">//内存池还有部分空间，尝试利用它们 将其加入free_lists</span></span><br><span class="line">            _Obj* __STL_VOLATILE* __my_free_list =</span><br><span class="line">                        _S_free_list + _S_freelist_index(__bytes_left);</span><br><span class="line"></span><br><span class="line">            ((_Obj*)_S_start_free) -&gt; _M_free_list_link = *__my_free_list;</span><br><span class="line">            *__my_free_list = (_Obj*)_S_start_free;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//直接调用malloc()申请内存空间</span></span><br><span class="line">        _S_start_free = (<span class="keyword">char</span>*)<span class="built_in">malloc</span>(__bytes_to_get);</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">0</span> == _S_start_free) &#123;</span><br><span class="line">            <span class="comment">//malloc()分配失败</span></span><br><span class="line">            <span class="keyword">size_t</span> __i;</span><br><span class="line">            _Obj* __STL_VOLATILE* __my_free_list;</span><br><span class="line">	        _Obj* __p;</span><br><span class="line">            <span class="comment">// 尝试从“尚未使用的内存块，且足够大”的free_lists中找一个内存块</span></span><br><span class="line">            <span class="comment">// 作为新的内存池</span></span><br><span class="line">            <span class="keyword">for</span> (__i = __size;</span><br><span class="line">                 __i &lt;= (<span class="keyword">size_t</span>) _MAX_BYTES;</span><br><span class="line">                 __i += (<span class="keyword">size_t</span>) _ALIGN) &#123;</span><br><span class="line">                <span class="comment">//得到free_lists</span></span><br><span class="line">                __my_free_list = _S_free_list + _S_freelist_index(__i);</span><br><span class="line">                __p = *__my_free_list;</span><br><span class="line">                <span class="keyword">if</span> (<span class="number">0</span> != __p) &#123;</span><br><span class="line">                    <span class="comment">//free_lists有未使用的内存块 调整free_lists去除未使用的内存块</span></span><br><span class="line">                    *__my_free_list = __p -&gt; _M_free_list_link;</span><br><span class="line">                    <span class="comment">//将取出的内存块作为内存池 设置内存池的起始位置和结束位置</span></span><br><span class="line">                    _S_start_free = (<span class="keyword">char</span>*)__p;</span><br><span class="line">                    _S_end_free = _S_start_free + __i;</span><br><span class="line">                    <span class="comment">//递归调用下，返回申请的空间</span></span><br><span class="line">                    <span class="keyword">return</span>(_S_chunk_alloc(__size, __nobjs));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//找不到合适的内存块</span></span><br><span class="line">	        _S_end_free = <span class="number">0</span>;	<span class="comment">// In case of exception.</span></span><br><span class="line">            <span class="comment">//调用一级配置器，尝试out-of-memory</span></span><br><span class="line">            _S_start_free = (<span class="keyword">char</span>*)malloc_alloc::allocate(__bytes_to_get);</span><br><span class="line">            <span class="comment">// 调用一级配置器，可以得到内存或者抛出异常(或直接结束程序)</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//分配到新的内存池，调整下大小，设置内存池结束为止</span></span><br><span class="line">        _S_heap_size += __bytes_to_get;</span><br><span class="line">        _S_end_free = _S_start_free + __bytes_to_get;</span><br><span class="line">        <span class="comment">//递归调用下，返回申请的空间，修正__nobjs</span></span><br><span class="line">        <span class="keyword">return</span>(_S_chunk_alloc(__size, __nobjs));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回一个大小为_n的对象，并且适当的为free_lists增加节点 要求__n已适当上调为8的倍数</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">bool</span> __threads, <span class="keyword">int</span> __inst&gt;</span><br><span class="line"><span class="keyword">void</span>*</span><br><span class="line">__default_alloc_template&lt;__threads, __inst&gt;::_S_refill(<span class="keyword">size_t</span> __n)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> __nobjs = <span class="number">20</span>;</span><br><span class="line">    <span class="comment">//调用_S_chunk_alloc，尝试取得nobjs个内存块作为free_lists的新节点</span></span><br><span class="line">    <span class="comment">//__nobjs传引用，返回获得节点的个数</span></span><br><span class="line">    <span class="keyword">char</span>* __chunk = _S_chunk_alloc(__n, __nobjs);</span><br><span class="line">    _Obj* __STL_VOLATILE* __my_free_list;</span><br><span class="line">    _Obj* __result;</span><br><span class="line">    _Obj* __current_obj;</span><br><span class="line">    _Obj* __next_obj;</span><br><span class="line">    <span class="keyword">int</span> __i;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果只获取到一个内存块，返回给调用者使用，free_lists未新加节点</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="number">1</span> == __nobjs) <span class="keyword">return</span>(__chunk);</span><br><span class="line">    <span class="comment">//调整free_lists新加节点</span></span><br><span class="line">    __my_free_list = _S_free_list + _S_freelist_index(__n);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在__chunk空间建立free_lists</span></span><br><span class="line">    __result = (_Obj*)__chunk;</span><br><span class="line">    *__my_free_list = __next_obj = (_Obj*)(__chunk + __n);</span><br><span class="line">    <span class="keyword">for</span> (__i = <span class="number">1</span>; ; __i++) &#123;</span><br><span class="line">      __current_obj = __next_obj;</span><br><span class="line">      __next_obj = (_Obj*)((<span class="keyword">char</span>*)__next_obj + __n);</span><br><span class="line">      <span class="keyword">if</span> (__nobjs - <span class="number">1</span> == __i) &#123;</span><br><span class="line">        __current_obj -&gt; _M_free_list_link = <span class="number">0</span>;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          __current_obj -&gt; _M_free_list_link = __next_obj;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>(__result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">bool</span> threads, <span class="keyword">int</span> inst&gt;</span><br><span class="line"><span class="keyword">void</span>*</span><br><span class="line">__default_alloc_template&lt;threads, inst&gt;::reallocate(<span class="keyword">void</span>* __p,</span><br><span class="line">                                                    <span class="keyword">size_t</span> __old_sz,</span><br><span class="line">                                                    <span class="keyword">size_t</span> __new_sz)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">void</span>* __result;</span><br><span class="line">    <span class="keyword">size_t</span> __copy_sz;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (__old_sz &gt; (<span class="keyword">size_t</span>) _MAX_BYTES &amp;&amp; __new_sz &gt; (<span class="keyword">size_t</span>) _MAX_BYTES) &#123;</span><br><span class="line">        <span class="keyword">return</span>(<span class="built_in">realloc</span>(__p, __new_sz));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (_S_round_up(__old_sz) == _S_round_up(__new_sz)) <span class="keyword">return</span>(__p);</span><br><span class="line">    __result = allocate(__new_sz);</span><br><span class="line">    __copy_sz = __new_sz &gt; __old_sz? __old_sz : __new_sz;</span><br><span class="line">    <span class="built_in">memcpy</span>(__result, __p, __copy_sz);</span><br><span class="line">    deallocate(__p, __old_sz);</span><br><span class="line">    <span class="keyword">return</span>(__result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//__default_alloc_template中static成员定于与初始值设定</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">bool</span> __threads, <span class="keyword">int</span> __inst&gt;</span><br><span class="line"><span class="keyword">char</span>* __default_alloc_template&lt;__threads, __inst&gt;::_S_start_free = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">bool</span> __threads, <span class="keyword">int</span> __inst&gt;</span><br><span class="line"><span class="keyword">char</span>* __default_alloc_template&lt;__threads, __inst&gt;::_S_end_free = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">bool</span> __threads, <span class="keyword">int</span> __inst&gt;</span><br><span class="line"><span class="keyword">size_t</span> __default_alloc_template&lt;__threads, __inst&gt;::_S_heap_size = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">bool</span> __threads, <span class="keyword">int</span> __inst&gt;</span><br><span class="line"><span class="keyword">typename</span> __default_alloc_template&lt;__threads, __inst&gt;::_Obj* __STL_VOLATILE</span><br><span class="line">__default_alloc_template&lt;__threads, __inst&gt; ::_S_free_list[</span><br><span class="line">    __default_alloc_template&lt;__threads, __inst&gt;::_NFREELISTS</span><br><span class="line">] = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, &#125;;</span><br></pre></td></tr></table></figure></p>
<h2 id="内存基本处理工具"><a href="#内存基本处理工具" class="headerlink" title="内存基本处理工具"></a>内存基本处理工具</h2><p>STL定义五个全局函数，construct()、destroy()、uninitialized_copy()、uninitialized_fill()、uninitialized_fill_n()，作用于内存空间。<br>construct()用于构造，destroy()用于析构。<br><code>uninitialized_copy()</code>、<code>uninitialized_fill()</code>、<code>uninitialized_fill_n()</code>分别对应高层次函数<code>copy()</code>、<code>fill()</code>、<code>fill_n()</code>。<br><code>uninitialized_copy()</code>、<code>uninitialized_fill()</code>、<code>uninitialized_fill_n()</code>都具有要么产生所有必要元素，否则就不产生任何元素的机制。如果任何一个拷贝构造抛出异常，必须析构已产生的所有元素。<br>POD(Plain Old Data)即标量类型或传统C struct类型。POD类型必然有无价值的(trivial) ctor/dtor/copy/assignment函数，因此对于POD类型采用最有效率的操作，对非POD类型调用其ctor/dtor/copy/assignment函数。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// POD类型，调用memcpy()</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">InputIter</span>, <span class="title">class</span> _<span class="title">ForwardIter</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> _<span class="title">ForwardIter</span></span></span><br><span class="line"><span class="class">__<span class="title">uninitialized_copy_aux</span>(_<span class="title">InputIter</span> __<span class="title">first</span>, _<span class="title">InputIter</span> __<span class="title">last</span>,</span></span><br><span class="line"><span class="class">                         _<span class="title">ForwardIter</span> __<span class="title">result</span>,</span></span><br><span class="line"><span class="class">                         __<span class="title">true_type</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">return</span> copy(__first, __last, __result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 非POD类型，逐个调用拷贝构造函数 如果构造过程中出错抛出异常，析构已构造的对象</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">InputIter</span>, <span class="title">class</span> _<span class="title">ForwardIter</span>&gt;</span></span><br><span class="line"><span class="class">_<span class="title">ForwardIter</span></span></span><br><span class="line"><span class="class">__<span class="title">uninitialized_copy_aux</span>(_<span class="title">InputIter</span> __<span class="title">first</span>, _<span class="title">InputIter</span> __<span class="title">last</span>,</span></span><br><span class="line"><span class="class">                         _<span class="title">ForwardIter</span> __<span class="title">result</span>,</span></span><br><span class="line"><span class="class">                         __<span class="title">false_type</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  _ForwardIter __cur = __result;</span><br><span class="line">  __STL_TRY &#123;</span><br><span class="line">    <span class="keyword">for</span> ( ; __first != __last; ++__first, ++__cur)</span><br><span class="line">      _Construct(&amp;*__cur, *__first);</span><br><span class="line">    <span class="keyword">return</span> __cur;</span><br><span class="line">  &#125;</span><br><span class="line">  __STL_UNWIND(_Destroy(__result, __cur));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">InputIter</span>, <span class="title">class</span> _<span class="title">ForwardIter</span>, <span class="title">class</span> _<span class="title">Tp</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> _<span class="title">ForwardIter</span></span></span><br><span class="line"><span class="class">__<span class="title">uninitialized_copy</span>(_<span class="title">InputIter</span> __<span class="title">first</span>, _<span class="title">InputIter</span> __<span class="title">last</span>,</span></span><br><span class="line"><span class="class">                     _<span class="title">ForwardIter</span> __<span class="title">result</span>, _<span class="title">Tp</span>*)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="comment">//使用类型萃取，对POD类型使用memcpy()，非OPD类型逐个调用构造函数</span></span><br><span class="line">  <span class="keyword">typedef</span> <span class="keyword">typename</span> __type_traits&lt;_Tp&gt;::is_POD_type _Is_POD;</span><br><span class="line">  <span class="keyword">return</span> __uninitialized_copy_aux(__first, __last, __result, _Is_POD());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将[__first, __last)复制一份到[__result, __result+__last-__first)</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">InputIter</span>, <span class="title">class</span> _<span class="title">ForwardIter</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> _<span class="title">ForwardIter</span></span></span><br><span class="line"><span class="class">  <span class="title">uninitialized_copy</span>(_<span class="title">InputIter</span> __<span class="title">first</span>, _<span class="title">InputIter</span> __<span class="title">last</span>,</span></span><br><span class="line"><span class="class">                     _<span class="title">ForwardIter</span> __<span class="title">result</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">return</span> __uninitialized_copy(__first, __last, __result,</span><br><span class="line">                              __VALUE_TYPE(__result));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">char</span>* <span class="title">uninitialized_copy</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* __first, <span class="keyword">const</span> <span class="keyword">char</span>* __last,</span></span></span><br><span class="line"><span class="function"><span class="params">                                <span class="keyword">char</span>* __result)</span> </span>&#123;</span><br><span class="line">  memmove(__result, __first, __last - __first);</span><br><span class="line">  <span class="keyword">return</span> __result + (__last - __first);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">wchar_t</span>*</span><br><span class="line">uninitialized_copy(<span class="keyword">const</span> <span class="keyword">wchar_t</span>* __first, <span class="keyword">const</span> <span class="keyword">wchar_t</span>* __last,</span><br><span class="line">                   <span class="keyword">wchar_t</span>* __result)</span><br><span class="line">&#123;</span><br><span class="line">  memmove(__result, __first, <span class="keyword">sizeof</span>(<span class="keyword">wchar_t</span>) * (__last - __first));</span><br><span class="line">  <span class="keyword">return</span> __result + (__last - __first);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// uninitialized_copy_n (not part of the C++ standard)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">InputIter</span>, <span class="title">class</span> _<span class="title">Size</span>, <span class="title">class</span> _<span class="title">ForwardIter</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">pair</span>&lt;_InputIter, _ForwardIter&gt;</span></span><br><span class="line"><span class="class">__<span class="title">uninitialized_copy_n</span>(_<span class="title">InputIter</span> __<span class="title">first</span>, _<span class="title">Size</span> __<span class="title">count</span>,</span></span><br><span class="line"><span class="class">                       _<span class="title">ForwardIter</span> __<span class="title">result</span>,</span></span><br><span class="line"><span class="class">                       <span class="title">input_iterator_tag</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  _ForwardIter __cur = __result;</span><br><span class="line">  __STL_TRY &#123;</span><br><span class="line">    <span class="keyword">for</span> ( ; __count &gt; <span class="number">0</span> ; --__count, ++__first, ++__cur)</span><br><span class="line">      _Construct(&amp;*__cur, *__first);</span><br><span class="line">    <span class="keyword">return</span> pair&lt;_InputIter, _ForwardIter&gt;(__first, __cur);</span><br><span class="line">  &#125;</span><br><span class="line">  __STL_UNWIND(_Destroy(__result, __cur));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">RandomAccessIter</span>, <span class="title">class</span> _<span class="title">Size</span>, <span class="title">class</span> _<span class="title">ForwardIter</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">pair</span>&lt;_RandomAccessIter, _ForwardIter&gt;</span></span><br><span class="line"><span class="class">__<span class="title">uninitialized_copy_n</span>(_<span class="title">RandomAccessIter</span> __<span class="title">first</span>, _<span class="title">Size</span> __<span class="title">count</span>,</span></span><br><span class="line"><span class="class">                       _<span class="title">ForwardIter</span> __<span class="title">result</span>,</span></span><br><span class="line"><span class="class">                       <span class="title">random_access_iterator_tag</span>) &#123;</span></span><br><span class="line">  _RandomAccessIter __last = __first + __count;</span><br><span class="line">  <span class="keyword">return</span> pair&lt;_RandomAccessIter, _ForwardIter&gt;(</span><br><span class="line">                 __last,</span><br><span class="line">                 uninitialized_copy(__first, __last, __result));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">InputIter</span>, <span class="title">class</span> _<span class="title">Size</span>, <span class="title">class</span> _<span class="title">ForwardIter</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">pair</span>&lt;_InputIter, _ForwardIter&gt;</span></span><br><span class="line"><span class="class">__<span class="title">uninitialized_copy_n</span>(_<span class="title">InputIter</span> __<span class="title">first</span>, _<span class="title">Size</span> __<span class="title">count</span>,</span></span><br><span class="line"><span class="class">                     _<span class="title">ForwardIter</span> __<span class="title">result</span>) &#123;</span></span><br><span class="line">  <span class="keyword">return</span> __uninitialized_copy_n(__first, __count, __result,</span><br><span class="line">                                __ITERATOR_CATEGORY(__first));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">InputIter</span>, <span class="title">class</span> _<span class="title">Size</span>, <span class="title">class</span> _<span class="title">ForwardIter</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">pair</span>&lt;_InputIter, _ForwardIter&gt;</span></span><br><span class="line"><span class="class"><span class="title">uninitialized_copy_n</span>(_<span class="title">InputIter</span> __<span class="title">first</span>, _<span class="title">Size</span> __<span class="title">count</span>,</span></span><br><span class="line"><span class="class">                     _<span class="title">ForwardIter</span> __<span class="title">result</span>) &#123;</span></span><br><span class="line">  <span class="keyword">return</span> __uninitialized_copy_n(__first, __count, __result,</span><br><span class="line">                                __ITERATOR_CATEGORY(__first));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Valid if copy construction is equivalent to assignment, and if the</span></span><br><span class="line"><span class="comment">// destructor is trivial.</span></span><br><span class="line"><span class="comment">//对于POD类型调用memset</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">ForwardIter</span>, <span class="title">class</span> _<span class="title">Tp</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">void</span></span></span><br><span class="line"><span class="class">__<span class="title">uninitialized_fill_aux</span>(_<span class="title">ForwardIter</span> __<span class="title">first</span>, _<span class="title">ForwardIter</span> __<span class="title">last</span>,</span></span><br><span class="line"><span class="class">                         <span class="title">const</span> _<span class="title">Tp</span>&amp; __<span class="title">x</span>, __<span class="title">true_type</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  fill(__first, __last, __x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//对于非POD类型逐个调用构造函数 如果中途抛出异常，析构已经构造的对象</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">ForwardIter</span>, <span class="title">class</span> _<span class="title">Tp</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span></span></span><br><span class="line"><span class="class">__<span class="title">uninitialized_fill_aux</span>(_<span class="title">ForwardIter</span> __<span class="title">first</span>, _<span class="title">ForwardIter</span> __<span class="title">last</span>,</span></span><br><span class="line"><span class="class">                         <span class="title">const</span> _<span class="title">Tp</span>&amp; __<span class="title">x</span>, __<span class="title">false_type</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  _ForwardIter __cur = __first;</span><br><span class="line">  __STL_TRY &#123;</span><br><span class="line">    <span class="keyword">for</span> ( ; __cur != __last; ++__cur)</span><br><span class="line">      _Construct(&amp;*__cur, __x);</span><br><span class="line">  &#125;</span><br><span class="line">  __STL_UNWIND(_Destroy(__first, __cur));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">ForwardIter</span>, <span class="title">class</span> _<span class="title">Tp</span>, <span class="title">class</span> _<span class="title">Tp1</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">void</span> __<span class="title">uninitialized_fill</span>(_<span class="title">ForwardIter</span> __<span class="title">first</span>,</span></span><br><span class="line"><span class="class">                                 _<span class="title">ForwardIter</span> __<span class="title">last</span>, <span class="title">const</span> _<span class="title">Tp</span>&amp; __<span class="title">x</span>, _<span class="title">Tp1</span>*)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">typedef</span> <span class="keyword">typename</span> __type_traits&lt;_Tp1&gt;::is_POD_type _Is_POD;</span><br><span class="line">  __uninitialized_fill_aux(__first, __last, __x, _Is_POD());</span><br><span class="line">                </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//对[__first, __last)中迭代器所指向的内存，已__x为参数调用_Tp的拷贝构造函数</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">ForwardIter</span>, <span class="title">class</span> _<span class="title">Tp</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">void</span> <span class="title">uninitialized_fill</span>(_<span class="title">ForwardIter</span> __<span class="title">first</span>,</span></span><br><span class="line"><span class="class">                               _<span class="title">ForwardIter</span> __<span class="title">last</span>,</span></span><br><span class="line"><span class="class">                               <span class="title">const</span> _<span class="title">Tp</span>&amp; __<span class="title">x</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  __uninitialized_fill(__first, __last, __x, __VALUE_TYPE(__first));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//对于POD类型逐个执行赋值操作</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">ForwardIter</span>, <span class="title">class</span> _<span class="title">Size</span>, <span class="title">class</span> _<span class="title">Tp</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> _<span class="title">ForwardIter</span></span></span><br><span class="line"><span class="class">__<span class="title">uninitialized_fill_n_aux</span>(_<span class="title">ForwardIter</span> __<span class="title">first</span>, _<span class="title">Size</span> __<span class="title">n</span>,</span></span><br><span class="line"><span class="class">                           <span class="title">const</span> _<span class="title">Tp</span>&amp; __<span class="title">x</span>, __<span class="title">true_type</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">return</span> fill_n(__first, __n, __x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//对于非POD类型逐个调用构造函数 如果中途抛出异常，析构已经构造的对象</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">ForwardIter</span>, <span class="title">class</span> _<span class="title">Size</span>, <span class="title">class</span> _<span class="title">Tp</span>&gt;</span></span><br><span class="line"><span class="class">_<span class="title">ForwardIter</span></span></span><br><span class="line"><span class="class">__<span class="title">uninitialized_fill_n_aux</span>(_<span class="title">ForwardIter</span> __<span class="title">first</span>, _<span class="title">Size</span> __<span class="title">n</span>,</span></span><br><span class="line"><span class="class">                           <span class="title">const</span> _<span class="title">Tp</span>&amp; __<span class="title">x</span>, __<span class="title">false_type</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  _ForwardIter __cur = __first;</span><br><span class="line">  __STL_TRY &#123;</span><br><span class="line">    <span class="keyword">for</span> ( ; __n &gt; <span class="number">0</span>; --__n, ++__cur)</span><br><span class="line">      _Construct(&amp;*__cur, __x);</span><br><span class="line">    <span class="keyword">return</span> __cur;</span><br><span class="line">  &#125;</span><br><span class="line">  __STL_UNWIND(_Destroy(__first, __cur));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">ForwardIter</span>, <span class="title">class</span> _<span class="title">Size</span>, <span class="title">class</span> _<span class="title">Tp</span>, <span class="title">class</span> _<span class="title">Tp1</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> _<span class="title">ForwardIter</span></span></span><br><span class="line"><span class="class">__<span class="title">uninitialized_fill_n</span>(_<span class="title">ForwardIter</span> __<span class="title">first</span>, _<span class="title">Size</span> __<span class="title">n</span>, <span class="title">const</span> _<span class="title">Tp</span>&amp; __<span class="title">x</span>, _<span class="title">Tp1</span>*)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">typedef</span> <span class="keyword">typename</span> __type_traits&lt;_Tp1&gt;::is_POD_type _Is_POD;</span><br><span class="line">  <span class="keyword">return</span> __uninitialized_fill_n_aux(__first, __n, __x, _Is_POD());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//从__first开始构造__n个_Tp对象，已__x为模版</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">ForwardIter</span>, <span class="title">class</span> _<span class="title">Size</span>, <span class="title">class</span> _<span class="title">Tp</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> _<span class="title">ForwardIter</span></span></span><br><span class="line"><span class="class"><span class="title">uninitialized_fill_n</span>(_<span class="title">ForwardIter</span> __<span class="title">first</span>, _<span class="title">Size</span> __<span class="title">n</span>, <span class="title">const</span> _<span class="title">Tp</span>&amp; __<span class="title">x</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">return</span> __uninitialized_fill_n(__first, __n, __x, __VALUE_TYPE(__first));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">InputIter1</span>, <span class="title">class</span> _<span class="title">InputIter2</span>, <span class="title">class</span> _<span class="title">ForwardIter</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> _<span class="title">ForwardIter</span></span></span><br><span class="line"><span class="class">__<span class="title">uninitialized_copy_copy</span>(_<span class="title">InputIter1</span> __<span class="title">first1</span>, _<span class="title">InputIter1</span> __<span class="title">last1</span>,</span></span><br><span class="line"><span class="class">                          _<span class="title">InputIter2</span> __<span class="title">first2</span>, _<span class="title">InputIter2</span> __<span class="title">last2</span>,</span></span><br><span class="line"><span class="class">                          _<span class="title">ForwardIter</span> __<span class="title">result</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  _ForwardIter __mid = uninitialized_copy(__first1, __last1, __result);</span><br><span class="line">  __STL_TRY &#123;</span><br><span class="line">    <span class="keyword">return</span> uninitialized_copy(__first2, __last2, __mid);</span><br><span class="line">  &#125;</span><br><span class="line">  __STL_UNWIND(_Destroy(__result, __mid));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">ForwardIter</span>, <span class="title">class</span> _<span class="title">Tp</span>, <span class="title">class</span> _<span class="title">InputIter</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> _<span class="title">ForwardIter</span></span></span><br><span class="line"><span class="class">__<span class="title">uninitialized_fill_copy</span>(_<span class="title">ForwardIter</span> __<span class="title">result</span>, _<span class="title">ForwardIter</span> __<span class="title">mid</span>,</span></span><br><span class="line"><span class="class">                          <span class="title">const</span> _<span class="title">Tp</span>&amp; __<span class="title">x</span>,</span></span><br><span class="line"><span class="class">                          _<span class="title">InputIter</span> __<span class="title">first</span>, _<span class="title">InputIter</span> __<span class="title">last</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  uninitialized_fill(__result, __mid, __x);</span><br><span class="line">  __STL_TRY &#123;</span><br><span class="line">    <span class="keyword">return</span> uninitialized_copy(__first, __last, __mid);</span><br><span class="line">  &#125;</span><br><span class="line">  __STL_UNWIND(_Destroy(__result, __mid));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">InputIter</span>, <span class="title">class</span> _<span class="title">ForwardIter</span>, <span class="title">class</span> _<span class="title">Tp</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">void</span></span></span><br><span class="line"><span class="class">__<span class="title">uninitialized_copy_fill</span>(_<span class="title">InputIter</span> __<span class="title">first1</span>, _<span class="title">InputIter</span> __<span class="title">last1</span>,</span></span><br><span class="line"><span class="class">                          _<span class="title">ForwardIter</span> __<span class="title">first2</span>, _<span class="title">ForwardIter</span> __<span class="title">last2</span>,</span></span><br><span class="line"><span class="class">                          <span class="title">const</span> _<span class="title">Tp</span>&amp; __<span class="title">x</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  _ForwardIter __mid2 = uninitialized_copy(__first1, __last1, __first2);</span><br><span class="line">  __STL_TRY &#123;</span><br><span class="line">    uninitialized_fill(__mid2, __last2, __x);</span><br><span class="line">  &#125;</span><br><span class="line">  __STL_UNWIND(_Destroy(__first2, __mid2));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>cpp</category>
      </categories>
      <tags>
        <tag>cpp</tag>
        <tag>stl</tag>
      </tags>
  </entry>
  <entry>
    <title>SGI STL 标准库 deque stack queue 4</title>
    <url>/2017/06/13/stl-deque-stack-queue-4/</url>
    <content><![CDATA[<p><a href="https://github.com/CaseZheng/SourceCodeAnalysis" target="_blank" rel="noopener">github源码分析仓库</a></p>
<h1 id="deque-双端队列"><a href="#deque-双端队列" class="headerlink" title="deque 双端队列"></a>deque 双端队列</h1><p>vector是单向开口的连续线程空间，deque是双向开口的连续线性空间。<br>deque支持常数事件内对起头端进行元素的插入和移除操作。deque没有容量的概念，因为它由动态分段连续空间组合而成，随时可以增加一段新空间并链接起来。<br>deque提供RandomAccessIterator。<br>deque是由一段一段的定量连续空间组成。一旦有必要在deque的前端或者尾端增加新空间，则需要配置一段定量连续空间，串接在整个deque的头端或尾端，deque的最大任务，便是在分段的定量连续空间上，维护其整体连续的假象，提供随机存取的接口，避开”重新配置、复制、释放”，代价则是复杂的迭代器构架。<br>deque采用一块”map”(不是STL的map容器)作为主控，管理缓冲区(多块定量连续空间)。”map”是一小块连续空间，每个node都是指针，指向另一段连续线性空间，即缓冲区，缓冲区是deque的存储空间主体。SGI STL允许指定缓冲区大小，默认0表示使用512B缓冲区。</p>
<h2 id="deque的结构设计中，map和node-buffer的关系"><a href="#deque的结构设计中，map和node-buffer的关系" class="headerlink" title="deque的结构设计中，map和node-buffer的关系"></a>deque的结构设计中，map和node-buffer的关系</h2><p><img src="/Picture/STL-deque_map_node-buffer.jpg" alt="deque的结构设计中，map和node-buffer的关系"></p>
<h2 id="deque中控器、缓冲区、迭代器的相互关系"><a href="#deque中控器、缓冲区、迭代器的相互关系" class="headerlink" title="deque中控器、缓冲区、迭代器的相互关系"></a>deque中控器、缓冲区、迭代器的相互关系</h2><p><img src="/Picture/STL-deque_map_node-buffer.jpg" alt="deque中控器、缓冲区、迭代器的相互关系"></p>
<h2 id="deque-begin-传回迭代器start-deque-end-传回迭代器finish"><a href="#deque-begin-传回迭代器start-deque-end-传回迭代器finish" class="headerlink" title="deque::begin()传回迭代器start, deque::end()传回迭代器finish"></a>deque::begin()传回迭代器start, deque::end()传回迭代器finish</h2><p><img src="/Picture/STL-deque-map_buffer_iterator_start_finish.jpg" alt="deque::begin()传回迭代器start, deque::end()传回迭代器finish"></p>
<p><strong>deque的插入、删除操作会导致迭代器失效</strong>，需要注意。</p>
<h1 id="stack-栈"><a href="#stack-栈" class="headerlink" title="stack 栈"></a>stack 栈</h1><p>stack是种先进后出(FILO)的数据结构，只要一个出口，stack允许新增元素，移除元素，取得最顶端元素。stack不允许遍历行为，因此stack没有迭代器。<br>SGI STL缺省使用deque作为stack的底部结构，因此stack是一种配接器(修改某物接口，形成另一种风貌)。<br>stack也可以用list作为底层容器。</p>
<h1 id="queue-队列"><a href="#queue-队列" class="headerlink" title="queue 队列"></a>queue 队列</h1><p>queue是种先进先出(FIFO)的数据结构，只有一个入口，也只有一个入口，queue循序新增元素，移除元素，从最底端加入元素、取得最顶端元素。queue不允许遍历操作，因此queue没有迭代器。<br>SGI STL缺省使用deque作为queue的底部结构，因此queue是一种配接器(修改某物接口，形成另一种风貌)。<br>queue也可以用list作为底层容器。</p>
]]></content>
      <categories>
        <category>cpp</category>
      </categories>
      <tags>
        <tag>cpp</tag>
        <tag>stl</tag>
      </tags>
  </entry>
  <entry>
    <title>SGI STL 标准库 迭代器与类型萃取 2</title>
    <url>/2017/06/09/stl-iterators-traits-2/</url>
    <content><![CDATA[<h1 id="STL-迭代器-类型萃取"><a href="#STL-迭代器-类型萃取" class="headerlink" title="STL 迭代器 类型萃取"></a>STL 迭代器 类型萃取</h1><p><a href="https://github.com/CaseZheng/SourceCodeAnalysis" target="_blank" rel="noopener">github源码分析仓库</a><br>迭代器是一种抽象设计概念，Iterator模式定义：提供一种方法，使之能够依次遍历某个容器所包含的各个元素，而不需要暴露该容器的内部表达方式。<br>STL中心思想：将数据容器和算法分开，独立设计，再将其结合在一起使用。<br>迭代器是一种智能指针，迭代器重载<code>operator*</code>和<code>operator-&gt;</code>操作符。<br>算法在使用迭代器时可能需要其相应的类型，比如迭代器所指之物的类型。</p>
<h2 id="利用函数模版的参数推导机制获取型别"><a href="#利用函数模版的参数推导机制获取型别" class="headerlink" title="利用函数模版的参数推导机制获取型别"></a>利用函数模版的参数推导机制获取型别</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">I</span>, <span class="title">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">func_impl</span>(<span class="title">I</span> <span class="title">iter</span>, <span class="title">T</span> <span class="title">t</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    T tmp;      <span class="comment">//T就是迭代器iter所指之物的类型</span></span><br><span class="line">    <span class="comment">//func应该做的工作</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">I</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">void</span> <span class="title">func</span>(<span class="title">I</span> <span class="title">iter</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    func_impl(iter, *iter);     <span class="comment">//func的工作移到func_impl</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    func(&amp;i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="声明内嵌类型获得迭代器所指之物及其它需要的类型"><a href="#声明内嵌类型获得迭代器所指之物及其它需要的类型" class="headerlink" title="声明内嵌类型获得迭代器所指之物及其它需要的类型"></a>声明内嵌类型获得迭代器所指之物及其它需要的类型</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">struct</span> <span class="title">MyIter</span> &#123;</span></span><br><span class="line">    <span class="keyword">typedef</span> T value_type;           <span class="comment">//内嵌类型声明</span></span><br><span class="line">    T *ptr;</span><br><span class="line">    MyIter(T* p=<span class="number">0</span>) : ptr(p) &#123;&#125;</span><br><span class="line">    T &amp;<span class="keyword">operator</span>*() <span class="keyword">const</span> &#123; <span class="keyword">return</span> *ptr; &#125;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">I</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">typename</span> <span class="title">I</span>:</span>:<span class="function">value_type <span class="title">func</span><span class="params">(I ite)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> *ite;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="function">MyIter&lt;<span class="keyword">int</span>&gt; <span class="title">ite</span><span class="params">(<span class="keyword">new</span> ine(<span class="number">8</span>))</span></span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;func(ite);</span><br></pre></td></tr></table></figure>
<p>利用在迭代器类内部内嵌类型声明，可以得到类内部所拥有的对象的各个类型，但迭代器还可以是原生指针，原生指针无法进行内嵌类型声明，需要使用C++模版偏特化，提供原生指针的特化版本解决问题。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">T</span> <span class="title">func</span>(<span class="title">T</span>* <span class="title">ite</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">return</span> *ite;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="设计中间件萃取器获取迭代器所包含的类型"><a href="#设计中间件萃取器获取迭代器所包含的类型" class="headerlink" title="设计中间件萃取器获取迭代器所包含的类型"></a>设计中间件萃取器获取迭代器所包含的类型</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//萃取器</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">I</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">struct</span> <span class="title">iterator_traits</span> &#123;</span></span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">typename</span> I::value_type value_type;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">I</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">typename</span> <span class="title">iterator_traits</span>&lt;I&gt;:</span>:<span class="function">value_type <span class="title">fun</span><span class="params">(I ite)</span> <span class="comment">//返回值使用萃取器获取</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> *ite;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//偏特化版本，用于迭代器是原生指针</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">I</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">struct</span> <span class="title">iterator_traits</span>&lt;I*&gt; &#123;</span></span><br><span class="line">    <span class="keyword">typedef</span> I value_type;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//偏特化版本，用于迭代器是const原生指针的情况</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">I</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">struct</span> <span class="title">iterator_traits</span>&lt;const I*&gt; &#123;</span></span><br><span class="line">    <span class="keyword">typedef</span> I value_type;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>通过iterator<code>_traits</code>可以方便的获取迭代器的相应类型。<br>最常用的迭代器类型有五种：<code>value_type</code>、<code>difference_type</code>、<code>pointer</code>、<code>reference</code>、<code>iterator_category</code>。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">I</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">struct</span> <span class="title">iterator_traits</span> &#123;</span></span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">typename</span> I::iterator_category   iterator_category;</span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">typename</span> I::value_type          value_type;</span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">typename</span> I::difference_type     difference_type;</span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">typename</span> I::pointer             pointer;</span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">typename</span> I::reference           reference;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><code>value_type</code>即迭代器所指对象的类型。<br><code>difference_type</code>用来表示两个迭代器之间的距离。<br><code>reference</code>引用类型。<br><code>pointer</code>指针类型。<br><code>iterator_category</code>迭代器类型。</p>
<p>迭代器类型根据移动和可进行操作分为五种：</p>
<ul>
<li>input iterator: 该类型迭代器所指对象不允许外界改变，只读 单向移动</li>
<li>output iterator: 唯写 单向移动</li>
<li>forward iterator: 读写 单向移动</li>
<li>bidirectional iterator: 可双向移动迭代器 读写</li>
<li>random access iterator: 随机迭代器 读写</li>
</ul>
<p>迭代器的分类和从属关系：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">input iterator      output iterator</span><br><span class="line">        |               |</span><br><span class="line">        forward iterator</span><br><span class="line">              |</span><br><span class="line">      bidirectional iterator</span><br><span class="line">              |</span><br><span class="line">      random access iterator</span><br></pre></td></tr></table></figure></p>
<p>它们的关系不是继承，而是概念和强化的关系。<br>由于各种迭代器不尽相同，设计算法时，应尽量针对某种迭代器提供明确定义，并针对更强化的某种迭代器提供另一种定义，在不同情况下提供最大效率。<br>在运行期根据迭代器类型选择不同算法版本，影响程序效率，利用重载函数机制，在编译器选择合适的版本。<br>利用萃取器取出迭代器的类型，利用迭代器类型形成函数重载，在编译器确定运行的算法版本。<br>定义五种迭代器类型作为标记用的型别：<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">input_iterator_tag</span> &#123;</span>&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">output_iterator_tag</span> &#123;</span>&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">forward_iterator_tag</span> :</span> <span class="keyword">public</span> input_iterator_tag &#123;&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">bidirectional_iterator_tag</span> :</span> <span class="keyword">public</span> forward_iterator_tag &#123;&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">random_access_iterator_tag</span> :</span> <span class="keyword">public</span> bidirectional_iterator_tag &#123;&#125;;</span><br></pre></td></tr></table></figure></p>
<p>使用class定义迭代器的标签，不仅促成重载机制成功运作，而且通过继承在调用函数时，如果不存在一个能力强的版本的函数，可以自动调用能力弱的版本。<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">I</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">func</span>(<span class="title">I</span>&amp; <span class="title">B</span>, <span class="title">input_iterator_tag</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(I&amp; B, bidirectional_iterator_tag)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    func(<span class="number">1</span>, input_iterator_tag());          <span class="comment">//参数完全匹配 调用func(I&amp; B, input_iterator_tag)</span></span><br><span class="line">    func(<span class="number">2</span>, forward_iterator_tag());        <span class="comment">//参数未能完全匹配 由于继承关系 调用func(I&amp; B, input_iterator_tag)</span></span><br><span class="line">    func(<span class="number">3</span>, bidirectional_iterator_tag());  <span class="comment">//参数完全匹配 调用func(I&amp; B, bidirectional_iterator_tag)</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>STL中模板参数命名以算法所能接受的最初级类型为迭代器型别参数命名。</p>
<h2 id="std-iterator的保证"><a href="#std-iterator的保证" class="headerlink" title="std::iterator的保证"></a>std::iterator的保证</h2><p>STL中任何迭代器都应该提供五种内嵌相应型别，以利于traits萃取。STL提供iterator class使每个新设计的迭代器都继承它，保证符合STL规范。<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">Category</span>,</span></span><br><span class="line"><span class="class">            <span class="title">class</span> <span class="title">T</span>,</span></span><br><span class="line"><span class="class">            <span class="title">class</span> <span class="title">Distance</span> = <span class="title">ptrdff_t</span>,</span></span><br><span class="line"><span class="class">            <span class="title">class</span> <span class="title">Pointer</span> = <span class="title">T</span>*,</span></span><br><span class="line"><span class="class">            <span class="title">class</span> <span class="title">Reference</span> = <span class="title">T</span>&amp;&gt;</span></span><br><span class="line"><span class="class"><span class="title">struct</span> <span class="title">iterator</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">typedef</span> Category        iterator_category;</span><br><span class="line">    <span class="keyword">typedef</span> T               value_type;</span><br><span class="line">    <span class="keyword">typedef</span> Distance        difference_type;</span><br><span class="line">    <span class="keyword">typedef</span> Pointer         pointer;</span><br><span class="line">    <span class="keyword">typedef</span> Reference       reference;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>设置适当的相应类型，是迭代器的责任。设计适当的迭代器，是容器本身的责任。因为只有容器本身知道如何遍历自己。</p>
<h2 id="SGI-STL的-type-traits"><a href="#SGI-STL的-type-traits" class="headerlink" title="SGI STL的__type_traits"></a>SGI STL的<code>__type_traits</code></h2><p>STL使用traits，对迭代器进行规范，制定出iterator_category。SGI将traits扩大到迭代器以外的其它地方, 即<code>__type_traits</code>，是SGI STL内部私有的东西，不在STL标准规范之外。<br><code>iterator_category</code>负责萃取迭代器特性，而<code>__type_traits</code>则负责萃取型别的特性。型别的特性是指其构造函数、拷贝构造函数、等号运算符重载函数、析构函数是否“没有价值”，如果答案为否定的，在对该型别进行构造、拷贝构造、析构、赋值时，可以采取效率更高的方法，直接对内存操作，不需要调用其构造、拷贝构造、析构、赋值函数。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">true_type</span> &#123;</span>&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">false_type</span> &#123;</span>&#125;;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">type</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">struct</span> __<span class="title">type_traits</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">typedef</span> __true_type     this_dummy_member_must_be_first;</span><br><span class="line">    <span class="keyword">typedef</span> __false_type    has_trivial_default_constructor;</span><br><span class="line">    <span class="keyword">typedef</span> __false_type    has_trivial_copy_constructor;</span><br><span class="line">    <span class="keyword">typedef</span> __false_type    has_trivial_assignment_operator;</span><br><span class="line">    <span class="keyword">typedef</span> __false_type    has_trivial_destructor;</span><br><span class="line">    <span class="keyword">typedef</span> __false_type    is_POD_type;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>SGI STL将所有都定义为最保守的值<code>__false_type</code>。然后针对每一种标量类型设计合适的<code>__type_traits</code>特化版本。<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//举例</span></span><br><span class="line"><span class="keyword">template</span> &lt;&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">type_traits</span>&lt;char&gt;</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">typedef</span> __true_type     has_trivial_default_constructor;</span><br><span class="line">    <span class="keyword">typedef</span> __true_type     has_trivial_copy_constructor;</span><br><span class="line">    <span class="keyword">typedef</span> __true_type     has_trivial_assignment_operator;</span><br><span class="line">    <span class="keyword">typedef</span> __true_type     has_trivial_destructor;</span><br><span class="line">    <span class="keyword">typedef</span> __true_type     is_POD_type;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p><code>__type_traits</code>在SGI STL中广泛使用。比如空间配置器中uninitialized_fill_n()函数、destroy()函数等。</p>
]]></content>
      <categories>
        <category>cpp</category>
      </categories>
      <tags>
        <tag>cpp</tag>
        <tag>stl</tag>
      </tags>
  </entry>
  <entry>
    <title>SGI STL 标准库 tree简介 RB-tree解析 7</title>
    <url>/2017/06/16/stl-tree-rb-tree-7/</url>
    <content><![CDATA[<p><a href="https://github.com/CaseZheng/SourceCodeAnalysis" target="_blank" rel="noopener">github源码分析仓库</a></p>
<h1 id="关联式容器"><a href="#关联式容器" class="headerlink" title="关联式容器"></a>关联式容器</h1><hr>
<p>标准的STL关联式容器分为set(集合)和map(映射表)两大类，还有multiset(多键集合)和multimap(多键映射表)。set、map、multiset、multimap的底层都使用RB-tree完成，RB-tree是一个独立容器，但并不开放给外界使用。<br>SGI STL提供不在标准内的关联容器hash table(散列表)，以hash table为底层容器完成的<code>hash_set</code>(散列集合)、<code>hash_map</code>(散列映射表)、<code>hash_multiset</code>(散列多键集合)、<code>hash_multimap</code>(散列多键映射表)。<br>关联式容器：每个元素都有一个键值(key)和一个实值(value)。当元素被插入关联式容器中时，容器内部结构按照键值大小，以某种特定规则将该元素放置于适当位置。<br>关联式容器的内部结构一般是balanced binary tree(平衡二叉树)，获得良好的搜寻效率。balanced binary tree有多种类型，AVL-tree、RB-tree、AA-tree，STL运用的是RB-tree(红黑树)。</p>
<h1 id="树"><a href="#树" class="headerlink" title="树"></a>树</h1><hr>
<p>树由节点(nodes)和边(edges)构成，整棵树最顶端节点称为根节点。每个节点有具有方向性的边(directed edges)，用来和其它节点相连。相连节点之中，在上方者为父节点(parent)，下方者子节点(child)，无子节点者称为叶节点(leaf)。子节点可以存在多个，如果最多只允许两个子节点，即所谓二叉树(binary tree)。不同的节点如果拥有相同的父节点，则彼此互为兄弟节点(siblings)。根节点至任何节点之间有唯一路径(path)，路径所经过的边数，称为路径长度。根节点至任一节点的路径长度即该节点的深度(depth)。根节点的深度永远为0，。某节点至其最深子节点(叶节点)的路径长度，称为该节点的高度(height)。这棵树的高度以根节点的高度来表示。如果节点<code>A-&gt;B</code>之间存在唯一路径，A称为B的祖代(ancestor)，B称为A的子代(descendant)。任何节点的大小(size)是指其所有子代(包括自己)的节点总数。<br><img src="/Picture/STL-binary_tree.jpg" alt="树状结构的相关术语"></p>
<h2 id="二叉搜索树"><a href="#二叉搜索树" class="headerlink" title="二叉搜索树"></a>二叉搜索树</h2><hr>
<p>二叉树是指任何节点最多只允许两个子节点的树。两个子节点称为左子节点和右子节点。<br>二叉搜索树提供对数时间的元素插入和访问，二叉搜索树的节点放置规则：任何检点的键值一定大于其左子树的每个节点的键值，并小于其右子树的每一个节点的键值。因此，从根节点一直向左走，直至左路可走，即得最小元素；从根节点一直向右走，直至无右路可走，即得最大元素。<br>二叉搜索树插入新元素，从根节点开始，遇到键值较大者就向左，遇到键值较小值就向右，一直到尾端，即为插入点。<br>二叉搜索树移除旧节点A</p>
<ol>
<li>如果A只有一个子节点或A为叶节点，直接将A的子节点连至A的父节点，并将A删除。</li>
<li>如果A有两个子节点，以右子树内的最小节点取代A。</li>
</ol>
<h2 id="平衡二叉搜索树"><a href="#平衡二叉搜索树" class="headerlink" title="平衡二叉搜索树"></a>平衡二叉搜索树</h2><hr>
<p>如果输入值不够随机，在经过某些插入和删除操作后，二叉搜索树可能失去平衡，造成搜索效率低落的情况。<br><img src="/Picture/STL-binary_tree_can&#39;t_balance.jpg" alt="不平衡二叉搜索树和平衡二叉搜索树"><br>树的平衡没有绝对标准，大致意义：没有任何一个检点过深。</p>
<h2 id="AVL-tree-Adelson-Velskii-Landis-tree"><a href="#AVL-tree-Adelson-Velskii-Landis-tree" class="headerlink" title="AVL tree(Adelson-Velskii-Landis tree)"></a>AVL tree(Adelson-Velskii-Landis tree)</h2><hr>
<p>AVL树是“加上额外平衡条件”的二叉搜索树。平衡条件的建立是为了确保整棵树的深度为O(logN)。AVL-tree要求任何节点的左右子树高度相差最多1。<br>AVL树插入节点可能会破坏AVL-tree的平衡条件，由于只有“插入点至根节点”路径上的各节点可能改变平衡条件，因此，只要调整其中最深的那个节点，便可使整棵树重新获得平衡。假设该最深节点为X，由于节点最多拥有两个子节点，“平衡被破坏”意味着X的左右两棵子树的高度相差2，因此有四种情况：</p>
<ol>
<li>插入点位于X的左子节点的左子树——左左。</li>
<li>插入点位于X的左子节点的右子树——左右。</li>
<li>插入点位于X的右子节点的左子树——右左。</li>
<li>插入点位于X的右子节点的右子树——右右。</li>
</ol>
<p>情况1、4彼此对称，称为外侧插入，采用单旋转操作调整解决。情况2、3彼此对称，称为内侧插入，采用双旋转操作调整解决。<br><img src="/Picture/STL-AVL_tree_can&#39;t_balance.jpg" alt="AVL-tree四种&quot;平衡破坏&quot;情况"></p>
<h3 id="单旋转-Single-Rotation"><a href="#单旋转-Single-Rotation" class="headerlink" title="单旋转(Single Rotation)"></a>单旋转(Single Rotation)</h3><hr>
<p><img src="/Picture/STL-AVL_tree_single_rotation.jpg" alt="AVL-tree恢复平衡单旋转"></p>
<h3 id="双旋转-Double-Rotation"><a href="#双旋转-Double-Rotation" class="headerlink" title="双旋转(Double Rotation)"></a>双旋转(Double Rotation)</h3><hr>
<p><img src="/Picture/STL-AVL_tree_double_rotation.jpg" alt="AVL-tree恢复平衡双旋转"></p>
<h1 id="RB-tree红黑树"><a href="#RB-tree红黑树" class="headerlink" title="RB-tree红黑树"></a>RB-tree红黑树</h1><hr>
<p>RB-tree不仅是二叉搜索树，而且必须满足以下规则：</p>
<ol>
<li>每个节点不是红色就是黑色。</li>
<li>根节点为黑色。</li>
<li>如果节点为红色，其子节点必须为黑色。</li>
<li>任一节点到NULL(树尾端)的任何路径，所含黑节点数目必须相同。</li>
</ol>
<p>根据规则4，新增节点必须为红色。根据规则3，新增节点父节点必须为黑色。如果根据二叉搜索树观测到达插入点，不满足上述条件，必须调整颜色并旋转树型。为了方便，将NULL视为黑节点。</p>
<h2 id="插入节点"><a href="#插入节点" class="headerlink" title="插入节点"></a>插入节点</h2><hr>
<p>为特殊节点定义代名。新节点X，父节点P，祖父节点G，伯父节点S，增祖父节点GG。<br>根据二叉搜索树规则，新节点X必为叶节点。根绝红黑树规则4，X必为红色。若P也是红色(违反规则3，必须调整树型)，则G必为黑色(因为原为RB-tree，必须遵循规则3)。根据X插入位置和外围节点(S和GG)的颜色，有四种情况：</p>
<ol>
<li>S为黑且X为外侧插入。先对P，G做一次单旋转，再更改P,G颜色，即可满足红黑树的规则3。<br><img src="/Picture/STL-RB_tree_insert_node_1.jpg" alt="红黑树插入情况1"></li>
<li>S为黑且X为内侧插入。先对P，X做一次单旋转并更改G、X颜色，在将结果对G做一次单旋转，集合再次满足红黑树规则3。<br><img src="/Picture/STL-RB_tree_insert_node_2.jpg" alt="红黑树插入情况2"></li>
<li>S为红色且X为外侧插入。先对P，G做一次单旋转，并改变X的颜色，如果GG为黑色，完成旋转修改。如果GG为红色，见状况4。<br><img src="/Picture/STL-RB_tree_insert_node_3.jpg" alt="红黑树插入情况3"></li>
<li>S为红色且X为外侧插入。先对P和G做一次单旋转，并改变X的颜色，如果GG为红色，持续向上做该操作，直到不再有父子连续为红色的情况。<br><img src="/Picture/STL-RB_tree_insert_node_4.jpg" alt="红黑树插入情况4"></li>
</ol>
<h2 id="从上向下，避免状况4"><a href="#从上向下，避免状况4" class="headerlink" title="从上向下，避免状况4"></a>从上向下，避免状况4</h2><hr>
<p>为了避免状况4“父子节点皆为红色”的情况持续向RB-tree的上层结构发展，形成处理时效上的瓶颈，可以用从上而下的方式避免：假设新增节点A，沿着A的路径，只要看到某节点X的两个子节点皆为黑色，就把X改为红色，并把两个子节点改为黑色。<br><img src="/Picture/STL-RB_tree_top_down_procedure.jpg" alt="沿着X的路径，由上而下修正节点颜色"><br><img src="/Picture/STL-RB_tree_top_down_procedure_over.jpg" alt="对G,P做一次右旋转，并改变颜色"></p>
<h2 id="RB-tree的节点设计"><a href="#RB-tree的节点设计" class="headerlink" title="RB-tree的节点设计"></a>RB-tree的节点设计</h2><hr>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">bool</span> _Rb_tree_Color_type;</span><br><span class="line"><span class="keyword">const</span> _Rb_tree_Color_type _S_rb_tree_red = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">const</span> _Rb_tree_Color_type _S_rb_tree_black = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">Rb_tree_node_base</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">typedef</span> _Rb_tree_Color_type _Color_type;</span><br><span class="line">  <span class="keyword">typedef</span> _Rb_tree_node_base* _Base_ptr;</span><br><span class="line"></span><br><span class="line">  _Color_type _M_color;     <span class="comment">//节点颜色，非红即黑</span></span><br><span class="line">  _Base_ptr _M_parent;      <span class="comment">//父节点</span></span><br><span class="line">  _Base_ptr _M_left;        <span class="comment">//左子节点</span></span><br><span class="line">  _Base_ptr _M_right;       <span class="comment">//右子节点</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//一直向左走得到最小值</span></span><br><span class="line">  <span class="keyword">static</span> _Base_ptr _S_minimum(_Base_ptr __x)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">while</span> (__x-&gt;_M_left != <span class="number">0</span>) __x = __x-&gt;_M_left;</span><br><span class="line">    <span class="keyword">return</span> __x;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//一直向右走得到最大值</span></span><br><span class="line">  <span class="keyword">static</span> _Base_ptr _S_maximum(_Base_ptr __x)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">while</span> (__x-&gt;_M_right != <span class="number">0</span>) __x = __x-&gt;_M_right;</span><br><span class="line">    <span class="keyword">return</span> __x;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//RB-tree节点</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">Value</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">struct</span> _<span class="title">Rb_tree_node</span> :</span> <span class="keyword">public</span> _Rb_tree_node_base</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">typedef</span> _Rb_tree_node&lt;_Value&gt;* _Link_type;</span><br><span class="line">  _Value _M_value_field;        <span class="comment">//节点值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="RB-tree的迭代器"><a href="#RB-tree的迭代器" class="headerlink" title="RB-tree的迭代器"></a>RB-tree的迭代器</h2><hr>
<p><img src="/Picture/STL-RB_tree_node_iterator.jpg" alt="RB-tree的节点和迭代器之间的关系"><br>RB-tree的迭代器属于双向迭代器。<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//基层迭代器</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">Rb_tree_base_iterator</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">typedef</span> _Rb_tree_node_base::_Base_ptr _Base_ptr;</span><br><span class="line">  <span class="keyword">typedef</span> bidirectional_iterator_tag iterator_category; <span class="comment">//双向迭代器</span></span><br><span class="line">  <span class="keyword">typedef</span> <span class="keyword">ptrdiff_t</span> difference_type;</span><br><span class="line">  _Base_ptr _M_node;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//用于实现operator++</span></span><br><span class="line">  <span class="keyword">void</span> _M_increment()</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> (_M_node-&gt;_M_right != <span class="number">0</span>) &#123;   <span class="comment">//如果有右节点，状况1</span></span><br><span class="line">      _M_node = _M_node-&gt;_M_right;  <span class="comment">//向右走</span></span><br><span class="line">      <span class="keyword">while</span> (_M_node-&gt;_M_left != <span class="number">0</span>) <span class="comment">//然后一直往左子数走到底</span></span><br><span class="line">        _M_node = _M_node-&gt;_M_left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;  <span class="comment">//没有右子节点，状况2</span></span><br><span class="line">      _Base_ptr __y = _M_node-&gt;_M_parent;   <span class="comment">//找出父节点</span></span><br><span class="line">      <span class="keyword">while</span> (_M_node == __y-&gt;_M_right) &#123;    <span class="comment">//如果现行节点本身是个右节点</span></span><br><span class="line">        _M_node = __y;                      <span class="comment">//一直上溯，直到"不为右节点"为止</span></span><br><span class="line">        __y = __y-&gt;_M_parent;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (_M_node-&gt;_M_right != __y)         <span class="comment">//如果右子节点不等于此时的父节点</span></span><br><span class="line">        _M_node = __y;      <span class="comment">//则返回此时的父节点，状况3，否则返回此时的_M_node节点，状况4</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//用来实现operator--</span></span><br><span class="line">  <span class="keyword">void</span> _M_decrement()</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> (_M_node-&gt;_M_color == _S_rb_tree_red &amp;&amp;</span><br><span class="line">        _M_node-&gt;_M_parent-&gt;_M_parent == _M_node)   <span class="comment">//如果是红节点，且父节点的父节点等于自己，</span></span><br><span class="line">      _M_node = _M_node-&gt;_M_right;                  <span class="comment">//状况1，右子节点即为返回值</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (_M_node-&gt;_M_left != <span class="number">0</span>) &#123;               <span class="comment">//如果有左子节点，状况2</span></span><br><span class="line">      _Base_ptr __y = _M_node-&gt;_M_left;             <span class="comment">//另y指向左子节点</span></span><br><span class="line">      <span class="keyword">while</span> (__y-&gt;_M_right != <span class="number">0</span>)                    <span class="comment">//当y有右子节点时</span></span><br><span class="line">        __y = __y-&gt;_M_right;                        <span class="comment">//一直往右子节点走到底</span></span><br><span class="line">      _M_node = __y;                                <span class="comment">//即得最后答案</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;      <span class="comment">//即非根节点，也不是左子节点</span></span><br><span class="line">      _Base_ptr __y = _M_node-&gt;_M_parent;           <span class="comment">//状况3，找到父节点</span></span><br><span class="line">      <span class="keyword">while</span> (_M_node == __y-&gt;_M_left) &#123;             <span class="comment">//当现行节点身为左子节点，</span></span><br><span class="line">        _M_node = __y;                              <span class="comment">//一直往上交替走，直到现行节点</span></span><br><span class="line">        __y = __y-&gt;_M_parent;                       <span class="comment">//不为左子节点</span></span><br><span class="line">      &#125;</span><br><span class="line">      _M_node = __y;                                <span class="comment">//此时父节点即为答案</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// RB-tree 迭代器</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">Value</span>, <span class="title">class</span> _<span class="title">Ref</span>, <span class="title">class</span> _<span class="title">Ptr</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">struct</span> _<span class="title">Rb_tree_iterator</span> :</span> <span class="keyword">public</span> _Rb_tree_base_iterator</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">typedef</span> _Value value_type;</span><br><span class="line">  <span class="keyword">typedef</span> _Ref reference;</span><br><span class="line">  <span class="keyword">typedef</span> _Ptr pointer;</span><br><span class="line">  <span class="keyword">typedef</span> _Rb_tree_iterator&lt;_Value, _Value&amp;, _Value*&gt;          </span><br><span class="line">    iterator;</span><br><span class="line">  <span class="keyword">typedef</span> _Rb_tree_iterator&lt;_Value, <span class="keyword">const</span> _Value&amp;, <span class="keyword">const</span> _Value*&gt;</span><br><span class="line">    const_iterator;</span><br><span class="line">  <span class="keyword">typedef</span> _Rb_tree_iterator&lt;_Value, _Ref, _Ptr&gt;                </span><br><span class="line">    _Self;</span><br><span class="line">  <span class="keyword">typedef</span> _Rb_tree_node&lt;_Value&gt;* _Link_type;</span><br><span class="line"></span><br><span class="line">  _Rb_tree_iterator() &#123;&#125;</span><br><span class="line">  _Rb_tree_iterator(_Link_type __x) &#123; _M_node = __x; &#125;</span><br><span class="line">  _Rb_tree_iterator(<span class="keyword">const</span> iterator&amp; __it) &#123; _M_node = __it._M_node; &#125;</span><br><span class="line"></span><br><span class="line">  reference <span class="keyword">operator</span>*() <span class="keyword">const</span> &#123; <span class="keyword">return</span> _Link_type(_M_node)-&gt;_M_value_field; &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> __SGI_STL_NO_ARROW_OPERATOR</span></span><br><span class="line">  pointer <span class="keyword">operator</span>-&gt;() <span class="keyword">const</span> &#123; <span class="keyword">return</span> &amp;(<span class="keyword">operator</span>*()); &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* __SGI_STL_NO_ARROW_OPERATOR */</span></span></span><br><span class="line"></span><br><span class="line">  _Self&amp; <span class="keyword">operator</span>++() &#123; _M_increment(); <span class="keyword">return</span> *<span class="keyword">this</span>; &#125;</span><br><span class="line">  _Self <span class="keyword">operator</span>++(<span class="keyword">int</span>) &#123;</span><br><span class="line">    _Self __tmp = *<span class="keyword">this</span>;</span><br><span class="line">    _M_increment();</span><br><span class="line">    <span class="keyword">return</span> __tmp;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  _Self&amp; <span class="keyword">operator</span>--() &#123; _M_decrement(); <span class="keyword">return</span> *<span class="keyword">this</span>; &#125;</span><br><span class="line">  _Self <span class="keyword">operator</span>--(<span class="keyword">int</span>) &#123;</span><br><span class="line">    _Self __tmp = *<span class="keyword">this</span>;</span><br><span class="line">    _M_decrement();</span><br><span class="line">    <span class="keyword">return</span> __tmp;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<h2 id="RB-tree的数据结构-RB-tree的构造与内存管理-RB-tree的元素操作"><a href="#RB-tree的数据结构-RB-tree的构造与内存管理-RB-tree的元素操作" class="headerlink" title="RB-tree的数据结构 RB-tree的构造与内存管理 RB-tree的元素操作"></a>RB-tree的数据结构 RB-tree的构造与内存管理 RB-tree的元素操作</h2><hr>
<p>为了简化根节点边界条件的处理，SGISTL特别为根节点再设计了一个父节点，名为header。<br><img src="/Picture/STL-RB_tree_header_root.jpg" alt="header和root"><br>RB-tree有两种插入操作：<code>insert_unique()</code>和<code>insert_equal()</code>，<code>insert_unique()</code>表示被插入节点的键值在整棵树中必须独一无二(因此，如果树中已存在相同的键值，插入操作就不会被真正的进行)，<code>insert_equal()</code>表示被插入节点的键值在整棵树中可以重复。</p>
<p>依次将10,7,8,15,5,6,11,13,12插入RB-tree<br><img src="/Picture/STL-RB_tree_insert_node_process.jpg" alt="将元素插入红黑树的全过程演示"></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//参数__x为新值插入点，参数__y为插入点之父节点，参数v为新值</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">Key</span>, <span class="title">class</span> _<span class="title">Value</span>, <span class="title">class</span> _<span class="title">KeyOfValue</span>,</span></span><br><span class="line"><span class="class">          <span class="title">class</span> _<span class="title">Compare</span>, <span class="title">class</span> _<span class="title">Alloc</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">typename</span> _<span class="title">Rb_tree</span>&lt;_Key,_Value,_KeyOfValue,_Compare,_Alloc&gt;:</span>:iterator</span><br><span class="line">_Rb_tree&lt;_Key,_Value,_KeyOfValue,_Compare,_Alloc&gt;</span><br><span class="line">  ::_M_insert(_Base_ptr __x_, _Base_ptr __y_, <span class="keyword">const</span> _Value&amp; __v)</span><br><span class="line">&#123;</span><br><span class="line">  _Link_type __x = (_Link_type) __x_;</span><br><span class="line">  _Link_type __y = (_Link_type) __y_;</span><br><span class="line">  _Link_type __z;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (__y == _M_header || __x != <span class="number">0</span> ||</span><br><span class="line">      _M_key_compare(_KeyOfValue()(__v), _S_key(__y))) &#123;</span><br><span class="line">    __z = _M_create_node(__v);          <span class="comment">//产生新节点</span></span><br><span class="line">    _S_left(__y) = __z;                 <span class="comment">//当y即为header时，leftmost() == z</span></span><br><span class="line">    <span class="keyword">if</span> (__y == _M_header) &#123;</span><br><span class="line">      _M_root() = __z;</span><br><span class="line">      _M_rightmost() = __z;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (__y == _M_leftmost())      <span class="comment">//如果y为最左节点</span></span><br><span class="line">      _M_leftmost() = __z;              <span class="comment">//维护_M_leftmost()，使其永远指向最左节点</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    __z = _M_create_node(__v);          <span class="comment">//产生新节点</span></span><br><span class="line">    _S_right(__y) = __z;                <span class="comment">//令新节点成为插入点之父节点y的右子节点</span></span><br><span class="line">    <span class="keyword">if</span> (__y == _M_rightmost())</span><br><span class="line">      _M_rightmost() = __z;             <span class="comment">//维护_M_rightmost()，使其永远指向最右节点</span></span><br><span class="line">  &#125;</span><br><span class="line">  _S_parent(__z) = __y;                 <span class="comment">//设定新节点的父节点</span></span><br><span class="line">  _S_left(__z) = <span class="number">0</span>;                     <span class="comment">//设定新节点的左子节点</span></span><br><span class="line">  _S_right(__z) = <span class="number">0</span>;                    <span class="comment">//设定新节点的右子节点</span></span><br><span class="line">  <span class="comment">//新节点颜色在_Rb_tree_rebalance()设定并调整 参数1为新增节点 参数2为root</span></span><br><span class="line">  _Rb_tree_rebalance(__z, _M_header-&gt;_M_parent);</span><br><span class="line">  ++_M_node_count;                      <span class="comment">//节点值累加</span></span><br><span class="line">  <span class="keyword">return</span> iterator(__z);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//全局函数，令树形平衡(改变颜色及旋转树形)</span></span><br><span class="line"><span class="comment">//__x为新增节点 __root为root</span></span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">void</span></span><br><span class="line">_Rb_tree_rebalance(_Rb_tree_node_base* __x, _Rb_tree_node_base*&amp; __root)</span><br><span class="line">&#123;</span><br><span class="line">  __x-&gt;_M_color = _S_rb_tree_red;       <span class="comment">//新节点必为红</span></span><br><span class="line">  <span class="keyword">while</span> (__x != __root &amp;&amp; __x-&gt;_M_parent-&gt;_M_color == _S_rb_tree_red) &#123; <span class="comment">//父节点必为红</span></span><br><span class="line">    <span class="keyword">if</span> (__x-&gt;_M_parent == __x-&gt;_M_parent-&gt;_M_parent-&gt;_M_left) &#123;         <span class="comment">//父节点为祖父节点之左子节点</span></span><br><span class="line">      _Rb_tree_node_base* __y = __x-&gt;_M_parent-&gt;_M_parent-&gt;_M_right;    <span class="comment">//令y为伯父节点</span></span><br><span class="line">      <span class="keyword">if</span> (__y &amp;&amp; __y-&gt;_M_color == _S_rb_tree_red) &#123;                     <span class="comment">//伯父节点存在，且为红</span></span><br><span class="line">        __x-&gt;_M_parent-&gt;_M_color = _S_rb_tree_black;                    <span class="comment">//更改父节点为黑</span></span><br><span class="line">        __y-&gt;_M_color = _S_rb_tree_black;                               <span class="comment">//更改伯父节点为黑</span></span><br><span class="line">        __x-&gt;_M_parent-&gt;_M_parent-&gt;_M_color = _S_rb_tree_red;           <span class="comment">//更改祖父节点为红</span></span><br><span class="line">        __x = __x-&gt;_M_parent-&gt;_M_parent;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;                                        <span class="comment">//无伯父节点，或伯父节点为黑</span></span><br><span class="line">        <span class="keyword">if</span> (__x == __x-&gt;_M_parent-&gt;_M_right) &#123;      <span class="comment">//如果新节点为父节点之右节点</span></span><br><span class="line">          __x = __x-&gt;_M_parent;</span><br><span class="line">          _Rb_tree_rotate_left(__x, __root);        <span class="comment">//第一个参数为左旋点</span></span><br><span class="line">        &#125;</span><br><span class="line">        __x-&gt;_M_parent-&gt;_M_color = _S_rb_tree_black;                <span class="comment">//改变颜色</span></span><br><span class="line">        __x-&gt;_M_parent-&gt;_M_parent-&gt;_M_color = _S_rb_tree_red;</span><br><span class="line">        _Rb_tree_rotate_right(__x-&gt;_M_parent-&gt;_M_parent, __root);   <span class="comment">//第一个参数为右旋点</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;              <span class="comment">//父节点为祖父节点之右子节点</span></span><br><span class="line">      _Rb_tree_node_base* __y = __x-&gt;_M_parent-&gt;_M_parent-&gt;_M_left; <span class="comment">//令y为伯父节点</span></span><br><span class="line">      <span class="keyword">if</span> (__y &amp;&amp; __y-&gt;_M_color == _S_rb_tree_red) &#123;             <span class="comment">//右伯父节点，且为红</span></span><br><span class="line">        __x-&gt;_M_parent-&gt;_M_color = _S_rb_tree_black;            <span class="comment">//更改父节点为黑</span></span><br><span class="line">        __y-&gt;_M_color = _S_rb_tree_black;                       <span class="comment">//更改伯父节点为黑</span></span><br><span class="line">        __x-&gt;_M_parent-&gt;_M_parent-&gt;_M_color = _S_rb_tree_red;   <span class="comment">//更改祖父节点为红</span></span><br><span class="line">        __x = __x-&gt;_M_parent-&gt;_M_parent;                        <span class="comment">//继续往上层查</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;            <span class="comment">//无伯父节点，或伯父节点为黑</span></span><br><span class="line">        <span class="keyword">if</span> (__x == __x-&gt;_M_parent-&gt;_M_left) &#123;                   <span class="comment">//如果新节点为父节点之左子节点</span></span><br><span class="line">          __x = __x-&gt;_M_parent;</span><br><span class="line">          _Rb_tree_rotate_right(__x, __root);                   <span class="comment">//第一个参数为右旋点</span></span><br><span class="line">        &#125;</span><br><span class="line">        __x-&gt;_M_parent-&gt;_M_color = _S_rb_tree_black;            <span class="comment">//改变颜色</span></span><br><span class="line">        __x-&gt;_M_parent-&gt;_M_parent-&gt;_M_color = _S_rb_tree_red;</span><br><span class="line">        _Rb_tree_rotate_left(__x-&gt;_M_parent-&gt;_M_parent, __root);    <span class="comment">//第一个参数为左旋点</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="comment">//while 结束</span></span><br><span class="line">  __root-&gt;_M_color = _S_rb_tree_black;      <span class="comment">//根节点永远为黑</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//全局函数，新节点必为红节点，如果插入处的父节点也是红节点，违反红黑树规则，必须旋转树形</span></span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">void</span></span><br><span class="line">_Rb_tree_rotate_left(_Rb_tree_node_base* __x, _Rb_tree_node_base*&amp; __root)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">//__x为旋转点</span></span><br><span class="line">  _Rb_tree_node_base* __y = __x-&gt;_M_right;  <span class="comment">//令__y为旋转点的右子节点</span></span><br><span class="line">  __x-&gt;_M_right = __y-&gt;_M_left;</span><br><span class="line">  <span class="keyword">if</span> (__y-&gt;_M_left !=<span class="number">0</span>)</span><br><span class="line">    __y-&gt;_M_left-&gt;_M_parent = __x;          <span class="comment">//设定父节点</span></span><br><span class="line">  __y-&gt;_M_parent = __x-&gt;_M_parent;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//令__y完全顶替__x的地位</span></span><br><span class="line">  <span class="keyword">if</span> (__x == __root)                        <span class="comment">//__x为根节点</span></span><br><span class="line">    __root = __y;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (__x == __x-&gt;_M_parent-&gt;_M_left)  <span class="comment">//__x为父节点的左子节点</span></span><br><span class="line">    __x-&gt;_M_parent-&gt;_M_left = __y;</span><br><span class="line">  <span class="keyword">else</span>                                      <span class="comment">//__x为父节点的右子节点</span></span><br><span class="line">    __x-&gt;_M_parent-&gt;_M_right = __y;</span><br><span class="line">  __y-&gt;_M_left = __x;</span><br><span class="line">  __x-&gt;_M_parent = __y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//全局函数，新节点必为红节点，如果插入处的父节点也是红节点，违反红黑树规则，必须旋转树形</span></span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">void</span></span><br><span class="line">_Rb_tree_rotate_right(_Rb_tree_node_base* __x, _Rb_tree_node_base*&amp; __root)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">//__x为旋转点</span></span><br><span class="line">  _Rb_tree_node_base* __y = __x-&gt;_M_left;   <span class="comment">//令__y为旋转点的左子节点</span></span><br><span class="line">  __x-&gt;_M_left = __y-&gt;_M_right;</span><br><span class="line">  <span class="keyword">if</span> (__y-&gt;_M_right != <span class="number">0</span>)</span><br><span class="line">    __y-&gt;_M_right-&gt;_M_parent = __x;         <span class="comment">//设定父节点</span></span><br><span class="line">  __y-&gt;_M_parent = __x-&gt;_M_parent;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//令__y完全顶替__x的地位</span></span><br><span class="line">  <span class="keyword">if</span> (__x == __root)                        <span class="comment">//__x为根节点</span></span><br><span class="line">    __root = __y;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (__x == __x-&gt;_M_parent-&gt;_M_right) <span class="comment">//__x为父节点的右子节点</span></span><br><span class="line">    __x-&gt;_M_parent-&gt;_M_right = __y;</span><br><span class="line">  <span class="keyword">else</span>                                      <span class="comment">//__x为父节点的左子节点</span></span><br><span class="line">    __x-&gt;_M_parent-&gt;_M_left = __y;</span><br><span class="line">  __y-&gt;_M_right = __x;</span><br><span class="line">  __x-&gt;_M_parent = __y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>cpp</category>
      </categories>
      <tags>
        <tag>cpp</tag>
        <tag>stl</tag>
      </tags>
  </entry>
  <entry>
    <title>boost 库 内存管理 scoped_ptr scoped_array 2</title>
    <url>/2017/06/05/boost-scoped-ptr/</url>
    <content><![CDATA[<h1 id="scoped-ptr"><a href="#scoped-ptr" class="headerlink" title="scoped_ptr"></a>scoped_ptr</h1><p>scoped_ptr包装new操作符在堆上分配的动态对象，保证动态创建的对象在任何时候都可以被正确删除，<strong>scoped_ptr的所有权不能转让</strong>。</p>
<h2 id="1-类摘要"><a href="#1-类摘要" class="headerlink" title="1. 类摘要"></a>1. 类摘要</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">class</span> <span class="title">scoped_ptr</span> // <span class="title">noncopyable</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    T * px;</span><br><span class="line">    scoped_ptr(scoped_ptr <span class="keyword">const</span> &amp;);</span><br><span class="line">    scoped_ptr &amp; <span class="keyword">operator</span>=(scoped_ptr <span class="keyword">const</span> &amp;);</span><br><span class="line">    <span class="keyword">void</span> <span class="keyword">operator</span>==( scoped_ptr <span class="keyword">const</span>&amp; ) <span class="keyword">const</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="keyword">operator</span>!=( scoped_ptr <span class="keyword">const</span>&amp; ) <span class="keyword">const</span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">scoped_ptr</span><span class="params">( T * p = <span class="number">0</span> )</span></span>;</span><br><span class="line">    ~scoped_ptr();</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">reset</span><span class="params">(T * p = <span class="number">0</span>)</span></span>;</span><br><span class="line">    T &amp; <span class="keyword">operator</span>*() <span class="keyword">const</span>;</span><br><span class="line">    T * <span class="keyword">operator</span>-&gt;() <span class="keyword">const</span>;</span><br><span class="line">    <span class="function">T * <span class="title">get</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(scoped_ptr &amp; b)</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="2-操作函数"><a href="#2-操作函数" class="headerlink" title="2. 操作函数"></a>2. 操作函数</h2><ul>
<li>构造函数接受类型为T*的指针p，创建scoped_ptr对象，并在内部保存指针参数p，p必须是一个new表达式动态分配的结果，或者是空指针(0)。当scoped_ptr生命周期结束，析构函数~scoped_ptr()会使用delete操作符自动销毁所保存的指针对象，回收资源。</li>
<li>scoped_ptr将靠白构造函数和赋值操作符声明为私有的，禁止对指针指针的复制操作，保证被它管理的指针不能被转让所有权。</li>
<li>reset()重置scoped_ptr，删除原来保存的指针，保存新的指针。reset()一般不应该被调用，因为违背了scoped_ptr一直由scoped_ptr自己自动管理的本意。</li>
<li>scoped_ptr用operator<em>()和operator-&gt;()重载解引用操作符</em>和箭头操作符-&gt;，模仿被代理的原始指针的行为。</li>
<li>swap()交换两个scoped_ptr保存的原始指针。</li>
<li>get()返回scoped_ptr内部保存的原始指针。</li>
</ul>
<h2 id="3-使用"><a href="#3-使用" class="headerlink" title="3. 使用"></a>3. 使用</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    A()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"A ctor"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ~ A()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"A dtor"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"A Print"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TestScopedPtr</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">scoped_ptr&lt;A&gt; <span class="title">a1</span><span class="params">(<span class="keyword">new</span> A())</span></span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;a1.get()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="comment">//scoped_ptr&lt;A&gt; a2 = a1;  //错误</span></span><br><span class="line">    a1-&gt;print();</span><br><span class="line">    (*a1).print();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="4-和auto-ptr的比较"><a href="#4-和auto-ptr的比较" class="headerlink" title="4. 和auto_ptr的比较"></a>4. 和auto_ptr的比较</h2><p>scoped_ptr不能作为容器的元素，因为不支持拷贝和赋值。</p>
<p>scoped_ptr和auto_ptr的根本区别在指针的所有权。auto_ptr被特意设计为指针的所有权是可以转移的，同一时刻只能有一个auto_ptr管理指针。scoped_ptr把拷贝构造函数和赋值函数声明为私有的，拒绝指针所有权的转让。</p>
<h1 id="scoped-array"><a href="#scoped-array" class="headerlink" title="scoped_array"></a>scoped_array</h1><p>scoped_array包装new[]操作符，在堆上动态分配数组，为动态数组提供代理，保证准确释放内存。</p>
<h2 id="1-类摘要-1"><a href="#1-类摘要-1" class="headerlink" title="1. 类摘要"></a>1. 类摘要</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">class</span> <span class="title">shared_array</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">shared_array</span><span class="params">( Y * p )</span></span>;</span><br><span class="line">    ~shared_array();</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">reset</span><span class="params">()</span></span>;</span><br><span class="line">    T &amp; <span class="keyword">operator</span>[] (<span class="built_in">std</span>::<span class="keyword">ptrdiff_t</span> i) <span class="keyword">const</span>;</span><br><span class="line">    <span class="function">T * <span class="title">get</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(shared_array&lt;T&gt; &amp; other)</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    T * px;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<ul>
<li>构造函数接受的指针p必须是new[]的结果;</li>
<li>析构函数使用delete[]释放资源，而不是delete;</li>
<li>提供operator[]操作符重载，可以像普通数组一样用下表访问元素。</li>
</ul>
<h2 id="2-使用"><a href="#2-使用" class="headerlink" title="2. 使用"></a>2. 使用</h2><p>scoped_array和scoped_ptr设计思想相同，只能在被声明的作用域内使用，不能拷贝、赋值。</p>
<h2 id="3-建议"><a href="#3-建议" class="headerlink" title="3. 建议"></a>3. 建议</h2><p>scoped_array不能动态增长、没有迭代器支持、不能搭配STL算法，仅是纯粹的”裸”数组接口。在需要动态数组的时候使用std::vector会更好。</p>
]]></content>
      <categories>
        <category>cpp</category>
      </categories>
      <tags>
        <tag>cpp</tag>
        <tag>boost</tag>
        <tag>智能指针</tag>
      </tags>
  </entry>
  <entry>
    <title>SGI STL 标准库 vector和list 3</title>
    <url>/2017/06/10/stl-vector-list-3/</url>
    <content><![CDATA[<p><a href="https://github.com/CaseZheng/SourceCodeAnalysis" target="_blank" rel="noopener">github源码分析仓库</a></p>
<h1 id="容器的介绍"><a href="#容器的介绍" class="headerlink" title="容器的介绍"></a>容器的介绍</h1><p>研究数据的特定排列方式，以便于搜寻或排序或其它特殊目的，这一专门学科称为数据结构。任何特定的数据结构都是为了实现某种特定的算法。STL容器将运用最广泛的的一些数据结构实现出来。常见数据结构：array(数组)、list(链表)、tree(树)、queue(队列)、hash table(散列表)、set(集合)、map(映射表)等。这些数据结构分为序列式和关联式两种。</p>
<h2 id="序列式容器"><a href="#序列式容器" class="headerlink" title="序列式容器"></a>序列式容器</h2><ul>
<li>array(build-in) C++内建</li>
<li>vector<ul>
<li>heap 以算法形式呈现(<code>xxx_heap</code>) 内部用vector实现<ul>
<li>priority-queue 内部用heap实现</li>
</ul>
</li>
</ul>
</li>
<li>list</li>
<li>slist 非标准</li>
<li>deque<ul>
<li>stack 配接器 内部用deque实现</li>
<li>queue 配接器 内部用deque实现</li>
</ul>
</li>
</ul>
<h2 id="关联式容器"><a href="#关联式容器" class="headerlink" title="关联式容器"></a>关联式容器</h2><ul>
<li>RB-tree 非公开<ul>
<li>set 内部用RB-tree实现</li>
<li>map 内部用RB-tree实现</li>
<li>multiset 内部用RB-tree实现</li>
<li>multimap 内部用RB-tree实现</li>
</ul>
</li>
<li>hashtable 非标准<ul>
<li><code>hash_set</code> 非标准 内部用hashtable实现</li>
<li><code>hash_map</code> 非标准 内部用hashtable实现</li>
<li><code>hash_multiset</code> 非标准 内部用hashtable实现</li>
<li><code>hash_multimap</code> 非标准 内部用hashtable实现</li>
</ul>
</li>
</ul>
<h1 id="vector"><a href="#vector" class="headerlink" title="vector"></a>vector</h1><p>vector是STL提供的一种序列式容器。vector是动态空间，在加入元素时，如果空间不足，内部机制会自行扩充空间容纳新元素。<br>vector在使用前需要包含<code>&lt;vector&gt;</code>，其内部实现位于<code>&lt;stl_vector.h&gt;</code>。<br>vector使用一块连续线性空间存储元素，支持随机存储，提供Random Access Iterator。<br>vector缺省使用alloc作为空间配置器。<br>vector的容量永远大于等于其大小，如果容量等于大小，则满载，再新加元素，整个vector需要寻找一块更大的空间。<br>vector支持动态增加大小，但并不是在原有空间之后接续新空间，而是以原大小的<strong>两倍</strong>另外配置一块较大空间，然后将原空间内容拷贝过来，在原内容之后构建新元素，并释放原空间。因此，对vector的任何操作，如果引起空间重配置，<strong>指向vector的所有迭代器将失效</strong>。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">vec</span><span class="params">(<span class="number">4</span>, <span class="number">5</span>)</span></span>;      <span class="comment">// 5, 5, 5, 5</span></span><br><span class="line">    vec.push_back(<span class="number">6</span>);           <span class="comment">// 5, 5, 5, 5, 6</span></span><br><span class="line">    vec.push_back(<span class="number">6</span>);           <span class="comment">// 5, 5, 5, 5, 6, 6</span></span><br><span class="line">    <span class="keyword">for</span>(vecotor&lt;<span class="keyword">int</span>&gt;::iterator it = vec.begin();</span><br><span class="line">        it!=vec.end();)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(*it == <span class="number">6</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            vec.erase(it);</span><br><span class="line">            <span class="comment">//++it;               //错误 vector中删除一个元素，后面元素会整体前移一次，迭代器在删除当前元素后，实际已指向下一个元素了，如果再前移，则会少遍历一个元素。</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            ++it;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;yiyiyyigels</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="resize和reserve"><a href="#resize和reserve" class="headerlink" title="resize和reserve"></a>resize和reserve</h2><p>resize改变vector大小,引起vector容量的变化,会调用默认拷贝构造函数,会导致vector的size会增加.<br>reserve改变vector容量,不改变size,只是配置空间,不调用拷贝构造函数.<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    A() : m_i(<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"construct A"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    A(<span class="keyword">const</span> A&amp; a)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"copy construct A"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        m_i = a.m_i;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> m_i;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;A&gt; va;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">string</span>(<span class="string">"va size:"</span>) &lt;&lt; va.size() &lt;&lt; <span class="string">" va capacity:"</span> &lt;&lt; va.capacity() &lt;&lt; <span class="built_in">endl</span>; </span><br><span class="line">    va.resize(<span class="number">10</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">string</span>(<span class="string">"va size:"</span>) &lt;&lt; va.size() &lt;&lt; <span class="string">" va capacity:"</span> &lt;&lt; va.capacity() &lt;&lt; <span class="built_in">endl</span>; </span><br><span class="line"></span><br><span class="line">    <span class="built_in">vector</span>&lt;A&gt; vb;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">string</span>(<span class="string">"vb size:"</span>) &lt;&lt; vb.size() &lt;&lt; <span class="string">" vb capacity:"</span> &lt;&lt; vb.capacity() &lt;&lt; <span class="built_in">endl</span>; </span><br><span class="line">    vb.reserve(<span class="number">10</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">string</span>(<span class="string">"vb size:"</span>) &lt;&lt; vb.size() &lt;&lt; <span class="string">" vb capacity:"</span> &lt;&lt; vb.capacity() &lt;&lt; <span class="built_in">endl</span>; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>运行结果如下:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">va size:0 va capacity:0</span><br><span class="line">construct A</span><br><span class="line">copy construct A</span><br><span class="line">copy construct A</span><br><span class="line">copy construct A</span><br><span class="line">copy construct A</span><br><span class="line">copy construct A</span><br><span class="line">copy construct A</span><br><span class="line">copy construct A</span><br><span class="line">copy construct A</span><br><span class="line">copy construct A</span><br><span class="line">copy construct A</span><br><span class="line">va size:10 va capacity:10</span><br><span class="line">vb size:0 vb capacity:0</span><br><span class="line">vb size:0 vb capacity:10</span><br></pre></td></tr></table></figure></p>
<h1 id="list"><a href="#list" class="headerlink" title="list"></a>list</h1><p>list是STl提供的一种序列式容器，每次插入或删除一个元素，就会配置或释放一个元素空间。list对任何位置元素的插入和删除都是常数时间。<br>list是一种双向链表，迭代器具备前移和后移能力，提供Bidirectional Iterator(双向迭代器)。<br>list插入一个元素不会导致迭代器失效，而vector则可能引起空间重新配置，导致迭代器全部失效。<br>list元素删除只是指向被删除元素的迭代器失效，其它迭代器不受影响。<br>SGI STL是环状双向链表，只需要一个指针就可以完整表现整个链表。让该指针指向刻意安排在尾端的一个空白节点，便能符合STL“前闭后开”区间的要求。<br>list缺省使用alloc作为空间配置器。<br>由于list不是RandomAccessIterator，无法使用STL算法sort()，所以list自己实现了sort方法。使用了<strong>归并排序</strong>，时间复杂度为<code>n*log(n)</code>。<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//排序 归并排序</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">Tp</span>, <span class="title">class</span> _<span class="title">Alloc</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">list</span>&lt;_Tp, _Alloc&gt;:</span>:sort()</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">// Do nothing if the list has length 0 or 1.</span></span><br><span class="line">  <span class="comment">// 如果是空链表或者只有一个元素，不需要排序。</span></span><br><span class="line">  <span class="keyword">if</span> (_M_node-&gt;_M_next != _M_node &amp;&amp; _M_node-&gt;_M_next-&gt;_M_next != _M_node) &#123;</span><br><span class="line">    <span class="comment">//新的lists，作为中介数据存储区</span></span><br><span class="line">    <span class="built_in">list</span>&lt;_Tp, _Alloc&gt; __carry;</span><br><span class="line">    <span class="built_in">list</span>&lt;_Tp, _Alloc&gt; __counter[<span class="number">64</span>];</span><br><span class="line">    <span class="keyword">int</span> __fill = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (!empty()) &#123;      <span class="comment">//直到当前list为空</span></span><br><span class="line">      __carry.splice(__carry.begin(), *<span class="keyword">this</span>, begin());  <span class="comment">//先将begin()节点移动到__carry中，放在__carry.begin()之前</span></span><br><span class="line">      <span class="keyword">int</span> __i = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">while</span>(__i &lt; __fill &amp;&amp; !__counter[__i].empty()) &#123;  <span class="comment">//如果___i小于__fill 而且 __counter[__i]不为空 合并下</span></span><br><span class="line">        __counter[__i].merge(__carry);                  <span class="comment">//合并__carry到__counter[__i]  __carry变为空</span></span><br><span class="line">        __carry.swap(__counter[__i++]);                 <span class="comment">//交换__counter[__i] 和 __carry  __carry不为空 __counter[__i]为空     i自加1</span></span><br><span class="line">      &#125;</span><br><span class="line">      __carry.swap(__counter[__i]);                     <span class="comment">//交换__counter[__i] 和 __carry  __carry置为空，而__counter[__i]不为空</span></span><br><span class="line">      <span class="keyword">if</span> (__i == __fill) ++__fill;                      <span class="comment">//如果__i已经和__fill相等 就将__fill自加1</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//数据已经全部排序，并放在了__counter数组中，遍历数组，合并它们</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> __i = <span class="number">1</span>; __i &lt; __fill; ++__i)</span><br><span class="line">      __counter[__i].merge(__counter[__i<span class="number">-1</span>]);</span><br><span class="line">    <span class="comment">//和排好序的新链表__counter[__fill-1]交换下</span></span><br><span class="line">    swap(__counter[__fill<span class="number">-1</span>]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>如果需要排序21, 45, 1, 30, 52, 3, 58, 47, 22, 59, 0, 58。<br>具体过程如下：<br>取第1个数21，放入<code>__carry</code>中，没有需要合并的<strong>counter，交换``</strong>carry<code>和</code><strong>counter[0]<code>，</code></strong>fill``自加1等于1</p>
<ul>
<li><code>__counter[0]</code>:21</li>
<li><code>__counter[1]</code>:NULL</li>
</ul>
<p>取第2个数45，放入<code>__carry</code>中，和<code>__counter[0]</code>合并，合并后交换<code>__counter[0]</code>和<code>__carry</code>，<code>__i</code>自加1等于1，没有可合并的啦，交换<code>__counter[1]</code>和<code>__carry</code></p>
<ul>
<li><code>__counter[0]</code>:NULL</li>
<li><code>__counter[1]</code>:21, 45</li>
</ul>
<p>取第3个数1，放入<code>__carry</code>中，没有需要合并的<strong>counter，交换``</strong>carry<code>和</code>__counter[0]``</p>
<ul>
<li><code>__counter[0]</code>:1</li>
<li><code>__counter[1]</code>:21, 45</li>
</ul>
<p>取第4个数30，放入<code>__carry</code>中，和<code>__counter[0]</code>合并，合并后交换<code>__counter[0]</code>和<code>__carry</code>，<code>__i</code>自加1等于1，发现还可以和<code>__counter[1]</code>合并，合并，<code>__i</code>自加1等于2了，交换<code>__counter[2]</code>和<code>__carry</code>，<code>__fill</code>自加1等于2</p>
<ul>
<li><code>__counter[0]</code>:NULL</li>
<li><code>__counter[1]</code>:NULL</li>
<li><code>__counter[2]</code>:1, 21, 30, 45</li>
</ul>
<p>通过上面其实可以发现，<code>__counter</code>存放的节点数目按指数增长<code>__counter[0]</code>存放2个节点，<code>__counter[1]</code>存放4个节点，<code>__counter[2]</code>存放8个节点，… ，<code>__counter[64]</code>存放2^(64)个节点。当节点数目超过其存储的最大数时，便会和更高层的合并。再看下面的的排序情况：</p>
<p>取第5个数52，放入<code>__counter[0]</code></p>
<ul>
<li><code>__counter[0]</code>:52</li>
<li><code>__counter[1]</code>:NULL</li>
<li><code>__counter[2]</code>:1, 21, 30, 45</li>
</ul>
<p>取第6个数3，放入<code>__counter[0]</code>, <code>__counter[0]</code>满了，转移到<code>__counter[1]</code></p>
<ul>
<li><code>__counter[0]</code>:NULL</li>
<li><code>__counter[1]</code>:3, 52</li>
<li><code>__counter[2]</code>:1, 21, 30, 45</li>
</ul>
<p>取第7个数58，放入<code>__counter[0]</code></p>
<ul>
<li><code>__counter[0]</code>:58</li>
<li><code>__counter[1]</code>:3, 52</li>
<li><code>__counter[2]</code>:1, 21, 30, 45</li>
</ul>
<p>取第8个数47，放入<code>__counter[0]</code>, <code>__counter[0]</code>满了，和<code>__counter[1]</code>合并，发现<code>__counter[1]</code>满了，然后再和<code>__counter[2]</code>合并，发现<code>__counter[2]</code>满了，最后转移到<code>__counter[3]</code></p>
<ul>
<li><code>__counter[0]</code>:NULL</li>
<li><code>__counter[1]</code>:NULL</li>
<li><code>__counter[2]</code>:NULL</li>
<li><code>__counter[3]</code>:1, 3, 21, 30, 45, 47, 52, 58</li>
</ul>
<p>取第9个数22，放入<code>__counter[0]</code></p>
<ul>
<li><code>__counter[0]</code>:22</li>
<li><code>__counter[1]</code>:NULL</li>
<li><code>__counter[2]</code>:NULL</li>
<li><code>__counter[3]</code>:1, 3, 21, 30, 45, 47, 52, 58</li>
</ul>
<p>取第10个数59，放入<code>__counter[0]</code>, 转移到<code>__counter[1]</code></p>
<ul>
<li><code>__counter[0]</code>:NULL</li>
<li><code>__counter[1]</code>:22, 59</li>
<li><code>__counter[2]</code>:NULL</li>
<li><code>__counter[3]</code>:1, 3, 21, 30, 45, 47, 52, 58</li>
</ul>
<p>取第11个数0，放入<code>__counter[0]</code></p>
<ul>
<li><code>__counter[0]</code>:0</li>
<li><code>__counter[1]</code>:22, 59</li>
<li><code>__counter[2]</code>:NULL</li>
<li><code>__counter[3]</code>:1, 3, 21, 30, 45, 47, 52, 58</li>
</ul>
<p>取第12个数58，放入<code>__counter[0]</code>,<code>__counter[0]</code>满了，和<code>__counter[1]</code>合并，<code>__counter[1]</code>满了，转移到<code>__counter[2]</code></p>
<ul>
<li><code>__counter[0]</code>:NULL</li>
<li><code>__counter[1]</code>:NULL</li>
<li><code>__counter[2]</code>:0, 22, 58, 59</li>
<li><code>__counter[3]</code>:1, 3, 21, 30, 45, 47, 52, 58</li>
</ul>
<p>现在所有的节点都加入了<code>__counter</code>，遍历<code>__counter</code>，合并它们，最后<code>__counter[__fill-1]</code>就是排序后的目标链表</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ol>
<li>STL源码剖析(侯捷)</li>
<li><a href="http://blog.csdn.net/qq276592716/article/details/7932483" target="_blank" rel="noopener">http://blog.csdn.net/qq276592716/article/details/7932483</a></li>
<li><a href="http://blog.csdn.net/lijun5635/article/details/23963707" target="_blank" rel="noopener">http://blog.csdn.net/lijun5635/article/details/23963707</a></li>
</ol>
]]></content>
      <categories>
        <category>cpp</category>
      </categories>
      <tags>
        <tag>cpp</tag>
        <tag>stl</tag>
      </tags>
  </entry>
  <entry>
    <title>SGI STL 标准库 slist 6</title>
    <url>/2017/06/15/stl-slist-6/</url>
    <content><![CDATA[<p><a href="https://github.com/CaseZheng/SourceCodeAnalysis" target="_blank" rel="noopener">github源码分析仓库</a></p>
<h1 id="slist-单链表"><a href="#slist-单链表" class="headerlink" title="slist 单链表"></a>slist 单链表</h1><hr>
<p>SGI STL提供单向链表(single linked list)，slist不在标准规格之内。<br>slist和list的主要差别：slist迭代器是单向的Forward Iterator，list迭代器是双向的Bidirectional Iterator。slist消耗空间更小，某些操作更快。<br>slist和list插入、移除、接合等操作不会造成原有迭代器失效。<br>根据STL的习惯，插入操作会将新元素插入到指定位置之前，而slist由于没有方便的方法回头定位前一个位置，所以在插入新元素时，必须从头找起，效率低下。因此slist不提供<code>push_back()</code>，只提供<code>push_front()</code>。</p>
<h2 id="slist节点"><a href="#slist节点" class="headerlink" title="slist节点"></a>slist节点</h2><hr>
<h3 id="slist的节点和迭代器的设计架构"><a href="#slist的节点和迭代器的设计架构" class="headerlink" title="slist的节点和迭代器的设计架构"></a>slist的节点和迭代器的设计架构</h3><p><img src="/Picture/STL-slist_node_iterator.jpg" alt="slist的节点和迭代器的设计架构"></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//单向链表的节点基本结构</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">Slist_node_base</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  _Slist_node_base* _M_next;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//单链表的节点结构</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">Tp</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">struct</span> _<span class="title">Slist_node</span> :</span> <span class="keyword">public</span> _Slist_node_base</span><br><span class="line">&#123;</span><br><span class="line">  _Tp _M_data;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="slist迭代器"><a href="#slist迭代器" class="headerlink" title="slist迭代器"></a>slist迭代器</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//slist迭代器基本结构</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">Slist_iterator_base</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">typedef</span> <span class="keyword">size_t</span>               size_type;</span><br><span class="line">  <span class="keyword">typedef</span> <span class="keyword">ptrdiff_t</span>            difference_type;</span><br><span class="line">  <span class="keyword">typedef</span> forward_iterator_tag iterator_category;   <span class="comment">//单向</span></span><br><span class="line"></span><br><span class="line">  _Slist_node_base* _M_node;                        <span class="comment">//指向节点基本结构</span></span><br><span class="line"></span><br><span class="line">  _Slist_iterator_base(_Slist_node_base* __x) : _M_node(__x) &#123;&#125;</span><br><span class="line">  <span class="keyword">void</span> _M_incr() &#123; _M_node = _M_node-&gt;_M_next; &#125;    <span class="comment">//前进一个节点</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">bool</span> <span class="keyword">operator</span>==(<span class="keyword">const</span> _Slist_iterator_base&amp; __x) <span class="keyword">const</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> _M_node == __x._M_node;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">bool</span> <span class="keyword">operator</span>!=(<span class="keyword">const</span> _Slist_iterator_base&amp; __x) <span class="keyword">const</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> _M_node != __x._M_node;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//slist迭代器结构</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">Tp</span>, <span class="title">class</span> _<span class="title">Ref</span>, <span class="title">class</span> _<span class="title">Ptr</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">struct</span> _<span class="title">Slist_iterator</span> :</span> <span class="keyword">public</span> _Slist_iterator_base</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">typedef</span> _Slist_iterator&lt;_Tp, _Tp&amp;, _Tp*&gt;             iterator;</span><br><span class="line">  <span class="keyword">typedef</span> _Slist_iterator&lt;_Tp, <span class="keyword">const</span> _Tp&amp;, <span class="keyword">const</span> _Tp*&gt; const_iterator;</span><br><span class="line">  <span class="keyword">typedef</span> _Slist_iterator&lt;_Tp, _Ref, _Ptr&gt;             _Self;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">typedef</span> _Tp              value_type;</span><br><span class="line">  <span class="keyword">typedef</span> _Ptr             pointer;</span><br><span class="line">  <span class="keyword">typedef</span> _Ref             reference;</span><br><span class="line">  <span class="keyword">typedef</span> _Slist_node&lt;_Tp&gt; _Node;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//在调用slist&lt;T&gt;::end()时会造成_Slist_iterator(0)会调用_Slist_iterator(_Node *__x)</span></span><br><span class="line">  _Slist_iterator(_Node* __x) : _Slist_iterator_base(__x) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  _Slist_iterator() : _Slist_iterator_base(<span class="number">0</span>) &#123;&#125;</span><br><span class="line">  _Slist_iterator(<span class="keyword">const</span> iterator&amp; __x) : _Slist_iterator_base(__x._M_node) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  reference <span class="keyword">operator</span>*() <span class="keyword">const</span> &#123; <span class="keyword">return</span> ((_Node*) _M_node)-&gt;_M_data; &#125;</span><br><span class="line">  pointer <span class="keyword">operator</span>-&gt;() <span class="keyword">const</span> &#123; <span class="keyword">return</span> &amp;(<span class="keyword">operator</span>*()); &#125;</span><br><span class="line"></span><br><span class="line">  _Self&amp; <span class="keyword">operator</span>++()</span><br><span class="line">  &#123;</span><br><span class="line">    _M_incr();</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  _Self <span class="keyword">operator</span>++(<span class="keyword">int</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    _Self __tmp = *<span class="keyword">this</span>;</span><br><span class="line">    _M_incr();</span><br><span class="line">    <span class="keyword">return</span> __tmp;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>两个list迭代器相等判断会调用<code>__Slist_iterator_base::operator==</code>，根据定义，两个slist迭代器是否相等，根据其<code>__Slist_node_base *node</code>是否相等而定。</p>
]]></content>
      <categories>
        <category>cpp</category>
      </categories>
      <tags>
        <tag>cpp</tag>
        <tag>stl</tag>
      </tags>
  </entry>
  <entry>
    <title>SGI STL adapters（配接器) 13</title>
    <url>/2017/06/24/stl-adapters-13/</url>
    <content><![CDATA[<h1 id="配接器概述"><a href="#配接器概述" class="headerlink" title="配接器概述"></a>配接器概述</h1><hr>
<p>配接器在STL组件的灵活组合运用功能上，扮演轴承、转换器的角色。配接器实际上是一种设计模式。将一个class的接口转化为另一个class的接口，使原本因为接口不兼容而不能工作的class，可以正常工作。<br>STL配接器改变容器接口称为container adapter、改变迭代器接口称为iterator adapter、改变仿函数接口称为function adapter。</p>
<h2 id="container-adapters"><a href="#container-adapters" class="headerlink" title="container adapters"></a>container adapters</h2><p>stack和queue都是配接器，底层使用deque，其方法的实现也是转调用deque。</p>
<h2 id="iterator-adapters"><a href="#iterator-adapters" class="headerlink" title="iterator adapters"></a>iterator adapters</h2><p>STL提供许多应用于迭代器身上的配接器，包括insert iterators, reverse iterators,iostream iterators。</p>
<p>insert iterators可以将一般迭代器的赋值操作转化为插入操作。</p>
<ul>
<li>尾部插入操作<code>back_insert_iterator</code></li>
<li>头部插入操作<code>front_insert_iterator</code></li>
<li>任意位置插入操作<code>insert_insert</code></li>
</ul>
<p>提供三个相应函数，提升便利性。<code>back_inserter()</code>、<code>front_inserter()</code>、<code>inserter()</code>。<br>底层维护一个容器，当对insert iterators做赋值操作时，就在insert iterators中对该容器的迭代器做插入操作。</p>
<p>reverse iterator可以将一般迭代器的行进方向逆转，使原本应该前进的<code>operator++</code>变成后退操作，使原本应该后退的<code>operator--</code>变成前进操作。<br>有双向迭代器的容器才可使用reverse iteator迭代器。</p>
<p>iostream iterators可以将迭代器绑定到某个iostream对象身上。</p>
<ul>
<li><code>istream_iterator</code>输入能力</li>
<li><code>ostream_iteraotr</code>输出能力</li>
</ul>
<h2 id="functor-adapters"><a href="#functor-adapters" class="headerlink" title="functor adapters"></a>functor adapters</h2><p>functor adapters是所有配接器中数量最庞大的一个族群，极其灵活，可以配接、配接、再配接。<br>functor adapters可以通过配接器间的绑定、组合、修饰能力，可以无限制创造出各种可能的表达式，搭配STL算法使用。<br>所有期望获得配接能力的组件，本身必须是可配接的。即一元仿函数必须继承<code>unary_function</code>，二元仿函数必须继承<code>binary_function</code>，成员函数经过<code>mem_func</code>处理，一般函数经过<code>ptr_fun</code>处理。一个未经过处理的一般函数可以传递给STL算法使用，但其无法拥有任何配接能力。</p>
]]></content>
      <categories>
        <category>cpp</category>
      </categories>
      <tags>
        <tag>cpp</tag>
        <tag>stl</tag>
      </tags>
  </entry>
  <entry>
    <title>SGI STL 标准库 heap priority-queue 5</title>
    <url>/2017/06/14/stl-heap-priority-queue-5/</url>
    <content><![CDATA[<p><a href="https://github.com/CaseZheng/SourceCodeAnalysis" target="_blank" rel="noopener">github源码分析仓库</a></p>
<h1 id="heap-堆"><a href="#heap-堆" class="headerlink" title="heap 堆"></a>heap 堆</h1><hr>
<p>heap允许用户以任意次序将任何元素推入容器内，但取出时一定是从优先权最高的元素开始取。<br>heap并不是STL容器组件，而是priority-queue的底层所使用的算法。而priority-queue底层缺省使用vector并搭配max-heap算法。根据元素排列方式heap分为max-heap和min-heap两种，max-heap每个节点的键值都大于或等于其子节点键值，min-heap每个节点的键值都小于或等于其子节点键值，因此max-heap最大值在根节点，min-heap最小值在根节点。STL提供max-heap。<br>可以使用数组表示一颗完全二叉树，然后将数组第0位保留，当对完全二叉树位于数组的i处时，其左节点位于数组的<code>2*i</code>处，其右子节点必位于数组的<code>2*i+1</code>处，其父节点位于<code>i/2</code>处。</p>
<h2 id="1-push-heap"><a href="#1-push-heap" class="headerlink" title="1. push_heap"></a>1. push_heap</h2><p>新加入的元素先放在最下层作为叶节点，因为是完全二叉树，所以一定放在最下层的最右边，即底层容器的end()处。<br>然后为了满足max-heap的条件，将这个新节点，和父节点做比较，如果其键值大于父节点，父子节点对换位置，一直向上，直到不需要对换或到根节点为止。<br><img src="/Picture/STL-heap-push_heap.jpg" alt="push_heap算法"></p>
<h2 id="2-pop-heap"><a href="#2-pop-heap" class="headerlink" title="2. pop_heap"></a>2. pop_heap</h2><p>取走最大值(根节点)的操作，先将根节点和最底层最右边的叶节点对调，然后从上到下，用根节点和其左右两个子节点比较，当根节点小于其中任意一个的时候，取最大的那个和根节点对调，根节点作为其子节点，然后该子节点，作为子树的根节点再次判断，重复该过程，直到叶子或其比左右叶子节点都大的时候停止。然后底层容器的end()即为max-heap的最大值。<br><img src="/Picture/STL-heap-pop_heap.jpg" alt="pop_heap算法"></p>
<h2 id="3-sort-heap"><a href="#3-sort-heap" class="headerlink" title="3. sort_heap"></a>3. sort_heap</h2><p>堆排序，每次都取堆顶，放在底层容器的最后端，对整个堆做pop_heap操作，当堆为空时，便可得到递增排序好的序列。<br><img src="/Picture/STL-heap-sort_heap.jpg" alt="sort_heap算法"></p>
<h2 id="4-make-heap"><a href="#4-make-heap" class="headerlink" title="4. make_heap"></a>4. make_heap</h2><p>排列一段现有数据为max-heap, 先找到第一个需要重排的子树头部，排列其成为一个最大堆，指针前移，再排列该树为最大堆，直到走完整个需要重新排列的元素为止。</p>
<h1 id="priority-queue-优先级队列"><a href="#priority-queue-优先级队列" class="headerlink" title="priority-queue 优先级队列"></a>priority-queue 优先级队列</h1><hr>
<p>priority-queue是一个拥有权值概念的queue，允许加入新元素、移除旧元素、查看元素值等功能，由于是queue，所以只允许从底端加入，从顶端取出。<br>priority-queue其内部元素按照权值自动排序，权值高者在在前面。缺省情况下priority-queue利用max-heap完成。priority-queue没有迭代器。priority-queue的实现依靠底层容器的方法和heap的泛型算法。</p>
]]></content>
      <categories>
        <category>cpp</category>
      </categories>
      <tags>
        <tag>cpp</tag>
        <tag>stl</tag>
      </tags>
  </entry>
  <entry>
    <title>SGI STL hashset hashmap hashmultiset hashmultimap 10</title>
    <url>/2017/06/24/stl-hashset-hashmap-10/</url>
    <content><![CDATA[<h1 id="hash-set"><a href="#hash-set" class="headerlink" title="hash_set"></a>hash_set</h1><p>STL set多以RB-tree作为底层容器，SGI在STL标准规范外提供hash_set，以hashtable为底层机制。hash_set所提供的操作接口，hashtable都有提供，所以几乎所有hash_set的操作都是转调用hashtable的操作。<br>set底层使用RB-tree可以自动排序，而hash_set没有。<br>hash_set和set元素的键值就是实值，实值就是键值。</p>
<h1 id="hash-map"><a href="#hash-map" class="headerlink" title="hash_map"></a>hash_map</h1><p>STL map多以RB-tree作为底层容器，SGI在STL标准规范外提供hash_map，以hashtable为底层机制。hash_map所提供的操作接口，hashtable都有提供，所以几乎所有hash_map的操作都是转调用hashtable的操作。<br>map底层使用RB-tree可以自动排序，而hash_map没有。<br>hahsh_map和map每个元素同时拥有实值和键值。</p>
<h1 id="hash-multiset"><a href="#hash-multiset" class="headerlink" title="hash_multiset"></a>hash_multiset</h1><p>hash_multiset与multiset特性相同，唯一差别是底层容器，hash_multiset底层是hashtable，因此hash_multiset底层未排序。<br>hash_multiset与hash_set实现唯一差别是hash_multiset元素插入底层使用hashtable的insert_equal()，而hash_set使用令insert_unique()。</p>
<h1 id="hash-multimap"><a href="#hash-multimap" class="headerlink" title="hash_multimap"></a>hash_multimap</h1><p>hash_multimap与multimap特性相同，唯一差别是底层容器，hash_multimap底层是hashtable，因此hash_multimap底层未排序。<br>hash_multimap与hash_map实现唯一差别是hash_multimap元素插入底层使用hashtable的insert_equal()，而hash_map使用令insert_unique()。</p>
]]></content>
      <categories>
        <category>cpp</category>
      </categories>
      <tags>
        <tag>cpp</tag>
        <tag>stl</tag>
      </tags>
  </entry>
  <entry>
    <title>SGI STL functors（仿函数） 12</title>
    <url>/2017/06/24/stl-functors-12/</url>
    <content><![CDATA[<h1 id="仿函数（函数对象）大概介绍"><a href="#仿函数（函数对象）大概介绍" class="headerlink" title="仿函数（函数对象）大概介绍"></a>仿函数（函数对象）大概介绍</h1><hr>
<p>函数对象，即”行为类似函数”的对象，重载function call运算子(operator ())。<br><img src="/Picture/STL-funcotr.jpg" alt="STL仿函数与STL算法间关系"><br>STL仿函数根据操作数个数划分，可分为一元和二元仿函数，按功能划分可分为算数运算、关系运算、逻辑运算三大类。<br>使用内建仿函数需包含<code>&lt;functional&gt;</code>头文件。</p>
<h1 id="仿函数可配接的关键"><a href="#仿函数可配接的关键" class="headerlink" title="仿函数可配接的关键"></a>仿函数可配接的关键</h1><hr>
<p>为了拥有配接能力，需要依照规定定义自己的5个相应型别。仿函数的相应型别主要用来表现函数参数型别和传回值型别。<br>为了方便期间，<code>&lt;stl_function.h&gt;</code>定义了两个class，分别表示一元仿函数和二元仿函数(STL不支持三元仿函数)，其中只有型别定义，没有成员函数和成员变量。任何仿函数只需要根据需求继承其中一个class即可拥有相应型别，也就自动拥有了配接能力。</p>
<h2 id="unary-function"><a href="#unary-function" class="headerlink" title="unary_function"></a>unary_function</h2><p><code>unary_function</code>用来呈现一元仿函数的参数型别和返回值型别。<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">Arg</span>, <span class="title">class</span> _<span class="title">Result</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">struct</span> <span class="title">unary_function</span> &#123;</span></span><br><span class="line">  <span class="keyword">typedef</span> _Arg argument_type;</span><br><span class="line">  <span class="keyword">typedef</span> _Result result_type;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<h2 id="binary-function"><a href="#binary-function" class="headerlink" title="binary_function"></a>binary_function</h2><p><code>binary_function</code>用来呈现二元函数的第一参数型别、第二参数型别、返回值型别。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">Arg1</span>, <span class="title">class</span> _<span class="title">Arg2</span>, <span class="title">class</span> _<span class="title">Result</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">struct</span> <span class="title">binary_function</span> &#123;</span></span><br><span class="line">  <span class="keyword">typedef</span> _Arg1 first_argument_type;</span><br><span class="line">  <span class="keyword">typedef</span> _Arg2 second_argument_type;</span><br><span class="line">  <span class="keyword">typedef</span> _Result result_type;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>binder1st配接器用于将某个二元仿函数转化为一元仿函数</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">Operation</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">binder1st</span></span></span><br><span class="line"><span class="class">  :</span> <span class="keyword">public</span> unary_function&lt;<span class="keyword">typename</span> _Operation::second_argument_type,</span><br><span class="line">                          <span class="keyword">typename</span> _Operation::result_type&gt; &#123;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">  _Operation op;</span><br><span class="line">  <span class="keyword">typename</span> _Operation::first_argument_type value;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  binder1st(<span class="keyword">const</span> _Operation&amp; __x,</span><br><span class="line">            <span class="keyword">const</span> <span class="keyword">typename</span> _Operation::first_argument_type&amp; __y)</span><br><span class="line">      : op(__x), value(__y) &#123;&#125;</span><br><span class="line">  <span class="keyword">typename</span> _Operation::result_type</span><br><span class="line">  <span class="keyword">operator</span>()(<span class="keyword">const</span> <span class="keyword">typename</span> _Operation::second_argument_type&amp; __x) <span class="keyword">const</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> op(value, __x);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="算数仿函数"><a href="#算数仿函数" class="headerlink" title="算数仿函数"></a>算数仿函数</h1><hr>
<p>STL内建算数仿函数支持加、减、乘、除、求余、否定运算。除了否定运算其它均为二元运算。</p>
<ul>
<li>加:<code>plus&lt;T&gt;</code></li>
<li>减:<code>minus&lt;T&gt;</code></li>
<li>乘:<code>multiplies&lt;T&gt;</code></li>
<li>除:<code>divides&lt;T&gt;</code></li>
<li>求余:<code>modulus&lt;T&gt;</code></li>
<li>否定:<code>negate&lt;T&gt;</code></li>
</ul>
<h1 id="关系运算类仿函数"><a href="#关系运算类仿函数" class="headerlink" title="关系运算类仿函数"></a>关系运算类仿函数</h1><hr>
<p>STL内建关系运算符仿函数支持等于、不等于、大于、大于等于、小于、小于等于六类。每一个都是二元源算。</p>
<ul>
<li>等于:<code>equal_to&lt;T&gt;</code></li>
<li>不等于:<code>not_equal_to&lt;T&gt;</code></li>
<li>大于:<code>greater&lt;T&gt;</code></li>
<li>大于等于:<code>greater_equal&lt;T&gt;</code></li>
<li>小于:<code>less&lt;T&gt;</code></li>
<li>小于等于:<code>less_equal&lt;T&gt;</code></li>
</ul>
<h1 id="逻辑运算符仿函数"><a href="#逻辑运算符仿函数" class="headerlink" title="逻辑运算符仿函数"></a>逻辑运算符仿函数</h1><hr>
<p>STL内建的逻辑运算符仿函数支持And、Or、Not三种，And和Or为二元运算符，Not为一元运算符。</p>
<ul>
<li>And:<code>logical_and&lt;T&gt;</code></li>
<li>Or:<code>logical_or&lt;T&gt;</code></li>
<li>Not:<code>logical_not&lt;T&gt;</code></li>
</ul>
<h1 id="功能极其简单的仿函数都是为了搭配STL算法。"><a href="#功能极其简单的仿函数都是为了搭配STL算法。" class="headerlink" title="功能极其简单的仿函数都是为了搭配STL算法。"></a>功能极其简单的仿函数都是为了搭配STL算法。</h1><hr>
]]></content>
      <categories>
        <category>cpp</category>
      </categories>
      <tags>
        <tag>cpp</tag>
        <tag>stl</tag>
      </tags>
  </entry>
  <entry>
    <title>SGI STL-algorithms 介绍分析 11</title>
    <url>/2017/06/24/stl-algorithms-11/</url>
    <content><![CDATA[<h1 id="算法分析和复杂度表示O"><a href="#算法分析和复杂度表示O" class="headerlink" title="算法分析和复杂度表示O()"></a>算法分析和复杂度表示O()</h1><p>算法复杂度分析：时间和空间。<br>Big-Oh表示法，如果有任何常数c和N0，使得当<code>N&gt;=N0</code>时，<code>T(N)&lt;=cF(N)</code>，那么可将<code>T(N)</code>的复杂度表示为<code>O(F(N))</code>。<br>Big-Oh被普遍运用，但不适合标记数据量小的情况。</p>
<h1 id="算法总览-质变算法-非质变算法"><a href="#算法总览-质变算法-非质变算法" class="headerlink" title="算法总览 质变算法 非质变算法"></a>算法总览 质变算法 非质变算法</h1><p>质变算法会改变操作对象的值。<br>非质变算法不改变操作对象的值。</p>
<h1 id="STL算法的一般形式"><a href="#STL算法的一般形式" class="headerlink" title="STL算法的一般形式"></a>STL算法的一般形式</h1><p>所有泛型算法前两个参数都是一对迭代器(iterator)，通常称为first和last，用以标识算法的操作区间。STL习惯采用前闭后开区间表示法[first, last)，表示first到last(不含last)之间的所有元素。<br><code>[first, last)</code>必须可以支持<code>operator++</code>，从first到last。<br>迭代器分为五类，每个STL算法的申明都表现出其所需要的最低程度的迭代器类型。<br>许多STL算法不只支持一个版本，其中某个版本采用缺省运算行为，另一个版本提供额外参数，允许外界传入仿函数(functor)，以便采用其它策略。<br>所有数值算法实现于SGI<code>&lt;stl_numeric.h&gt;</code>，用户使用必须包含<code>&lt;numeric&gt;</code> ，其它STL算法实现于SGI的<code>&lt;stl_algo.h&gt;</code>和<code>&lt;stl_algobase.h&gt;</code>，用户使用需要包含<code>&lt;algorithm&gt;</code>。</p>
<h1 id="STL算法泛化过程"><a href="#STL算法泛化过程" class="headerlink" title="STL算法泛化过程"></a>STL算法泛化过程</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//该算法暴露令容器过多实现细节，太过依附特定容器。</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> *<span class="title">find</span><span class="params">(<span class="keyword">int</span> *arrayHead, <span class="keyword">int</span> arraySize, <span class="keyword">int</span> value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;arraySize; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(arrayHead[i] == value)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &amp;(attayHead[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//该算法只能针对int*数组</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> *<span class="title">find</span><span class="params">(<span class="keyword">int</span> *begin, <span class="keyword">int</span> *end, <span class="keyword">int</span> value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(begin!=end &amp;&amp; *begin!=value)</span><br><span class="line">    &#123;</span><br><span class="line">        ++begin;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> begin;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//该算法将传值改为传引用，使用operator!= operator* operator++，但只能对指针类型使用，可改造使普通对象重载操作符也可使用该算法。</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function">T *<span class="title">find</span><span class="params">(T *begin, T *end, <span class="keyword">const</span> T&amp; value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(begin!=end &amp;&amp; *begin!=value)</span><br><span class="line">    &#123;</span><br><span class="line">        ++begin;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> begin;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//最终形式</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> Iterator, <span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function">Iterator <span class="title">find</span><span class="params">(Iterator begin, Iterator end, <span class="keyword">const</span> T&amp; value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(begin!=end &amp;&amp; *begin!=value)</span><br><span class="line">    &#123;</span><br><span class="line">        ++begin;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> begin;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>cpp</category>
      </categories>
      <tags>
        <tag>cpp</tag>
        <tag>stl</tag>
      </tags>
  </entry>
  <entry>
    <title>mongodb 基础学习</title>
    <url>/2017/07/12/mongodb/</url>
    <content><![CDATA[<h1 id="mongodb各个程序功能介绍"><a href="#mongodb各个程序功能介绍" class="headerlink" title="mongodb各个程序功能介绍"></a>mongodb各个程序功能介绍</h1><p>bsondump 导出bson结构<br>mongo 客户端<br>mongod 服务器<br>mongodump 整体数据库导出 二进制<br>mongoexport 导出易识别的json文档或csv文档<br>mongorestore 数据库整体导入<br>mongos 路由器(分片时用)</p>
<h1 id="mongodb启动-连接"><a href="#mongodb启动-连接" class="headerlink" title="mongodb启动 连接"></a>mongodb启动 连接</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mongod --dbpath=/ptah/to/database --logpath=/path/to/logfile --fork --port 27017</span><br></pre></td></tr></table></figure>
<p>参数解释：</p>
<ol>
<li><code>--dbpath</code>数据存储目录</li>
<li><code>--logpath</code>日志存储文件</li>
<li><code>--port</code> 允许端口</li>
<li><code>--fork</code> 后台允许</li>
<li><code>--smallfiles</code></li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo mongod --dbpath=/data/mongodb --logpath=/data/mongodb/mongodb.log --port 27017 --fork</span><br><span class="line"></span><br><span class="line">about to fork child process, waiting until server is ready for connections.</span><br><span class="line">forked process: 4237</span><br><span class="line">child process started successfully, parent exiting</span><br></pre></td></tr></table></figure>
<p>mongdb连接，默认连接27017端口<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[CaseZheng@home mongodb]$ mongo</span><br><span class="line">MongoDB shell version: 3.2.12</span><br><span class="line">connecting to: test</span><br><span class="line">Welcome to the MongoDB shell.</span><br><span class="line">For interactive help, type &quot;help&quot;.</span><br><span class="line">For more comprehensive documentation, see</span><br><span class="line">        http://docs.mongodb.org/</span><br><span class="line">Questions? Try the support group</span><br><span class="line">        http://groups.google.com/group/mongodb-user</span><br><span class="line">Server has startup warnings:</span><br><span class="line">2017-07-12T23:32:29.327+0800 I CONTROL  [initandlisten] ** WARNING: You are running this process as the root user, which is not recommended.</span><br><span class="line">2017-07-12T23:32:29.327+0800 I CONTROL  [initandlisten]</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></p>
<h1 id="mongodb入门命令"><a href="#mongodb入门命令" class="headerlink" title="mongodb入门命令"></a>mongodb入门命令</h1><ol>
<li>show dbs;  show databases; 查看数据库</li>
<li>use databasesname;  选中数据库</li>
<li>show tables; show collection; 查看数据库中的所有表</li>
<li>创建数据库 隐式创建 use databasesname 如果数据库不存在，则创建</li>
<li>db.createCollection(‘tablename’) 创建表</li>
<li>db.tablename.drop() 删除表</li>
<li>db.dropDatabase() 删除数据库</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;show databases</span><br><span class="line">local  0.000GB</span><br><span class="line">&gt; use local</span><br><span class="line">switched to db local</span><br><span class="line">&gt; show tables</span><br><span class="line">startup_log</span><br><span class="line">&gt; use test</span><br><span class="line">switched to db test</span><br><span class="line">&gt; db.createCollection(&apos;stu&apos;)</span><br><span class="line">&#123; &quot;ok&quot; : 1 &#125;</span><br><span class="line">&gt; show tables</span><br><span class="line">stu</span><br><span class="line">&gt; db.stu.drop()</span><br><span class="line">true</span><br><span class="line">&gt; db.dropDatabase()</span><br><span class="line">&#123; &quot;dropped&quot; : &quot;test&quot;, &quot;ok&quot; : 1 &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
<h1 id="mongodb增"><a href="#mongodb增" class="headerlink" title="mongodb增"></a>mongodb增</h1><p>db.tablename.insert(jsonvalue);<br>一次可插入多个数据，使用json数组即可。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; db.test.insert(&#123;&quot;id&quot;:2,&quot;name&quot;:&quot;casezheng&quot;&#125;);</span><br><span class="line">WriteResult(&#123; &quot;nInserted&quot; : 1 &#125;)</span><br><span class="line">&gt; show tables;</span><br><span class="line">test</span><br><span class="line">&gt; db.test.find()</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;598090b7817bfe1400a371be&quot;), &quot;id&quot; : 2, &quot;name&quot; : &quot;casezheng&quot; &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></p>
<h1 id="mongodb删"><a href="#mongodb删" class="headerlink" title="mongodb删"></a>mongodb删</h1><p>db.tablename.remove(expression);<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; db.test.find()</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;598090b7817bfe1400a371be&quot;), &quot;id&quot; : 2, &quot;name&quot; : &quot;casezheng&quot; &#125;</span><br><span class="line">&gt;</span><br><span class="line">&gt; db.test.insert(&#123;&quot;id&quot;:3,&quot;name&quot;:&quot;casezheng&quot;&#125;);</span><br><span class="line">WriteResult(&#123; &quot;nInserted&quot; : 1 &#125;)</span><br><span class="line">&gt; db.test.insert(&#123;&quot;id&quot;:4,&quot;name&quot;:&quot;casezheng&quot;&#125;);</span><br><span class="line">WriteResult(&#123; &quot;nInserted&quot; : 1 &#125;)</span><br><span class="line">&gt; db.test.insert(&#123;&quot;id&quot;:5,&quot;name&quot;:&quot;casezheng&quot;&#125;);</span><br><span class="line">WriteResult(&#123; &quot;nInserted&quot; : 1 &#125;)</span><br><span class="line">&gt; db.test.insert(&#123;&quot;id&quot;:6,&quot;name&quot;:&quot;casezheng&quot;&#125;);</span><br><span class="line">WriteResult(&#123; &quot;nInserted&quot; : 1 &#125;)</span><br><span class="line">&gt; db.test.remove(&#123;&quot;id&quot;:2&#125;)</span><br><span class="line">WriteResult(&#123; &quot;nRemoved&quot; : 1 &#125;)</span><br><span class="line">&gt; db.test.find()</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;598091e7817bfe1400a371bf&quot;), &quot;id&quot; : 3, &quot;name&quot; : &quot;casezheng&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;598091eb817bfe1400a371c0&quot;), &quot;id&quot; : 4, &quot;name&quot; : &quot;casezheng&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;598091ee817bfe1400a371c1&quot;), &quot;id&quot; : 5, &quot;name&quot; : &quot;casezheng&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;598091f2817bfe1400a371c2&quot;), &quot;id&quot; : 6, &quot;name&quot; : &quot;casezheng&quot; &#125;</span><br><span class="line">&gt; db.test.remove(&#123;&quot;id&quot;:6&#125;)</span><br><span class="line">WriteResult(&#123; &quot;nRemoved&quot; : 1 &#125;)</span><br><span class="line">&gt; db.test.find()</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;598091e7817bfe1400a371bf&quot;), &quot;id&quot; : 3, &quot;name&quot; : &quot;casezheng&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;598091eb817bfe1400a371c0&quot;), &quot;id&quot; : 4, &quot;name&quot; : &quot;casezheng&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;598091ee817bfe1400a371c1&quot;), &quot;id&quot; : 5, &quot;name&quot; : &quot;casezheng&quot; &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></p>
<p>db.tablename.remove(expression, true);不论匹配多少行只删掉一行<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; db.test.find()</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;598091e7817bfe1400a371bf&quot;), &quot;id&quot; : 3, &quot;name&quot; : &quot;casezheng&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;598091eb817bfe1400a371c0&quot;), &quot;id&quot; : 4, &quot;name&quot; : &quot;casezheng&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;598091ee817bfe1400a371c1&quot;), &quot;id&quot; : 5, &quot;name&quot; : &quot;casezheng&quot; &#125;</span><br><span class="line">&gt; db.test.insert(&#123;&quot;id&quot;:5,&quot;name&quot;:&quot;casezheng2&quot;&#125;);</span><br><span class="line">WriteResult(&#123; &quot;nInserted&quot; : 1 &#125;)</span><br><span class="line">&gt; db.test.find()</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;598091e7817bfe1400a371bf&quot;), &quot;id&quot; : 3, &quot;name&quot; : &quot;casezheng&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;598091eb817bfe1400a371c0&quot;), &quot;id&quot; : 4, &quot;name&quot; : &quot;casezheng&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;598091ee817bfe1400a371c1&quot;), &quot;id&quot; : 5, &quot;name&quot; : &quot;casezheng&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;598092ac817bfe1400a371c3&quot;), &quot;id&quot; : 5, &quot;name&quot; : &quot;casezheng2&quot; &#125;</span><br><span class="line">&gt; db.test.remove(&#123;&quot;id&quot;:5&#125;, true);</span><br><span class="line">WriteResult(&#123; &quot;nRemoved&quot; : 1 &#125;)</span><br><span class="line">&gt; db.test.find()</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;598091e7817bfe1400a371bf&quot;), &quot;id&quot; : 3, &quot;name&quot; : &quot;casezheng&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;598091eb817bfe1400a371c0&quot;), &quot;id&quot; : 4, &quot;name&quot; : &quot;casezheng&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;598092ac817bfe1400a371c3&quot;), &quot;id&quot; : 5, &quot;name&quot; : &quot;casezheng2&quot; &#125;</span><br><span class="line">&gt; db.test.insert(&#123;&quot;id&quot;:5,&quot;name&quot;:&quot;casezheng3&quot;&#125;);</span><br><span class="line">WriteResult(&#123; &quot;nInserted&quot; : 1 &#125;)</span><br><span class="line">&gt; db.test.remove(&#123;&quot;id&quot;:5&#125;);</span><br><span class="line">WriteResult(&#123; &quot;nRemoved&quot; : 2 &#125;)</span><br><span class="line">&gt; db.test.find()</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;598091e7817bfe1400a371bf&quot;), &quot;id&quot; : 3, &quot;name&quot; : &quot;casezheng&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;598091eb817bfe1400a371c0&quot;), &quot;id&quot; : 4, &quot;name&quot; : &quot;casezheng&quot; &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></p>
<h1 id="mongodb改"><a href="#mongodb改" class="headerlink" title="mongodb改"></a>mongodb改</h1><p>db.tablename.update(expression, jsonvalue);将符合expression的行改为jsonvalue<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> db.test.find()</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;598091e7817bfe1400a371bf&quot;), &quot;id&quot; : 3, &quot;name&quot; : &quot;casezheng&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;598091eb817bfe1400a371c0&quot;), &quot;id&quot; : 4, &quot;name&quot; : &quot;casezheng&quot; &#125;</span><br><span class="line">&gt; db.test.update(&#123;&quot;id&quot;:3&#125;, &#123;&quot;name&quot;:&quot;casezhenghaha&quot;&#125;)</span><br><span class="line">WriteResult(&#123; &quot;nMatched&quot; : 1, &quot;nUpserted&quot; : 0, &quot;nModified&quot; : 1 &#125;)</span><br><span class="line">&gt; db.test.find()</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;598091e7817bfe1400a371bf&quot;), &quot;name&quot; : &quot;casezhenghaha&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;598091eb817bfe1400a371c0&quot;), &quot;id&quot; : 4, &quot;name&quot; : &quot;casezheng&quot; &#125;</span><br></pre></td></tr></table></figure></p>
<p>可使用谓词set设置其中某个列的值<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; db.test.find()</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;598091e7817bfe1400a371bf&quot;), &quot;name&quot; : &quot;casezhenghaha&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;598091eb817bfe1400a371c0&quot;), &quot;id&quot; : 4, &quot;name&quot; : &quot;casezheng&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;59809440817bfe1400a371c5&quot;), &quot;id&quot; : 5, &quot;name&quot; : &quot;casezheng&quot; &#125;</span><br><span class="line">&gt; db.test.update(&#123;&quot;id&quot;:4&#125;, &#123;$set:&#123;&quot;name&quot;:&quot;casezhenghehehe&quot;&#125;&#125;)</span><br><span class="line">WriteResult(&#123; &quot;nMatched&quot; : 1, &quot;nUpserted&quot; : 0, &quot;nModified&quot; : 1 &#125;)</span><br><span class="line">&gt; db.test.find()</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;598091e7817bfe1400a371bf&quot;), &quot;name&quot; : &quot;casezhenghaha&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;598091eb817bfe1400a371c0&quot;), &quot;id&quot; : 4, &quot;name&quot; : &quot;casezhenghehehe&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;59809440817bfe1400a371c5&quot;), &quot;id&quot; : 5, &quot;name&quot; : &quot;casezheng&quot; &#125;</span><br></pre></td></tr></table></figure></p>
<p>unset 删除某个列<br>rename 重命名某个列<br>inc 增长某个列</p>
<h1 id="mongodb查"><a href="#mongodb查" class="headerlink" title="mongodb查"></a>mongodb查</h1><p>db.tablename.find(expression);<br>db.tablename.findOne(expression);<br>查询所有<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; db.test.find()</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;598091e7817bfe1400a371bf&quot;), &quot;name&quot; : &quot;casezhenghaha&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;598091eb817bfe1400a371c0&quot;), &quot;id&quot; : 4, &quot;name&quot; : &quot;casezhenghehehe&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;59809440817bfe1400a371c5&quot;), &quot;id&quot; : 5, &quot;name&quot; : &quot;casezheng&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;598095c0817bfe1400a371c6&quot;), &quot;id&quot; : 5, &quot;name&quot; : &quot;casezheng4&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;598095c3817bfe1400a371c7&quot;), &quot;id&quot; : 5, &quot;name&quot; : &quot;casezheng45&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;598095c7817bfe1400a371c8&quot;), &quot;id&quot; : 3, &quot;name&quot; : &quot;casezheng45&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;598095ca817bfe1400a371c9&quot;), &quot;id&quot; : 2, &quot;name&quot; : &quot;casezheng45&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;598095cd817bfe1400a371ca&quot;), &quot;id&quot; : 1, &quot;name&quot; : &quot;casezheng45&quot; &#125;</span><br></pre></td></tr></table></figure></p>
<p>查询单独的某列<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; db.test.find(&#123;&quot;id&quot;:4&#125;, &#123;&quot;name&quot;:1&#125;)</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;598091eb817bfe1400a371c0&quot;), &quot;name&quot; : &quot;casezhenghehehe&quot; &#125;</span><br></pre></td></tr></table></figure></p>
<p>findOne只查询一行<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; db.test.find(&#123;&quot;id&quot;:5&#125;)</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;59809440817bfe1400a371c5&quot;), &quot;id&quot; : 5, &quot;name&quot; : &quot;casezheng&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;598095c0817bfe1400a371c6&quot;), &quot;id&quot; : 5, &quot;name&quot; : &quot;casezheng4&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;598095c3817bfe1400a371c7&quot;), &quot;id&quot; : 5, &quot;name&quot; : &quot;casezheng45&quot; &#125;</span><br><span class="line">&gt; db.test.findOne(&#123;&quot;id&quot;:5&#125;)</span><br><span class="line">&#123;</span><br><span class="line">        &quot;_id&quot; : ObjectId(&quot;59809440817bfe1400a371c5&quot;),</span><br><span class="line">        &quot;id&quot; : 5,</span><br><span class="line">        &quot;name&quot; : &quot;casezheng&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="mongodb查询表达式"><a href="#mongodb查询表达式" class="headerlink" title="mongodb查询表达式"></a>mongodb查询表达式</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; db.test.find()</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;598091e7817bfe1400a371bf&quot;), &quot;name&quot; : &quot;casezhenghaha&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;598091eb817bfe1400a371c0&quot;), &quot;id&quot; : 4, &quot;name&quot; : &quot;casezhenghehehe&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;59809440817bfe1400a371c5&quot;), &quot;id&quot; : 5, &quot;name&quot; : &quot;casezheng&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;598095c0817bfe1400a371c6&quot;), &quot;id&quot; : 5, &quot;name&quot; : &quot;casezheng4&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;598095c3817bfe1400a371c7&quot;), &quot;id&quot; : 5, &quot;name&quot; : &quot;casezheng45&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;598095c7817bfe1400a371c8&quot;), &quot;id&quot; : 3, &quot;name&quot; : &quot;casezheng45&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;598095ca817bfe1400a371c9&quot;), &quot;id&quot; : 2, &quot;name&quot; : &quot;casezheng45&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;598095cd817bfe1400a371ca&quot;), &quot;id&quot; : 1, &quot;name&quot; : &quot;casezheng45&quot; &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
<p>不等于ne<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; db.test.find(&#123;&quot;id&quot;:&#123;$ne:5&#125;&#125;)</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;598091e7817bfe1400a371bf&quot;), &quot;name&quot; : &quot;casezhenghaha&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;598091eb817bfe1400a371c0&quot;), &quot;id&quot; : 4, &quot;name&quot; : &quot;casezhenghehehe&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;598095c7817bfe1400a371c8&quot;), &quot;id&quot; : 3, &quot;name&quot; : &quot;casezheng45&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;598095ca817bfe1400a371c9&quot;), &quot;id&quot; : 2, &quot;name&quot; : &quot;casezheng45&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;598095cd817bfe1400a371ca&quot;), &quot;id&quot; : 1, &quot;name&quot; : &quot;casezheng45&quot; &#125;</span><br></pre></td></tr></table></figure></p>
<p>in nin<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; db.test.find(&#123;&quot;id&quot;:&#123;$in:[4, 5, 3]&#125;&#125;)</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;598091eb817bfe1400a371c0&quot;), &quot;id&quot; : 4, &quot;name&quot; : &quot;casezhenghehehe&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;59809440817bfe1400a371c5&quot;), &quot;id&quot; : 5, &quot;name&quot; : &quot;casezheng&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;598095c0817bfe1400a371c6&quot;), &quot;id&quot; : 5, &quot;name&quot; : &quot;casezheng4&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;598095c3817bfe1400a371c7&quot;), &quot;id&quot; : 5, &quot;name&quot; : &quot;casezheng45&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;598095c7817bfe1400a371c8&quot;), &quot;id&quot; : 3, &quot;name&quot; : &quot;casezheng45&quot; &#125;</span><br><span class="line">&gt; db.test.find(&#123;&quot;id&quot;:&#123;$nin:[4, 5, 3]&#125;&#125;)</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;598091e7817bfe1400a371bf&quot;), &quot;name&quot; : &quot;casezhenghaha&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;598095ca817bfe1400a371c9&quot;), &quot;id&quot; : 2, &quot;name&quot; : &quot;casezheng45&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;598095cd817bfe1400a371ca&quot;), &quot;id&quot; : 1, &quot;name&quot; : &quot;casezheng45&quot; &#125;</span><br></pre></td></tr></table></figure></p>
<p>all<br>取出field列是数组，且至少包含v1,v2值<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;fiels:&#123;$all:[v1, v2]&#125;&#125;</span><br></pre></td></tr></table></figure></p>
<p>exi存在某个属性<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; db.test.find(&#123;&quot;id&quot;:&#123;$exists:1&#125;&#125;)</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;598091eb817bfe1400a371c0&quot;), &quot;id&quot; : 4, &quot;name&quot; : &quot;casezhenghehehe&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;59809440817bfe1400a371c5&quot;), &quot;id&quot; : 5, &quot;name&quot; : &quot;casezheng&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;598095c0817bfe1400a371c6&quot;), &quot;id&quot; : 5, &quot;name&quot; : &quot;casezheng4&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;598095c3817bfe1400a371c7&quot;), &quot;id&quot; : 5, &quot;name&quot; : &quot;casezheng45&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;598095c7817bfe1400a371c8&quot;), &quot;id&quot; : 3, &quot;name&quot; : &quot;casezheng45&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;598095ca817bfe1400a371c9&quot;), &quot;id&quot; : 2, &quot;name&quot; : &quot;casezheng45&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;598095cd817bfe1400a371ca&quot;), &quot;id&quot; : 1, &quot;name&quot; : &quot;casezheng45&quot; &#125;</span><br></pre></td></tr></table></figure></p>
<p>与，写在一个json里面即可<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; db.test.find()</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;598091e7817bfe1400a371bf&quot;), &quot;name&quot; : &quot;casezhenghaha&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;598091eb817bfe1400a371c0&quot;), &quot;id&quot; : 4, &quot;name&quot; : &quot;casezhenghehehe&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;59809440817bfe1400a371c5&quot;), &quot;id&quot; : 5, &quot;name&quot; : &quot;casezheng&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;598095c0817bfe1400a371c6&quot;), &quot;id&quot; : 5, &quot;name&quot; : &quot;casezheng4&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;598095c3817bfe1400a371c7&quot;), &quot;id&quot; : 5, &quot;name&quot; : &quot;casezheng45&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;598095c7817bfe1400a371c8&quot;), &quot;id&quot; : 3, &quot;name&quot; : &quot;casezheng45&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;598095ca817bfe1400a371c9&quot;), &quot;id&quot; : 2, &quot;name&quot; : &quot;casezheng45&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;598095cd817bfe1400a371ca&quot;), &quot;id&quot; : 1, &quot;name&quot; : &quot;casezheng45&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;59809b69817bfe1400a371cb&quot;), &quot;id&quot; : 10 &#125;</span><br><span class="line">&gt; db.test.find(&#123;&quot;id&quot;:&#123;$ne:5&#125;, &quot;name&quot;:&#123;$exists:1&#125;&#125;)</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;598091e7817bfe1400a371bf&quot;), &quot;name&quot; : &quot;casezhenghaha&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;598091eb817bfe1400a371c0&quot;), &quot;id&quot; : 4, &quot;name&quot; : &quot;casezhenghehehe&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;598095c7817bfe1400a371c8&quot;), &quot;id&quot; : 3, &quot;name&quot; : &quot;casezheng45&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;598095ca817bfe1400a371c9&quot;), &quot;id&quot; : 2, &quot;name&quot; : &quot;casezheng45&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;598095cd817bfe1400a371ca&quot;), &quot;id&quot; : 1, &quot;name&quot; : &quot;casezheng45&quot; &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></p>
<p>nor 所有条件都不满足的文档为真返回<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; db.test.find(&#123;$nor:[&#123;&quot;id&quot;:5&#125;,&#123;&quot;name&quot;:&quot;casezheng&quot;&#125;]&#125;);</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;598091e7817bfe1400a371bf&quot;), &quot;name&quot; : &quot;casezhenghaha&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;598091eb817bfe1400a371c0&quot;), &quot;id&quot; : 4, &quot;name&quot; : &quot;casezhenghehehe&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;598095c7817bfe1400a371c8&quot;), &quot;id&quot; : 3, &quot;name&quot; : &quot;casezheng45&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;598095ca817bfe1400a371c9&quot;), &quot;id&quot; : 2, &quot;name&quot; : &quot;casezheng45&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;598095cd817bfe1400a371ca&quot;), &quot;id&quot; : 1, &quot;name&quot; : &quot;casezheng45&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;59809b69817bfe1400a371cb&quot;), &quot;id&quot; : 10 &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></p>
<p>where速度慢</p>
<h1 id="mongodb游标"><a href="#mongodb游标" class="headerlink" title="mongodb游标"></a>mongodb游标</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; var cursor = db.test.find()</span><br><span class="line">&gt; while(cursor.hasNext())&#123;</span><br><span class="line">... printjsononeline(cursor.next())</span><br><span class="line">... &#125;</span><br><span class="line">&#123;  &quot;_id&quot; : ObjectId(&quot;598091e7817bfe1400a371bf&quot;),  &quot;name&quot; : &quot;casezhenghaha&quot; &#125;</span><br><span class="line">&#123;  &quot;_id&quot; : ObjectId(&quot;598091eb817bfe1400a371c0&quot;),  &quot;id&quot; : 4,  &quot;name&quot; : &quot;casezhenghehehe&quot; &#125;</span><br><span class="line">&#123;  &quot;_id&quot; : ObjectId(&quot;59809440817bfe1400a371c5&quot;),  &quot;id&quot; : 5,  &quot;name&quot; : &quot;casezheng&quot; &#125;</span><br><span class="line">&#123;  &quot;_id&quot; : ObjectId(&quot;598095c0817bfe1400a371c6&quot;),  &quot;id&quot; : 5,  &quot;name&quot; : &quot;casezheng4&quot; &#125;</span><br><span class="line">&#123;  &quot;_id&quot; : ObjectId(&quot;598095c3817bfe1400a371c7&quot;),  &quot;id&quot; : 5,  &quot;name&quot; : &quot;casezheng45&quot; &#125;</span><br><span class="line">&#123;  &quot;_id&quot; : ObjectId(&quot;598095c7817bfe1400a371c8&quot;),  &quot;id&quot; : 3,  &quot;name&quot; : &quot;casezheng45&quot; &#125;</span><br><span class="line">&#123;  &quot;_id&quot; : ObjectId(&quot;598095ca817bfe1400a371c9&quot;),  &quot;id&quot; : 2,  &quot;name&quot; : &quot;casezheng45&quot; &#125;</span><br><span class="line">&#123;  &quot;_id&quot; : ObjectId(&quot;598095cd817bfe1400a371ca&quot;),  &quot;id&quot; : 1,  &quot;name&quot; : &quot;casezheng45&quot; &#125;</span><br><span class="line">&#123;  &quot;_id&quot; : ObjectId(&quot;59809b69817bfe1400a371cb&quot;),  &quot;id&quot; : 10 &#125;</span><br><span class="line">&gt; var cursor = db.test.find()</span><br><span class="line">&gt; cursor.forEach(function(obj)&#123;printjsononeline(obj)&#125;);</span><br><span class="line">&#123;  &quot;_id&quot; : ObjectId(&quot;598091e7817bfe1400a371bf&quot;),  &quot;name&quot; : &quot;casezhenghaha&quot; &#125;</span><br><span class="line">&#123;  &quot;_id&quot; : ObjectId(&quot;598091eb817bfe1400a371c0&quot;),  &quot;id&quot; : 4,  &quot;name&quot; : &quot;casezhenghehehe&quot; &#125;</span><br><span class="line">&#123;  &quot;_id&quot; : ObjectId(&quot;59809440817bfe1400a371c5&quot;),  &quot;id&quot; : 5,  &quot;name&quot; : &quot;casezheng&quot; &#125;</span><br><span class="line">&#123;  &quot;_id&quot; : ObjectId(&quot;598095c0817bfe1400a371c6&quot;),  &quot;id&quot; : 5,  &quot;name&quot; : &quot;casezheng4&quot; &#125;</span><br><span class="line">&#123;  &quot;_id&quot; : ObjectId(&quot;598095c3817bfe1400a371c7&quot;),  &quot;id&quot; : 5,  &quot;name&quot; : &quot;casezheng45&quot; &#125;</span><br><span class="line">&#123;  &quot;_id&quot; : ObjectId(&quot;598095c7817bfe1400a371c8&quot;),  &quot;id&quot; : 3,  &quot;name&quot; : &quot;casezheng45&quot; &#125;</span><br><span class="line">&#123;  &quot;_id&quot; : ObjectId(&quot;598095ca817bfe1400a371c9&quot;),  &quot;id&quot; : 2,  &quot;name&quot; : &quot;casezheng45&quot; &#125;</span><br><span class="line">&#123;  &quot;_id&quot; : ObjectId(&quot;598095cd817bfe1400a371ca&quot;),  &quot;id&quot; : 1,  &quot;name&quot; : &quot;casezheng45&quot; &#125;</span><br><span class="line">&#123;  &quot;_id&quot; : ObjectId(&quot;59809b69817bfe1400a371cb&quot;),  &quot;id&quot; : 10 &#125;</span><br></pre></td></tr></table></figure>
<h1 id="mongodb分组"><a href="#mongodb分组" class="headerlink" title="mongodb分组"></a>mongodb分组</h1><h1 id="maoReduce"><a href="#maoReduce" class="headerlink" title="maoReduce"></a>maoReduce</h1>]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mongodb</tag>
      </tags>
  </entry>
  <entry>
    <title>初学Python</title>
    <url>/2017/07/04/python/</url>
    <content><![CDATA[<h1 id="Python的数据类型"><a href="#Python的数据类型" class="headerlink" title="Python的数据类型"></a>Python的数据类型</h1><ol>
<li>整数 整数的运算结果是精确的</li>
<li>浮点数 浮点数的运算结果不一定是精确的，可能有精度损失。整数和浮点数一起运算结果为浮点数。</li>
<li><p>字符串 用’’或””括起来的任意文本。</p>
<ol>
<li>如果字符串中有’可以用””括起来。 例如：”aaa ‘bbb’ aaa”</li>
<li>如果字符串中有”可以用’’括起来。 例如：’aaa “bbb” aaa’</li>
<li>如果字符串中既有’又有”，可以用\转义。 例如：<code>&quot;aaa \&#39;bbb\&#39;\&quot;ccc\&quot; aaa&quot;</code> 或 <code>&#39;aaa \&#39;bbb\&#39;\&quot;ccc\&quot; aaa&#39;</code></li>
<li>如果字符串中存在多个需要转义的字符，对每个字符都转义很麻烦，可以在字符串前加前缀r，表示一个raw字符串，里面的字符就不需要转义啦。 例如：<code>r&#39;\(~_~)/ \(~_~)/&#39;</code> 但r’…’表示法不能表示多行字符串，也不能表示包含’和”的字符串。</li>
<li><p>如果要表示多行字符串，可以用<code>&#39;&#39;&#39;...&#39;&#39;&#39;</code>表示。 例如</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="string">''' Line1</span></span><br><span class="line"><span class="string">    Line2</span></span><br><span class="line"><span class="string">    Line3'''</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>可以在多行字符串前加r前缀，将其变为raw字符串。</p>
</li>
</ol>
</li>
<li>布尔值 True、False  运算：与(and)、或(or)、非(not) Python将0、空字符串、None看作False，其它数值和非空字符串都看成True。and和or短路计算。</li>
<li>空值 None None不能理解为0，因为0是有意义的，而None是一个特殊的空值。</li>
</ol>
<h1 id="Python的注释以-开头"><a href="#Python的注释以-开头" class="headerlink" title="Python的注释以#开头"></a>Python的注释以#开头</h1><h1 id="Python变量"><a href="#Python变量" class="headerlink" title="Python变量"></a>Python变量</h1><p>Python标识符必须是大小写英文、数字和下划线的组合，且不能数字开头。不能使保留字。区分大小写。<br>Python是动态语言。可以把任意数据类型赋值给变量，同一个变量可以反复赋值，而且可以是不同类型的变量。<br><img src="/Picture/python_keyword.jpg" alt="Python3关键字"></p>
<h1 id="Python中Unicode字符串需要在字符串前加多u前缀。"><a href="#Python中Unicode字符串需要在字符串前加多u前缀。" class="headerlink" title="Python中Unicode字符串需要在字符串前加多u前缀。"></a>Python中Unicode字符串需要在字符串前加多u前缀。</h1><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br></pre></td></tr></table></figure>
<p>告诉Python解释器，用UTF-8编码读取源代码。文件格式也要保存为UTF-8格式。</p>
<h1 id="Python创建list"><a href="#Python创建list" class="headerlink" title="Python创建list"></a>Python创建list</h1><p>list是一种有序的集合，可以随时添加和删除其中元素。构造list直接用[]将list的所有元素都括起来，就是list对象。list中包含的元素可以是不同的数据类型。一个元素都没有的list就是空list。<br>list可以通过索引获取指定元素。索引从0开始。使用索引访问list注意不要越界，超过索引范围会报错。<br>list可以用-1访问最后一个元素。-n表示倒数第n个，注意不要越界。</p>
<h1 id="Python中list添加新元素"><a href="#Python中list添加新元素" class="headerlink" title="Python中list添加新元素"></a>Python中list添加新元素</h1><ol>
<li>使用list的append()方法。append将新元素添加到list的尾部。</li>
<li>使用list的insert()方法，insert接受两个参数，第一个是索引号，第二个是待添加的新元素，表示将新元素插入到索引号所在的位置，原有元素后移。</li>
</ol>
<h1 id="Python中list删除元素"><a href="#Python中list删除元素" class="headerlink" title="Python中list删除元素"></a>Python中list删除元素</h1><ol>
<li>使用list的pop()方法。pop方法不带参数，删除并返回list的最后一个元素。</li>
<li>使用list的pop()方法。pop方法带一个索引号参数，删除并返回索引号所在位置的元素，后面的元素前移。</li>
</ol>
<h1 id="Python替换元素"><a href="#Python替换元素" class="headerlink" title="Python替换元素"></a>Python替换元素</h1><p>对list的某个索引赋值，直接用新元素替换原来的元素。</p>
<h1 id="Python创建tuple"><a href="#Python创建tuple" class="headerlink" title="Python创建tuple"></a>Python创建tuple</h1><p>元组一旦创建完毕就不能修改了。创建元组使用()将tuple的所有元素都括起来。tuple可以使用索引访问元素。<br>Python创建单元素tuple，()可以表示tuple，也可以作为括号表示运算时的优先级。<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 错误，t不是tuple，而是整数1 (1)会被Python解释器计算出结果1</span></span><br><span class="line">t = (<span class="number">1</span>)</span><br><span class="line"><span class="comment"># 正确</span></span><br><span class="line">t = (<span class="number">1</span>,)</span><br></pre></td></tr></table></figure></p>
<h1 id="Python条件判断和循环"><a href="#Python条件判断和循环" class="headerlink" title="Python条件判断和循环"></a>Python条件判断和循环</h1><p>Python具有相同缩进的代码被视为代码块。缩进习惯：4个空格，不要使用Tab，更不要使用Tab和空格。</p>
<h2 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> 判断语句 :</span><br><span class="line">    代码块</span><br></pre></td></tr></table></figure>
<h2 id="if-else语句"><a href="#if-else语句" class="headerlink" title="if-else语句"></a>if-else语句</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> 判断语句 :</span><br><span class="line">    代码块</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">    代码块</span><br></pre></td></tr></table></figure>
<h2 id="if-elif-else"><a href="#if-elif-else" class="headerlink" title="if-elif-else"></a>if-elif-else</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> 判断条件 :</span><br><span class="line">    代码块</span><br><span class="line"><span class="keyword">elif</span> 判断条件 :</span><br><span class="line">    代码块</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">    代码块</span><br></pre></td></tr></table></figure>
<p>不能忘记”:”号</p>
<h2 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> 临时变量 <span class="keyword">in</span> 要遍历的容器</span><br><span class="line">    代码块</span><br><span class="line"></span><br><span class="line">L = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>,]</span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> L</span><br><span class="line">    <span class="keyword">print</span> num</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> 临时变量 <span class="keyword">in</span> 要遍历的容器</span><br><span class="line">    代码块</span><br><span class="line"><span class="keyword">else</span> :   <span class="comment"># 循环结束 则会执行下面的代码块 如果循环被break打断，则不会执行</span></span><br><span class="line">    代码块</span><br></pre></td></tr></table></figure>
<h2 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> 判断条件 :</span><br><span class="line">    代码块</span><br><span class="line"></span><br><span class="line">N = <span class="number">10</span></span><br><span class="line">x = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> x &lt; N :</span><br><span class="line">    <span class="keyword">print</span> x</span><br><span class="line">    x = x + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> 判断条件 :</span><br><span class="line">    代码块</span><br><span class="line"><span class="keyword">else</span> :   <span class="comment"># 循环结束 则会执行下面的代码块 如果循环被break打断，则不会执行</span></span><br><span class="line">    代码块</span><br></pre></td></tr></table></figure>
<p>while循环每次先判断判断条件，如果为True，则继续执行循环体的代码块，否则，退出循环。</p>
<h2 id="break退出循环"><a href="#break退出循环" class="headerlink" title="break退出循环"></a>break退出循环</h2><p>用 for 循环或者 while 循环时，如果要在循环体内直接退出循环，可以使用 break 语句。</p>
<h2 id="continue退出本次循环，继续循环"><a href="#continue退出本次循环，继续循环" class="headerlink" title="continue退出本次循环，继续循环"></a>continue退出本次循环，继续循环</h2><p>在循环过程中，可以用break退出当前循环，还可以用continue跳过后续循环代码，继续下一次循环。</p>
<h2 id="Python的循环可以嵌套"><a href="#Python的循环可以嵌套" class="headerlink" title="Python的循环可以嵌套"></a>Python的循环可以嵌套</h2><h2 id="for循环比while循环执行速度快"><a href="#for循环比while循环执行速度快" class="headerlink" title="for循环比while循环执行速度快"></a>for循环比while循环执行速度快</h2><h2 id="Python提供两个内置函数用于在for循环中定制特殊的循环"><a href="#Python提供两个内置函数用于在for循环中定制特殊的循环" class="headerlink" title="Python提供两个内置函数用于在for循环中定制特殊的循环"></a>Python提供两个内置函数用于在for循环中定制特殊的循环</h2><ol>
<li>range或xrange range一次性地返回连续的整数列表 xrange一次产生一个数据元素，相较于range更节约空间</li>
<li>zip 返回并行的元素元组的列表，常用于在for循环中遍历数个序列</li>
</ol>
<h1 id="Python中dict的创建"><a href="#Python中dict的创建" class="headerlink" title="Python中dict的创建"></a>Python中dict的创建</h1><p>dict用来存储键值对。<br>花括号{}表示一个dict，然后按照key:value，将元素填入。<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    键 : 值,</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">'key1'</span> : value1,</span><br><span class="line">    <span class="string">'key2'</span> : value2,</span><br><span class="line">    <span class="string">'key3'</span> : value3,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>len()函数可以计算任意集合的大小。dict、list、tuple都是集合。</p>
<h1 id="Python中dict的访问"><a href="#Python中dict的访问" class="headerlink" title="Python中dict的访问"></a>Python中dict的访问</h1><p>可以是通过key访问dict的value，只要key存在，dict返回对应的value。如果key不存在，直接报错:KeyError。<br>避免KeyError的两种方法：</p>
<ol>
<li>线判断Key是否存在，用in操作符</li>
<li>使用dict提供的get方法，在Key不存在时，返回None</li>
</ol>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">d = &#123;</span><br><span class="line"><span class="string">'key1'</span>: <span class="number">1</span></span><br><span class="line"><span class="string">'key2'</span>: <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="string">'key1'</span> <span class="keyword">in</span> d:</span><br><span class="line">    <span class="keyword">print</span> d[<span class="string">'key1'</span>]</span><br><span class="line"><span class="keyword">if</span> <span class="string">'key3'</span> <span class="keyword">in</span> d:</span><br><span class="line">    <span class="keyword">print</span> d[<span class="string">'key3'</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> d.get(<span class="string">'key1'</span>)</span><br><span class="line"><span class="keyword">print</span> d.get(<span class="string">'key3'</span>)</span><br></pre></td></tr></table></figure>
<h1 id="Python中dict的特点"><a href="#Python中dict的特点" class="headerlink" title="Python中dict的特点"></a>Python中dict的特点</h1><ol>
<li>dict查找速度快，查找速度不会随着元素数量增多而变慢。list的查找速度回随着元素增多而逐渐下降。</li>
<li>dict的key不可重复。</li>
<li>dict存储的key-value是没有顺序的。</li>
<li>dict作为key的元素必须不可变。</li>
</ol>
<h1 id="Python更新dict"><a href="#Python更新dict" class="headerlink" title="Python更新dict"></a>Python更新dict</h1><p>添加新的键值对，如果key已经存在则会替换掉原来的value<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">d = &#123; <span class="string">'key1'</span> : <span class="number">1</span>, <span class="string">'key2'</span> : <span class="number">2</span>, &#125;</span><br><span class="line">d[<span class="string">'key3'</span>] = <span class="number">3</span></span><br><span class="line">d[<span class="string">'key3'</span>] = <span class="number">6</span></span><br></pre></td></tr></table></figure></p>
<h1 id="Python遍历dict"><a href="#Python遍历dict" class="headerlink" title="Python遍历dict"></a>Python遍历dict</h1><p>通过for循环可以遍历dict的key，通过key获取value。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">d = &#123; &apos;key1&apos; : 1, &apos;key2&apos; : 2, &#125;</span><br><span class="line">for key in d :</span><br><span class="line">    print key</span><br></pre></td></tr></table></figure></p>
<h1 id="Python中set的创建"><a href="#Python中set的创建" class="headerlink" title="Python中set的创建"></a>Python中set的创建</h1><p>创建set的方式是调用set()并传入一个list，list的元素将作为set的元素。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">s = set([&apos;A&apos;, &apos;B&apos;, &apos;C&apos;,])</span><br><span class="line">print s</span><br></pre></td></tr></table></figure></p>
<h1 id="Python中set的访问"><a href="#Python中set的访问" class="headerlink" title="Python中set的访问"></a>Python中set的访问</h1><p>set存储的无序集合，无法通过索引访问。访问一个set中的某个元素实际上就是判断该元素是否存在于set中。可以用in操作符判断。<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">s = set([<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>,])</span><br><span class="line"><span class="keyword">print</span> <span class="string">'A'</span> <span class="keyword">in</span> s</span><br><span class="line"><span class="keyword">print</span> <span class="string">'D'</span> <span class="keyword">in</span> s</span><br></pre></td></tr></table></figure></p>
<h1 id="Python中set的特点"><a href="#Python中set的特点" class="headerlink" title="Python中set的特点"></a>Python中set的特点</h1><ol>
<li>访问速度快</li>
<li>set存储的元素不可变</li>
<li>set存储元素没有顺序</li>
</ol>
<h1 id="Python中set的遍历"><a href="#Python中set的遍历" class="headerlink" title="Python中set的遍历"></a>Python中set的遍历</h1><p>通过for循环遍历<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">s = set([<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>,])</span><br><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> s :</span><br><span class="line">    <span class="keyword">print</span> value</span><br></pre></td></tr></table></figure></p>
<h1 id="Python更新set"><a href="#Python更新set" class="headerlink" title="Python更新set"></a>Python更新set</h1><p>给set添加元素，使用set提供的add()方法<br>从set中删除元素，使用set提供的remove()方法。如果remove的元素不存在，remove会报错，所有remove前需要判断。</p>
<h1 id="Python函数"><a href="#Python函数" class="headerlink" title="Python函数"></a>Python函数</h1><p>Python中定义一个函数要使用def语句，依次写出函数名、括号、括号中的参数和冒号，然后，在缩进块中编写函数体，函数的返回值用return语句返回。<br>如果没有return语句，函数执行完毕也会返回结果，只是结果为None。<br>return None可以简写为return。<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_abs</span><span class="params">(x)</span></span></span><br><span class="line">    if x &gt;= 0 :</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">    <span class="keyword">else</span> :</span><br><span class="line">        <span class="keyword">return</span> -x</span><br></pre></td></tr></table></figure></p>
<h1 id="Python函数可以返回多个返回值"><a href="#Python函数可以返回多个返回值" class="headerlink" title="Python函数可以返回多个返回值"></a>Python函数可以返回多个返回值</h1><p>Python函数返回多个值，其返回值其实是一个tuple。在语法上，返回一个tuple可以省略括号，而多个变量可以同时接收一个tuple，按位置赋给对应的值，所以，Python的函数返回多值其实就是返回一个tuple。</p>
<h1 id="Python函数调用可以递归调用自身"><a href="#Python函数调用可以递归调用自身" class="headerlink" title="Python函数调用可以递归调用自身"></a>Python函数调用可以递归调用自身</h1><p>递归函数的优点是定义简单，逻辑清晰。理论上，所有的递归函数都可以写成循环的方式，但循环的逻辑不如递归清晰。<br>使用递归函数需要注意防止栈溢出。在计算机中，函数调用是通过栈（stack）这种数据结构实现的，每当进入一个函数调用，栈就会加一层栈帧，每当函数返回，栈就会减一层栈帧。由于栈的大小不是无限的，所以，递归调用的次数过多，会导致栈溢出。<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">move</span><span class="params">(n, a, b, c)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> n==<span class="number">1</span> :</span><br><span class="line">        <span class="keyword">print</span> a, <span class="string">'--&gt;'</span>, c</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    move(n<span class="number">-1</span>, a, c, b)</span><br><span class="line">    <span class="keyword">print</span> a, <span class="string">'--&gt;'</span>, c</span><br><span class="line">    move(n<span class="number">-1</span>, b, a, c)</span><br><span class="line"></span><br><span class="line">move(<span class="number">4</span>, <span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>)</span><br></pre></td></tr></table></figure></p>
<p>递归需要边界条件，递归前进段和递归返回段</p>
<h1 id="Python函数定义默认参数"><a href="#Python函数定义默认参数" class="headerlink" title="Python函数定义默认参数"></a>Python函数定义默认参数</h1><p>函数默认参数的作用是简化调用。由于函数的参数按从左到右的顺序匹配，所以默认参数只能定义在必需参数的后面。<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">power</span><span class="params">(x, n=<span class="number">2</span>)</span></span></span><br><span class="line">    s = 1</span><br><span class="line">    <span class="keyword">while</span> n &gt; <span class="number">0</span> :</span><br><span class="line">        n = n - <span class="number">1</span></span><br><span class="line">        s = s * x</span><br><span class="line">    <span class="keyword">return</span> s</span><br></pre></td></tr></table></figure></p>
<h1 id="Python定义可变参数"><a href="#Python定义可变参数" class="headerlink" title="Python定义可变参数"></a>Python定义可变参数</h1><p>可变参数让一个函数可以接受任意个参数。<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fn</span><span class="params">(*args)</span> :</span></span><br><span class="line">    pirnt args</span><br></pre></td></tr></table></figure></p>
<p>可变参数的名字前加<code>*</code>号，可以传入0个、1个或多个参数给可变参数。传入可变参数，实质是传入了一个tuple。</p>
<h1 id="Python函数内使用全局变量，需要使用global关键字声明"><a href="#Python函数内使用全局变量，需要使用global关键字声明" class="headerlink" title="Python函数内使用全局变量，需要使用global关键字声明"></a>Python函数内使用全局变量，需要使用global关键字声明</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">x = 32</span><br><span class="line">print x     # 32</span><br><span class="line">def f1():</span><br><span class="line">    global x</span><br><span class="line">    x = 43</span><br><span class="line">    print x     # 43</span><br><span class="line"></span><br><span class="line">f1()</span><br><span class="line">print x         # 43</span><br></pre></td></tr></table></figure>
<h1 id="Python-参数传递形式"><a href="#Python-参数传递形式" class="headerlink" title="Python 参数传递形式"></a>Python 参数传递形式</h1><p>位置参数：从左到右<br>关键字参数：按关键名称匹配<br>既有位置参数，又有关键词参数时：所有位置参数，所有关键字参数<br>定义函数时使用默认参数：有默认值的参数<br>混用有默认和无默认值的参数对，无默认值在前<br>调用函数时使用可变参数要求：<br>定义函数时使用<code>*</code>，收集位置参数<br>定义函数时使用<code>**</code>，收集关键字参数</p>
<h1 id="Python对list进行切片"><a href="#Python对list进行切片" class="headerlink" title="Python对list进行切片"></a>Python对list进行切片</h1><p>对于经常取指定索引范围的操作，Python提供切片(Slice)操作符。<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">L = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>,]</span><br><span class="line">L[<span class="number">0</span>:<span class="number">3</span>] <span class="comment">#从索引0开始到索引3为止 1 2 3</span></span><br><span class="line">L[:<span class="number">3</span>] <span class="comment">#与L[0:3]左右相同</span></span><br></pre></td></tr></table></figure></p>
<p>切片操作实质是复制出一个新的list<br>切片操作还可以指定第三个参数，表示每N个取一个。<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">L = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>,]</span><br><span class="line">L[<span class="number">0</span>:<span class="number">6</span>:<span class="number">2</span>] <span class="comment">#从索引0开始到索引6结束，每2个取一个，即隔一个取一个。</span></span><br></pre></td></tr></table></figure></p>
<p>把list换成tuple，切片操作完全相同，只是切片的结果也变成了tuple。<br>list支持L[-1]取倒数第一个元素，同样支持倒数切片。倒数第一个元素的索引是-1。倒序切片包含起始索引，不包含结束索引。<br>字符串也支持切片操作，操作结果是字符串。Python没有对字符串的截取函数。</p>
<h1 id="Python迭代"><a href="#Python迭代" class="headerlink" title="Python迭代"></a>Python迭代</h1><p>在Python中迭代通过for…in来完成。<br>Python迭代操作是对于一个集合，无论该集合是有序或者无序，用for循环总是可以依次取出集合的每一个元素。<br>集合：</p>
<ol>
<li>有序集合：list、tuple、str和unicode</li>
<li>无序集合：set</li>
<li>无序集合并且具有key-value对：dict</li>
</ol>
<p>迭代是一个动词，指一种操作，在python中就是for循环。迭代与按下标访问数组最大的不同是，后者是一种具体的迭代实现方式，前者只关心迭代结果，不关心迭代内部的具体实现。</p>
<h1 id="Python索引迭代"><a href="#Python索引迭代" class="headerlink" title="Python索引迭代"></a>Python索引迭代</h1><p>Python中迭代永远是取出元素本身，而非元素的索引。<br>如果想在for循环中拿到索引，可以使用enumerate()函数。enumerate将迭代的每个元素实际是一个tuple。<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">L = [<span class="string">'Adam'</span>, <span class="string">'Lisa'</span>, <span class="string">'Bart'</span>, <span class="string">'Paul'</span>]</span><br><span class="line"><span class="keyword">for</span> index, name <span class="keyword">in</span> enumerate(L):</span><br><span class="line">    <span class="keyword">print</span> index, <span class="string">'-'</span>, name</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> enumerate(L):</span><br><span class="line">    index = t[<span class="number">0</span>]</span><br><span class="line">    name = t[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">print</span> index, <span class="string">'-'</span>, name</span><br></pre></td></tr></table></figure></p>
<h1 id="Python迭代dict"><a href="#Python迭代dict" class="headerlink" title="Python迭代dict"></a>Python迭代dict</h1><p>用for直接迭代dict可以得到dict的key，如果想迭代dict对象的value，可以使用dict对象的values()方法，该方法将dict转换成包含所有value的list。dict提供的itervalues方法可以替代value方法，迭代效果完全一样。</p>
<ol>
<li>values()方法实际把一个dict转换成包含value的list。</li>
<li>itervalues()方法不会转换，在迭代过程中依次从dict中取出value，itervalues方法比values方法节省内存。</li>
</ol>
<p>如果迭代dict时即想得到key，又想得到value，可以使用dict对象的items()方法返回的值。该方法将dict转化为包含tuple的list。通过对该list的迭代得到key和value。</p>
<h1 id="Python迭代-1"><a href="#Python迭代-1" class="headerlink" title="Python迭代"></a>Python迭代</h1><p>iterator(可迭代)对象<br>支持每次返回自己包含的一个成员的对象<br>对象实现<code>__iter__</code>方法   序列类型  非序列类型 用户自定义包含<code>__iter__()</code>或<code>__getitem__()</code>方法的类</p>
<h1 id="Python生成列表"><a href="#Python生成列表" class="headerlink" title="Python生成列表"></a>Python生成列表</h1><ol>
<li>range()</li>
<li>列表生成式</li>
<li>字符串可以通过 % 进行格式化，用指定的参数替代 %s。字符串的join()方法可以把一个 list 拼接成一个字符串。</li>
<li>条件过滤，列表生成式的for循环后面可以加上if判断。</li>
<li>列表表达式多层for循环可以嵌套。</li>
</ol>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># [1x1, 2x2, 3x3, ..., 10x10]</span></span><br><span class="line">[x * x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">11</span>)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获得偶数的平方</span></span><br><span class="line">[x * x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">11</span>) <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 利用 3 层for循环的列表生成式，找出对称的 3 位数。例如，121 就是对称数，因为从右到左倒过来还是 121。</span></span><br><span class="line">[n1*<span class="number">100</span>+n2*<span class="number">10</span>+n3 <span class="keyword">for</span> n1 <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">10</span>) <span class="keyword">for</span> n2 <span class="keyword">in</span> range(<span class="number">10</span>) <span class="keyword">for</span> n3 <span class="keyword">in</span> range(<span class="number">10</span>) <span class="keyword">if</span> n1==n3]</span><br></pre></td></tr></table></figure>
<h1 id="Python列表解析"><a href="#Python列表解析" class="headerlink" title="Python列表解析"></a>Python列表解析</h1><p>Python列表解析是Python迭代机制的一种应用，常用于创建新的列表，因此放置在[]中。<br>语法：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[expression for iter_var in iterable]</span><br><span class="line">[expression for iter_var in iterable if cond_expr]</span><br></pre></td></tr></table></figure></p>
<h1 id="Python生成器表达式"><a href="#Python生成器表达式" class="headerlink" title="Python生成器表达式"></a>Python生成器表达式</h1><p>生成器表达式并不真正创建数字列表，而是返回一个生成器对象，此对象在每次计算出一个条目后，把这个条目”产生”（yield）出来。生成器表达式使用惰性计算或称为延迟求值的机制。<br>序列过长，并且每次只需要获取一个元素时，应当考虑使用生成器表达式而不是列表解析<br>语法：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(expr for iter_var in iterable)</span><br><span class="line">(expr for iter_var in iterable if cond_expr)</span><br></pre></td></tr></table></figure></p>
<h1 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h1><p>函数名就是指向函数的变量。<br>高阶函数：能接收函数作为参数的函数。</p>
<h2 id="map"><a href="#map" class="headerlink" title="map()"></a>map()</h2><p>map()函数是Python内置的高阶函数，接受一个函数f和一个list，并通过把函数f依次作用于list的每个元素上，得到新的list并返回。map()不会改变原有的list，而是返回一个新的list。</p>
<h2 id="reduce"><a href="#reduce" class="headerlink" title="reduce()"></a>reduce()</h2><p>reduce()函数是Python内置的高阶函数，接受一个函数f和一个list，函数f必须接受两个参数，reduce()对list的每个元素重复调用函数f，并返回最终结果值。reduce()可以接受第三个可选参数，作为计算的初值。<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x, y)</span></span></span><br><span class="line"><span class="function">    <span class="title">return</span> <span class="title">x</span> + <span class="title">y</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">reduce</span><span class="params">(f, [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>])</span> # <span class="title">f</span><span class="params">(<span class="number">1</span>, <span class="number">3</span>)</span>  <span class="title">f</span><span class="params">(<span class="number">4</span>, <span class="number">5</span>)</span> <span class="title">f</span><span class="params">(<span class="number">9</span>, <span class="number">7</span>)</span> 返回最终结果16</span></span><br><span class="line"><span class="function"><span class="title">reduce</span><span class="params">(f, [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>], <span class="number">100</span>)</span> # 最终结果116</span></span><br></pre></td></tr></table></figure></p>
<h2 id="filter"><a href="#filter" class="headerlink" title="filter()"></a>filter()</h2><p>filter()函数是Python内置的高阶函数，接受一个函数f和一个list，函数f的作用是对每个元素进行判断，返回True或False，filter()根据判断结果自动过滤不符合条件的元素，返回由符合条件元素组成的新list。<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 从一个list [1, 4, 6, 7, 9, 12, 17]中删除偶数，保留奇数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_odd</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x % <span class="number">2</span> == <span class="number">1</span></span><br><span class="line">filter(is_odd, [<span class="number">1</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">12</span>, <span class="number">17</span>])</span><br></pre></td></tr></table></figure></p>
<h2 id="sorted"><a href="#sorted" class="headerlink" title="sorted()"></a>sorted()</h2><p>Python内置sorted()函数可以对list进行排序。<br>sorted()函数也是一个高阶函数，可以接收一个函数来实现自定义排序，比较函数定义是，传入两个待比较的元素x、y，如果x应该排在y的前面，返回-1,如果x应该排在y的后面，返回1,如果x和y相等，返回0。<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">print</span> sorted([<span class="number">36</span>, <span class="number">5</span>, <span class="number">12</span>, <span class="number">9</span>, <span class="number">21</span>])</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reversed_cmp</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> x &gt; y:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">    <span class="keyword">if</span> x &lt; y:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> sorted([<span class="number">36</span>, <span class="number">5</span>, <span class="number">12</span>, <span class="number">9</span>, <span class="number">21</span>], reversed_cmp)</span><br></pre></td></tr></table></figure></p>
<h1 id="Python中返回函数"><a href="#Python中返回函数" class="headerlink" title="Python中返回函数"></a>Python中返回函数</h1><p>Python的函数不但可以返回int、str、list、dict等数据类型，还可以返回函数。<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'call f()...'</span></span><br><span class="line">    <span class="comment"># 定义函数g:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">g</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'call g()...'</span></span><br><span class="line">    <span class="comment"># 返回函数g:</span></span><br><span class="line">    <span class="keyword">return</span> g</span><br><span class="line"></span><br><span class="line">x = f()</span><br><span class="line">x()         <span class="comment">#会调用g()</span></span><br></pre></td></tr></table></figure></p>
<p>返回函数可以把一些计算延迟执行。</p>
<h1 id="Python闭包"><a href="#Python闭包" class="headerlink" title="Python闭包"></a>Python闭包</h1><p>在函数内部定义的函数和外部定义的函数是一样的，只是无法被外部访问。<br>如果内层函数引用了外层函数的变量(参数也算变量)，然后返回内层函数的情况，称为闭包(Closure)。<br>外层函数提供了内层函数的环境<br>闭包的特点是返回的函数还引用了外层函数的局部变量，所以，要正确使用闭包，就要确保引用的局部变量在函数返回后不能变。返回函数不要引用任何循环变量，或者后续会发生变化的变量。<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count</span><span class="params">()</span>:</span></span><br><span class="line">    fs = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">4</span>):</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">()</span>:</span></span><br><span class="line">             <span class="keyword">return</span> i*i</span><br><span class="line">        fs.append(f)</span><br><span class="line">    <span class="keyword">return</span> fs</span><br><span class="line">f1, f2, f3 = count()</span><br><span class="line"><span class="keyword">print</span> f1(), f2(), f3() <span class="comment"># 9, 9, 9</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count</span><span class="params">()</span>:</span></span><br><span class="line">    fs = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">4</span>):</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(j)</span>:</span>           <span class="comment"># 加多一层，保存临时变量的值 后续不会再变化</span></span><br><span class="line">            <span class="function"><span class="keyword">def</span> <span class="title">g</span><span class="params">()</span>:</span></span><br><span class="line">                <span class="keyword">return</span> j*j</span><br><span class="line">            <span class="keyword">return</span> g</span><br><span class="line">        r = f(i)</span><br><span class="line">        fs.append(r)</span><br><span class="line">    <span class="keyword">return</span> fs</span><br><span class="line">f1, f2, f3 = count()</span><br><span class="line"><span class="keyword">print</span> f1(), f2(), f3() <span class="comment"># 1, 4, 9</span></span><br></pre></td></tr></table></figure></p>
<h1 id="Python匿名函数"><a href="#Python匿名函数" class="headerlink" title="Python匿名函数"></a>Python匿名函数</h1><p>lambda args: expression</p>
<ol>
<li>args:用逗号分隔的参数列表</li>
<li>expression:表达式</li>
</ol>
<p>Python对匿名函数提供了有限支持。匿名函数有个限制，就是只能有一个表达式，不能是别的非表达式语句，不写return，返回值就是该表达式的结果。使用匿名函数，可以不必定义函数名，直接创建一个函数对象。关键字lambda 表示匿名函数，冒号前面的 x 表示函数参数。<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">map(<span class="keyword">lambda</span> x: x * x, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># lambda x: x*x 实际就是：</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x*x</span><br></pre></td></tr></table></figure></p>
<p>返回函数的时候也可以返回匿名函数。<br>lambda的首要用途是指定短小的回调函数<br>lambda将返回一个函数而不是将函数赋值给某个变量名<br>lambda是一个表达式而非语句<br>lambda是一个单个表达式，而不是一个代码块<br>lambda也支持默认参数</p>
<h1 id="Python装饰器"><a href="#Python装饰器" class="headerlink" title="Python装饰器"></a>Python装饰器</h1><p>Python内置的@语法简化装饰器调用。<br>装饰器简化代码，避免每个函数编写重复性代码。<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x*<span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">new_fn</span><span class="params">(f)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fn</span><span class="params">(x)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'call'</span> + f.__name__ + <span class="string">'()'</span></span><br><span class="line">        <span class="keyword">return</span> f(x)</span><br><span class="line">    retun fn</span><br><span class="line"></span><br><span class="line">g1 = new_fn(f1)</span><br><span class="line"><span class="keyword">print</span> g1(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">f1 = new_fn(f1) <span class="comment"># 彻底隐藏原函数</span></span><br><span class="line"><span class="keyword">print</span> f1(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@new_fn</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x*<span class="number">3</span></span><br><span class="line"><span class="comment"># 等同于</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x*<span class="number">3</span></span><br><span class="line">f2 = new_fn(f2)</span><br></pre></td></tr></table></figure></p>
<h1 id="python中编写无参数decorator"><a href="#python中编写无参数decorator" class="headerlink" title="python中编写无参数decorator"></a>python中编写无参数decorator</h1><p>Python中的decorator本质上是一个高阶函数，接受一个函数作为参数，返回一个新的函数。使用decorator用Python提供的@语法，简化decorator的书写。<br>利用Python的<code>*args</code> 和<code>**kw</code>，保证任意个数的参数总是能正常调用。<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(f)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fn</span><span class="params">(x)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'call '</span> + f.__name__ + <span class="string">'()...'</span></span><br><span class="line">        <span class="keyword">return</span> f(x)</span><br><span class="line">    <span class="keyword">return</span> fn</span><br><span class="line"></span><br><span class="line"><span class="meta">@log</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">factorial</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> reduce(<span class="keyword">lambda</span> x,y: x*y, range(<span class="number">1</span>, n+<span class="number">1</span>))</span><br><span class="line"><span class="keyword">print</span> factorial(<span class="number">10</span>)         <span class="comment">#正常</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@log</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line"><span class="keyword">print</span> add(<span class="number">1</span>, <span class="number">2</span>)             <span class="comment">#错误，参数不是一个</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(f)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fn</span><span class="params">(*args, **kw)</span>:</span>    <span class="comment">#保证任意个数的参数总是能正常调用。</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'call '</span> + f.__name__ + <span class="string">'()...'</span></span><br><span class="line">        <span class="keyword">return</span> f(*args, **kw)</span><br><span class="line">    <span class="keyword">return</span> fn</span><br></pre></td></tr></table></figure></p>
<h1 id="python中编写带参数的decorator"><a href="#python中编写带参数的decorator" class="headerlink" title="python中编写带参数的decorator"></a>python中编写带参数的decorator</h1><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(prefix)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">log_decorator</span><span class="params">(f)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kw)</span>:</span></span><br><span class="line">            <span class="keyword">print</span> <span class="string">'[%s] %s()...'</span> % (prefix, f.__name__)</span><br><span class="line">            <span class="keyword">return</span> f(*args, **kw)</span><br><span class="line">        <span class="keyword">return</span> wrapper</span><br><span class="line">    <span class="keyword">return</span> log_decorator</span><br><span class="line"></span><br><span class="line"><span class="meta">@log('DEBUG')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">print</span> test()</span><br><span class="line"></span><br><span class="line"><span class="comment">#拆开看</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">test = log(<span class="string">'DEBUG'</span>)(test)</span><br><span class="line"><span class="comment">#再展开</span></span><br><span class="line">log_decorator = log(<span class="string">'DEBUG'</span>)</span><br><span class="line">test = log_decorator(test)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 又相当于</span></span><br><span class="line">log_decorator = log(<span class="string">'DEBUG'</span>)</span><br><span class="line"><span class="meta">@log_decorator</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>
<h1 id="Python中完善decorator"><a href="#Python中完善decorator" class="headerlink" title="Python中完善decorator"></a>Python中完善decorator</h1><p>用Python内置的functools可将原函数的属性复制到新函数。但原函数的原始参数信息无法获得。</p>
<h1 id="Python中偏函数"><a href="#Python中偏函数" class="headerlink" title="Python中偏函数"></a>Python中偏函数</h1><p>当一个函数有很多参数时，调用者就需要提供多个参数。如果减少参数个数，就可以简化调用者的负担。<br>functools.partial可以把一个参数多的函数变成一个参数少的新函数，少的参数需要在创建时指定默认值。<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">int2</span><span class="params">(x, base=<span class="number">2</span>)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> int(x, base)</span><br><span class="line"></span><br><span class="line">int2 =  functools.partial(int, base=<span class="number">2</span>)</span><br><span class="line">int2(<span class="string">'1000000'</span>)</span><br></pre></td></tr></table></figure></p>
<h1 id="Python-yield与生成器"><a href="#Python-yield与生成器" class="headerlink" title="Python yield与生成器"></a>Python yield与生成器</h1><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getNum</span><span class="params">(x)</span></span></span><br><span class="line">    y = 0</span><br><span class="line">    <span class="keyword">while</span> y&lt;=x:</span><br><span class="line">        <span class="keyword">yield</span> y</span><br><span class="line">        y += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">g1 = getNum(<span class="number">10</span>)</span><br><span class="line"><span class="keyword">print</span> g1.next()</span><br><span class="line"><span class="keyword">print</span> g1.next()</span><br></pre></td></tr></table></figure>
<p>函数中使用yield会生成一个生成器对象</p>
<h1 id="Python包和模块"><a href="#Python包和模块" class="headerlink" title="Python包和模块"></a>Python包和模块</h1><p>包：包是一个有层次的文件目录结构，定义了由n个模块或n个子包组成的Python应用程序执行环境。包是一个包含<strong>init</strong>.py 文件的目录，该目录下一定得有这个<strong>init</strong>.py文件和其它模块或子包。<br>模块：在Python可理解为对应于一个文件。</p>
<h2 id="Python之导入模块"><a href="#Python之导入模块" class="headerlink" title="Python之导入模块"></a>Python之导入模块</h2><p>要使用一个模块，必须首先导入该模块。Python使用import语句导入一个模块。<br>如果只希望导入某个模块的某几个函数，使用from import。<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math <span class="comment"># 导入整个math模块</span></span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> pow, sin, log <span class="comment"># 导入math模块pow() sin() log()函数</span></span><br></pre></td></tr></table></figure></p>
<p>如果使用import导入模块，必须通过模块名引用函数名。<br>通过from import导入可能会出现名字冲突，可利用别名解决。<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> log</span><br><span class="line"><span class="keyword">from</span> logging <span class="keyword">import</span> log <span class="keyword">as</span> logger  <span class="comment"># logging的log有个logger的别名</span></span><br><span class="line"><span class="keyword">print</span> log(<span class="number">10</span>) <span class="comment"># 调用的math的log</span></span><br><span class="line">logger(<span class="number">10</span>, <span class="string">'import from logging'</span>) <span class="comment"># 调用的是logging的log</span></span><br></pre></td></tr></table></figure></p>
<h2 id="Python动态导入模块"><a href="#Python动态导入模块" class="headerlink" title="Python动态导入模块"></a>Python动态导入模块</h2><p>如果导入的模块不存在，Python解释器会报ImportError错误。<br>因为Python是动态语言，解释执行，因此Python代码运行速度慢。<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">from</span> cStringIO <span class="keyword">import</span> StringIO</span><br><span class="line">excerpt ImportError:</span><br><span class="line">    <span class="keyword">from</span> StringIO <span class="keyword">import</span> StringIO</span><br><span class="line"><span class="comment"># StringIO 和 cStringIO 都提供StringIO功能，StringIO 是纯Python代码编写的，而 cStringIO 部分函数是 C 写的，因此 cStringIO 运行速度更快。先尝试从cStringIO导入，如果失败了，再尝试从StringIO导入。</span></span><br></pre></td></tr></table></figure></p>
<p>import和from都是隐性赋值语句，import将整个模块对象赋值给一个变量名，from将一个或多个变量名赋值给导入此模块的模块中的同名对象</p>
<h2 id="import工作机制"><a href="#import工作机制" class="headerlink" title="import工作机制"></a>import工作机制</h2><ol>
<li>查找模块文件，在指定路径下搜索模块文件<ol>
<li>程序主目录</li>
<li>PYTHONPATH目录（如果设置了）</li>
<li>标准链接库目录</li>
<li>任何.pth文件的内容（如果存在.pth文件）</li>
</ol>
</li>
<li>编译为字节码，当文件导入时会编译，顶层文件的.pyc字节码文件在内部使用后会被丢弃，只有被导入文件才会留下.pyc文件</li>
<li>执行模块的代码创建其所定义的对象，模块文件的所有语句依次执行，从头到尾，而此步骤中任何对变量名的赋值运算，都会所得到的模块文件的属性</li>
</ol>
<p>模块只在第一次导入时执行如上步骤，后续的导入操作只不过是提取内存中已加载的模块对象，reload()可用于重新加载模块。</p>
<h2 id="Python-future"><a href="#Python-future" class="headerlink" title="Python future"></a>Python <strong>future</strong></h2><p>当新版本的一个特性与旧版本不兼容时，该特性将会在旧版本中添加到<strong>future</strong>中，以便旧的代码能在旧版本中测试新特性。</p>
<h2 id="Python按照第三方模块-使用pip"><a href="#Python按照第三方模块-使用pip" class="headerlink" title="Python按照第三方模块 使用pip"></a>Python按照第三方模块 使用pip</h2><h2 id="Python包"><a href="#Python包" class="headerlink" title="Python包"></a>Python包</h2><p>包将一组模块归并到一个目录中，此目录即为包，目录名即为包名。包是一个有层次的文件目录结构，定义了一个由模块和子包组成的Python应用程序执行环境。基于包，Python在执行导入模块时，可以指定模块的导入路径。<br>包导入语句的路径内的每个目录内必须有<code>__init__.py</code>文件，<code>__init__.py</code>可包含Python代码，但通常为空，仅用于扮演包初始化的挂钩、替目录产生模块命名空间以及使用目录导入时实现<code>from *</code>行为的角色。</p>
<h2 id="Python-distutils发布模块"><a href="#Python-distutils发布模块" class="headerlink" title="Python distutils发布模块"></a>Python distutils发布模块</h2><p>distutils模块能帮助完成模块或程序发布。<br>创建发布，将个代码文件组织到模块容器中，准备README或README.txt文件，在容器中创建setup.py文件<br><img src="/Picture/Python-distutils-1.jpg" alt="setup.py示例"><br><img src="/Picture/Python-distutils-2.jpg" alt="setup.py属性"><br>属性大体分为两类：元数据信息和包中的内容列表<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python setup.py sdist</span><br></pre></td></tr></table></figure></p>
<p>可以为sdist指定格式： —formats</p>
<ol>
<li>zip:     zip file</li>
<li>gztar:   tar.gz file</li>
<li>bztar:   tar.bz2 file</li>
<li>ztar:    tar.Z file</li>
<li>tar:     tar file</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python setup.py bdist</span><br></pre></td></tr></table></figure>
<p>可以为bdist指定格式： —formats</p>
<ol>
<li>gztar:   tar.gz file</li>
<li>ztar:    tar.Z file</li>
<li>tar:     tar file</li>
<li>zip:     zip file</li>
<li>rpm      RPM Package</li>
<li>pkgtool: Solaris pkgtool</li>
<li>Wininst: Windows上自解压的zip格式的包</li>
<li>msi:     Microsoft Installer</li>
</ol>
<p><code>bdist_dump</code><br><code>bdist_rpm</code><br><code>bdist_wininst</code><br><code>bdist_msi</code></p>
<p>获取帮助<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python setup.py --help</span><br><span class="line">python setup.py --help-commands 所有可以使用的命令</span><br><span class="line">python setup.py COMMAND --help 获取特定命令的帮助</span><br><span class="line">python setup.py COMMAND --help-formats 获取给定命令支持使用的格式</span><br></pre></td></tr></table></figure></p>
<h2 id="Python安装包"><a href="#Python安装包" class="headerlink" title="Python安装包"></a>Python安装包</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python setup.py install</span><br></pre></td></tr></table></figure>
<p>第三方模块默认安装路径默认为site-packages</p>
<h1 id="Python面向对象编程"><a href="#Python面向对象编程" class="headerlink" title="Python面向对象编程"></a>Python面向对象编程</h1><p>类用于定义抽象类型。<br>实例根据类的定义被创建出来。</p>
<h2 id="Python定义类并创建实例"><a href="#Python定义类并创建实例" class="headerlink" title="Python定义类并创建实例"></a>Python定义类并创建实例</h2><p>在Python中，类通过class关键词定义。<br>类体可以包含：申明语句、类成员定义、数据属性、方法<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">xiaoming = Person()</span><br><span class="line">xiaohong = Person()</span><br></pre></td></tr></table></figure></p>
<h2 id="Python中创建实例属性"><a href="#Python中创建实例属性" class="headerlink" title="Python中创建实例属性"></a>Python中创建实例属性</h2><p>每个实例可以拥有各自不同的属性，可以直接给其属性赋值。实例的属性可以像腹痛变量一样进行操作。</p>
<h2 id="Python中初始化实例属性"><a href="#Python中初始化实例属性" class="headerlink" title="Python中初始化实例属性"></a>Python中初始化实例属性</h2><p>在定义类时，可以为类添加特殊的<strong>init</strong>()方法，在创建实例时，<strong>init</strong>方法会被自动调用。可以在此为每个实例都统一加上属性。<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Persion</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, gender, birth)</span>:</span></span><br><span class="line">        self.name =  name</span><br><span class="line">        self.gender = gender</span><br><span class="line">        self.birth = birth</span><br><span class="line"></span><br><span class="line">xiaoming = Person(<span class="string">'Xiao ming'</span>, <span class="string">'Male'</span>, <span class="string">'1992-1-1'</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Persion</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, gender, birth, **kw)</span>:</span></span><br><span class="line">        self.name =  name</span><br><span class="line">        self.gender = gender</span><br><span class="line">        self.birth = birth</span><br><span class="line">        <span class="keyword">for</span> k, v <span class="keyword">in</span> kw.iteritems():</span><br><span class="line">            setattr(self, k, v)</span><br><span class="line"></span><br><span class="line">xiaohong = Person(<span class="string">'Xiao hong'</span>, <span class="string">'Female'</span>, <span class="string">'1992-1-1'</span>, jog=<span class="string">"student"</span>)</span><br></pre></td></tr></table></figure></p>
<p><strong>init</strong>方法的第一个参数必须是self，后面参数可以自由指定，和定义函数没有任何区别。<br>可以使用setattr将任意关键词参数作为属性赋值给实例。</p>
<h2 id="Python访问限制"><a href="#Python访问限制" class="headerlink" title="Python访问限制"></a>Python访问限制</h2><p>Python对属性权限的控制通过函数名来实现，如果一个属性由双下划线开头(<code>__</code>)，该属性无法被外部访问。<br>注意以<code>__</code>开头，以<code>__</code>结尾的属性可被外界访问，<code>__xxx__</code>定义的属性被称为特殊属性。</p>
<h2 id="Python创建类属性"><a href="#Python创建类属性" class="headerlink" title="Python创建类属性"></a>Python创建类属性</h2><p>类是模版，实例则是根据类创建的对象。绑定在一个实例上的属性不会影响其他实例，但是，类本身也是一个对象，如果在类上绑定一个属性，则所有实例都可以访问类的属性，并且，所有实例访问的类属性都是同一个！即：实例属性每个实例各自拥有，互相独立，而类属性有且只有一份。<br>定义类属性直接在class中定义：<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(object)</span>:</span></span><br><span class="line">    address = <span class="string">"Earth"</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span></span></span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> Person.address</span><br><span class="line"></span><br><span class="line">Person.email = <span class="string">'1111@google.com'</span></span><br><span class="line">Person.address = <span class="string">'china'</span></span><br></pre></td></tr></table></figure></p>
<p>因为类属性是直接绑定在类上的，所有，访问类属性不需要创建实例，就可以直接访问。<br>对一个实例调用类的属性也是可以访问的，所有实例都可以访问到它所属的类的属性。<br>由于Python是动态语言，类属性也是可以动态添加和修改的。<br>因为类属性只有一份，所以，当类的属性改变时，所有实例访问到的类属性都改变了。</p>
<h2 id="Python中类属性和实例属性冲突"><a href="#Python中类属性和实例属性冲突" class="headerlink" title="Python中类属性和实例属性冲突"></a>Python中类属性和实例属性冲突</h2><p>当实例属性和类属性重名时，实例属性优先级高，它将屏蔽掉对类属性的访问。<br>千万不要在实例上修改类属性，它实际上并没有修改类属性，而是给实例绑定了一个实例属性。</p>
<h2 id="方法的可用变量"><a href="#方法的可用变量" class="headerlink" title="方法的可用变量"></a>方法的可用变量</h2><p>实例变量：指定变量名称及实例自身进行引用<br>局部变量：方法内部创建的变量，可直接使用<br>类变量：通过指定变量名与类名进行引用<br>全局变量：直接使用</p>
<h2 id="Python中定义实例方法"><a href="#Python中定义实例方法" class="headerlink" title="Python中定义实例方法"></a>Python中定义实例方法</h2><p>实例的方法就是在类中定义的函数，第一个参数永远是self，执行调用该方法的实例本身，其他参数和一个普通函数是完全一样的。在实例方法内部可以访问所有实例属性。<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(object)</span></span></span><br><span class="line"><span class="class">    <span class="title">def</span> <span class="title">__init__</span><span class="params">(self, name)</span></span></span><br><span class="line">        self.__name = name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_name</span><span class="params">(self)</span></span></span><br><span class="line"><span class="function">        <span class="title">return</span> <span class="title">self</span>.<span class="title">__name</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line">p = Person('bob')</span><br><span class="line"><span class="keyword">print</span> p.get_name()</span><br></pre></td></tr></table></figure></p>
<h2 id="Python中方法也是属性"><a href="#Python中方法也是属性" class="headerlink" title="Python中方法也是属性"></a>Python中方法也是属性</h2><p>在class中定义的实例方法其实也是属性，实际上是一个函数对象。<br>使用types.MethodType()可以把一个函数变成一个方法。<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> types</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fn_get_grade</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> self.score &gt;= <span class="number">80</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'A'</span></span><br><span class="line">    <span class="keyword">if</span> self.score &gt;= <span class="number">60</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'B'</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'C'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, score)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.score = score</span><br><span class="line"></span><br><span class="line">p1 = Person(<span class="string">'Bob'</span>, <span class="number">90</span>)</span><br><span class="line">p1.get_grade = types.MethodType(fn_get_grade, p1, Person)</span><br><span class="line"><span class="keyword">print</span> p1.get_grade()</span><br><span class="line"></span><br><span class="line">p2 = Person(<span class="string">'Alice'</span>, <span class="number">65</span>)</span><br><span class="line"><span class="keyword">print</span> p2.get_grade() <span class="comment"># 错误 p2没有get_grade方法</span></span><br></pre></td></tr></table></figure></p>
<h2 id="Python中定义类方法"><a href="#Python中定义类方法" class="headerlink" title="Python中定义类方法"></a>Python中定义类方法</h2><p>Python类中定义的方法分为类方法和实例方法。<br>在class中定义的全部都是实例方法，实例方法第一个参数是实例本身。<br>定义类方法需要使用@classmethod，将方法绑定到Person类上，而非类实例上。类方法的第一个参数传入类本身，因为是在类上调用，而非实例上调用，因此类方法无法获得任何实例变量，只能获得类的引用。</p>
<h2 id="Python类连结至超类的方式"><a href="#Python类连结至超类的方式" class="headerlink" title="Python类连结至超类的方式"></a>Python类连结至超类的方式</h2><p>将超类列在类头部的括号内，其从左到右的顺序决定树的顺序，从下至上，从左至右</p>
<h1 id="Python继承"><a href="#Python继承" class="headerlink" title="Python继承"></a>Python继承</h1><p>总是从某个类继承，如果没有则需要继承object类。<br>不要忘记调用<code>super().__init__</code>用来初始化父类属性<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span></span></span><br><span class="line"><span class="function">        <span class="title">super</span><span class="params">(MyClass, self)</span>.<span class="title">__init__</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure></p>
<h2 id="Python中判断类型"><a href="#Python中判断类型" class="headerlink" title="Python中判断类型"></a>Python中判断类型</h2><p>函数isinstance()可以判断一个变量的类型，既可以用于Python内置的数据类型，也可以用于自定义类。</p>
<h2 id="Python多态"><a href="#Python多态" class="headerlink" title="Python多态"></a>Python多态</h2><p>类具有继承关系，并且子类类型可以向上转型看做父类类型。</p>
<h2 id="Python多重继承"><a href="#Python多重继承" class="headerlink" title="Python多重继承"></a>Python多重继承</h2><p>Python允许从多个父类继承，称为多重继承</p>
<h2 id="Python获取对象信息"><a href="#Python获取对象信息" class="headerlink" title="Python获取对象信息"></a>Python获取对象信息</h2><ol>
<li>用type()函数获取变量的类型，返回一个Type对象。</li>
<li>用dir()函数获取变量的所有属性。</li>
</ol>
<h1 id="Python定制类"><a href="#Python定制类" class="headerlink" title="Python定制类"></a>Python定制类</h1><h2 id="Python的特殊方法"><a href="#Python的特殊方法" class="headerlink" title="Python的特殊方法"></a>Python的特殊方法</h2><ol>
<li>特殊方法定义在class中。</li>
<li>不需要直接调用，某些函数或者操作符会调用对应的特殊方法。</li>
</ol>
<h2 id="str和repr"><a href="#str和repr" class="headerlink" title="str和repr"></a><strong>str</strong>和<strong>repr</strong></h2><p>如果要把一个类的实例变成str，需要实现特殊方法<code>__str__()</code>。<br><code>__repr__()</code>方法用于显示给开发人员。</p>
<h2 id="cmp"><a href="#cmp" class="headerlink" title="cmp"></a><strong>cmp</strong></h2><p>对int、str等内置数据类型排序时，Python的sorted()按照默认的比较函数cmp排序，如果对自定义类的实例排序，必须提供自定义的特殊方法<code>__cmp__()</code>。</p>
<h2 id="len"><a href="#len" class="headerlink" title="len"></a><strong>len</strong></h2><h2 id="and"><a href="#and" class="headerlink" title="and"></a><strong>and</strong></h2><h2 id="int"><a href="#int" class="headerlink" title="int"></a><strong>int</strong></h2><h2 id="property"><a href="#property" class="headerlink" title="@property"></a>@property</h2><h2 id="slots"><a href="#slots" class="headerlink" title="slots"></a><strong>slots</strong></h2><h2 id="call"><a href="#call" class="headerlink" title="call"></a><strong>call</strong></h2><h1 id="类、实例和其它对象的内建函数"><a href="#类、实例和其它对象的内建函数" class="headerlink" title="类、实例和其它对象的内建函数"></a>类、实例和其它对象的内建函数</h1><ol>
<li>issubclass() 布尔函数，判断一个类是否由另一个类派生，语法：<code>issubclass(sub, sup)</code></li>
<li>isinstance() 布尔函数，判断一个对象是否是给定类的实例，语法：<code>isinstance(obj1, class_obj2)</code></li>
<li>hasattr() 布尔函数，判断一个对象是否拥有指定属性，语法：<code>hasattr(obj, attr)</code>  同类函数<code>getattr()</code>、<code>setattr()</code>、<code>delattr()</code></li>
<li>super() 在子类中找到其父类以便于调试其属性，一般仅采用非绑定方式调用祖先类方法，而super()可用于传入实例或类型对象，语法：<code>super(type[,boj])</code></li>
</ol>
<h1 id="Python运算符重载"><a href="#Python运算符重载" class="headerlink" title="Python运算符重载"></a>Python运算符重载</h1><p>运算符重载在方法中拦截内置操作，当类的实例出现内置操作时，Python自动调用自定义方法，并返回调用结果。运算符重载荣类拦截常规的Python运算，重载使类实例的行为像内置类型，重载通过提供特殊名称的类方法实现。</p>
<p><img src="/Picture/Python_op.jpg" alt="Python运算符重载"></p>
<p><img src="/Picture/Python_op_2.jpg" alt="Python运算符重载"></p>
<p>Python函数的属性：</p>
<ol>
<li><code>__doc__</code></li>
<li><code>__name__</code></li>
<li><code>__dict__</code></li>
<li><code>__code__</code></li>
<li><code>__globals__</code></li>
</ol>
<p>Python方法的属性：</p>
<ol>
<li><code>__doc__</code></li>
<li><code>__name__</code></li>
<li><code>__class__</code>: 方法所属类</li>
<li><code>__func__</code>： 实现该方法的函数对象</li>
<li><code>__self__</code>：调用次方法的实例</li>
</ol>
<p>Python内置函数：</p>
<ol>
<li><code>__doc__</code></li>
<li><code>__name__</code></li>
<li><code>__self__</code></li>
</ol>
<p>Python类：</p>
<ol>
<li><code>__doc__</code></li>
<li><code>__name__</code></li>
<li><code>__bases__</code></li>
<li><code>__func__</code></li>
<li><code>__module__</code></li>
</ol>
<h1 id="Python异常"><a href="#Python异常" class="headerlink" title="Python异常"></a>Python异常</h1><p>Python的运行时错误称为异常</p>
<ol>
<li>语法错误</li>
<li>逻辑错误</li>
</ol>
<p>Python异常是一个对象，表示错误或意外情况，在Python检测到一个错误时，将触发一个异常，Python可以通过异常传导机制传递一个异常，发出一个异常情况的信号。程序员也可以在代码中手动触发异常。<br>Python异常可以理解为程序出现了错误而在正常控制流程以外采取的行为。</p>
<ol>
<li>解释器触发异常，此时当前程序流被打断</li>
<li>异常处理</li>
</ol>
<h2 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h2><p>Python的默认处理：停止程序，打印错误信息。可以使用try语句处理异常并从异常中恢复</p>
<h2 id="事件通知"><a href="#事件通知" class="headerlink" title="事件通知"></a>事件通知</h2><p>用于发出有效状态信号</p>
<h2 id="特殊情况处理"><a href="#特殊情况处理" class="headerlink" title="特殊情况处理"></a>特殊情况处理</h2><p>无法调整代码去处理的场景</p>
<h2 id="终止行为"><a href="#终止行为" class="headerlink" title="终止行为"></a>终止行为</h2><p>try/finally语句可确保执行必需的结束处理机制</p>
<h2 id="非常规流程控制"><a href="#非常规流程控制" class="headerlink" title="非常规流程控制"></a>非常规流程控制</h2><p>异常是一种高级跳转机制（goto）</p>
<h2 id="异常通过try语句来检测"><a href="#异常通过try语句来检测" class="headerlink" title="异常通过try语句来检测"></a>异常通过try语句来检测</h2><p>任何在try语句块里的代码都会被检测，以检测有无异常发生</p>
<h2 id="try语句两种形式"><a href="#try语句两种形式" class="headerlink" title="try语句两种形式"></a>try语句两种形式</h2><ol>
<li><p>try-execpt：检测和处理异常，支持多个execpt，支持使用else子句处理没有探测异常的执行的代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#定义进行异常监控的一段代码，并提供处理异常的机制</span><br><span class="line">try:</span><br><span class="line">    try_suite</span><br><span class="line">execpt Exception[, reason]:</span><br><span class="line">    execpt_suit</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">try:</span><br><span class="line">    try_suite</span><br><span class="line">execpt Exception1[, reason]:</span><br><span class="line">    execpt_suit1</span><br><span class="line">execpt (Exception2, Exception3, ...)[, reason]: # 一次捕获多个异常使用元组</span><br><span class="line">    execpt_suit2</span><br><span class="line">execpt: #空execpt用于捕获所有异常</span><br><span class="line">    suit</span><br><span class="line">else:</span><br><span class="line">    else_suit   #没有异常发生时else分句才会执行</span><br><span class="line">#没有符合的execpt语句时，异常会向上传递到程序之前的try中或者到进程的顶层</span><br></pre></td></tr></table></figure>
</li>
<li><p>try-finally：仅检测异常并做一些必要的处理工作，仅能有一个finally，无论异常是否发生，finally子句都会都会执行，finally中所有代码执行完毕后会向上一层引发异常。</p>
</li>
</ol>
<h2 id="try的复合形式"><a href="#try的复合形式" class="headerlink" title="try的复合形式"></a>try的复合形式</h2><p>try-execpt-finally</p>
<h2 id="raise-语句可显式触发异常"><a href="#raise-语句可显式触发异常" class="headerlink" title="raise 语句可显式触发异常"></a>raise 语句可显式触发异常</h2><p>raise [SomeException [, args[, traceback]]]</p>
<ol>
<li>SomeException可选，异常的名字，仅能使用字符串、类或实例</li>
<li>args 可选，以元组的形式传递给异常的参数</li>
<li>traceback 可选，异常触发时新生成的一个用于异常-正常化的跟踪记录，多用于重新引发异常</li>
</ol>
<p><img src="/Picture/Python-raise.jpg" alt="raise语句的用法大全"></p>
<h2 id="Python异常对象"><a href="#Python异常对象" class="headerlink" title="Python异常对象"></a>Python异常对象</h2><p>Python异常是内置的经典类Exception的子类的实例，为了向后兼容，Python允许使用字符串或任何经典类实例，Python2.5后，Exception是从BaseException继承的新式类<br>Python自身引发的所有异常都是Exception的子类的实例，大多的标准异常都是由StandardError派生的，其中三个抽象子类</p>
<ol>
<li>ArithmeticError  由算数错误而引发的异常基类 OverflowError ZeroDivisonError FlootingPointError</li>
<li>LookupError  LookupError 容器在接收到一个无效键或索引时引发的异常的基类 IndexEeror KeyError</li>
<li>EnvironmentError 由于外部原因而导致的异常的基类  IOError OSError WindowsError</li>
</ol>
<h2 id="Python-assert语句"><a href="#Python-assert语句" class="headerlink" title="Python assert语句"></a>Python assert语句</h2><p>assert语句用于在程序中引入调试代码<br>assert condition[, expression]<br>如果condition条件满足，则assert不做任何操作<br>如果condition条件不满足，则assert使用expression作为参数实例化AssertionError并引发结果实例<br>如果Python运行使用-O，则assert是一个空操作，编译器不为assert语句生成代码，不使用-O选项，则<strong>debug</strong>内置变量为True，否则其值为False。<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># assert condition[, expression] 相当于</span></span><br><span class="line"><span class="keyword">if</span> __debug__:</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> condition:</span><br><span class="line">        <span class="keyword">raise</span> AssertionError, &lt;expression&gt;</span><br></pre></td></tr></table></figure></p>
<h1 id="Python程序的执行"><a href="#Python程序的执行" class="headerlink" title="Python程序的执行"></a>Python程序的执行</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">source code         PVM                     bytecode                PVM</span><br><span class="line">    .py         ----Complier------&gt;          .pyc            -----Interpreter----&gt;          processor</span><br></pre></td></tr></table></figure>
<p>python源代码第一次执行时被Python虚拟器编译为Python字节码，然后Python虚拟器根据Python字节码执行程序。</p>
<h1 id="Python的实现"><a href="#Python的实现" class="headerlink" title="Python的实现"></a>Python的实现</h1><p>Cpython  原始、标准的实现方式<br>Jythin  用于和Java语言集成的实现<br>IronPython  用于与.NET框架集合实现</p>
<h1 id="Python性能优化工具"><a href="#Python性能优化工具" class="headerlink" title="Python性能优化工具"></a>Python性能优化工具</h1><p>Psyco   Python语言的一个扩展模块，即时对程序代码进行算法优化，可以一定程度提高程序的执行速度，尤其是程序中有大量循环操作时，目前该工具研发工作已经停止，由pypy所替代。<br>PyPy    PyPy是用Python实现的Python解释器，Python语言的动态编译器，是Psyco的后继项目。可以运行在Linux32和64位、MocOS和Windows的32位平台上。<br>Shed Skin   Python编译器，能将Pythona代码转化为优化的C++代码。</p>
<h1 id="Python程序文件"><a href="#Python程序文件" class="headerlink" title="Python程序文件"></a>Python程序文件</h1><p>Python程序可分解为模块、语句、表达式和对象</p>
<ol>
<li>程序由模块组成</li>
<li>模块包含语句</li>
<li>语句包含表达式</li>
<li>表达式建立并处理对象<ol>
<li>表达式是”某事”，而语句是”做某事(即指令)”。</li>
<li>语句的特性：改变令事物。</li>
</ol>
</li>
</ol>
<p>面向过程：以指令为中心，由指令处理数据<br>面向对象：以数据为中心，所有的代码都围绕数据展开</p>
<h1 id="Python要素-基本数据类型"><a href="#Python要素-基本数据类型" class="headerlink" title="Python要素 基本数据类型"></a>Python要素 基本数据类型</h1><h1 id="Python要素-对象引用"><a href="#Python要素-对象引用" class="headerlink" title="Python要素 对象引用"></a>Python要素 对象引用</h1><ol>
<li>Python将所有数据都存为内存对象，Python中变量其实是指向内存对象的引用。</li>
<li>动态类型：在任何时刻，只要需要，某个对象引用都可以重新引用一个不同的对象。</li>
<li>内建函数type()用于返回给定数据项的数据内型。</li>
<li>“=”用于将变量名与内存中的某个对象绑定：如果对象事先存在，就直接进行绑定；否则，则在”=”创建引用的对象。</li>
<li>注意，变量名没有类型，对象才有。</li>
<li>列表和元素并不存储数据，而是存放对象引用</li>
</ol>
<h1 id="Python要素-组合数据类型"><a href="#Python要素-组合数据类型" class="headerlink" title="Python要素 组合数据类型"></a>Python要素 组合数据类型</h1><h1 id="Python要素-逻辑操作符"><a href="#Python要素-逻辑操作符" class="headerlink" title="Python要素 逻辑操作符"></a>Python要素 逻辑操作符</h1><p>Python提供4组逻辑运算</p>
<ol>
<li>身份操作符 is，判断左端对象引用是否相同于右端对象，也可以与None进行。</li>
<li>比较操作符 &lt;, &gt;, &lt;=, &gt;=, !=, ==</li>
<li>成员操作符 in 或 not in：测试成员关系</li>
<li>逻辑运算符：and、or、not</li>
</ol>
<h1 id="Python要素-控制流语句"><a href="#Python要素-控制流语句" class="headerlink" title="Python要素 控制流语句"></a>Python要素 控制流语句</h1><h1 id="Python要素-算数运算符"><a href="#Python要素-算数运算符" class="headerlink" title="Python要素 算数运算符"></a>Python要素 算数运算符</h1><p>Python提供了完整的算数操作符。<br>Python的int类型是不可变的，因此给一个int变成加减其实是重新创建一个新的变量来存储结果后将变量名执行重新绑定。<br><img src="/Picture/python_int.jpg" alt="Python int算数操作"></p>
<h1 id="Python要素-输入-输出"><a href="#Python要素-输入-输出" class="headerlink" title="Python要素 输入/输出"></a>Python要素 输入/输出</h1><p>命令行输出 print()函数 python3    print语句 python2<br>命令行输入 input() <code>raw_input()</code><br>Python解释器提供3种标准文件对象，标准输入sys.stdio 标准输出sys.stdout 标准错误sys.stderr, 存在与sys模块中。</p>
<h1 id="Python要素-函数"><a href="#Python要素-函数" class="headerlink" title="Python要素 函数"></a>Python要素 函数</h1><p>callable()函数可以检测函数是否可调用。<br>Python有很多内置函数 <code>__builtins__</code><br>Python有很多标准库，可以导入后直接使用。</p>
<h1 id="Python-语句和语法"><a href="#Python-语句和语法" class="headerlink" title="Python 语句和语法"></a>Python 语句和语法</h1><p>注释 #<br>续行 \      ‘’’<br>代码组 缩进相同的一组语句可构成代码块 首行以关键字开始，以冒号结束，Python使用缩进来分隔代码组，同一代码组的代码行必须严格左对齐，否则会造成语法错误。<br>同一行多个语句，以;为分隔符<br>模块 每个Python脚本文件都是一个模块</p>
<h1 id="Python-文件结构"><a href="#Python-文件结构" class="headerlink" title="Python 文件结构"></a>Python 文件结构</h1><ol>
<li>起始行 #/usr/bin/env python</li>
<li>模块文档(文档字符串)    <code>__doc__</code></li>
<li>模块导入</li>
<li>(模块全局)变量定义</li>
<li>类定义(若有)</li>
<li>函数定义(若有)</li>
<li>主程序</li>
</ol>
<p>每个模块都有<code>__name__</code>内建变量，此变量根据调用该模块的方式而变化。<code>__name__</code>指示模块该如何加载，如果模块是被导入，<code>__name__</code>的值是模块名字  如果模块是直接执行<code>__name__</code>的值是<code>__main__</code></p>
<h1 id="Python两个对象比较"><a href="#Python两个对象比较" class="headerlink" title="Python两个对象比较"></a>Python两个对象比较</h1><ol>
<li>值比较：对象中的数据是否相同</li>
<li>身份比较：两个变量引用的是否同一个对象  也就是内存地址比较</li>
<li>类型比较：两个对象的类型是否相同</li>
</ol>
<h1 id="Python类型转换"><a href="#Python类型转换" class="headerlink" title="Python类型转换"></a>Python类型转换</h1><p><strong>个人理解Python中类型转换，都是根据原有对象新建对象</strong><br>str() repr()或format():字符串<br>int():整数<br>float():浮点数<br>list():列表<br>tuple():元组<br>set():集合<br>dict():字典，传入参数必须是(key, value)的元组序列<br>chr():字符(ASCII码)，传入参数为整数<br>ord():整数，传入参数为字符<br>hex():16进制整数<br>bin()<br>cot()</p>
<h1 id="Python数字类型"><a href="#Python数字类型" class="headerlink" title="Python数字类型"></a>Python数字类型</h1><p>Python 5种数字类型：布尔型(True 1  False 0)、整数、长整数、浮点数、复数，所有数字类型均不可变。<br>数字操作： 加<code>+</code> 减<code>-</code> 乘<code>*</code> 除<code>/</code> 截断除法<code>//</code>  乘方 <code>**</code>  取模<code>%</code><br>位操作：左移 <code>&lt;&lt;</code> 右移 <code>&gt;&gt;</code>   按位与&amp; 按位或| 按位异或^ 按位求反~</p>
<h1 id="Python序列类型"><a href="#Python序列类型" class="headerlink" title="Python序列类型"></a>Python序列类型</h1><p>Python内置序列类型list tuple str  str是字符序列 list和tuple是任何Python对象序列   str和tuple属于不可变序列  所有序列都支持迭代<br>所有序列类型支持索引、切片<br>min()取序列中的最小值<br>max()取序列中的最大值<br>sum()对序列求和<br>len()求序列元素个数<br>all()检查序列中所有元素为True</p>
<h1 id="Python列表"><a href="#Python列表" class="headerlink" title="Python列表"></a>Python列表</h1><p>支持在原处修改：修改指定的索引元素、修改指定分片、删除语句、内置方法<br>合并两个列表，返回一个新的列表，不会修改原列表<br>in:成员关系判断字符，用法 obj in container<br>not in: obj not in container<br>列表解析：[]<br>列表复制：浅拷贝  深拷贝(copy.deepcopy())</p>
<h1 id="Python元组"><a href="#Python元组" class="headerlink" title="Python元组"></a>Python元组</h1><p>任意对象的有序集合，通过索引访问其中内容，不可变对象，长度固定<br>in<br>not in</p>
<p><img src="/Picture/python-list-fun.jpg" alt="序列类型的操作 列表类型的操作"></p>
<h1 id="Python集合"><a href="#Python集合" class="headerlink" title="Python集合"></a>Python集合</h1><p>只能使用工厂函数set()和frozenset()创建<br>不支持：索引、切片、元素获取<br><img src="/Picture/python-set-fun.jpg" alt="集合类型的操作"></p>
<h1 id="Python引用计数"><a href="#Python引用计数" class="headerlink" title="Python引用计数"></a>Python引用计数</h1><p>sys模块 sys.getrefcount()获得对象的引用计数<br>Python对象引用计数为0，对象被释放，归还内存</p>
<h1 id="Python真假"><a href="#Python真假" class="headerlink" title="Python真假"></a>Python真假</h1><ol>
<li>所有非0数字和非空对象都为真</li>
<li>数字0、空对象和特殊对象None均为假</li>
</ol>
<h1 id="Python解释器环境与选项"><a href="#Python解释器环境与选项" class="headerlink" title="Python解释器环境与选项"></a>Python解释器环境与选项</h1><p>python [option] [-c cmd | filename | -] [ args ]<br><img src="/Picture/Python-option-cmd.jpg" alt="Python解释器启动选项"><br><img src="/Picture/Python-env.jpg" alt="Python解释器环境变量"></p>
<h1 id="Python文件操作"><a href="#Python文件操作" class="headerlink" title="Python文件操作"></a>Python文件操作</h1><p>Python内置函数open()用于打开文件和创建文件对象。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">open(name [,mode[,bufsize]])</span><br></pre></td></tr></table></figure></p>
<p>open方法可以接受三个参数：文件名、模式、缓冲区参数</p>
<ol>
<li>open函数返回一个文件对象</li>
<li>mode指定文件打开模式 r只读 w写入(如果没有文件会自动创建一个) a附加 r+默认读模式打开支持写操作 w+默认写模式打开支持读操作 a+默认附加模式打开支持读操作 在r、w、a、r+、w+、a+后面中附加b，表示以二进制方式打开</li>
<li>bufsize定义输出缓存 0表示无输出缓存 1表示使用缓存 负数表示使用系统默认配置 正数表示使用近似指定大小的缓冲。</li>
</ol>
<p>file.next() 返回文件中下一行内容 不会移动文件游标<br>file.close() 关闭当前文件<br>file.fileno() 返回文件描述符<br>file.readline() 读取文件中一行<br>file.readlines() 以列表形式每行为一个元素，返回所有文件内容<br>file.tell() 返回当前文件游标的位置(第n个字节处)<br>file.read(size) 返回size个字节的数据，返回字符串<br>file.seek(offset [, whencel]) 移动文件游标到指定位置 offset偏移量  whencel 偏移起点 0文件头 1当前位置 2文件尾部 默认为0<br>file.write(str) 将str写入文件中<br>file.writeline(list) 将字符串列表list写入文件中<br>file.flush() 将数据从缓存区刷新到磁盘中<br>file.isatty() 判断该文件是否为终端设置文件 如果是返回True 否则返回False<br>file.truncate(size) 将文件截取保留size大小的文件，其余的删除</p>
<p>file.closed 返回文件是否已经关闭 返回True表示已关闭 返回False表示未关闭<br>file.encoding 返回文件编码格式<br>file.mode 返回文件打开模式<br>file.name 当前打开文件名称<br>file.softspace</p>
<h1 id="Python-OS模块"><a href="#Python-OS模块" class="headerlink" title="Python OS模块"></a>Python OS模块</h1><p>目录相关<br>os.mkdir(path) 创建目录path<br>os.mkdirs(path) 创建目录path如果父目录不存在先创建父目录<br>os.rmdir(path) 删除目录path<br>os.rmdirs(path) 删除多级目录<br>os.getcwd() 返回当前目录<br>os.chdir(path) 改变当前目录为path<br>os.fchdir(file) 通过文件描述符改变当前目录<br>os.chroot() 设定当前进程的根目录<br>os.listdir(path) 列出指定目录下的所有文件名</p>
<p>文件相关<br>os.stat(path) 获取path的状态信息<br>os.remove(file) 删除文件<br>os.rename(file) 文件重命名<br>os.symlink(src, dst) 创建链接<br>os.utime(path) 更新时间<br>os.walk()</p>
<p>权限相关<br>os.access(path, mode) 检验权限是否存在<br>os.chmod(path, mode) 修改权限为mode<br>os.chown(path, pid, gid) 改变文件的属主和属组权限)<br>os.umask() 设置默认权限模式</p>
<p>文件描述符<br>os.open()<br>os.close()<br>os.read()<br>os.write()</p>
<p>os.path 文件路径相关<br>os.path.basename() 文件名<br>os.path.dirname() 目录名<br>os.path.join() 整合路径<br>os.path.split() 返回dirname() basename()元组<br>os.path.splitext() 返回(filename, extension)元组</p>
<p>os.path.getatime()<br>os.path.getctime()<br>os.path.getmtime()<br>os.path.getsize() 返回文件大小</p>
<p>os.path.exists() 判断指定文件是否存在<br>os.path.isabs() 判断给定路径是否为绝对路径<br>os.path.isdir() 判断是否为目录<br>os.path.isfile() 判断是否为文件<br>os.path.islink() 判断是否为链接<br>os.path.ismount() 判断是否为挂载点<br>os.path.samefile() 判断两个路径是否指向同一文件</p>
<p>对象流式化、持久化<br>pickle</p>
<p>Python 文件对象可迭代<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">In [14]: f = open(&apos;/etc/passwd&apos; , &apos;r&apos;)</span><br><span class="line"></span><br><span class="line">In [15]: for line in f:</span><br><span class="line">   ....:     print line</span><br><span class="line">   ....:</span><br></pre></td></tr></table></figure></p>
<h1 id="Python正则表达式"><a href="#Python正则表达式" class="headerlink" title="Python正则表达式"></a>Python正则表达式</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><p>正则表达式，使用单个字符串来描述、匹配一系列符合某个语法规则的字符串。<br>常用正则表达式的表达式符号和特殊字符</p>
<ol>
<li>literal 匹配字符串的值  例如: foo</li>
<li><code>re1|re2</code> 匹配正则表达式re1或re2  例如: <code>foo|bar</code></li>
<li><code>.</code> 匹配任何单个字符(换行符除外) 例如: <code>b.b</code></li>
<li><code>^</code> 匹配字符串的开始 例如: <code>^Dear</code></li>
<li><code>$</code> 匹配字符串的结尾</li>
<li><code>*</code> 匹配前面出现的正则表达式零次或多次 例如: <code>[A-Za-z0-9]*</code></li>
<li><code>+</code> 匹配前面出现的正则表达式一次或多次 例如: <code>[a-z]+.com</code></li>
<li><code>?</code> 匹配前面出现的正则表达式零次或一次 例如: <code>goo?</code></li>
<li><code>{N}</code> 匹配前面出现的正则表达式N次 例如: <code>[0-9]{3}</code></li>
<li><code>{M,N}</code> 匹配前面出现的正则表达式M次到N次 例如: <code>[0-9]{5,9}</code></li>
<li><code>[...]</code> 匹配字符组里出现的任意一个字符 例如: <code>[aeiou]</code></li>
<li><code>[..x-y..]</code> 匹配从字符x到字符y的任意一个字符 例如: <code>[0-9]</code>, <code>[A-Za-z]</code></li>
<li><code>[^...]</code> 不匹配此字符集中出现的任何一个字符，包括某一范围的字符（如果在次字符集中出现）例如: <code>[^aeiou]</code>, <code>[^A-Za-z0-9_]</code></li>
<li><code>(*|+|?|{})?</code> 用于上面出现的任何“非贪婪”版本重复匹配次数符号<code>(*,+,?,{})</code> 例如: <code>.*?[a-z]</code></li>
<li><code>(...)</code> 匹配封闭括号中正则表达式(RZ), 并保存为子组 例如: <code>([0-9]{3})?,f(oo|u)bar</code></li>
<li><code>\d</code> 匹配任何数字，和<code>[0-9]</code>一样(<code>\D</code>是<code>\d</code>的反义：任何非数字符) 例如: <code>data\d+.txt</code></li>
<li><code>\w</code> 匹配任何数字字母字符，和<code>[A-Za-z0-9]</code>相同(<code>\W</code>是<code>\w</code>的反义) 例如：<code>[A-Za-z\_]w+</code></li>
<li><code>\s</code> 匹配任何空白符，和<code>[\n\t\r\v\f]</code>相同，(<code>\S</code>是<code>\s</code>的反义) 例如: <code>of\sthe</code></li>
<li><code>\b</code> 匹配单词边界(<code>\B</code>是<code>\b</code>的反义) 例如: <code>\bThe\b</code></li>
<li><code>\c</code> 逐一匹配特殊字符c(即，取消它的特殊含义，按字面匹配) 例如: <code>\.</code>, <code>\\</code>, <code>\*</code></li>
<li><code>\A(\Z)</code>匹配字符串的起始(结束) 例如: <code>\ADear</code></li>
</ol>
<h2 id="Python正则表达式模块"><a href="#Python正则表达式模块" class="headerlink" title="Python正则表达式模块"></a>Python正则表达式模块</h2><p>re模块<br>re.match() 尝试用正则表达式模式从字符串的开头匹配，如果匹配成功，则返回一个匹配对象，否则返回None<br>re.search() 在字符串中查找正则表达式模式第一次出现，如果匹配成功，则返回一个匹配对象，否则返回None<br>re.findall() 在字符串中查找正则表达式默认的所有(非重复)出现；返回一个匹配对象的列表<br>re.split() 根据正则表达式中的分隔符将字符分割为一个列表，返回成功匹配的列表，可以设定次数（默认是分割所有匹配的地方）<br>re.sub() 把字符串中所有匹配正则表达式的地方替换为字符串，如果没有次数限制，则对所有匹配的地方进行替换，并返回替换后整个串<br>re.subn() 和re.sub()功能相同，不过其返回值为元组，包含其替换后的串和替换次数<br>re.compile()</p>
<h2 id="贪婪匹配和非贪婪匹配"><a href="#贪婪匹配和非贪婪匹配" class="headerlink" title="贪婪匹配和非贪婪匹配"></a>贪婪匹配和非贪婪匹配</h2><p>当正则表达式中包含能接受重复的限定符时，匹配尽可能多的字符，即贪婪匹配。贪婪匹配:<code>a.*b</code>，将会匹配最长的以a开始以b结束的字符串。如果以它来搜索aabab的化，会匹配整个字符串aabab。<br>非贪婪匹配，在正则表达式后面加个?。  <code>.*?</code>意味着在能使匹配成功的前提下使用最少的重复。<code>a.*b</code>匹配最短的以a开始以b结束的字符，应用于aabab的话，会匹配aab和ab。</p>
<h1 id="Python使用过程中碰到问题"><a href="#Python使用过程中碰到问题" class="headerlink" title="Python使用过程中碰到问题"></a>Python使用过程中碰到问题</h1><h2 id="python-josn-dumps中文乱码问题"><a href="#python-josn-dumps中文乱码问题" class="headerlink" title="python josn dumps中文乱码问题"></a>python josn dumps中文乱码问题</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">In [<span class="number">1</span>]: strMsg = &#123;<span class="string">"测试"</span>:<span class="string">"值"</span>&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: <span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: <span class="keyword">print</span> json.dumps(strMsg)</span><br><span class="line">&#123;<span class="string">"\u6d4b\u8bd5"</span>: <span class="string">"\u503c"</span>&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">4</span>]: <span class="keyword">print</span> json.dumps(strMsg, ensure_ascii=<span class="literal">False</span>)</span><br><span class="line">&#123;<span class="string">"测试"</span>: <span class="string">"值"</span>&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>other</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Shell脚本学习</title>
    <url>/2017/07/29/shell/</url>
    <content><![CDATA[<h1 id="shell特性"><a href="#shell特性" class="headerlink" title="shell特性"></a>shell特性</h1><h2 id="查看历史命令history"><a href="#查看历史命令history" class="headerlink" title="查看历史命令history"></a>查看历史命令history</h2><p>shell中history命令可以查看历史命令，默认保存1024条历史命令记录。<br>shell中使用!!自动执行上一条历史命令。<br>shell中使用!num表示执行第num条历史命令。<br>shell中使用!str表示执行最近的以str开头的命令。</p>
<h2 id="alias-和-unalias"><a href="#alias-和-unalias" class="headerlink" title="alias 和 unalias"></a>alias 和 unalias</h2><p>alias给一条命令设置别名，简化操作。unalias取消别名。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[CaseZheng@home Study]$ alias myls=&quot;ls -la&quot;</span><br><span class="line">[CaseZheng@home Study]$ myls</span><br><span class="line">总用量 44</span><br><span class="line">drwxrwxr-x.  9 CaseZheng CaseZheng 4096 7月  26 23:14 .</span><br><span class="line">drwx------. 29 CaseZheng CaseZheng 4096 7月  29 11:49 ..</span><br><span class="line">drwxrwxr-x.  5 CaseZheng CaseZheng 4096 6月   5 22:52 BoostStudy</span><br><span class="line">drwxrwxr-x.  8 CaseZheng CaseZheng 4096 7月  29 11:52 .git</span><br><span class="line">-rw-rw-r--.  1 CaseZheng CaseZheng   41 6月   3 22:00 .gitignore</span><br><span class="line">drwxrwxr-x.  2 CaseZheng CaseZheng 4096 6月   3 22:00 Lua_C_Server_Client</span><br><span class="line">drwxrwxr-x.  2 CaseZheng CaseZheng 4096 6月  26 23:03 Mahjong</span><br><span class="line">drwxrwxr-x.  2 CaseZheng CaseZheng 4096 7月  27 22:55 Python</span><br><span class="line">-rw-rw-r--.  1 CaseZheng CaseZheng    8 6月   3 22:00 README.md</span><br><span class="line">drwxrwxr-x.  3 CaseZheng CaseZheng 4096 6月   3 22:00 Redis_Lua</span><br><span class="line">drwxrwxr-x.  3 CaseZheng CaseZheng 4096 7月  27 22:55 WebStudy</span><br><span class="line">[CaseZheng@home Study]$ unalias myls</span><br><span class="line">[CaseZheng@home Study]$ myls</span><br><span class="line">bash: myls: 未找到命令...</span><br><span class="line">[CaseZheng@home Study]$</span><br></pre></td></tr></table></figure></p>
<h2 id="gt-gt-gt-lt"><a href="#gt-gt-gt-lt" class="headerlink" title="&gt; &gt;&gt; &lt;"></a>&gt; &gt;&gt; &lt;</h2><p><code>&gt;</code>      重定向<br><code>&gt;&gt;</code>    追加<br><code>&lt;</code>      反向重定向</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[CaseZheng@home ~]$ echo &quot;hello shell&quot; &gt; hello.txt</span><br><span class="line">[CaseZheng@home ~]$ cat hello.txt</span><br><span class="line">hello shell</span><br><span class="line">[CaseZheng@home ~]$ echo &quot;hello clear&quot; &gt; hello.txt</span><br><span class="line">[CaseZheng@home ~]$ cat hello.txt</span><br><span class="line">hello clear</span><br><span class="line">[CaseZheng@home ~]$ echo &quot;hello append&quot; &gt;&gt; hello.txt</span><br><span class="line">[CaseZheng@home ~]$ cat hello.txt</span><br><span class="line">hello clear</span><br><span class="line">hello append</span><br><span class="line">[CaseZheng@home ~]$</span><br></pre></td></tr></table></figure>
<p><code>2&gt;</code>    错误重定向<br><code>2&gt;&gt;</code>   错误追加</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[CaseZheng@home ~]$ ls hahaha</span><br><span class="line">ls: 无法访问&apos;hahaha&apos;: No such file or directory</span><br><span class="line">[CaseZheng@home ~]$ ls hahaha 2&gt; log.txt</span><br><span class="line">[CaseZheng@home ~]$ cat log.txt</span><br><span class="line">ls: 无法访问&apos;hahaha&apos;: No such file or directory</span><br><span class="line">[CaseZheng@home ~]$ ls 2&gt; log.txt</span><br><span class="line">Blog  hello.txt  log.txt  Package  PythonWeb  SourceCodeAnalysis  Study  桌面</span><br><span class="line">[CaseZheng@home ~]$ cat log.txt</span><br><span class="line">[CaseZheng@home ~]$</span><br></pre></td></tr></table></figure>
<h1 id="shell脚本"><a href="#shell脚本" class="headerlink" title="shell脚本"></a>shell脚本</h1><ol>
<li><code>#!/bin/sh</code> <code>#!/bin/bash</code> 写在shell脚本第一行 指名脚本解释执行的解释器</li>
<li><code>#</code> 除第一行以<code>#!</code>开头有特殊用途外 其它以<code>#</code>开头的行均为注释</li>
<li>chmod a+x xxx.sh 给xxx.sh增加执行权限</li>
<li>bash -x xxx.sh 查看xxx.sh的执行过程</li>
</ol>
<h1 id="date"><a href="#date" class="headerlink" title="date"></a>date</h1><p>打印或设置系统日期和时间</p>
<h1 id="shell变量"><a href="#shell变量" class="headerlink" title="shell变量"></a>shell变量</h1><p>注意等于号左右不能有空格<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line">test=&quot;test str&quot;</span><br><span class="line">echo $test</span><br><span class="line">echo $&#123;test&#125;    # 花括号可以帮助解释器识别变量边界</span><br></pre></td></tr></table></figure></p>
<p>unset 命令可以删除变量<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line">test=&quot;test str&quot;</span><br><span class="line">unset test</span><br><span class="line">echo $test</span><br></pre></td></tr></table></figure></p>
<p>readonly 命令使变量只读 unset不能删除只读变量<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[CaseZheng@localhost ~]$ cat test.sh</span><br><span class="line">#!/bin/sh</span><br><span class="line">readonly a=10</span><br><span class="line">a=20</span><br><span class="line">[CaseZheng@localhost ~]$ bash -x test.sh</span><br><span class="line">+ readonly a=10</span><br><span class="line">+ a=10</span><br><span class="line">+ a=20</span><br><span class="line">test.sh:行3: a: 只读变量</span><br></pre></td></tr></table></figure></p>
<h1 id="shell读取命令行参数"><a href="#shell读取命令行参数" class="headerlink" title="shell读取命令行参数"></a>shell读取命令行参数</h1><ol>
<li>$0 命令本身</li>
<li>$1 $2 $3 以此为参数1 2 3</li>
<li>$# 参数个数<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[CaseZheng@localhost ~]$ cat test.sh</span><br><span class="line">#!/bin/sh</span><br><span class="line">echo $0</span><br><span class="line">echo $1</span><br><span class="line">echo $2</span><br><span class="line">echo $3</span><br><span class="line">echo $#</span><br><span class="line">[CaseZheng@localhost ~]$ ./test.sh 10 11 12 13 14 15</span><br><span class="line">./test.sh</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">6</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="从屏幕读入"><a href="#从屏幕读入" class="headerlink" title="从屏幕读入"></a>从屏幕读入</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[CaseZheng@localhost ~]$ cat test.sh</span><br><span class="line">#!/bin/sh</span><br><span class="line">read -p &quot;请输入&quot; num</span><br><span class="line">echo $num</span><br><span class="line">[CaseZheng@localhost ~]$ ./test.sh</span><br><span class="line">请输入4</span><br><span class="line">4</span><br></pre></td></tr></table></figure>
<h1 id="算术运算"><a href="#算术运算" class="headerlink" title="算术运算"></a>算术运算</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[CaseZheng@localhost ~]$ cat test.sh</span><br><span class="line">#!/bin/sh</span><br><span class="line">a=1;</span><br><span class="line">b=2;</span><br><span class="line">echo $a+$b          # 字符串连接</span><br><span class="line">echo $[$a+$b]       # 算术运算</span><br><span class="line">echo $(($a+$b))     # 算术运算</span><br><span class="line">[CaseZheng@localhost ~]$ ./test.sh</span><br><span class="line">1+2</span><br><span class="line">3</span><br><span class="line">3</span><br></pre></td></tr></table></figure>
<h1 id="数字比较"><a href="#数字比较" class="headerlink" title="数字比较"></a>数字比较</h1><ol>
<li>-eq 相等（equal）</li>
<li>-ne 不等（not equal）</li>
<li>-gt 大于（greater than）</li>
<li>-lt 小于（less than）</li>
<li>-ge 大于等于 （greater than or equal）</li>
<li>-le 小于等于 （less than or equal）</li>
</ol>
<h1 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[CaseZheng@localhost ~]$ cat test.sh</span><br><span class="line">#!/bin/sh</span><br><span class="line">if [ 1 -eq 1 ]     # 方括号两边都要有空格 == 两边加空格</span><br><span class="line">then</span><br><span class="line">    echo &quot;true&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if [ 1 -eq 2 ]     # 方括号两边都要有空格 == 两边加空格</span><br><span class="line">then</span><br><span class="line">    echo &quot;true&quot;</span><br><span class="line">else</span><br><span class="line">    echo &quot;false&quot;</span><br><span class="line">fi</span><br><span class="line">[CaseZheng@localhost ~]$ bash -x test.sh</span><br><span class="line">+ &apos;[&apos; 1 -eq 1 &apos;]&apos;</span><br><span class="line">+ echo true</span><br><span class="line">true</span><br><span class="line">+ &apos;[&apos; 1 -eq 2 &apos;]&apos;</span><br><span class="line">+ echo false</span><br><span class="line">false</span><br><span class="line">[CaseZheng@localhost ~]$ cat test.sh</span><br><span class="line">#!/bin/sh</span><br><span class="line">if [ 1 -eq 2 ]</span><br><span class="line">then</span><br><span class="line">    echo &quot;true 1==2&quot;</span><br><span class="line">elif [ 1 -lt 2 ]    # 小于等于</span><br><span class="line">then</span><br><span class="line">    echo &quot;true 1&lt;2&quot;</span><br><span class="line">else</span><br><span class="line">    echo &quot;false&quot;</span><br><span class="line">fi</span><br><span class="line">[CaseZheng@localhost ~]$ bash -x test.sh</span><br><span class="line">+ &apos;[&apos; 1 -eq 2 &apos;]&apos;</span><br><span class="line">+ &apos;[&apos; 1 -lt 2 &apos;]&apos;</span><br><span class="line">+ echo &apos;true 1&lt;2&apos;</span><br><span class="line">true 1&lt;2</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>C++复习学习笔记</title>
    <url>/2017/07/22/cplusplus-review/</url>
    <content><![CDATA[<h1 id="复习到的知识点"><a href="#复习到的知识点" class="headerlink" title="复习到的知识点"></a>复习到的知识点</h1><h2 id="1-C-三种编程方式"><a href="#1-C-三种编程方式" class="headerlink" title="1. C++三种编程方式"></a>1. C++三种编程方式</h2><ol>
<li>面向过程编程</li>
<li>面向对象编程</li>
<li>C++模板支持的泛型编程</li>
</ol>
<h2 id="2-注释"><a href="#2-注释" class="headerlink" title="2. 注释"></a>2. 注释</h2><p>C++的注释为//，C的为<code>/*...*/</code>，C++可以识别<code>/*...*/</code>，C99将//注释加入到C标准</p>
<h2 id="3-名词空间"><a href="#3-名词空间" class="headerlink" title="3. 名词空间"></a>3. 名词空间</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cout</span>;        <span class="comment">//只将std名字空间下的cout暴露出来</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;    <span class="comment">//将std名字空间的下所有标识符暴露出来</span></span><br></pre></td></tr></table></figure>
<h2 id="4-函数"><a href="#4-函数" class="headerlink" title="4. 函数"></a>4. 函数</h2><ol>
<li>函数头 指出函数返回值的类型和函数期望通过参数传递给它的信息的类型</li>
<li>函数体 由花括号中的C++语句组成</li>
</ol>
<h2 id="5-C-语句"><a href="#5-C-语句" class="headerlink" title="5. C++语句"></a>5. C++语句</h2><ol>
<li>声明语句 定义变量的名称和类型</li>
<li>赋值语句 使用赋值运算符给变量赋值</li>
<li>消息语句 将消息发送给对象，激发某种行动</li>
<li>函数调用 执行函数。被调用的函数执行完毕后，程序返回到函数调用语句后面的语句</li>
<li>函数原型 申明函数的返回类型、函数接受的参数数量和类型</li>
<li>返回语句 将一个值从被调用的函数返回到调用函数中</li>
</ol>
<h2 id="6-C-命名规则"><a href="#6-C-命名规则" class="headerlink" title="6. C++命名规则"></a>6. C++命名规则</h2><ol>
<li>在名称中只能使用字母字符、数字和下划线</li>
<li>名称的第一个字符不能是数字</li>
<li>区分大写字符和小写字符</li>
<li>不能将C++关键字作为名称</li>
<li>以两个下划线或下划线和大写字母开头的名称被保留给实现（编译器和其使用的资源）使用。以一个下划线开头的名称被保留给实现，用作全局标识符</li>
<li>C++对于名称的长度没有限制，名称中所有字符都有意义，但有些平台有长度限制（和C标准有所区别C标准只保证前63个字符有意义 ps:gcc6.3.1下使用长度超过63且前63个字符相同的两个变量测未出现错误）</li>
</ol>
<h2 id="7-climits"><a href="#7-climits" class="headerlink" title="7. climits"></a>7. climits</h2><p>头文件定义了符号常量表示类型的限制<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *args[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// g++ 6.3.1 fedora25 64位 linux</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="keyword">sizeof</span> LLONG_MAX&lt;&lt;<span class="built_in">endl</span>;   <span class="comment">//8</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="keyword">sizeof</span> SHRT_MAX&lt;&lt;<span class="built_in">endl</span>;    <span class="comment">//4</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="keyword">sizeof</span> INT_MAX&lt;&lt;<span class="built_in">endl</span>;     <span class="comment">//4</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="keyword">sizeof</span> LONG_MAX&lt;&lt;<span class="built_in">endl</span>;    <span class="comment">//8</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="8-const与-define优先使用const"><a href="#8-const与-define优先使用const" class="headerlink" title="8. const与#define优先使用const"></a>8. const与#define优先使用const</h2><ol>
<li>const可指定类型</li>
<li>const可设定作用域</li>
<li>cosnt可用于更复杂的类型</li>
</ol>
<h2 id="9-C-中const变量可用来申明数组长度（C语言不可以）"><a href="#9-C-中const变量可用来申明数组长度（C语言不可以）" class="headerlink" title="9. C++中const变量可用来申明数组长度（C语言不可以）"></a>9. C++中const变量可用来申明数组长度（C语言不可以）</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用g++可以编译通过，使用gcc会报错</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> arraylen = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> arr[arraylen] =&#123;<span class="number">0</span>&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="10-基础类型，整数和浮点数"><a href="#10-基础类型，整数和浮点数" class="headerlink" title="10. 基础类型，整数和浮点数"></a>10. 基础类型，整数和浮点数</h2><h2 id="11-类型转换"><a href="#11-类型转换" class="headerlink" title="11. 类型转换"></a>11. 类型转换</h2><ol>
<li>初始化和赋值进行的转换</li>
<li>以{}方式初始化时进行的转换（C++11）</li>
<li>表达式中的转换</li>
<li>传递参数时进行的转换</li>
<li>强制类型转换</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(typename) value;       //C语言风格</span><br><span class="line">typename(value);        //C++</span><br><span class="line">static_cast&lt;typename&gt; (value);  //C++四种强制类型转换运算符，static_cast是其中一种可用于将数值类型转换为另一种数值类型，比传统强制类型转换更严格</span><br></pre></td></tr></table></figure>
<h2 id="12-C-11中auto申明，使用关键字auto，不指定变量类型，编译器将把变量的类型设置成与初始值相同"><a href="#12-C-11中auto申明，使用关键字auto，不指定变量类型，编译器将把变量的类型设置成与初始值相同" class="headerlink" title="12. C++11中auto申明，使用关键字auto，不指定变量类型，编译器将把变量的类型设置成与初始值相同"></a>12. C++11中auto申明，使用关键字auto，不指定变量类型，编译器将把变量的类型设置成与初始值相同</h2><h2 id="13-结构体struct、共用体union、枚举enum"><a href="#13-结构体struct、共用体union、枚举enum" class="headerlink" title="13. 结构体struct、共用体union、枚举enum"></a>13. 结构体struct、共用体union、枚举enum</h2><h2 id="14-位字段，可使用按位运算替代这种方法"><a href="#14-位字段，可使用按位运算替代这种方法" class="headerlink" title="14. 位字段，可使用按位运算替代这种方法"></a>14. 位字段，可使用按位运算替代这种方法</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">struct torgle_register</span><br><span class="line">&#123;</span><br><span class="line">    unsigned int SN : 4;</span><br><span class="line">    unsigned int : 4;   //表示有4个位未使用</span><br><span class="line">    bool goodIn : 1;</span><br><span class="line">    bool goodTorgle : 1;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="15-使用new和delete应遵守的规则"><a href="#15-使用new和delete应遵守的规则" class="headerlink" title="15. 使用new和delete应遵守的规则"></a>15. 使用new和delete应遵守的规则</h2><ol>
<li>不要使用delete来释放不是new分配的内存</li>
<li>不用使用delete释放同一块内存块两次</li>
<li>如果使用new[]为数组分配内存，应使用delete[]来使用</li>
<li>使用new[]为一个实体分配内存，则应使用delete（没有方括号）来释放</li>
<li>对空指针使用delete是安全的</li>
</ol>
<h2 id="16-C-三种管理数据内存的方式"><a href="#16-C-三种管理数据内存的方式" class="headerlink" title="16. C++三种管理数据内存的方式"></a>16. C++三种管理数据内存的方式</h2><ol>
<li>自动存储，栈上的临时变量</li>
<li>静态存储，整个程序执行期间都存在，static变量，全局变量</li>
<li>动态存储，堆，new和delete</li>
</ol>
<h2 id="17-STL模板类vector是动态数组的替代品，C-11模板类array是定长数组的替代品"><a href="#17-STL模板类vector是动态数组的替代品，C-11模板类array是定长数组的替代品" class="headerlink" title="17. STL模板类vector是动态数组的替代品，C++11模板类array是定长数组的替代品"></a>17. STL模板类vector是动态数组的替代品，C++11模板类array是定长数组的替代品</h2><h2 id="18-类型别名"><a href="#18-类型别名" class="headerlink" title="18. 类型别名"></a>18. 类型别名</h2><ol>
<li>预处理器<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BYTE char</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>编译阶段用char替换所有的BYTE</p>
<ol>
<li>typedef（C++、C关键字）<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">typedef char BYTE;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>typedef不会创建新类型，只是为已有类型创建新的名称。</p>
<h2 id="19-数组指针、指针数组"><a href="#19-数组指针、指针数组" class="headerlink" title="19. 数组指针、指针数组"></a>19. 数组指针、指针数组</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> (*p)[<span class="number">4</span>];    <span class="comment">//数组指针，指向一个数组的指针</span></span><br><span class="line"><span class="keyword">int</span> *q[<span class="number">3</span>];      <span class="comment">//指针数组，包含指针的数组</span></span><br></pre></td></tr></table></figure>
<h2 id="20-函数指针，是一个指针，指向一个函数"><a href="#20-函数指针，是一个指针，指向一个函数" class="headerlink" title="20. 函数指针，是一个指针，指向一个函数"></a>20. 函数指针，是一个指针，指向一个函数</h2><h2 id="21-内联函数"><a href="#21-内联函数" class="headerlink" title="21. 内联函数"></a>21. 内联函数</h2><p>inline关键字，类联函数将使用相应函数代码替换函数调用，程序无需跳转到另一位值执行代码，提高运行速度，但需要占用更多内存，内联函数只是对编译器的建议，如果函数定义占用太多行，则不会被内联。C语言使用#define可以实现函数内联，但由于#define只是代码替换会引发问题，所以应尽量使用inline。</p>
<ol>
<li>函数声明前加上关键字inline</li>
<li>函数定义前加上关键字inline</li>
</ol>
<h2 id="22-左值引用-amp"><a href="#22-左值引用-amp" class="headerlink" title="22. 左值引用&amp;"></a>22. 左值引用&amp;</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int a = 0;</span><br><span class="line">int &amp;b = a;     //b成为a的一个别名，对b的操作相当于操作b    int *const b = &amp;a;</span><br><span class="line">b = 10;         //*b = 10;</span><br></pre></td></tr></table></figure>
<h2 id="23-默认参数"><a href="#23-默认参数" class="headerlink" title="23. 默认参数"></a>23. 默认参数</h2><p>对于带参数列表的函数，必须从右向左添加默认值。即，要为某个参数设置默认值，其右边的所有参数都必须提供默认值。<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> z=<span class="number">0</span>, <span class="keyword">int</span> w=<span class="number">0</span>)</span></span>;</span><br></pre></td></tr></table></figure></p>
<h2 id="24-函数重载"><a href="#24-函数重载" class="headerlink" title="24. 函数重载"></a>24. 函数重载</h2><p>函数重载的关键是函数的参数列表，称为函数特征标，和其返回值无关，和参数列表中参数的变量名也无关。<br>编译器在检查函数特征标时，把类型引用和其本身视为同一个特征标。</p>
<h2 id="25-函数模板"><a href="#25-函数模板" class="headerlink" title="25. 函数模板"></a>25. 函数模板</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Swap</span><span class="params">(Type &amp;a, Type &amp;b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Type temp;</span><br><span class="line">    temp = a;</span><br><span class="line">    a = b;</span><br><span class="line">    b = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>模板函数也可以重载<br>函数模板特化<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Job</span>&#123;</span></span><br><span class="line">    Job &amp; <span class="keyword">operator</span> =(Job <span class="keyword">const</span> &amp;r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;Job;</span><br><span class="line"><span class="keyword">template</span> &lt;&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Swap</span><span class="params">(Job &amp;a, Job &amp;b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">Job <span class="title">temp</span><span class="params">(a)</span></span>;</span><br><span class="line">    a = b;</span><br><span class="line">    b = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>函数模板偏特化是不可以的，可以使用函数重载实现</p>
<h2 id="26-说明符和限定符"><a href="#26-说明符和限定符" class="headerlink" title="26. 说明符和限定符"></a>26. 说明符和限定符</h2><ol>
<li><p>auto C++11之前在申明中使用，指明变量为自动变量，但在C++11中auto用于自动类型推断</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">auto</span> <span class="keyword">int</span> x = <span class="number">10</span>;    <span class="comment">//C++11中编译错误，C中可编译通过  指明x为自动变量即存放在栈上</span></span><br><span class="line"><span class="keyword">auto</span> y = <span class="number">10</span>;        <span class="comment">//C++11中编译通过</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>register 声明将变量存储到寄存器中，C++11中只是显示指出变量是自动的</p>
</li>
<li>static<ol>
<li>限制全局变量或函数的作用域</li>
<li>申明某个变量为静态变量</li>
<li>用于类函数</li>
</ol>
</li>
<li>extern 声明是引用声明，即声明引用在其它地方定义的变量</li>
<li>mutable 即使变量所在的类或结构体变量为const，其用mutable修饰的变量仍可被修改</li>
<li>const 被其修饰的变量不可改变</li>
<li>volatile 禁止编译器对某个变量进行优化，每次都去内存中取值，不使用寄存器中的缓存值</li>
</ol>
<h2 id="27-new、delete的用法"><a href="#27-new、delete的用法" class="headerlink" title="27. new、delete的用法"></a>27. new、delete的用法</h2><ol>
<li><p>常用的用于创建对象并初始化的new，如果失败抛出异常<code>std::bad_alloc</code></p>
 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">string</span> *str = <span class="keyword">new</span> <span class="built_in">string</span>(<span class="string">"abc"</span>);</span><br><span class="line"><span class="keyword">int</span> *arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">4</span>];</span><br></pre></td></tr></table></figure>
</li>
<li><p>常用的用于创建对象并初始化的new，如果失败不抛出异常返回NULL</p>
 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> *arr1 = <span class="keyword">new</span>() <span class="keyword">int</span>[<span class="number">10000000000</span>];             <span class="comment">//抛出std::bad_alloc</span></span><br><span class="line"><span class="keyword">int</span> *arr2 = <span class="keyword">new</span>(nothrow) <span class="keyword">int</span>[<span class="number">10000000000</span>];      <span class="comment">//不抛出异常，返回NULL</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>用于申明空间，类似malloc</p>
 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> *p = <span class="keyword">operator</span> <span class="keyword">new</span>(<span class="number">10000000000</span> * <span class="keyword">sizeof</span>(<span class="keyword">int</span>));    <span class="comment">//失败抛出std::bad_alloc</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在已有空间上构建对象</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">void *p = operator new(sizeof(int));</span><br><span class="line">int *a = new(p) int(10);</span><br></pre></td></tr></table></figure>
</li>
<li><p>析构对象并释放空间</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">string *str = new string(&quot;abc&quot;);</span><br><span class="line">delete str;</span><br><span class="line">int *arr = new int[4];</span><br><span class="line">delete[] arr;</span><br></pre></td></tr></table></figure>
</li>
<li><p>释放空间</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">void *p = operator new(10 * sizeof(int));    //失败抛出std::bad_alloc</span><br><span class="line">operator delete p;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="28-名字空间（名称空间、命名空间）namespace"><a href="#28-名字空间（名称空间、命名空间）namespace" class="headerlink" title="28. 名字空间（名称空间、命名空间）namespace"></a>28. 名字空间（名称空间、命名空间）namespace</h2><h2 id="29-类-class"><a href="#29-类-class" class="headerlink" title="29. 类 class"></a>29. 类 class</h2><p>多态、继承、封装和数据隐藏、代码可重用、抽象</p>
<ol>
<li>访问控制 public protected private</li>
<li>方法 内联方法（inline）</li>
<li>构造方法、析构方法、拷贝构造函数、等号运算符重载函数、取址运算符重载函数、取址运算符重载函数const版本(编译器会自动生成它们的默认版本)</li>
<li>C++11列表初始化也可用于类</li>
<li>const成员函数 函数内部不可修改成员变量的值，const修饰的变量和非const变量都可调用，const修饰的变量无法调用非const成员函数</li>
<li>this指针，在成员函数中默认传入</li>
<li>static修饰的成员函数，不会传入this指针，只能访问类中staitc成员变量</li>
</ol>
<h2 id="30-运算符重载"><a href="#30-运算符重载" class="headerlink" title="30. 运算符重载"></a>30. 运算符重载</h2><p>重载限制</p>
<ol>
<li>重载后的运算符必须至少有一个操作数为用户自定义类型，防止用户为标准类型重载运算符。</li>
<li>使用运算符不能违反运算符原来的句法规则。不能改变优先级</li>
<li>不能创建新运算符。</li>
<li>不能重载部分运算符。<ol>
<li>sizeof</li>
<li>.        成员运算符</li>
<li><code>.*</code>      成员指针运算符</li>
<li><code>::</code>       作用域解析运算符</li>
<li><code>?:</code></li>
<li>typeid</li>
<li><code>const_cast</code></li>
<li><code>dynamic_cast</code></li>
<li><code>reinterpret_cast</code></li>
<li><code>static_cast</code></li>
</ol>
</li>
<li>部分运算符只能通过成员函数进行重载。<code>=</code>、<code>()</code>、<code>[]</code>、<code>-&gt;</code>。</li>
</ol>
<h2 id="31-友元-friend"><a href="#31-友元-friend" class="headerlink" title="31. 友元 friend"></a>31. 友元 friend</h2><p>让外部的函数、类、成员方法可以访问本类的私有变量和方法</p>
<ol>
<li>友元函数</li>
<li>友元类</li>
<li>友元成员函数</li>
</ol>
<h2 id="32-类的自动转化和强制类型转换"><a href="#32-类的自动转化和强制类型转换" class="headerlink" title="32. 类的自动转化和强制类型转换"></a>32. 类的自动转化和强制类型转换</h2><ol>
<li>隐式类型转换，在只接受一个参数的构造方法前使用关键字explicit限定，可禁止隐式类型转换</li>
<li>显式类型转换</li>
<li>将类对象转化为其他类型，转换函数，特殊类成员运算符函数</li>
</ol>
<h2 id="33-类构造函数初始化列表"><a href="#33-类构造函数初始化列表" class="headerlink" title="33. 类构造函数初始化列表"></a>33. 类构造函数初始化列表</h2><p>类构造函数初始化列表初始化成员变量，顺序与初始化器中的排列顺序无关，与出现在类申明中的顺序相同。</p>
<h2 id="34-继承"><a href="#34-继承" class="headerlink" title="34. 继承"></a>34. 继承</h2><p>继承是is-a的关系<br>派生类继承基类的方法和属性</p>
<ol>
<li>公有继承</li>
<li>保护继承</li>
<li>私有继承</li>
</ol>
<p>虚方法、纯虚方法<br>虚析构函数，确保正确的析构函数序列被调用<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Basic</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Basic() &#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"Basic"</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</span><br><span class="line">    <span class="keyword">virtual</span> ~Basic() &#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"~Basic"</span> &lt;&lt; <span class="built_in">endl</span>; &#125;  <span class="comment">//如果不使用virtual pB在析构时将不会调用~Child</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> :</span> <span class="keyword">public</span> Basic</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Child() &#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"Child"</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</span><br><span class="line">    <span class="keyword">virtual</span> ~Child() &#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"~Child"</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Child *pC = <span class="keyword">new</span> Child();</span><br><span class="line">    Basic *pB = <span class="keyword">dynamic_cast</span>&lt;Basic*&gt;(pC);</span><br><span class="line">    <span class="keyword">delete</span> pB;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>虚方法会被加入到虚函数表中。如果派生类提供了虚函数的新定义，则虚函数表将保存新函数的地址。当派生类对象调用虚函数时就会调用派生类的新定义的虚函数了。<br>非虚函数在编译时即可得到其调用函数的地址，虚函数则要在运行时才去找需要调用函数的地址。<br>有纯虚方法的类，不能用来创建对象。<br>C++支持多重继承。<br>虚继承。避免多重继承继承了多个基类对象的问题。</p>
<h2 id="35-模板类"><a href="#35-模板类" class="headerlink" title="35. 模板类"></a>35. 模板类</h2><ol>
<li>正常模板类</li>
<li>类的特化</li>
<li>类的偏特化</li>
</ol>
<h2 id="36-异常"><a href="#36-异常" class="headerlink" title="36. 异常"></a>36. 异常</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>(exception &amp; ex)       <span class="comment">//捕获异常</span></span><br><span class="line">&#123;</span><br><span class="line">    ...                     <span class="comment">//处理异常</span></span><br><span class="line">    <span class="keyword">throw</span> ex;               <span class="comment">//抛出异常</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="37-RTTI运行阶段类别识别"><a href="#37-RTTI运行阶段类别识别" class="headerlink" title="37. RTTI运行阶段类别识别"></a>37. RTTI运行阶段类别识别</h2><ol>
<li>如果可能的话，<code>dynamic_cast</code>运算符将使用一个指向基类的指针来生成一个指向派生类的指针，否则返回空指针。</li>
<li>typeid运算符返回一个指出对象的类型的值。</li>
<li><code>type_info</code>结果存储有关特定类型的信息。</li>
</ol>
<p>只能将RTTI用于包含虚函数的类层次结构，因为只有对于这种类层次机构，才能将派生对象的地址赋给基类指针。RTTI只适用于包含虚函数的类。</p>
<h2 id="38-类型转化运算符"><a href="#38-类型转化运算符" class="headerlink" title="38. 类型转化运算符"></a>38. 类型转化运算符</h2><ol>
<li><code>dynamic_cast</code>    在类层级结构中进行向上转换，而不允许其他转换</li>
<li><code>const_cast</code>      改变值为const或volatile</li>
<li><code>static_cast</code></li>
<li><code>reinterpret_cast</code></li>
</ol>
<h1 id="新学的C-11新知识"><a href="#新学的C-11新知识" class="headerlink" title="新学的C++11新知识"></a>新学的C++11新知识</h1><h2 id="1-C-11初始化方式"><a href="#1-C-11初始化方式" class="headerlink" title="1. C++11初始化方式"></a>1. C++11初始化方式</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;; <span class="comment">//花括号用于数组、结构体初始化</span></span><br><span class="line"><span class="keyword">int</span> x1 = &#123;<span class="number">24</span>&#125;;      <span class="comment">//C++98也可用于单值变量</span></span><br></pre></td></tr></table></figure>
<p>C++11 新方式<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> x2&#123;<span class="number">7</span>&#125;;      <span class="comment">//变量初始化为7</span></span><br><span class="line"><span class="keyword">int</span> x3 = &#123;<span class="number">7</span>&#125;;   <span class="comment">//变量初始化为7</span></span><br><span class="line"><span class="keyword">int</span> x4&#123;&#125;;       <span class="comment">//变量初始化为0</span></span><br><span class="line"><span class="keyword">int</span> x5 = &#123;&#125;;    <span class="comment">//变量初始化为0</span></span><br></pre></td></tr></table></figure></p>
<p>C++11使得可将大括号初始化器用于任何类型，称为通用的初始化语法。<br>列表初始化禁止缩窄转换<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">double</span> d1[<span class="number">4</span>] &#123;<span class="number">1.0</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4.0</span>&#125;;</span><br><span class="line"><span class="keyword">double</span> d2[<span class="number">100</span>] &#123;&#125;;      <span class="comment">//默认初始化为0</span></span><br><span class="line"><span class="keyword">long</span> l3[] = &#123;<span class="number">20</span>, <span class="number">30</span>, <span class="number">2.3</span>&#125;;      <span class="comment">//C++编译错误，从double无法转化为long      C语言编译成功，2.3转化为2</span></span><br><span class="line"><span class="keyword">char</span> str1[] = &#123;<span class="string">"hello C++11"</span>&#125;;</span><br><span class="line"><span class="keyword">char</span> str2[] &#123;<span class="string">"hello C++11"</span>&#125;;</span><br><span class="line"><span class="built_in">string</span> str3 = &#123;<span class="string">"hello C++11"</span>&#125;;</span><br><span class="line"><span class="built_in">string</span> str4 &#123;<span class="string">"hello C++11"</span>&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vi&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;  <span class="comment">//C++11中可以对vector使用列表初始化</span></span><br></pre></td></tr></table></figure></p>
<h2 id="2-C-11新增基于范围的for循环"><a href="#2-C-11新增基于范围的for循环" class="headerlink" title="2. C++11新增基于范围的for循环"></a>2. C++11新增基于范围的for循环</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">double</span> arr[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>,&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">double</span> x:arr)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;x&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> x : &#123;<span class="number">23</span>, <span class="number">1</span>, <span class="number">45</span>, <span class="number">23</span>&#125;)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;x&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="3-右值引用-amp-amp"><a href="#3-右值引用-amp-amp" class="headerlink" title="3. 右值引用&amp;&amp;"></a>3. 右值引用&amp;&amp;</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> &amp;&amp;rr = <span class="number">1</span>;       <span class="comment">//int const &amp;rr = 1;</span></span><br></pre></td></tr></table></figure>
<h2 id="4-关键字decltype"><a href="#4-关键字decltype" class="headerlink" title="4. 关键字decltype"></a>4. 关键字decltype</h2><p>从表达式推断其结果类型。<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T1, <span class="keyword">typename</span> T2&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sum</span><span class="params">(T1 x, T2 y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   type z = x + y;      <span class="comment">//type无法确定</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T1, <span class="keyword">typename</span> T2&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sum</span><span class="params">(T1 x, T2 y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">decltype</span>(x+y) z = x + y;      <span class="comment">//使用关键字解决</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="5-后置返回类型"><a href="#5-后置返回类型" class="headerlink" title="5. 后置返回类型"></a>5. 后置返回类型</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T1, <span class="keyword">typename</span> T2&gt;</span><br><span class="line"><span class="function">type <span class="title">sum</span><span class="params">(T1 x, T2 y)</span>        <span class="comment">//type无法确定</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T1, <span class="keyword">typename</span> T2&gt;</span><br><span class="line">auto sum(T1 x, T2 y) -&gt; decltype(x+y)   //通过后置返回类型解决</span><br><span class="line">&#123;</span><br><span class="line">   type z = x + y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="6-thread-local关键字"><a href="#6-thread-local关键字" class="headerlink" title="6. thread_local关键字"></a>6. thread_local关键字</h2><p>声明变量的生命周期和所在线程相同。</p>
<h2 id="7-作用域内枚举"><a href="#7-作用域内枚举" class="headerlink" title="7. 作用域内枚举"></a>7. 作用域内枚举</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> XX &#123;one, two&#125;;</span><br><span class="line"><span class="keyword">enum</span> YY &#123;haha, one&#125;;        <span class="comment">//编译错误 one重复定义</span></span><br><span class="line"><span class="keyword">enum</span> <span class="class"><span class="keyword">class</span> <span class="title">XX</span> &#123;</span>one, two&#125;;</span><br><span class="line"><span class="keyword">enum</span> <span class="class"><span class="keyword">class</span> <span class="title">YY</span> &#123;</span>haha, one&#125;;  <span class="comment">//编译成功</span></span><br></pre></td></tr></table></figure>
<p>作用域内枚举不能隐式转化为整型，需要显式类型转化<br>作用域内枚举可指定底层类型<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="class"><span class="keyword">class</span> :</span> short XX &#123;one, two&#125;;   <span class="comment">//将底层类型设为short</span></span><br></pre></td></tr></table></figure></p>
<h2 id="8-nullptr空指针"><a href="#8-nullptr空指针" class="headerlink" title="8. nullptr空指针"></a>8. nullptr空指针</h2><p>C++11引入新关键字nullptr表示空指针。</p>
<h2 id="9-C-11允许类内初始化，和在构造函数中使用初始化列表等价"><a href="#9-C-11允许类内初始化，和在构造函数中使用初始化列表等价" class="headerlink" title="9. C++11允许类内初始化，和在构造函数中使用初始化列表等价"></a>9. C++11允许类内初始化，和在构造函数中使用初始化列表等价</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="9-模板别名"><a href="#9-模板别名" class="headerlink" title="9. 模板别名"></a>9. 模板别名</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">using</span> arrtype = <span class="built_in">std</span>::arry&lt;T, <span class="number">12</span>&gt;;</span><br><span class="line"><span class="built_in">array</span>&lt;<span class="keyword">double</span>&gt; gallones;</span><br><span class="line"><span class="built_in">array</span>&lt;<span class="keyword">int</span>&gt; days;</span><br><span class="line">arrtype&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt;months;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> BYTE = <span class="keyword">char</span>;      <span class="comment">//using 用于非模板和typedef等价</span></span><br></pre></td></tr></table></figure>
<h2 id="10-Lambda函数"><a href="#10-Lambda函数" class="headerlink" title="10. Lambda函数"></a>10. Lambda函数</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">[ capture ] ( params ) <span class="keyword">mutable</span> exception attribute -&gt; ret &#123; body &#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>mutable 修饰符说明 lambda 表达式体内的代码可以修改被捕获的变量，并且可以访问被捕获对象的 non-const 方法</li>
<li>exception 说明 lambda 表达式是否抛出异常(noexcept)，以及抛出何种异常，类似于void f() throw(X, Y)。</li>
<li>attribute 用来声明属性。</li>
<li>capture 指定了在可见域范围内 lambda 表达式的代码内可见得外部变量的列表</li>
<li>params 指定 lambda 表达式的参数。<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> x = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">auto</span> func = [x] (<span class="keyword">int</span> y) <span class="keyword">mutable</span> -&gt; <span class="keyword">int</span> &#123; <span class="keyword">return</span> x &gt; y ? x :y;&#125;;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;func(<span class="number">30</span>)&lt;&lt;<span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="11-包装器"><a href="#11-包装器" class="headerlink" title="11. 包装器"></a>11. 包装器</h2><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ol>
<li>C++PrimerPlus（第六版）中文版</li>
</ol>
]]></content>
      <categories>
        <category>cpp</category>
      </categories>
      <tags>
        <tag>cpp</tag>
      </tags>
  </entry>
  <entry>
    <title>Centos python2.6 升级 python2.7</title>
    <url>/2017/08/02/python26-update-python27/</url>
    <content><![CDATA[<h1 id="Centos-python2-6-升级-python2-7"><a href="#Centos-python2-6-升级-python2-7" class="headerlink" title="Centos python2.6 升级 python2.7"></a>Centos python2.6 升级 python2.7</h1><h2 id="安装python2-7"><a href="#安装python2-7" class="headerlink" title="安装python2.7"></a>安装python2.7</h2><ol>
<li><p>下载python2.7源码，解压</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget https://www.python.org/ftp/python/2.7.13/Python-2.7.13.tgz</span><br><span class="line">tar xvf Python-2.7.13.tgz</span><br><span class="line">cd Python-2.7.13</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装，默认安装位置为/usr/local/bin/</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure>
</li>
<li><p>替换python2.6，建立python2.7软链接</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd /usr/local/bin/</span><br><span class="line">sudo ln -s /usr/local/python27/bin/python2.7 python2.7</span><br><span class="line">sudo ln -s /usr/local/python27/bin/python2.7-config python2.7-config</span><br><span class="line">sudo mv python python.back</span><br><span class="line">sudo ln -s python2.7 python</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h2><ol>
<li><p>yum不支持python2.7，修改下，让其直接调用python2.6，如果有别的工具也不支持python2.7，方法相同</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo vim /usr/bin/yum</span><br><span class="line">将第一行#!/usr/bin/python 修改为#!/usr/bin/python2.6</span><br></pre></td></tr></table></figure>
</li>
<li><p>为python2.7安装<code>easy_install</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget wget -q http://peak.telecommunity.com/dist/ez_setup.py</span><br><span class="line">sudo python ez_setup.py -U setuptools</span><br></pre></td></tr></table></figure>
</li>
<li><p>为python2.7安装pip，在<a href="https://pypi.python.org/pypi/pip/9.0.1" target="_blank" rel="noopener">https://pypi.python.org/pypi/pip/9.0.1 下载pip源码</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tar zxvf pip-9.0.1.tar.gz</span><br><span class="line">cd pip-9.0.1</span><br><span class="line">python setup.py build</span><br><span class="line">sudo python setup.py install</span><br><span class="line">sudo ln -s /usr/local/python27/bin/pip2.7 /usr/bin/pip2.7</span><br><span class="line">cd /usr/bin/</span><br><span class="line">sudo mv pip pip.back</span><br><span class="line">sudo ln -s pip2.7  pip</span><br></pre></td></tr></table></figure>
</li>
<li><p>python2.7命令行不可用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo pip install readline</span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式探秘-2-UML简介</title>
    <url>/2017/08/17/design-pattern-2-uml/</url>
    <content><![CDATA[<h1 id="UML简介"><a href="#UML简介" class="headerlink" title="UML简介"></a>UML简介</h1><p>UML是一种创建程序模型的图形语言（即带有语意的一种图形记号）。程序模型指的是程序的图形表示，说明代码中对象之间的关系。</p>
<h2 id="分析阶段"><a href="#分析阶段" class="headerlink" title="分析阶段"></a>分析阶段</h2><ol>
<li>用例图 涉及系统（即用户和其它系统）之间交互的实体，以及要实现的功能点。</li>
<li>活动图 关注的是问题领域的工作流，而不是程序的逻辑流。</li>
</ol>
<h2 id="观察对象交互"><a href="#观察对象交互" class="headerlink" title="观察对象交互"></a>观察对象交互</h2><p>交互图 说明特定对象如何相互交互。最常见的交互图是顺序图。</p>
<h2 id="设计阶段"><a href="#设计阶段" class="headerlink" title="设计阶段"></a>设计阶段</h2><p>类图 详细描述类之间的关系</p>
<h2 id="观察对象所处状态不同时行为的差异"><a href="#观察对象所处状态不同时行为的差异" class="headerlink" title="观察对象所处状态不同时行为的差异"></a>观察对象所处状态不同时行为的差异</h2><p>状态图 详细描述对象可能所处的不同状态以及各个状态间的转换</p>
<h1 id="使用UML的好处"><a href="#使用UML的好处" class="headerlink" title="使用UML的好处"></a>使用UML的好处</h1><p>UML主要用于交流，有利于清晰的表达信息，有利于精确的表达信息。</p>
<h1 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h1><p>说明类之间的关系</p>
<ol>
<li>当一种类是“一种”另一个类时：is-a（是一种/一个）关系。</li>
<li>两个类存在关联时<ol>
<li>一个类“包含”另一个类：has-a（拥有一个）关系</li>
<li>一个类“使用”另一个类：use-a（使用一个）关系</li>
<li>一个类“创建”另一个类</li>
</ol>
</li>
</ol>
<p>被包含者是包含者的一部分，<strong>组合</strong>，汽车中的发动机<br>多个东西共同构成一个集合，集合中的东西可以单独存在，<strong>聚合</strong>，雁群和大雁</p>
<p>类图三方面信息：</p>
<ol>
<li>类名</li>
<li>类的数据成员</li>
<li>类的方法</li>
</ol>
<p>表示访问权限的UML记号</p>
<ol>
<li>公开 <code>+</code>号 表示所有对象都可访问的数据或方法</li>
<li>保护 <code>#</code>号 表示该类及其派生类可访问的数据或方法</li>
<li>私有 <code>-</code>号 表示只有该类可以访问的数据或方法</li>
</ol>
<p><img src="https://www.plantuml.com/plantuml/svg/SoWkIImgAStDuL80WkISnE9Y1USSXMem5mJqz1GAIfDoCfCLddLCU3fnnjF-6I_R-u72S1NQAOOALWef-K1LgLYqlPmxyrb38sxDHd3D2jL0nvHa9jSYcG9dAYS3rILd91R1HNGpWIAPUILm0LjRXB5ffNc66ffe2kBZqHmrRUUppLE1mYZwZC3wol8pKp0TfAiB3usklIysBeIQeAkBOe8ns0Jd72s5wiIaufAYnEGIY14GCY-_95MXA3CzeqJ1wiN-cSzch7-oe-79ZbLFzkv_FcL5GKvY7YX2dhRDV3whvVd6tKzdxtk_f-V9ZjqlbZK-sTtzV7VlixdDBsTE2FNrUR5kmzF-xK1PY3kVJkg1sGVK-cH7xzC9FIyMhdZUju7B8JKl1MWe0000"></p>
<p>表示关系的UML记号</p>
<ol>
<li>继承关系<br> <img src="https://www.plantuml.com/plantuml/svg/SoWkIImgAStDuLA00aS5cnfTNGKd1Ii5f-Uxbp_htE_uVa-FuxFDiv_sJ7kogyr90IBwj7NxaxsJds_S3TVf1TIffwSG2DGP257Z1TGP-7JTlETz6xoWsfvrxNsnSI5CcqDgNWhGSW00"></li>
<li>组合关系<br> <img src="https://www.plantuml.com/plantuml/svg/SoWkIImgAStDuLA00cS5BLrT1HS5AmNdPpFMFv-oqUNvxfPd7HEUpsfvlwV7-MbFwzC9grsURzpzT5utKEpf-fqlDYu4wtP8pKi1cWG0"></li>
<li>聚合关系<br> <img src="https://www.plantuml.com/plantuml/svg/SoWkIImgAStDuLA00bU5V5rT1JS5AmNN5uspdaxeUBAhpUtzdXwtPpFMkpwVrV9aHyFBvXLFEzh0EXnIyrA0kW40"></li>
<li>依赖关系<br> <img src="https://www.plantuml.com/plantuml/svg/SoWkIImgAStDuLA00by5FJqx1Jy5AmNV9_lcljWwxSckFh_tUtfyd-pT_tpA2Z-mGeVKl1IW9W00"></li>
<li>关联关系<br> <img src="https://www.plantuml.com/plantuml/svg/SoWkIImgAStDuLA0WY05FJqxXM05AuMWv_ENlcoS7Fn-Jy-JlMt1JtRqGWI2m6eTKlDIWFe0"></li>
</ol>
<p>一个UML类图实例</p>
<p><img src="https://www.plantuml.com/plantuml/svg/SoWkIImgAStDuL80WiIaufAYnEGIXUISnE9YXHTxbu65NxIlUh6m1yXJq2ijqAkn0qaeM2aytxtyMUT-i8gdQvSzdp8VAArdXr1jfV1atzmNMwSXgz3DIKqhqSrNUDw_zlckvK13NZJEUZgX0qL9Idvvdgx2Yrshd-pU-s9z8r3HqzRDBngdG1Hjw7-sSIy-jmI7XYdebXRe0kKGYb5TksxkovLh22XwiNVTY-O-1TqYNIqq9Irm1_TFVDgrujcSNK2ZiAjoICrB0GOk0000"></p>
<h1 id="交互图"><a href="#交互图" class="headerlink" title="交互图"></a>交互图</h1><p>表示对象间如何交互的UML图成为交互图，最常用的交互图为顺序图<br><img src="https://www.plantuml.com/plantuml/svg/SoWkIImgAStDuN9KqBLJS5AmKaZBB2ekKSWjJkTAJ2x9B4iiILLmud9Iq0LAEmAbYrEJy_DImF8fgKWgu4n7X54PgJav-SZA7B6RcQcU2xGsBrL7eIGZCI-x6DLaXzIy5A0B0G00"><br>顺序图 最上面的矩形都表示一个特定的对象，垂直线表示对象的生命线。垂直线之间的水平线表示对象互相发送消息。</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li>设计模式解析（第二版）</li>
<li><a href="http://plantuml.com/" target="_blank" rel="noopener">plantuml官网</a></li>
<li><a href="http://keyun.ml/2016/07/25/Tools/plantuml-sequence.html" target="_blank" rel="noopener">plantuml交互图</a></li>
<li><a href="https://yq.aliyun.com/articles/25405" target="_blank" rel="noopener">plantuml类图</a></li>
</ul>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
        <tag>uml</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式探秘-3-设计模式简介</title>
    <url>/2017/08/19/design-pattern-3/</url>
    <content><![CDATA[<h1 id="设计模式简介"><a href="#设计模式简介" class="headerlink" title="设计模式简介"></a>设计模式简介</h1><p>Christopher Alexander 说:“<strong>模式是在某一背景下某个问题的一种解决方案</strong>。”它们绝不只是解决某人个别问题的模板。它们是描述动机的一种方式,不仅包括我们要得到的效果,也包括困扰我们的问题。</p>
<h2 id="设计模式的关键特征"><a href="#设计模式的关键特征" class="headerlink" title="设计模式的关键特征"></a>设计模式的关键特征</h2><div class="table-container">
<table>
<thead>
<tr>
<th>项目</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>意图</td>
<td style="text-align:center">每个模式都有唯一的用于标识的名称</td>
</tr>
<tr>
<td>问题</td>
<td style="text-align:center">模式的目的</td>
</tr>
<tr>
<td>解决方案</td>
<td style="text-align:center">模式能够为问题提供合适其所处环境的一个解决方案</td>
</tr>
<tr>
<td>参与者和协作者</td>
<td style="text-align:center">模式所涉及的实体</td>
</tr>
<tr>
<td>效果</td>
<td style="text-align:center">使用模式的效果，研究模式中起作用的各种因素</td>
</tr>
<tr>
<td>实现</td>
<td style="text-align:center">模式的实现方式。实现只是模式的具体体现，而不能视为模式本身</td>
</tr>
<tr>
<td>一般性结构</td>
<td style="text-align:center">显示模式典型结构的标准图</td>
</tr>
</tbody>
</table>
</div>
<p>一个好的设计模式的论述应该覆盖使用这个模式的优点和缺点</p>
<h2 id="学习设计模式的好处"><a href="#学习设计模式的好处" class="headerlink" title="学习设计模式的好处"></a>学习设计模式的好处</h2><ol>
<li>对不断重复出现问题,复用既有的、高质量的解决方案。</li>
<li>确立通用的术语,改善团队内的沟通。</li>
<li>提升思考层次。</li>
<li>判断设计是否正确,而不仅仅是能够奏效。</li>
<li>改善个人学习和团队学习。</li>
<li>提高代码的可修改性和可维护性。</li>
<li>采用更佳设计方案,即使没有明确使用模式。</li>
<li>发现巨型继承层次结构的替代方案。</li>
</ol>
<h2 id="设计模式分类"><a href="#设计模式分类" class="headerlink" title="设计模式分类"></a>设计模式分类</h2><h3 id="根据目的，设计模式可分为创建型、结构型和行为型三种。"><a href="#根据目的，设计模式可分为创建型、结构型和行为型三种。" class="headerlink" title="根据目的，设计模式可分为创建型、结构型和行为型三种。"></a>根据目的，设计模式可分为创建型、结构型和行为型三种。</h3><ol>
<li>创建型主要用于创建对象</li>
<li>结构型用于处理类和对象的组合</li>
<li>行为型用于描述类和对象如何交互和怎样分配职责</li>
</ol>
<h3 id="根据范围，即模式主要用于处理类之间关系还是对象之间的关系可分为类模式和对象模式两种"><a href="#根据范围，即模式主要用于处理类之间关系还是对象之间的关系可分为类模式和对象模式两种" class="headerlink" title="根据范围，即模式主要用于处理类之间关系还是对象之间的关系可分为类模式和对象模式两种"></a>根据范围，即模式主要用于处理类之间关系还是对象之间的关系可分为类模式和对象模式两种</h3><ol>
<li>类模式处理类和子类之间的关系，通常通过继承建立，编译时刻确定下来，属于静态的</li>
<li>对象模式处理对象间关系，运行时时刻变化，具有动态性</li>
</ol>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:right">范围\目的</th>
<th style="text-align:center">创建型模式</th>
<th style="text-align:center">结构型模式</th>
<th style="text-align:left">行为型模式</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:right">类模式</td>
<td style="text-align:center">工厂方法模式</td>
<td style="text-align:center">（类）适配器模式</td>
<td style="text-align:left">解释器模式<br>模版方法模式</td>
</tr>
<tr>
<td style="text-align:right">对象模式</td>
<td style="text-align:center">抽象工厂模式<br>建造者模式<br>原型模式<br>单例模式</td>
<td style="text-align:center">（对象）适配器模式<br>桥接模式<br>组合模式<br>装饰模式<br>享元模式<br>外观模式<br>代理模式</td>
<td style="text-align:left">职责模式<br>命令模式<br>迭代器模式<br>中介者模式<br>备忘录模式<br>观察者模式<br>状态模式<br>策略模式<br>访问者模式</td>
</tr>
</tbody>
</table>
</div>
<h2 id="基本设计模式概述"><a href="#基本设计模式概述" class="headerlink" title="基本设计模式概述"></a>基本设计模式概述</h2><ol>
<li>Abstract Factory（抽象工厂模式）：提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类。</li>
<li>Adapter（适配器模式）：将一个类的接口转换成客户希望的另外一个接口。Adapter模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。</li>
<li>Bridge（桥接模式）：将抽象部分与它的实现部分分离，使它们都可以独立地变化。</li>
<li>Builder（建造者模式）：将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。</li>
<li>Chain of Responsibility（责任链模式）：为解除请求的发送者和接收者之间耦合，而使多个对象都有机会处理这个请求。将这些对象连成一条链，并沿着这条链传递该请求，直到有一个对象处理它。</li>
<li>Command（命令模式）：将一个请求封装为一个对象，从而使你可用不同的请求对客户进行参数化；对请求排队或记录请求日志，以及支持可取消的操作。</li>
<li>Composite（组合模式）：将对象组合成树形结构以表示“部分-整体”的层次结构。它使得客户对单个对象和复合对象的使用具有一致性。</li>
<li>Decorator（装饰模式）：动态地给一个对象添加一些额外的职责。就扩展功能而言， 它比生成子类方式更为灵活。</li>
<li>Facade（外观模式）：为子系统中的一组接口提供一个一致的界面，Facade模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。</li>
<li>Factory Method（工厂模式）：定义一个用于创建对象的接口，让子类决定将哪一个类实例化。Factory Method使一个类的实例化延迟到其子类。</li>
<li>Flyweight（享元模式）：运用共享技术有效地支持大量细粒度的对象。</li>
<li>Interpreter（解析器模式）：给定一个语言, 定义它的文法的一种表示，并定义一个解释器, 该解释器使用该表示来解释语言中的句子。</li>
<li>Iterator（迭代器模式）：提供一种方法顺序访问一个聚合对象中各个元素，而又不需暴露该对象的内部表示。</li>
<li>Mediator（中介模式）：用一个中介对象来封装一系列的对象交互。中介者使各对象不需要显式地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互。</li>
<li>Memento（备忘录模式）：在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。这样以后就可将该对象恢复到保存的状态。</li>
<li>Observer（观察者模式）：定义对象间的一种一对多的依赖关系,以便当一个对象的状态发生改变时,所有依赖于它的对象都得到通知并自动刷新。</li>
<li>Prototype（原型模式）：用原型实例指定创建对象的种类，并且通过拷贝这个原型来创建新的对象。</li>
<li>Proxy（代理模式）：为其他对象提供一个代理以控制对这个对象的访问。</li>
<li>Singleton（单例模式）：保证一个类仅有一个实例，并提供一个访问它的全局访问点。</li>
<li>State（状态模式）：允许一个对象在其内部状态改变时改变它的行为。对象看起来似乎修改了它所属的类。</li>
<li>Strategy（策略模式）：定义一系列的算法,把它们一个个封装起来, 并且使它们可相互替换。本模式使得算法的变化可独立于使用它的客户。</li>
<li>Template Method（模板方法模式）：定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。Template Method使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。</li>
<li>Visitor（访问者模式）：表示一个作用于某对象结构中的各元素的操作。它使你可以在不改变各元素的类的前提下定义作用于这些元素的新操作。</li>
</ol>
<h2 id="软件设计六大原则"><a href="#软件设计六大原则" class="headerlink" title="软件设计六大原则"></a>软件设计六大原则</h2><ol>
<li>单一职责原则</li>
<li>里氏替换原则</li>
<li>依赖导致原则</li>
<li>接口隔离原则</li>
<li>迪米特法则</li>
<li>开闭原则</li>
</ol>
<h3 id="单一职责原则（Single-Responsibility-Principle）简称SRP"><a href="#单一职责原则（Single-Responsibility-Principle）简称SRP" class="headerlink" title="单一职责原则（Single Responsibility Principle）简称SRP"></a>单一职责原则（Single Responsibility Principle）简称SRP</h3><p>单一职责原则定义：应该有且仅有一个原因引起类的变更<br>There should never be more than one reason for a class to change.</p>
<p>单一职责原则的好处：</p>
<ol>
<li>降低类的复杂性，实现的职责都有清晰明确的定义</li>
<li>可读性提高</li>
<li>可维护性提高</li>
<li>变更引起的风险降低，变更是必不可少的，如果接口的单一职责做得好，一个接口修改只对相应的实现类有影响，对其它接口无影响，这对系统的扩展性、维护性都有非常大的帮助</li>
</ol>
<p>单一职责原则最难划分的就是职责。<br>单一职责原则适用于接口、类，也适用于方法。<br>对于接口和方法一定要做到单一职责，对于类的设计尽量做到只有一个原因引起变化。</p>
<h3 id="里氏替换原则（Liskov-Substitution-Principle）简称LSP"><a href="#里氏替换原则（Liskov-Substitution-Principle）简称LSP" class="headerlink" title="里氏替换原则（Liskov Substitution Principle）简称LSP"></a>里氏替换原则（Liskov Substitution Principle）简称LSP</h3><p>继承优点：</p>
<ol>
<li>代码共享，减少创建类的工作量，每个子类都拥有父类的方法和属性</li>
<li>提高代码的重用性</li>
<li>子类可以形似父类，但又异于父类</li>
<li>提高代码的可扩展性</li>
<li>提高产品或项目的开放性</li>
</ol>
<p>继承缺点：</p>
<ol>
<li>继承是有侵入性的。只要继承，就必须拥有父类的所有属性和方法</li>
<li>降低代码的灵活性。子类必须拥有父类的属性和方法</li>
<li>增强耦合性。当父类的常量、变量和方法被修改时，必须要考虑子类的修改</li>
</ol>
<p>两种里氏替换原则的定义：</p>
<ol>
<li>最正宗的，如果对每一个类型为S的对象o1，都有类型为T的对象o2，使得以T定义的所有程序P在所有对象o1替换为o2时，程序P的行为没有发生变化，那么类型S时类型T的子类型。</li>
<li>所有引用基类的地方必须能透明的使用其子类的对象。</li>
</ol>
<p>通俗的讲，只要父类能出现的地方子类就可以出现，而且替换为其它子类也不会产生任何错误或异常，使用者可能根本不需要知道是父类还是子类。但反过来就不行了，有子类出现的地方，父类未必适应。</p>
<p>里氏替换原则为良好的继承定义了一个规范，一句简单的定义包含了4层定义。</p>
<ol>
<li>子类必须完全实现父类的方法<ol>
<li>在类中调用其它类时务必使用父类或接口，如果不能使用父类或接口，则说明类的设计已经违背了LSP原则。</li>
<li>如果子类不能完整的实现父类的方法，或者父类的某些方法在子类中已经发生“畸变”，则建议断开父子继承关系，采用依赖、聚合、组合等关系替代继承。</li>
</ol>
</li>
<li>子类可以有自己的方法和属性</li>
<li>覆盖或实现父类的方法时输入参数可以被放大<ul>
<li>子类中方法的前置条件必须与超类中被覆盖的方法的前置条件相同或者更宽松。</li>
</ul>
</li>
<li>覆盖或实现父类的方法时输出结果可以被缩小<ul>
<li>父类方法的返回值是一个类型T，子类的相同方法（重写或覆盖）的返回值为S，里氏替换原则要求S必须小于等于T，即S和T是同一类型，或S是T的子类。</li>
</ul>
</li>
</ol>
<p>采用里氏替换原则的目的就是增强程序的健壮性，版本升级时也可以保持非常好的兼容性。即使增加子类，原有的子类还可以继续运行。</p>
<p>采用里氏替换原则时，应尽量避免子类的“个性”，一旦子类有“个性”，该子类和父类的关系就很难调和了，把子类当做父类，子类的“个性“被抹杀，将子类作为一个业务来使用，会让代码的耦合关系变得扑朔迷离——缺乏类替换的标准。</p>
<h3 id="依赖倒置原则（Dependence-Inversion-Principle）简称DIP"><a href="#依赖倒置原则（Dependence-Inversion-Principle）简称DIP" class="headerlink" title="依赖倒置原则（Dependence Inversion Principle）简称DIP"></a>依赖倒置原则（Dependence Inversion Principle）简称DIP</h3><p>依赖倒置原则，要依赖于抽象，不要依赖于具体：</p>
<ol>
<li>高层模块不应该依赖底层模块，两者都应该依赖于其抽象</li>
<li>抽象不应该依赖于细节</li>
<li>细节应该依赖于抽象</li>
</ol>
<p>即”面向接口编程”——OOD（Object-Oriented Design，面向对象设计）的精髓之一。<br>采用依赖倒置原则可以减少类间的耦合性，提高系统的稳定性，降低并发开发引起的风险，提高代码的可读性和可维护性。<br>依赖时可以传递的，A依赖于B对象，B又依赖于C，C又依赖于D……  但只要做到抽象依赖，即使是多层的依赖也无所畏惧。<br>依赖的三种写法：</p>
<ol>
<li>构造函数传递依赖对象（构造函数注入）</li>
<li>Setter方法传递依赖对象</li>
<li>接口声明依赖对象（接口注入）</li>
</ol>
<p>使用依赖倒置原则的方法：</p>
<ol>
<li>每个类尽量都有接口或抽象类、或抽象类和接口都有</li>
<li>类型的表面尽量是接口或者抽象类</li>
<li>任何类都不应该从具体类派生</li>
<li>尽量不去覆写基类的方法</li>
<li>结合里氏替换原则使用</li>
</ol>
<h3 id="接口隔离原则"><a href="#接口隔离原则" class="headerlink" title="接口隔离原则"></a>接口隔离原则</h3><p>接口分为两种：</p>
<ol>
<li>实例接口</li>
<li>类接口</li>
</ol>
<p>隔离的定义：</p>
<ol>
<li>客户端不应该依赖它不需要的接口</li>
<li>类间的依赖关系应该建立在最小的接口上</li>
</ol>
<p>即建立单一接口，不要建立臃肿庞大的接口。通俗说：接口尽量细化，同时接口中方法尽量少。</p>
<p>接口隔离原则是对接口进行规范约束，包含4层含义：</p>
<ol>
<li>接口尽量小<ul>
<li>根据接口隔离原则拆分接口时，首先必须满足单一职责原则。</li>
</ul>
</li>
<li>接口要高内聚<ul>
<li>高内聚就是提高接口、类、模块的处理能力，减少对外的交互。</li>
</ul>
</li>
<li>定制服务<ul>
<li>定制服务就是单独为一个个体提供优良的服务。定制服务必然要求：只提供访问者需要的接口。</li>
</ul>
</li>
<li>接口设计是有限度的，不能无限细化，否则虽然提高了灵活性，但也带来了结构的复杂性，开发难度增加，可维护性降低，所以接口设计要注意适度。</li>
</ol>
<p>接口隔离原则的原子划分：</p>
<ol>
<li>一个接口只服务于一个子模块或业务逻辑</li>
<li>通过业务逻辑压缩接口中的public方法，接口设计时常去回顾，让接口更加精简</li>
<li>已经污染的接口尽量去修改，若变更的风险更大，则采取适配器模式进行转化</li>
<li>了解环境，拒绝盲从。环境不同，接口拆分的标准就不同，深入了解业务逻辑，设计更好的接口</li>
</ol>
<h3 id="迪米特法则（Law-of-Demeter）简称LoD"><a href="#迪米特法则（Law-of-Demeter）简称LoD" class="headerlink" title="迪米特法则（Law of Demeter）简称LoD"></a>迪米特法则（Law of Demeter）简称LoD</h3><p>迪米特法则也称为最少知识原则（Least Knowledge Principle，LKP），规则：一个对象应该对其它对象有更少的了解。</p>
<p>迪米特法则对类的低耦合提出明确要求包含4层含义：</p>
<ol>
<li>只和朋友交流<ul>
<li>两个对象之间有耦合关系即为耦合，如：组合、聚合、依赖等。</li>
</ul>
</li>
<li>朋友之间也是有距离的<ul>
<li>类尽量不要公布太多的public方法和非静态的public变量，尽量内敛，多使用private和protected等访问权限</li>
</ul>
</li>
<li>是自己的就是自己的<ul>
<li>如果一个方法放在本类中可以，放在其它类中也可以，则坚持这个原则：如果一个方法放在本类中，即不增加类间关系，也对本类不产生负面影响，就放置在本类中。</li>
</ul>
</li>
<li>谨慎使用Serializable（序列化）</li>
</ol>
<p>迪米特法则的核心观念就是类间解耦，弱耦合，只有弱耦合之后，类的复用率才可以提高。但会产生大量的中转或调转类，导致系统复杂性提高，使维护困难。使用迪米特法则需反复权衡，既做到结构清晰，同时做到高内聚低耦合。</p>
<h3 id="开闭原则（Open-ClosePrinciple）简称OCP"><a href="#开闭原则（Open-ClosePrinciple）简称OCP" class="headerlink" title="开闭原则（Open-ClosePrinciple）简称OCP"></a>开闭原则（Open-ClosePrinciple）简称OCP</h3><p>开闭原则即一个软件实体（类、模块、函数等）<strong>应该对扩展开放，对修改关闭</strong>。<br>开闭原则指出应尽量通过扩展软件实体的行为来实现变化，而不是通过修改已有的代码来完成变化，开闭原则是为软件实体的未来事件而定制的对现行开发设计进行约束的一个原则。<br>开闭原则对扩展开放，对修改关闭，并不意味着不做任何修改，低层模块的变更，必然要有高层模块进行耦合，否则就是一个孤立无缘的代码片段。</p>
<p>变化：</p>
<ol>
<li>逻辑变化</li>
<li>子模块变化</li>
<li>可见视图变化</li>
</ol>
<p>开闭原则的重要性:</p>
<ol>
<li>开闭原则对测试的影响</li>
<li>开闭原则可以提高复用性</li>
<li>开闭原则可以提高可维护性</li>
<li>面向对象开发的要求</li>
</ol>
<p>开闭原则是一个非常虚的原则，前五个原则是对开闭原则的具体解释，但开闭原则并不局限于这么多。开闭原则在工作中的运用：</p>
<ol>
<li>抽象约束<ol>
<li>通过接口或抽象类约束扩展，对扩展进行边界限定，不允许出现接口或抽象类中不存在的public方法</li>
<li>参数类型、引用对象尽量使用接口或者抽象类，而不是实现类</li>
<li>抽象类尽量保持稳定，一旦确定即不允许修改</li>
</ol>
</li>
<li>元数据控制模块行为<br> 元数据即描述环境和数据的数据，通俗的来说就是配置参数。</li>
<li>指定项目章程</li>
<li>封装变化<ol>
<li>将相同的变化封装到一个接口或抽象类中</li>
<li>将不同的变化封装到不同的接口或抽象类中，不应该有两个不同的变化出现在同一个接口或抽象类中。</li>
</ol>
</li>
</ol>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li>设计模式解析（第二版）（书籍）</li>
<li>设计模式之禅（书籍）</li>
<li><a href="https://baike.baidu.com/item/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/1212549?fr=aladdin" target="_blank" rel="noopener">百度百科 设计模式</a></li>
<li><a href="http://blog.csdn.net/hguisu/article/details/7496819" target="_blank" rel="noopener">设计模式概论博客</a></li>
</ul>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式探秘-1-面向对象</title>
    <url>/2017/08/16/design-pattern-1/</url>
    <content><![CDATA[<h1 id="面向对象简介"><a href="#面向对象简介" class="headerlink" title="面向对象简介"></a>面向对象简介</h1><h2 id="功能分解"><a href="#功能分解" class="headerlink" title="功能分解"></a>功能分解</h2><p>功能分解是一种处理复杂问题的自然方法。将问题分解为多个功能步骤，再将步骤细分，然后解决更小的问题，将一个复杂问题变为解决多个简单的小问题。<br>功能分解的问题</p>
<ol>
<li>主程序需要负责控制子程序的前后顺序，还要确保整个程序正确工作，<strong>主程序承担了太多功能</strong>。</li>
<li><strong>应对变化的能力弱</strong>，功能的变化需要对整个函数或模块进行修改。</li>
</ol>
<h2 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h2><p>可以在功能分解中模块化问题，将功能划分为一个个模块，模块间再相互调用，在功能需要变化时只需要修改对应的模块即可。模块化可是代码易于理解和维护。<br>模块化的问题是容易<strong>低内聚和紧耦合</strong>。</p>
<p><strong>内聚性描述一个功能内部组成部分之间的紧密程度</strong>。<br><strong>耦合性描述各个模块间的紧密程度</strong>。<br>软件开发的目标应该是创建模块内部完整（<strong>高内聚</strong>），与其它模块间的联系小巧、直接、可见、灵活（<strong>松耦合</strong>）。</p>
<p>如果修改一个函数或函数使用的某个数据对其它函数产生严重破坏。因为<strong>功能分解将主要的精力放在具体的函数中</strong>，对一个函数或函数数据的修改会影响其它函数和数据。</p>
<h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><p>想象一个问题，一个厨子根据工人的反馈决定下顿饭做什么饭。<br>方法一：</p>
<ol>
<li>厨子把可以做的菜列出来。</li>
<li>厨子得到工人名单和住址。</li>
<li>厨子前往工人住处。</li>
<li>厨子询问工人想吃什么菜，并记录下来。</li>
<li>厨子返回。</li>
<li>厨子汇总，找到票数最高的几个菜下顿饭做。</li>
</ol>
<p>方法二：</p>
<ol>
<li>厨子把可以做的菜列出来，张贴起来。</li>
<li>通知工人自行在菜单上选择要吃的菜，并记录。</li>
<li>厨子查看菜单，找到票数最高的几个菜下顿饭做。</li>
</ol>
<p>方法二明显优于方法一，方法一需要关注大量细节、责任繁重，而方法二则简单的多，让工人明白，完成自身的任务。方法二将责任从厨子转移到每一个工人身上，实现<strong>责任的转移</strong>。<br>新需求，要求厨子区分女性工人和男性工人，如果是方法一统计时需要增加一个步骤，区分女性工人和男性工人。而方法二则只需要给出两份菜单即可，女性一份，男性一份。</p>
<p>软件开发过程中的不同视角</p>
<ol>
<li>概念 软件负责什么？ “呈现所研究领域的各种概念，得出概念时应该很少或不考虑实现软件“</li>
<li>规约 怎么使用软件？ 考虑软件的接口，而不是如何实现</li>
<li>实现 软件怎样履行自己的责任？ 考虑代码本身，根据规约实现代码</li>
</ol>
<p>面向对象编程以对象为中心，一切重点集中在对象身上。编写代码围绕对象而非函数进行组织。<br>对象有自己的属性和方法，属性告诉对象自身状态，方法告诉对象如何完成某些功能。</p>
<p>按照Martin Fowler的视角框架观察对象。</p>
<ol>
<li>概念层次，对象是一组责任</li>
<li>规约层次，对象是可被其它对象或者对象自己调用的方法</li>
<li>实现层次，对象是代码和数据，以及对象之间的计算交互</li>
</ol>
<p>对象具有供其它对象调用的公共接口。<br>围绕类组织对象，类是对对象行为的定义，包含对象的数据元素、对象能够操作的方法、访问数据元素和方法的方式。对象可以拥有不同的数据，但拥有相同的功能。<br>对象是类的实例。</p>
<h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><p>抽象类定义其它相关类的一般属性。例如抽象类学生，定义了学生的一般属性。<br>代表了某种类型的相关行为的类成为具体类，因为它代表一个概念既定、不变的实现。例如，本科生和研究生就是具体类，而学生则是抽象类。<br>抽象类和具体类是一种<code>is-a</code>（是一种）的关系，称之为继承。例如本科生继承学生类，研究生继承学生类。<br>抽象类可以定义派生类必须实现的公共方法。派生类使用抽象类的默认行为还是自己重新定义由派生类自身决定。<br>如果抽象类只提供规约而不提供实现，则是接口。</p>
<h2 id="类的访问控制"><a href="#类的访问控制" class="headerlink" title="类的访问控制"></a>类的访问控制</h2><p>对象对自己负责，有很多东西是自己私有的，不能暴露给其它对象，所以需要访问控制。</p>
<ol>
<li>公开 public 任何对象可见</li>
<li>保护 protected 自身和派生类对象可见</li>
<li>私有 private 自身可见</li>
</ol>
<h2 id="类的封装"><a href="#类的封装" class="headerlink" title="类的封装"></a>类的封装</h2><p>类的属性控制，达到隐藏数据的目的，实现数据的封装，但类的封装不只是数据封装，而是各种隐藏。</p>
<h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><p>多态，抽象引用概念性的要求对象做什么，对于不同的派生对象有不同的实现方式。</p>
<h2 id="特殊的对象方法"><a href="#特殊的对象方法" class="headerlink" title="特殊的对象方法"></a>特殊的对象方法</h2><ol>
<li>构造方法 负责初始化或创建一个对象</li>
<li>析构方法 负责清除一个对象</li>
</ol>
<h2 id="概念回顾"><a href="#概念回顾" class="headerlink" title="概念回顾"></a>概念回顾</h2><ol>
<li>功能分解 结构化程序员总是使用功能分解进行程序设计。功能分解是将一个问题逐渐分解为更小功能的方法,每个函数都分解到可管理为止</li>
<li>需求变更 需求变更是开发过程中与生俱来的。与其向用户或者自己抱怨获得理想而且完整的需求看来是不可能完成的任务”,不如使用更有效的开发方法,应对需求变更</li>
<li>对象 对象是由其责任定义的。对象能够自己负责自己,从而简化了使用对象的控制程序的任务</li>
<li><p>构造函数和析构函数 对象具有在创建和销毁自己时自动调用的特殊方法。这些特殊方法是:</p>
<ol>
<li>构造函数:初始化或创建对象</li>
<li>析构函数:在对象删除时清除对象</li>
<li>所有面向对象语言都使用构造函数和析构函数辅助对对象的管理</li>
</ol>
</li>
<li><p>抽象类 定义了概念上相似的一组类的方法和公共属性。抽象类不能实例化</p>
</li>
<li>属性 与对象关联的数据(也称为数据成员,data member)</li>
<li>类 对象的蓝图——为其类型的对象定义方法和数据</li>
<li>构造函数 在创建对象时调用的特殊方法</li>
<li>派生类 从基类特化的类,包含基类所有的属性和方法,但还可能包含其他属性或不同的方法实现</li>
<li>析构函数 在销毁对象时调用的特殊方法</li>
<li>封装 任何形式的隐藏。对象封装其数据,抽象类封装其派生的具体类</li>
<li>功能分解 一种分析方法,将问题逐步分解成小的功能</li>
<li>继承 一种特化类的方式,用于将派生类与其基类联系起来</li>
<li>实例 类的特定对象</li>
<li>实例化 创建类的一个实例的过程</li>
<li>成员 类的数据或方法</li>
<li>方法 与对象关联的例程</li>
<li>对象 具有责任的实体。一个特殊的、自成一体的容器,包含数据和操作数据的方法。对象的数据对于外部对象是受保护的</li>
<li>多态 相关的对象根据其具体类型实现方法的能力</li>
<li>超类 其他的类从中派生的类,包含所有派生类都要使用的主要数据和方法的定义(方法可能改写)</li>
</ol>
<h1 id="参考书籍"><a href="#参考书籍" class="headerlink" title="参考书籍"></a>参考书籍</h1><ul>
<li>设计模式解析（第二版）</li>
</ul>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式探秘-4-单例模式</title>
    <url>/2017/08/21/design-pattern-4-singleton/</url>
    <content><![CDATA[<h1 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h1><p>单例模式定义：确保某一个类只有一个实例，而且自行实例化并向整个系统提供该实例。</p>
<h2 id="单例模式优点："><a href="#单例模式优点：" class="headerlink" title="单例模式优点："></a>单例模式优点：</h2><ol>
<li>单例模式在内存中只有一个实例，减少了内存开支，特别是一个对象需要频繁创建、销毁，而且创建或销毁时性能又无法优化时，单例模式的优势非常明显。</li>
<li>单例模式只生产一个实例，减少了系统的性能开销，当一个对象的产生需要比较多的资源时，则可以通过在应用启动时直接生产一个单例对象，然后永久驻留在内存中的方式来解决。</li>
<li>单例模式可以避免对资源的多重访问。</li>
<li>单例模式可以在系统设置全局的访问点，优化和共享资源访问。</li>
</ol>
<h2 id="单例模式缺点："><a href="#单例模式缺点：" class="headerlink" title="单例模式缺点："></a>单例模式缺点：</h2><ol>
<li>单例模式一般没有接口，扩展困难。因为接口对于单例模式没有意义，单例模式“自行实例化”，并且提供单一实例，接口和抽象类是不可能被实例化的。但特殊情况下单例模式可以实现接口、被继承等。</li>
<li>单例模式对测试不利。并行开发环境中，单例模式未完成前，不能进行测试，没有接口也就无法虚拟对象。</li>
<li>单例模式与单一职责原则有冲突。单例模式把“要单例”和业务逻辑融合在一个类中。</li>
</ol>
<h2 id="单例模式使用场景"><a href="#单例模式使用场景" class="headerlink" title="单例模式使用场景"></a>单例模式使用场景</h2><p>在一个系统中，如果要求有且仅有一个对象，如果出现多个会有不良反应，就可以使用单例模式。</p>
<ol>
<li>要求生成唯一化序列号的环境。</li>
<li>在整个项目中需要一个共享访问点或共享数据。</li>
<li>创建一个对象需要消耗的资源过多。</li>
<li>需要定义大量静态方法或静态变量的环境，可以采用单例模式。</li>
</ol>
<h2 id="单例模式和全局变量"><a href="#单例模式和全局变量" class="headerlink" title="单例模式和全局变量"></a>单例模式和全局变量</h2><ol>
<li>全局变量不能防止实例化多个对象。</li>
<li>使用全局变量将使对象无论是否被用到都要被创建。</li>
</ol>
<h2 id="单例模式的实现"><a href="#单例模式的实现" class="headerlink" title="单例模式的实现"></a>单例模式的实现</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//常见的单例模式</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SingletonOne</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    SingletonOne()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;__FUNCTION__&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    SingletonOne(<span class="keyword">const</span> SingletonOne &amp;right);</span><br><span class="line">    SingletonOne &amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> SingletonOne &amp;right);</span><br><span class="line">    <span class="keyword">static</span> SingletonOne _instance;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">static</span> SingletonOne&amp; <span class="title">Instance</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> _instance;</span><br><span class="line">    &#125;;</span><br><span class="line">    ~SingletonOne()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;__FUNCTION__&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;__FUNCTION__&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line">SingletonOne SingletonOne::_instance;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SingletonTwo</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    SingletonTwo()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;__FUNCTION__&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    SingletonTwo(<span class="keyword">const</span> SingletonTwo &amp;right);</span><br><span class="line">    SingletonTwo &amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> SingletonTwo &amp;right);</span><br><span class="line">    <span class="keyword">static</span> SingletonTwo *_instance;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">static</span> SingletonTwo* <span class="title">Instance</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>( <span class="literal">nullptr</span> == _instance )</span><br><span class="line">        &#123;</span><br><span class="line">            _instance = <span class="keyword">new</span> SingletonTwo();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> _instance;</span><br><span class="line">    &#125;;</span><br><span class="line">    ~SingletonTwo()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;__FUNCTION__&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;__FUNCTION__&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line">SingletonTwo* SingletonTwo::_instance = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">SingletonThree</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    SingletonThree()&#123;&#125;</span><br><span class="line">    SingletonThree(<span class="keyword">const</span> SingletonThree &amp;right);</span><br><span class="line">    SingletonThree &amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> SingletonThree &amp;right);</span><br><span class="line">    <span class="keyword">static</span> T _instance;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">static</span> T&amp; <span class="title">Instance</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> _instance;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">virtual</span> ~SingletonThree()&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">T</span> <span class="title">SingletonThree</span>&lt;T&gt;:</span>:_instance;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    A()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;__FUNCTION__&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">virtual</span> ~A()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;__FUNCTION__&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;__FUNCTION__&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> SingletonThree&lt;A&gt; SingletonA;   <span class="comment">//SingletonA</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//SingletonOne::Instance().print();</span></span><br><span class="line">    <span class="comment">//SingletonTwo::Instance()-&gt;print();</span></span><br><span class="line">    SingletonA::Instance().print();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ol>
<li>设计模式之禅</li>
<li>GoF+23种设计模式解析</li>
</ol>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式探秘-5-工厂方法模式</title>
    <url>/2017/08/23/design-pattern-5-factory/</url>
    <content><![CDATA[<h1 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h1><p>工厂方法模式的定义：定义一个用于创建对象的接口，让子类决定实例化哪一个类，工厂方法使一个类的实例化延迟到其子类。</p>
<h2 id="工厂方法优点"><a href="#工厂方法优点" class="headerlink" title="工厂方法优点"></a>工厂方法优点</h2><ol>
<li>良好的封装性，代码结构清晰，一个对象创建是有约束的，只要知道对象类的名称（或约束字符串）就可以了，不需要知道创建对象的过程，降低模块间耦合。</li>
<li>工厂方法模式的扩展性非常优秀。</li>
<li>屏蔽产品类，调用者不用关心产品类的实现，只需要关系产品的接口。</li>
<li>工厂模式是典型的解耦框架。高层模块只需要知道产品的抽象类，其它的实现类则不用关系，符合迪米特法则，不需要就不要去交流，符合依赖倒置原则，只依赖产品的抽象类，也符合里氏替换原则，使用产品子类替换父类。</li>
</ol>
<h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ol>
<li>工厂方法模式是new一个对象的替代品，在需要生成对象的地方都可以使用，但需要慎重考虑。因为会增加代码的复杂度。</li>
<li>需要灵活、可扩展的框架时，可以考虑工厂方法模式。</li>
<li>工厂模式可以用在异构项目中。</li>
<li>可以使用在测试驱动开发的框架下。</li>
</ol>
<h2 id="工厂方法模式的扩展"><a href="#工厂方法模式的扩展" class="headerlink" title="工厂方法模式的扩展"></a>工厂方法模式的扩展</h2><ol>
<li>缩小为简单工厂模式（静态工厂模式），其缺点是工厂类的扩展比较困难，不符合开闭原则，但仍然是非常使用的设计模式。</li>
<li>升级为多个工厂类</li>
<li>替代单例模式，工厂每次都返回唯一的那个对象即可</li>
<li>延迟初始化，对象使用完，不销毁，下次申请的时候从缓存取一个，初始化后返回</li>
</ol>
<h2 id="工厂模式实现"><a href="#工厂模式实现" class="headerlink" title="工厂模式实现"></a>工厂模式实现</h2><p>常见工厂模式类图</p>
<p><img src="https://www.plantuml.com/plantuml/svg/SoWkIImgAStDuKhEIImkLWWeoayfJIvHgEPI009bA5T34ypLhaFmQw4QdFFpaejIIr9HDMgZ2SCDm1I76UIMc5oINrG9indAXMj4upiNfIOYcM9Lbf-Peg2bK9sOL5nI15HQY-50LFErqOGn74Z0FfXtjO3se0U1Rcc1ReqTB2Yvq1q0bOPoCNJh5MMcPvJesQ4xdCiXDIy56540"></p>
<p>简单工厂模式<br><img src="https://www.plantuml.com/plantuml/svg/SoWkIImgAStDuKhEIImkLWWeoayfJIvHgEPI009bA5T34ypLhaFmQw4QdFFpaejIIr9HDMgZ2SCDm1I76UIMc5oINrG9indAXMj4upiNfIOYcM85iruBQ1uNkfjqImjqQ-nWViEGrYlAJCyeqRE3EO7B8JKl1HWa0000"></p>
<p>多个工厂类<br><img src="https://www.plantuml.com/plantuml/svg/XPB12i8m38RlVOg2bssoWJbw68E1Pr-XTaK7SvEs4sJEPtUCh4fZNMz_qlnVqgOmLcZRNnic6s4CF-gkwgNb0-FJsQ2CubbkNnyzOa7PjL8hgp2pmygj7tSMFn81BmXuGSWBlhmEGjfEFvP1KBfAJvTQ2MSJnVjxLrSyuOCu6QkdgoFf4Gt8l4kSzEWdVAHxm2J4WW0BGYnOOS7C8Z-OzhVqcI-hmCZ4c4TDwpDTdoysoybRCVB1_r6mWe8W2bYXscfQwpS0"></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//工厂模式</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Product</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">virtual</span> ~Product()&#123;&#125;;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    Product()&#123;&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteProduct</span>:</span><span class="keyword">public</span> Product</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ConcreteProduct()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;__FUNCTION__&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ~ConcreteProduct()</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Factory</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">virtual</span> ~Factory()&#123;&#125;;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span>* <span class="title">CreateProduct</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    Factory()&#123;&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteFactory</span>:</span><span class="keyword">public</span> Factory</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ConcreteFactory()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;__FUNCTION__&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ~ConcreteFactory()</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Product* <span class="title">CreateProduct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ConcreteProduct();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Factory *fac = <span class="keyword">new</span> ConcreteFactory();</span><br><span class="line">    Product *p = (Product*)fac-&gt;CreateProduct();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ol>
<li>设计模式之禅</li>
<li>GoF+23种设计模式解析</li>
</ol>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>centos7 vim8.0 编译安装</title>
    <url>/2017/08/26/vim-install/</url>
    <content><![CDATA[<h1 id="安装依赖环境"><a href="#安装依赖环境" class="headerlink" title="安装依赖环境"></a>安装依赖环境</h1><p>最好使用yum安装，如果没有可以下载源码编译安装<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo yum install -y ruby ruby-devel lua lua-devel luajit luajit-devel ctags git python python-devel python3 python3-devel tcl-devel perl perl-devel perl-ExtUtils-ParseXS perl-ExtUtils-XSpp perl-ExtUtils-CBuilder perl-ExtUtils-Embed gcc</span><br></pre></td></tr></table></figure></p>
<h1 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/vim/vim.git</span><br><span class="line">cd vim</span><br><span class="line">./configure --with-features=huge \</span><br><span class="line">    --enable-multibyte \</span><br><span class="line">    --enable-rubyinterp=yes \</span><br><span class="line">    --with-ruby-command=/usr/bin/ruby \</span><br><span class="line">    --enable-pythoninterp=yes \</span><br><span class="line">    --with-python-config-dir=/usr \</span><br><span class="line">    --enable-python3interp=yes \</span><br><span class="line">    --with-python3-config-dir=/usr \</span><br><span class="line">    --enable-perlinterp=yes \</span><br><span class="line">    --enable-fontset \</span><br><span class="line">    --enable-luainterp=yes \</span><br><span class="line">    --enable-gui=auto \</span><br><span class="line">    --enable-gnome-check \</span><br><span class="line">    --with-x \</span><br><span class="line">    --enable-cscope \</span><br><span class="line">    --prefix=/usr/local/vim80</span><br></pre></td></tr></table></figure>
<p>支持python、lua</p>
<p>完成后<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure></p>
<h1 id="如果有旧版本的将其备份，最好别删"><a href="#如果有旧版本的将其备份，最好别删" class="headerlink" title="如果有旧版本的将其备份，最好别删"></a>如果有旧版本的将其备份，最好别删</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo mv /usr/bin/vim /usr/bin/vim7.4</span><br><span class="line">sudo ln -s /usr/local/vim80/bin/vim /usr/bin/vim</span><br><span class="line">vim --version</span><br></pre></td></tr></table></figure>
<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><h2 id="requires-Vim-compiled-with-Python-2-6-or-3-3-support"><a href="#requires-Vim-compiled-with-Python-2-6-or-3-3-support" class="headerlink" title="requires Vim compiled with Python (2.6+ or 3.3+) support"></a>requires Vim compiled with Python (2.6+ or 3.3+) support</h2><p>当同时存在python2和python3时会出现这种问题,去除编译命令中的python2或python3即可, 例如去除python2后的编译命令如下<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">./configure --with-features=huge \</span><br><span class="line">    --enable-multibyte \</span><br><span class="line">    --enable-rubyinterp=yes \</span><br><span class="line">    --with-ruby-command=/usr/bin/ruby \</span><br><span class="line">    --enable-python3interp=yes \</span><br><span class="line">    --with-python3-config-dir=/usr \</span><br><span class="line">    --enable-perlinterp=yes \</span><br><span class="line">    --enable-fontset \</span><br><span class="line">    --enable-luainterp=yes \</span><br><span class="line">    --enable-gui=auto \</span><br><span class="line">    --enable-gnome-check \</span><br><span class="line">    --with-x \</span><br><span class="line">    --enable-cscope \</span><br><span class="line">    --prefix=/usr/local/vim80</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>vim</tag>
      </tags>
  </entry>
  <entry>
    <title>SGI STL 标准库 hashtable 9</title>
    <url>/2017/06/20/stl-hashtable-9/</url>
    <content><![CDATA[<h1 id="hashtable"><a href="#hashtable" class="headerlink" title="hashtable"></a>hashtable</h1><p>hashtable使用一段连续空间存储元素，元素的下标使用散列函数计算得出，如果不同元素通过散列函数映射到相同位置，可通过线性探测、二次探测、开链等方法解决。<br>负载系数：元素个数除以数组大小。<br>线性探测：如果通过散列函数计算的插入位置已被使用，最简单的方法就是循序往下寻找到一可用空间为止（如果到了尾部，就从头再找起）。最坏情况是遍历整个数组。由于每次都顺序加一查找可用空间，导致主集团问题。<br>二次探测：如果通过散列函数计算的插入位置已被使用，再查找可用位置时不再循序查找，而是按照2的幂次方尝试，即每次前进n^2。二次探测解决主集团问题，但可能导致次集团问题。<br>线性探测和二次探测的负载系数永远在0-1之间。<br>开链：在每个表格元素中维护一个list，当有元素时，将元素加入到list中，如果list足够短，其效率并不慢。可以和二次探测的效率相提并论。<br>SGISTL采用开链法实现hashtable。开链法的负载系数可能会大于1。</p>
<h2 id="hashtable-的buckets和nodes"><a href="#hashtable-的buckets和nodes" class="headerlink" title="hashtable 的buckets和nodes"></a>hashtable 的buckets和nodes</h2><hr>
<p><img src="/Picture/STL-hashtable-buckets-nodes.jpg" alt="用开链法完成的hashtable"></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//hashtable 节点</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">Val</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">struct</span> _<span class="title">Hashtable_node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  _Hashtable_node* _M_next;</span><br><span class="line">  _Val _M_val;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>buckets以vector作为容器，以便有动态扩充能力，nodes自身实现单链表相连接。</p>
<h2 id="hashtable的迭代器"><a href="#hashtable的迭代器" class="headerlink" title="hashtable的迭代器"></a>hashtable的迭代器</h2><hr>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//hashtable迭代器</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">Val</span>, <span class="title">class</span> _<span class="title">Key</span>, <span class="title">class</span> _<span class="title">HashFcn</span>,</span></span><br><span class="line"><span class="class">          <span class="title">class</span> _<span class="title">ExtractKey</span>, <span class="title">class</span> _<span class="title">EqualKey</span>, <span class="title">class</span> _<span class="title">Alloc</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">struct</span> _<span class="title">Hashtable_iterator</span> &#123;</span></span><br><span class="line">  <span class="keyword">typedef</span> hashtable&lt;_Val,_Key,_HashFcn,_ExtractKey,_EqualKey,_Alloc&gt;</span><br><span class="line">          _Hashtable;</span><br><span class="line">  <span class="keyword">typedef</span> _Hashtable_iterator&lt;_Val, _Key, _HashFcn,</span><br><span class="line">                              _ExtractKey, _EqualKey, _Alloc&gt;</span><br><span class="line">          iterator;</span><br><span class="line">  <span class="keyword">typedef</span> _Hashtable_const_iterator&lt;_Val, _Key, _HashFcn,</span><br><span class="line">                                    _ExtractKey, _EqualKey, _Alloc&gt;</span><br><span class="line">          const_iterator;</span><br><span class="line">  <span class="keyword">typedef</span> _Hashtable_node&lt;_Val&gt; _Node;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">typedef</span> forward_iterator_tag iterator_category;</span><br><span class="line">  <span class="keyword">typedef</span> _Val value_type;</span><br><span class="line">  <span class="keyword">typedef</span> <span class="keyword">ptrdiff_t</span> difference_type;</span><br><span class="line">  <span class="keyword">typedef</span> <span class="keyword">size_t</span> size_type;</span><br><span class="line">  <span class="keyword">typedef</span> _Val&amp; reference;</span><br><span class="line">  <span class="keyword">typedef</span> _Val* pointer;</span><br><span class="line"></span><br><span class="line">  _Node* _M_cur;            <span class="comment">//迭代器目前所指之节点</span></span><br><span class="line">  _Hashtable* _M_ht;        <span class="comment">//保持对容器的联结关系(因为可能需要从bucket调到bucket)</span></span><br><span class="line"></span><br><span class="line">  _Hashtable_iterator(_Node* __n, _Hashtable* __tab)</span><br><span class="line">    : _M_cur(__n), _M_ht(__tab) &#123;&#125;</span><br><span class="line">  _Hashtable_iterator() &#123;&#125;</span><br><span class="line">  reference <span class="keyword">operator</span>*() <span class="keyword">const</span> &#123; <span class="keyword">return</span> _M_cur-&gt;_M_val; &#125;</span><br><span class="line">  pointer <span class="keyword">operator</span>-&gt;() <span class="keyword">const</span> &#123; <span class="keyword">return</span> &amp;(<span class="keyword">operator</span>*()); &#125;</span><br><span class="line">  iterator&amp; <span class="keyword">operator</span>++();</span><br><span class="line">  iterator <span class="keyword">operator</span>++(<span class="keyword">int</span>);</span><br><span class="line">  <span class="keyword">bool</span> <span class="keyword">operator</span>==(<span class="keyword">const</span> iterator&amp; __it) <span class="keyword">const</span></span><br><span class="line">    &#123; <span class="keyword">return</span> _M_cur == __it._M_cur; &#125;</span><br><span class="line">  <span class="keyword">bool</span> <span class="keyword">operator</span>!=(<span class="keyword">const</span> iterator&amp; __it) <span class="keyword">const</span></span><br><span class="line">    &#123; <span class="keyword">return</span> _M_cur != __it._M_cur; &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>hashtable的迭代器没有operator—，也就没有定义逆向迭代器。</p>
<h2 id="hashtable数据结构"><a href="#hashtable数据结构" class="headerlink" title="hashtable数据结构"></a>hashtable数据结构</h2><hr>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//开链法并不要求数组数组大小必须为质数，但SGISTL仍以质数设计数组大小，并将28个质数计算好，</span></span><br><span class="line"><span class="comment">//以备随时访问，并提供一个函数，用来查询28个质数中，最接近某数并大于某数的质数。</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> __stl_prime_list[__stl_num_primes] =</span><br><span class="line">&#123;</span><br><span class="line">  <span class="number">53u</span>l,         <span class="number">97u</span>l,         <span class="number">193u</span>l,       <span class="number">389u</span>l,       <span class="number">769u</span>l,</span><br><span class="line">  <span class="number">1543u</span>l,       <span class="number">3079u</span>l,       <span class="number">6151u</span>l,      <span class="number">12289u</span>l,     <span class="number">24593u</span>l,</span><br><span class="line">  <span class="number">49157u</span>l,      <span class="number">98317u</span>l,      <span class="number">196613u</span>l,    <span class="number">393241u</span>l,    <span class="number">786433u</span>l,</span><br><span class="line">  <span class="number">1572869u</span>l,    <span class="number">3145739u</span>l,    <span class="number">6291469u</span>l,   <span class="number">12582917u</span>l,  <span class="number">25165843u</span>l,</span><br><span class="line">  <span class="number">50331653u</span>l,   <span class="number">100663319u</span>l,  <span class="number">201326611u</span>l, <span class="number">402653189u</span>l, <span class="number">805306457u</span>l,</span><br><span class="line">  <span class="number">1610612741u</span>l, <span class="number">3221225473u</span>l, <span class="number">4294967291u</span>l</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//找出28个质数中，最接近并大于n的那个质数</span></span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> __stl_next_prime(<span class="keyword">unsigned</span> <span class="keyword">long</span> __n)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">long</span>* __first = __stl_prime_list;</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">long</span>* __last = __stl_prime_list + (<span class="keyword">int</span>)__stl_num_primes;</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">long</span>* pos = lower_bound(__first, __last, __n);</span><br><span class="line">  <span class="keyword">return</span> pos == __last ? *(__last - <span class="number">1</span>) : *pos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// _Val 节点的实值型别 _Key 节点的键值类型 _HashFcn hash function的函数型别</span></span><br><span class="line"><span class="comment">// _ExtractKey 从节点中取出键值的方法 _EqualKey 判断键值相同的与否的方法</span></span><br><span class="line"><span class="comment">// _Alloc 空间配置器，缺省使用std::alloc</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">Val</span>, <span class="title">class</span> _<span class="title">Key</span>, <span class="title">class</span> _<span class="title">HashFcn</span>,</span></span><br><span class="line"><span class="class">          <span class="title">class</span> _<span class="title">ExtractKey</span>, <span class="title">class</span> _<span class="title">EqualKey</span>, <span class="title">class</span> _<span class="title">Alloc</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">hashtable</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="keyword">typedef</span> _Key key_type;</span><br><span class="line">  <span class="keyword">typedef</span> _Val value_type;</span><br><span class="line">  <span class="keyword">typedef</span> _HashFcn hasher;</span><br><span class="line">  <span class="keyword">typedef</span> _EqualKey key_equal;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">typedef</span> <span class="keyword">size_t</span>            size_type;</span><br><span class="line">  <span class="keyword">typedef</span> <span class="keyword">ptrdiff_t</span>         difference_type;</span><br><span class="line">  <span class="keyword">typedef</span> value_type*       pointer;</span><br><span class="line">  <span class="keyword">typedef</span> <span class="keyword">const</span> value_type* const_pointer;</span><br><span class="line">  <span class="keyword">typedef</span> value_type&amp;       reference;</span><br><span class="line">  <span class="keyword">typedef</span> <span class="keyword">const</span> value_type&amp; const_reference;</span><br><span class="line"></span><br><span class="line">  <span class="function">hasher <span class="title">hash_funct</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> _M_hash; &#125;</span><br><span class="line">  <span class="function">key_equal <span class="title">key_eq</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> _M_equals; &#125;</span><br><span class="line">  <span class="comment">//......</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  hasher                _M_hash;</span><br><span class="line">  key_equal             _M_equals;</span><br><span class="line">  _ExtractKey           _M_get_key;</span><br><span class="line">  <span class="built_in">vector</span>&lt;_Node*,_Alloc&gt; _M_buckets;             <span class="comment">//buckets以vector作为容器</span></span><br><span class="line">  size_type             _M_num_elements;</span><br><span class="line">  <span class="comment">//......</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="hashtable的构造与内存管理"><a href="#hashtable的构造与内存管理" class="headerlink" title="hashtable的构造与内存管理"></a>hashtable的构造与内存管理</h2><hr>
<p>以下具体见源码解析</p>
<ul>
<li><p>插入操作和表格重整</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//插入元素，不允许重复</span></span><br><span class="line">pair&lt;iterator, bool&gt; insert_unique(const value_type&amp; __obj)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">//判断是否需要重建buckets，如果需要就扩充</span></span><br><span class="line">  resize(_M_num_elements + <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">return</span> insert_unique_noresize(__obj);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//插入元素，允许重复</span></span><br><span class="line"><span class="function">iterator <span class="title">insert_equal</span><span class="params">(<span class="keyword">const</span> value_type&amp; __obj)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">//判断是否需要重建buckets，如果需要就扩充</span></span><br><span class="line">  resize(_M_num_elements + <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">return</span> insert_equal_noresize(__obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>元素hash</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//计算元素在buckets中的位置 包装hash function</span></span><br><span class="line">size_type _M_bkt_num(<span class="keyword">const</span> value_type&amp; __obj) <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> _M_bkt_num_key(_M_get_key(__obj));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>hashtable拷贝与清空</p>
<ol>
<li>clear()</li>
<li>_M_copy_from()</li>
</ol>
</li>
</ul>
<h2 id="hash-function"><a href="#hash-function" class="headerlink" title="hash function"></a>hash function</h2><hr>
<p><code>&lt;stl_hash_fun.h&gt;</code>定义数个现成的hash function全都是仿函数。</p>
]]></content>
      <categories>
        <category>cpp</category>
      </categories>
      <tags>
        <tag>cpp</tag>
        <tag>stl</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式探秘-8-建造者模式</title>
    <url>/2017/08/30/design-pattern-8-builder/</url>
    <content><![CDATA[<p>建造者模式的学习与实践</p>
<h1 id="建造者模式"><a href="#建造者模式" class="headerlink" title="建造者模式"></a>建造者模式</h1><p>建造者模式：将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。</p>
<h2 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h2><p><img src="https://www.plantuml.com/plantuml/svg/SoWkIImgAStDuKhEIImkLd0gpSn9IIrIgEPI009jC3S0g493qweiFpD5eJengRYaA36vf9Qh5gh5EJylkIYr99M0LhXwbyoYrEIIVBX2e7wWaQN960e3Yl9JWC90TRLSNEYsw9OMwDROmToB8QrNb9cUKQ9d1pE42swhBbX6Dn-krI4rBmKO0000"></p>
<ol>
<li>Product 产品 实现模版方法和基本方法</li>
<li>Builder 抽象建造者 规范Product的组建，一般由子类实现。</li>
<li>ConcreteBuilder 具体建造者 实现抽象类定义的所有方法，并且返回一个组建好的对象。</li>
<li>Director 导演类 负责安排已有模块的顺序，然后告诉Builder开始建造。</li>
</ol>
<h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ol>
<li>封装性 客户端不必知道产品内部组成的细节</li>
<li>建造者独立，容易扩展</li>
<li>便于控制细节风险</li>
</ol>
<h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ol>
<li>相同的方法，不同的执行顺序，产生不同的事件结果时，采用建造者模式</li>
<li>多个部件或零件都可以装配到一个对象中，但产生的运行结果又不相同时，则可以使用该模式</li>
<li>产品类非常复杂，或者产品类中的调用顺序不同产生了不同的效能</li>
</ol>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>建造者模式关注的是零件类型和装配工艺（顺序），这是建造者模式和工厂方法模式最大的区别，虽然同为建造类模式，但注重点不同。工厂模式重点是创建，创建对象时其主要职责，组装顺序则不是其所关心的。AbstractFaxtory模式强调的是为创建多个相互依赖的对象提供一个同一的接口。</p>
<h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><p>使用建造者模式时可以考虑模版方法模式，通过组合多种模式达成目的。</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ol>
<li>设计模式之禅</li>
<li>GoF+23种设计模式解析</li>
</ol>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式探秘-9-代理模式</title>
    <url>/2017/08/30/design-pattern-9-proxy/</url>
    <content><![CDATA[<p>代理模式的学习与实践</p>
<h1 id="模板方法模式"><a href="#模板方法模式" class="headerlink" title="模板方法模式"></a>模板方法模式</h1><p>代理模式（委托模式）：为其他对象提供一个代理以控制对这个对象的访问。</p>
<h2 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h2><p>抽象主题角色：可以是抽象类，也可以是接口，普通的业务类型定义，无特殊要求<br>具体主题角色：被代理角色、被委托角色。业务逻辑的具体执行者<br>代理主题角色：委托类、代理类。负责对真实角色的应用，把所有抽象主题类定义的方法限制委托给真正主题角色实现，并且在真实主题角色处理完毕前后做预处理和善后处理工作</p>
<p><img src="https://www.plantuml.com/plantuml/svg/SoWkIImgAStDuKhEIImkLWWkJSfAJIvHgEPI00BjbFpY_DpKaioyT0rDgxByp1IkMgwy_99KXPpKj18hXMTTUrziNFXan-wNYsQyM3xfHUScBgWvGQc9EQIPzRHr-vEzax6P5L2KNr59q9IYpFGCe35FTYz-Fg4DrHXan-YM5kZMsC7yoGKn6xiWo5swTiXUuN98pKi11XO0"></p>
<p>一个代理类可以代理多个被委托对象或被代理者，因此一个代理类具体代理哪个真实主题角色由场景类决定。最简单的情况就是一个主题类和一个代理类。</p>
<h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ol>
<li>职责清晰</li>
<li>高扩展性</li>
<li>智能化</li>
</ol>
<p>实现逻辑和实现的彻底解耦</p>
<h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ol>
<li>创建开销大的对象的时候，将创建过程交给代理完成。</li>
<li>智能指针</li>
</ol>
<h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><ol>
<li>普通代理，客户端只能访问代理角色，而不能访问真实角色。普通代理模式的约束问题，应通过团队内的编程规范约束，因为每一个主题类都是可被重用和可维护的，使用技术约束的方法对相同维护是一种非常不利的因素。</li>
<li>强制代理，通过真实角色指定的代理类访问，由真实角色管理代理角色，即创建真实角色，返回代理角色。代理的管理由真实角色自己完成。</li>
<li>代理可以增强目标对象方法（拦截、过滤等）</li>
<li>虚拟代理，在需要的时候再初始化主题对象，避免被代理对象较多而引起的初始化缓慢问题。缺点是需要在每个方法中判断主题对象是否被创建。</li>
<li>动态代理，在实现阶段不关心谁代理谁，在运行阶段才指定代理哪一个对象。面对横切面编程（AOP）</li>
</ol>
<h2 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h2><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ol>
<li>设计模式之禅</li>
<li>GoF+23种设计模式解析</li>
</ol>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式探秘-10-原型模式</title>
    <url>/2017/08/31/design-pattern-10-prototype/</url>
    <content><![CDATA[<p>原型模式的学习与实践</p>
<h1 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h1><p>原型模式：用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象。即：新对象的创建可以通过已有对象进行创建。</p>
<h2 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h2><p><img src="https://www.plantuml.com/plantuml/svg/SoWkIImgAStDuKhEIImkLWWeoY_9BwaiI5Mevb800ctddFoyL0rDAxY45bSj5rInStvUSb5gIIfEJHWAG9gXUdCoK_DAO1fo4pFphChoCrE0yfYcwfOMwDRO8Tp61TMicvEQLgABBE6GcfS2z0m0"></p>
<p>Prototype模式提供通过已存在对象进行新对象创建的接口。C++中通过拷贝构造函数实现。</p>
<h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ol>
<li>性能优良，原型模式是在内存中二进制流的拷贝，比直接new一个对象性能好很多，特别是在循环体内产生大量的对象时，原型模式可以更好的体现其优点。</li>
<li>逃避构造函数的约束，直接在内存中拷贝，构造函数不会执行，优点是减少了约束，缺点也是减少了约束。</li>
</ol>
<h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ol>
<li>资源优化场景，类初始化需要消耗很多资源，包括数据、硬件资源等。</li>
<li>性能和安全要求的场景，通过new产生一个对象需要非常繁琐的数据准备或访问权限，可以使用原型模式。</li>
<li>一个对象多个修改者的场景，一个对象需要提供给多个对象访问，而且各个调用者可能都需要修改其值时，可以考虑使用原型模式拷贝多个对象供调用者使用。</li>
</ol>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol>
<li>构造函数不会执行</li>
<li>浅拷贝和深拷贝</li>
</ol>
<h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><h2 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h2><ol>
<li><strong>Builder模式重在复杂对象的一步步创建（并不直接返回对象）</strong></li>
<li><strong>AbstractFaxtory模式重在产生多个相互依赖类的对象</strong></li>
<li><strong>Prototype模式重在从自身复制自身创建新类</strong></li>
</ol>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ol>
<li>设计模式之禅</li>
<li>GoF+23种设计模式解析</li>
</ol>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>boost 库 内存管理 智能指针概述 1</title>
    <url>/2017/06/05/boost-smart-ptr-summary/</url>
    <content><![CDATA[<h1 id="智能指针库概述"><a href="#智能指针库概述" class="headerlink" title="智能指针库概述"></a>智能指针库概述</h1><p>计算机系统中资源有很多种，内存、文件描述符、socket、数据库连接等，程序中申请资源后必须及时归还系统。</p>
<h2 id="1-RAII机制"><a href="#1-RAII机制" class="headerlink" title="1. RAII机制"></a>1. RAII机制</h2><p>C++程序员通常采用RAII机制(资源获取即初始化，Resource Acquisition Is Initialization)，在使用资源的构造函数中申请资源，使用后再析构函数中释放资源。<br>栈上创建的局部对象，离开作用域后自动销毁，调用析构函数释放资源。用new从堆上创建的对象，必须明确地用对应的delete操作符销毁它。</p>
<h2 id="2-智能指针"><a href="#2-智能指针" class="headerlink" title="2. 智能指针"></a>2. 智能指针</h2><p>智能指针实践了代理模式，代理了原始的“裸”指针的行为，为它添加了更多更有用的特性。<br>C++异常机制加入后，为了保证new对象在正确时机delete，必须编写大量的异常捕获代码释放资源，而智能指针能保证在退出作用域时，不论时正常流程或是异常退出，总调用delete析构堆上动态分配的对象，调用析构函数，释放资源。<br>std::auto_ptr构造函数结构new操作符或者对象工厂创建出来的对象指针作为参数，代理原始指针，重载operator*和operator-&gt;，行为类似指针，可用在大多数普通指针可用的地方。当退出作用域时，C++语言保证auto_ptr对象销毁，调用auto_prt的析构函数，进而使用delete操作符删除原始指针释放资源。<br>boost.smart_ptr提供六中智能指针：<code>scoped_ptr</code>、<code>scoped_array</code>、<code>shared_ptr</code>、<code>shared_array</code>、<code>weak_ptr</code>和<code>intrusive_ptr</code>，都是异常安全的。<br>boost智能指针所指的类型T的唯一一个要求：析构函数不能抛出异常。<br>boost智能指针位于名字空间boost</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;boost/smart_ptr.hpp&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span></span><br></pre></td></tr></table></figure>
<h2 id="3-auto-ptr"><a href="#3-auto-ptr" class="headerlink" title="3. auto_ptr"></a>3. auto_ptr</h2><p><strong>目前auto_ptr已不建议使用</strong></p>
<ol>
<li>auto_ptr不能共享所有权，即不能让两个auto_ptr指向同一个对象，在用auto_ptr给其它auto_ptr赋值时，原auto_ptr失去对裸指针的引用。</li>
<li>auto_ptr不能指向数组，因为auto_ptr在析构时只是调用delete，而数组应该调用delete[]。</li>
<li>auto_per不能作为容器对象，STL容器中的元素经常要支持拷贝、赋值操作，在拷贝和赋值时auto_ptr会转移所有权，原对象和拷贝的对象不等价。</li>
<li>使用auto_ptr作为成员变量，避免资源泄露。</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    A()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"A ctor"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ~ A()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"A dtor"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"A Print"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TestAutoPtr</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function"><span class="built_in">auto_ptr</span>&lt;A&gt; <span class="title">a1</span><span class="params">(<span class="keyword">new</span> A())</span></span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;a1.get()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">auto_ptr</span>&lt;A&gt; a2 = a1;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;a1.get()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;a2.get()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>cpp</category>
      </categories>
      <tags>
        <tag>cpp</tag>
        <tag>boost</tag>
        <tag>智能指针</tag>
        <tag>stl</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式探秘-7-模板方法模式</title>
    <url>/2017/08/29/design-pattern-7-template/</url>
    <content><![CDATA[<p>模板方法模式的学习与实践</p>
<h1 id="模板方法模式"><a href="#模板方法模式" class="headerlink" title="模板方法模式"></a>模板方法模式</h1><p>模板方法模式：定义一个操作中的算法的框架，而将一些步骤延迟到子类中。使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。模板方法模式很简单，只使用了继承机制。<br>抽象模板的方法分为两类：</p>
<ol>
<li>基本方法：由子类实现，并且在模板中被调用。</li>
<li>模板方法：可能有一个或几个，一般是一个具体方法，也就是一个框架，实现对基本方法的调度，完成固定的逻辑。一般模板方法不允许被覆写。</li>
</ol>
<p>具体模板：实现父类所定义的一个或多个抽象方法，即父类定义的基本方法在子类中实现。</p>
<h2 id="模板方法的类图"><a href="#模板方法的类图" class="headerlink" title="模板方法的类图"></a>模板方法的类图</h2><p><img src="https://www.plantuml.com/plantuml/svg/SoWkIImgAStDuKhEIImkLd1CAYufIamk2KdDBSX9B4bLgEPI009bi38DJQko_CmKXUf4gAfQY6HAVd5-Rcf9PbuwBXN59Va5EEIqYqhpe59SjLnv-K0xSrBJIgmKddNjVR5nuRCL2v_DtSy5THxCMOROt8N3CHWkW5bJb9cU0RJdQUls9tidOxV7Y1hsGBo3QWt20jtI0jqQEuo0vq9u5PSAXzIy563C0G00"></p>
<h2 id="模板方法模式优点"><a href="#模板方法模式优点" class="headerlink" title="模板方法模式优点"></a>模板方法模式优点</h2><ol>
<li>封装不变部分，扩展可变部分。</li>
<li>提取公共部分代码，便于维护。</li>
<li>行为由父类控制，子类实现。</li>
</ol>
<h2 id="模板方法模式缺点"><a href="#模板方法模式缺点" class="headerlink" title="模板方法模式缺点"></a>模板方法模式缺点</h2><p>模板方法模式和一般的设计习惯不一样，一般设计抽象类负责最抽象、最一般的事物属性和方法，实现类完成具体的事物属性和方法，但在模板方法模式中，抽象类定义了一部分抽象方法，由子类实现，子类的执行结果影响父类的结果，即子类对父类产生了影响。</p>
<h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ol>
<li>多个子类有共有的方法，并且逻辑基本相同。</li>
<li>重要、复杂的算法，可以将核心算法设计为模板方法，周边细节功能由各个子类实现。</li>
<li>重构时，模板方法是常用的模式，将相同的代码抽象到父类中，然后通过钩子函数约束其行为。</li>
</ol>
<h2 id="模板方法的扩展"><a href="#模板方法的扩展" class="headerlink" title="模板方法的扩展"></a>模板方法的扩展</h2><p>父类定义抽象的方法确定系统某个功能的默认行为，子类覆写该方法，改变父类的行为。即由子类的方法返回值确定公共部分的执行结果。</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ol>
<li>设计模式之禅</li>
<li>GoF+23种设计模式解析</li>
</ol>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式探秘-6-抽象工厂方法模式</title>
    <url>/2017/08/28/design-pattern-6-abstact-factory/</url>
    <content><![CDATA[<p>抽象工厂模式介绍与实践，抽象工厂模式与工厂模式比较</p>
<h1 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h1><p>抽象工厂模式：为创建一组相关或相互依赖的对象提供接口，而别无需指定它们的具体类。</p>
<h2 id="抽象工厂模式优点"><a href="#抽象工厂模式优点" class="headerlink" title="抽象工厂模式优点"></a>抽象工厂模式优点</h2><ol>
<li>封装性，高层模块调用产生对象的接口即可，不需要了解对象的实现类</li>
<li>对象间约束关系非公开状态</li>
</ol>
<h2 id="抽象工厂模式缺点"><a href="#抽象工厂模式缺点" class="headerlink" title="抽象工厂模式缺点"></a>抽象工厂模式缺点</h2><p>对象扩展困难</p>
<h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>一组没有任何关系的对象都有相同约束，则可以使用抽象工厂模式</p>
<h2 id="抽象工厂模式注意事项"><a href="#抽象工厂模式注意事项" class="headerlink" title="抽象工厂模式注意事项"></a>抽象工厂模式注意事项</h2><p>抽象工厂模式扩展困难时对象横向扩展困难，而纵向扩展是非常容易扩展的。</p>
<h2 id="抽象工厂模式和工厂模式"><a href="#抽象工厂模式和工厂模式" class="headerlink" title="抽象工厂模式和工厂模式"></a>抽象工厂模式和工厂模式</h2><p>AbstractFactory模式和Factory模式的区别在于AbstractFactory模式是为创建一组（有多类）相关或依赖的对象提供创建接口，而Factory模式是为一类对象提供创建接口或延迟对象的创建到子类中实现。AbstractFactory模式通常使用Factory模式实现。</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:right">工厂方法模式</th>
<th style="text-align:center">抽象工厂模式</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:right">针对的是一个产品等级结构</td>
<td style="text-align:center">针对的是面向多个产品等级结构</td>
</tr>
<tr>
<td style="text-align:right">一个抽象产品类</td>
<td style="text-align:center">多个抽象产品类</td>
</tr>
<tr>
<td style="text-align:right">可以派生出多个具体产品类</td>
<td style="text-align:center">每个抽象产品类可以派生出多个具体产品类</td>
</tr>
<tr>
<td style="text-align:right">一个抽象工厂类，可以派生出多个具体工厂类</td>
<td style="text-align:center">一个抽象工厂类，可以派生出多个具体工厂类</td>
</tr>
<tr>
<td style="text-align:right">每个具体工厂类只能创建一个具体产品类的实例</td>
<td style="text-align:center">每个具体工厂类可以创建多个具体产品类的实例</td>
</tr>
</tbody>
</table>
</div>
<h2 id="抽象工厂模式实现"><a href="#抽象工厂模式实现" class="headerlink" title="抽象工厂模式实现"></a>抽象工厂模式实现</h2><p>抽象工厂模式类图<br><img src="https://www.plantuml.com/plantuml/svg/XPJ13e8m38RlUuebNXG2YJrw85eIpxx210ucAcGC4uFux18TeEkAtBh-w_wlwzZMHcdJNCuYEwkwbWTTvarcTh8LilyMGxnSlUFm-RNG2RifBQ-PBamnvDPsTqWIOnbVfcFA0LSEs7BmRSykeiE4BXFEC277X2mJpZ0XnuGi4_umxLLcIdqVa6muxdNYL1TgQivojRcLfrm6ibN7skXUstbqwDMH1jcZI7-6TSBZ9eYvQOm2njPqAG5h21X3m1c2luRWho7u6A8F8cggw96CpqlG6NSLWaxWhmG57IfN8SWjMOMD1McQa_UWn4qL9-JwFNOPeOVTgmGF7oFS5jUy_uUz0000"></p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ol>
<li>设计模式之禅</li>
<li>GoF+23种设计模式解析</li>
<li><a href="http://blog.csdn.net/wyxhd2008/article/details/5597975" target="_blank" rel="noopener">http://blog.csdn.net/wyxhd2008/article/details/5597975</a></li>
</ol>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式探秘-12-命令模式</title>
    <url>/2017/09/02/design-pattern-12-command/</url>
    <content><![CDATA[<p>命令模式的学习与实践</p>
<h1 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h1><p>命令模式是一个高内聚的模式，将一个请求封装成一个对象，从而让你使用不同的请求把客户端参数化，对请求排队或者记录请求日志，可以提供命令的撤销和恢复功能。</p>
<h2 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h2><p><img src="https://www.plantuml.com/plantuml/svg/SoWkIImgAStDuKhEIImkLd3EoKpDAr6evghbWefuvfNbPwSMWONoyajI5OeoqpDAh1HUR6X-FcN5YuRM5yidlUZS15Fkd9-RcvYN0bIk00JQhXMfoQKbgHgQLcNvcIam8qho2wmKdaxS-sJt4bJTGQd9gPbbgJ3TZiabcVbvOAqQccZsF-jR-hH_EXRxyvABKajI4Uu0-WHTKBUqGBV63kPMBfWNTS56w-R39Q2X0HMtWpaFGnpDV4pxaFGwfEQb0CCR0000"></p>
<ol>
<li>Receive接受者角色，执行命令的角色</li>
<li>Command命令角色，需要执行的所有命令都在这里申明</li>
<li>Invoker调用者角色，接受到命令，并执行命令</li>
</ol>
<p>命令模式简单，封装性非常好，将请求方和执行方分开，扩展性有了保障，通用代码简单。</p>
<h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ol>
<li>类间解偶，调用者和接收者角色之间没有任何依赖关系，调用者实现功能只需调用Command抽象类的execute方法，不需要了解是那个接收者。</li>
<li>可扩展性，Command的子类容易扩展，而调用者Invoker和高层次的模块Client不产生严重的代码耦合。</li>
<li>命令模式结合其他模式会更优秀，命令模式可以结合责任链模式，实现命令族解析任务；结合模板方法模式，则可以减少Command子类的膨胀问题。</li>
</ol>
<h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><p>Command的子类，如果由N个命令，Command的子类会有N个，该类会膨胀的非常大。</p>
<h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>在出现命令的地方都可以使用命令模式。</p>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><h2 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h2><h2 id="简单实现"><a href="#简单实现" class="headerlink" title="简单实现"></a>简单实现</h2><p>在实际应用中可以有多个Reciever，将Reciever封装在Command中，不对Client暴露，并在Command中维护队列，将多个事件按队列依次执行。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//命令模式</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Reciever</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Reciever() &#123;&#125;;</span><br><span class="line">    <span class="keyword">virtual</span> ~Reciever() &#123;&#125;;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Action</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RecieverA</span> :</span> <span class="keyword">public</span> Reciever</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    RecieverA() &#123;&#125;;</span><br><span class="line">    <span class="keyword">virtual</span> ~RecieverA() &#123;&#125;;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Action</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;__FUNCTION__&lt;&lt;<span class="string">"  A"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RecieverB</span> :</span> <span class="keyword">public</span> Reciever</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    RecieverB() &#123;&#125;;</span><br><span class="line">    <span class="keyword">virtual</span> ~RecieverB() &#123;&#125;;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Action</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;__FUNCTION__&lt;&lt;<span class="string">"  B"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Command</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">virtual</span> ~Command() &#123;&#125;;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Excute</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    Command()&#123;&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteCommand</span> :</span> <span class="keyword">public</span> Command</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ConcreteCommand(Reciever *rec)</span><br><span class="line">    &#123;</span><br><span class="line">        m_pRev = rec;</span><br><span class="line">    &#125;</span><br><span class="line">    ~ConcreteCommand()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">delete</span> m_pRev;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Excute</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        m_pRev-&gt;Action();</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;__FUNCTION__&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Reciever *m_pRev;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Invoker</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Invoker(Command* cmd)</span><br><span class="line">    &#123;</span><br><span class="line">        m_pCmd = cmd;</span><br><span class="line">    &#125;</span><br><span class="line">    ~Invoker()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">delete</span> m_pCmd;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Invoke</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        m_pCmd-&gt;Excute();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Command *m_pCmd;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Reciever *reva = <span class="keyword">new</span> RecieverA();</span><br><span class="line">    Command *cmda = <span class="keyword">new</span> ConcreteCommand(reva);</span><br><span class="line">    Invoker *inva = <span class="keyword">new</span> Invoker(cmda);</span><br><span class="line">    inva-&gt;Invoke();</span><br><span class="line">    Reciever *revb = <span class="keyword">new</span> RecieverB();</span><br><span class="line">    Command *cmdb = <span class="keyword">new</span> ConcreteCommand(revb);</span><br><span class="line">    Invoker *invb = <span class="keyword">new</span> Invoker(cmdb);</span><br><span class="line">    invb-&gt;Invoke();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ol>
<li>设计模式之禅</li>
<li>GoF+23种设计模式解析</li>
</ol>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式探秘-13-责任链模式</title>
    <url>/2017/09/02/design-pattern-13-chain-of-responsibility/</url>
    <content><![CDATA[<p>责任链模式学习与实践</p>
<h1 id="责任链模式"><a href="#责任链模式" class="headerlink" title="责任链模式"></a>责任链模式</h1><p>责任链模式：使多个对象都有机会处理请求，从而避免请求的发送者和接受者之间的耦合关系。将这些对象连成一条链，并沿着这条链传递该请求，直到有对象处理它为之。</p>
<h2 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h2><p><img src="https://www.plantuml.com/plantuml/svg/SoWkIImgAStDuKhEIImkLd3EoKpDAr6evghbWefu9EQbvAGM0OKKW40RoWrABInDBIxHqBGgoyzCGQXspizBBaejIKNe0af13TKjoapFAD6rWnd9XQvOjxH0jmOX3HT6qkAGcfS2T2q0"><br>责任链模式的核心在“链”上，“链”是由多个处理者Concreteandler组成。</p>
<h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><p>将请求和处理分开，请求者可以不用知道谁处理的，处理者不用知道请求的全貌，两者解耦，提高系统灵活性。</p>
<h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><p>性能，每个请求都从链头遍历到链尾，当链表特别长时，性能是一个非常大的问题。</p>
<h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>链表中节点数量需要控制，避免出现超长链的情况。</p>
<h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><h2 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h2><h2 id="简单实现"><a href="#简单实现" class="headerlink" title="简单实现"></a>简单实现</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//责任链模式</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Handle</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">virtual</span> ~Handle()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">delete</span> m_pSucc;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">HandleRequest</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">SetSuccessor</span><span class="params">(Handle *succ)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        m_pSucc = succ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Handle *<span class="title">GetSuccessor</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m_pSucc;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    Handle()</span><br><span class="line">    &#123;</span><br><span class="line">        m_pSucc = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Handle(Handle *succ)</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Handle *m_pSucc;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteHandleA</span> :</span> <span class="keyword">public</span> Handle</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ConcreteHandleA()</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    ~ConcreteHandleA()</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    ConcreteHandleA(Handle *succ) : Handle(succ)</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">HandleRequest</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(GetSuccessor() != <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"ConcreteHandleA next"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            GetSuccessor()-&gt;HandleRequest();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"ConcreteHandleA process"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteHandleB</span> :</span> <span class="keyword">public</span> Handle</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ConcreteHandleB()</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    ~ConcreteHandleB()</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    ConcreteHandleB(Handle *succ) : Handle(succ)</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">HandleRequest</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(GetSuccessor() != <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"ConcreteHandleB next"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            GetSuccessor()-&gt;HandleRequest();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"ConcreteHandleB process"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Handle *h1 = <span class="keyword">new</span> ConcreteHandleA();</span><br><span class="line">    Handle *h2 = <span class="keyword">new</span> ConcreteHandleB();</span><br><span class="line">    h1-&gt;SetSuccessor(h2);</span><br><span class="line">    h1-&gt;HandleRequest();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ol>
<li>设计模式之禅</li>
<li>GoF+23种设计模式解析</li>
</ol>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式探秘-14-装饰模式</title>
    <url>/2017/09/03/design-pattern-14-decorator/</url>
    <content><![CDATA[<p>装饰模式的学习与实践</p>
<h1 id="装饰模式"><a href="#装饰模式" class="headerlink" title="装饰模式"></a>装饰模式</h1><p>装饰模式定义：动态的给一个对象添加一些额外的职责，就增加功能来说，装饰模式相比生成子类更加灵活。</p>
<h2 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h2><p><img src="https://www.plantuml.com/plantuml/svg/SoWkIImgAStDuKhEIImkLd3Epot8pqtDAr6evb800ct_WjIYn9BC_3mDJQko_CmKhbekkDAyvABKabImbZo85hYaIsfoFb1VVX6o84m7cYIci6vfWMwD7S8GBaoxT8ioqpDAGAhWJkR2C02Rb9QkBfAuGsfU2j3t0000"></p>
<ol>
<li>Component 抽象构建 一个接口或者抽象类，定义最核心的对象，最原始的对象</li>
<li>ConcreteComponent 具体构建 最核心、最原始、最基本接口或抽象类的实现，需要修饰的对象</li>
<li>Decorator 修饰角色 必然有一个private变量指向Componet抽象构建</li>
<li>ConcreteDecorator 具体装饰角色</li>
</ol>
<h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ol>
<li>装饰类和被装饰类可以独立发展，而不会相互耦合。</li>
<li>装饰模式是继承关系的替代方案。</li>
<li>装饰模式可以动态扩展一个实现类的功能。</li>
</ol>
<h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><p>多层的装饰是比较复杂的，应尽量减少装饰类的数量，降低系统复杂度。</p>
<h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ol>
<li>需要扩展一个类的功能，或给一个类增加附加功能</li>
<li>需要动态地给一个对象增加功能，该功能可以再动态的撤销</li>
<li>需要为一批兄弟类进行改装或加装功能</li>
</ol>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><h2 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h2><p>装饰模式是对继承的有力补充。</p>
<h2 id="简单实现"><a href="#简单实现" class="headerlink" title="简单实现"></a>简单实现</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//装饰模式</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Component</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">virtual</span> ~Component()</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Operation</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">    &#125;;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    Component()</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteComponent</span> :</span> <span class="keyword">public</span> Component</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ConcreteComponent()</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    ~ConcreteComponent()</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Operation</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"ConcreteComponent  "</span>&lt;&lt;__FUNCTION__&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Decorator</span> :</span> <span class="keyword">public</span> Component</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Decorator(Component *com)</span><br><span class="line">    &#123;</span><br><span class="line">        m_pCom = com;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">virtual</span> ~Decorator()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">delete</span> m_pCom;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Operation</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    Component *m_pCom;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteDecorator</span> :</span> <span class="keyword">public</span> Decorator</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ConcreteDecorator(Component *com) : Decorator(com)</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    ~ConcreteDecorator()</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Operation</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        m_pCom-&gt;Operation();</span><br><span class="line">        AddedBehavior();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">AddedBehavior</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"ConcreteDecorator "</span>&lt;&lt;__FUNCTION__&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Component *com = <span class="keyword">new</span> ConcreteComponent();</span><br><span class="line">    Decorator *dec = <span class="keyword">new</span> ConcreteDecorator(com);</span><br><span class="line">    dec-&gt;Operation();</span><br><span class="line">    <span class="keyword">delete</span> dec;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ol>
<li>设计模式之禅</li>
<li>GoF+23种设计模式解析</li>
</ol>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式探秘-15-策略模式</title>
    <url>/2017/09/03/design-pattern-15-strategy/</url>
    <content><![CDATA[<p>策略模式的学习与实践</p>
<h1 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h1><p>策略模式定义：定义一组算法，将每个算法封装起来，并且使它们之间可以互相互换。</p>
<h2 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h2><p><img src="https://www.plantuml.com/plantuml/svg/SoWkIImgAStDuKhEIImkLd3Epoj9hIXHgEPI009jADSJI1Qb9IQdQcXQbULdfd3LSa7L1vSK9PQafbV2D3ZcfESNPPPavEBM0ZGpkIYr91L9Ar0EGrItj42tnWvk0HVCPRf5cUaP9Rhv21c7rBmKe0y0"></p>
<ol>
<li>Context 封装角色（上下文角色），起承上启下封装作用，屏蔽高层模块对策略、算法的直接访问，封装可能存在的变化。</li>
<li>Strategy 抽象策略角色 策略、算法家族的抽象，通常为接口，定义每个策略或算法必须具有的方法和属性。</li>
<li>ConcreteStrategy 具体策略角色 实现抽象策略中的操作，该类含有具体的算法。</li>
</ol>
<h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ol>
<li>算法可以自由切换 策略模式本身定义的，只要实现抽象策略，即为策略家族的一个成员，通过封装角色对其进行封装，保证对外提供<br>可自由切换的策略。</li>
<li>必买年使用多重条件判断。</li>
<li>扩展性良好</li>
</ol>
<h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ol>
<li>策略类数量增多，每个策略都是一个类，复用的可能性低</li>
<li>所有的策略类都需要对外暴露</li>
</ol>
<h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ol>
<li>多个类只是在算法或行为上稍有不同的场景</li>
<li>算法需要自由切换的场景</li>
<li>需要屏蔽算法规则的场景</li>
</ol>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>如果系统中一个策略家族的具体策略数量超过4个，则需要考虑混合模式，解决策略类膨胀和对外暴露的问题。</p>
<h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><h2 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h2><h2 id="简单实现"><a href="#简单实现" class="headerlink" title="简单实现"></a>简单实现</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Strategy</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Strategy()</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">virtual</span> ~Strategy()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;__FUNCTION__&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">AlgrithmInterface</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StrategyA</span> :</span> <span class="keyword">public</span> Strategy</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    StrategyA()</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">virtual</span> ~StrategyA()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;__FUNCTION__&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">AlgrithmInterface</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"A "</span>&lt;&lt;__FUNCTION__&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StrategyB</span> :</span> <span class="keyword">public</span> Strategy</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    StrategyB()</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">virtual</span> ~StrategyB()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;__FUNCTION__&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">AlgrithmInterface</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"B "</span>&lt;&lt;__FUNCTION__&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Context</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Context(Strategy *stg)</span><br><span class="line">    &#123;</span><br><span class="line">        SetStg(stg);</span><br><span class="line">    &#125;</span><br><span class="line">    ~Context()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(m_pStg != <span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">delete</span> m_pStg;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">DoAction</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(m_pStg != <span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            m_pStg-&gt;AlgrithmInterface();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">SetStg</span><span class="params">(Strategy *stg)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(m_pStg != <span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">delete</span> m_pStg;</span><br><span class="line">            m_pStg = <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        m_pStg = stg;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Strategy *m_pStg;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Context *pc = <span class="keyword">new</span> Context(<span class="keyword">new</span> StrategyA());</span><br><span class="line">    pc-&gt;DoAction();</span><br><span class="line">    pc-&gt;SetStg(<span class="keyword">new</span> StrategyB());</span><br><span class="line">    pc-&gt;DoAction();</span><br><span class="line">    <span class="keyword">if</span>(pc != <span class="literal">nullptr</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">delete</span> pc;</span><br><span class="line">        pc = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ol>
<li>设计模式之禅</li>
<li>GoF+23种设计模式解析</li>
</ol>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式探秘-11-中介者模式</title>
    <url>/2017/08/31/design-pattern-11-mediator/</url>
    <content><![CDATA[<p>中介者模式的学习与实践</p>
<h1 id="中介者模式"><a href="#中介者模式" class="headerlink" title="中介者模式"></a>中介者模式</h1><p>中介者模式：用一个中介对象封装一系列的对象交互，中介者使各对象不需要显示地相互作用，从而使其耦合松散可以独立地改变它们之间的交互。</p>
<h2 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h2><p><img src="https://www.plantuml.com/plantuml/svg/ZPBBJi9058RtynJp0YM1fGj2ujg7Q614aWgcb9MQD09AbPitI1hHD8P8I4IynGAjF8mpqs7LLt1qjCWjSJF9EUUVy_tdpCIocgngkMq5n1KvcuKRA96IjOmATy4-I6Sq1DLKSajRW_JOPOyMjk_nw8JfHNPtnemdqZFnmF16DzZMFRD0gsrIk_MTidVHmSCggHU4RD9ycUWc7biV-W7u0Qrdqd4LQMWHgA1DpYF5D-oUp_5uQrAfiNwUjyPszzV4jLVjypnshvXLnlQGo_1xYxqs_ifcs8g2ad8EpKE54eekf7J8Jzfga-O3z-4xPZW4sL6Nr4w504P2K71eOq2VBtsdHCR5YJKIoS0xDIeixv9UcPRglcFCRo1m4_wsiweQ4TM5lKcv7Mal6ZmSc0udIJFf1PhqTI-8mHBY2iMKBKMNZF5FNGJ4K3h1lzud"></p>
<h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><p>减少类间的依赖，将原有的一对多的依赖变成一对一的依赖。降低类间的耦合。</p>
<h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><p>中介者会膨胀的很大，而且逻辑复杂，原先对象直接的依赖关系转换为中介者和同事类的依赖关系，同事类越多，中介者的逻辑就越复杂。</p>
<h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>类图中出现了蜘蛛网状结构，使用中介者模式将蜘蛛网梳理为星形结构，使混乱的关系变得清晰简单。</p>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><h2 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h2><h2 id="简单实现"><a href="#简单实现" class="headerlink" title="简单实现"></a>简单实现</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//中介者模式</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mediator</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Colleage</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ~Colleage() &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Action</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">SetState</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span> &amp;sdt)</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="built_in">string</span> <span class="title">GetState</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    Colleage() &#123;&#125;</span><br><span class="line">    Colleage(Mediator *mdt)</span><br><span class="line">    &#123;</span><br><span class="line">        m_pMdt = mdt;</span><br><span class="line">    &#125;</span><br><span class="line">    Mediator *m_pMdt;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mediator</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">virtual</span> ~Mediator() &#123;&#125;;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">ActionA</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">ActionB</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    Mediator() &#123;&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteMediator</span> :</span> <span class="keyword">public</span> Mediator</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ConcreteMediator() &#123;&#125;</span><br><span class="line">    ConcreteMediator(Colleage *clgA, Colleage *clgB)</span><br><span class="line">    &#123;</span><br><span class="line">        m_pClgA = clgA;</span><br><span class="line">        m_pClgB = clgB;</span><br><span class="line">    &#125;</span><br><span class="line">    ~ConcreteMediator() &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">SetConcreteColleageA</span><span class="params">(Colleage *clgA)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        m_pClgA = clgA;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">SetConcreteColleageB</span><span class="params">(Colleage *clgB)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        m_pClgB = clgB;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Colleage *<span class="title">GetConcreteColleageA</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m_pClgA;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Colleage *<span class="title">GetConcreteColleageB</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m_pClgB;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">IntroColleage</span><span class="params">(Colleage *clgA, Colleage *clgB)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        m_pClgA = clgA;</span><br><span class="line">        m_pClgB = clgB;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">ActionA</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;__FUNCTION__&lt;&lt;<span class="string">" A "</span>&lt;&lt;m_pClgA-&gt;GetState()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">ActionB</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;__FUNCTION__&lt;&lt;<span class="string">" B "</span>&lt;&lt;m_pClgB-&gt;GetState()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Colleage * m_pClgA;</span><br><span class="line">    Colleage * m_pClgB;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteColleageA</span> :</span> <span class="keyword">public</span> Colleage</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ConcreteColleageA() &#123;&#125;</span><br><span class="line">    ConcreteColleageA(Mediator *mdt) : Colleage(mdt)</span><br><span class="line">    &#123;</span><br><span class="line">        ;</span><br><span class="line">    &#125;</span><br><span class="line">    ~ConcreteColleageA() &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Action</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        m_pMdt-&gt;ActionB();</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"state of ConcreteColleageA:"</span>&lt;&lt;GetState()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">SetState</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp; sdt)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        m_sSdt = sdt;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">GetState</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m_sSdt;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">string</span> m_sSdt;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteColleageB</span> :</span> <span class="keyword">public</span> Colleage</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ConcreteColleageB() &#123;&#125;</span><br><span class="line">    ConcreteColleageB(Mediator *mdt) : Colleage(mdt)</span><br><span class="line">    &#123;</span><br><span class="line">        ;</span><br><span class="line">    &#125;</span><br><span class="line">    ~ConcreteColleageB() &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Action</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        m_pMdt-&gt;ActionA();</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"state of ConcreteColleageB:"</span>&lt;&lt;GetState()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">SetState</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp; sdt)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        m_sSdt = sdt;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">GetState</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m_sSdt;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">string</span> m_sSdt;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ConcreteMediator *m = <span class="keyword">new</span> ConcreteMediator();</span><br><span class="line"></span><br><span class="line">    ConcreteColleageA *ca = <span class="keyword">new</span> ConcreteColleageA(m);</span><br><span class="line">    ConcreteColleageB *cb = <span class="keyword">new</span> ConcreteColleageB(m);</span><br><span class="line"></span><br><span class="line">    m-&gt;IntroColleage(ca, cb);</span><br><span class="line">    m-&gt;ActionA();</span><br><span class="line"></span><br><span class="line">    ca-&gt;SetState(<span class="string">"a"</span>);</span><br><span class="line">    cb-&gt;SetState(<span class="string">"b"</span>);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ca-&gt;GetState()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;cb-&gt;GetState()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    ca-&gt;Action();</span><br><span class="line">    cb-&gt;Action();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ol>
<li>设计模式之禅</li>
<li>GoF+23种设计模式解析</li>
</ol>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式探秘-18-组合模式</title>
    <url>/2017/09/05/design-pattern-18-composite/</url>
    <content><![CDATA[<p>组合模式的学习与实践</p>
<h1 id="组合模式"><a href="#组合模式" class="headerlink" title="组合模式"></a>组合模式</h1><p>组合模式：将对象组合成树形结构以表示“部分-整体”的层次结构，使得用户对单个对象和组合对象的使用具有一致性。</p>
<h2 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h2><p><img src="https://www.plantuml.com/plantuml/svg/SoWkIImgAStDuKhEIImkLd3EoKpDAr6evghbWedavnRavq445O10sxyWjIYn93C_JqCJeSedDJ4DGrTnPaagJ9TZIef6G69HOcvgIMfHZXNSL4s8T51gRdvPAZuLxgabpXcPEIaQcI2XMYwmZRgb1RerTWWtSY7inIUbcuyi3l6ohYwoOeVKl1HWg000"></p>
<ol>
<li>Component 抽象构件角色 定义参加组合对象的公有方法和属性，可以定义一些默认的行为和属性</li>
<li>Leaf 叶子构件 叶子对象，其下不再有分支，遍历的最小单位</li>
<li>Composite 树枝构建 组合树枝节点和叶子节点形成树形结构</li>
</ol>
<h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ol>
<li>高层模块调用简单</li>
<li>节点自由添加</li>
</ol>
<h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><p>直接使用实现类，在面向接口编程上很不恰当，与依赖倒置原则冲突。</p>
<h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ol>
<li>维护和展示部分——整体关系的场景</li>
<li>从一个整体中能够独立出部分模块或功能的场景</li>
</ol>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>只要是树形结构就可以考虑组合模式，只要是要体现局部和整体的关系，而关系比较深，考虑组合模式。</p>
<h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><ol>
<li>组合模式实现 透明模式 具体操作在抽象类中定义实现</li>
<li>组合模式实现 安全模式 具体操作在具体类中定义实现</li>
</ol>
<h2 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h2><h2 id="简单实现"><a href="#简单实现" class="headerlink" title="简单实现"></a>简单实现</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Component</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Component()</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">virtual</span> ~Component()</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Operation</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Add</span><span class="params">(<span class="keyword">const</span> Component *com)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Remove</span><span class="params">(<span class="keyword">const</span> Component *com)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> Component* <span class="title">GetChild</span><span class="params">(<span class="keyword">int</span>)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Componsite</span> :</span> <span class="keyword">public</span> Component     <span class="comment">//中间节点，可添加子节点</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Componsite()</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    ~Componsite()</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Operation</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> it : m_vCom)</span><br><span class="line">        &#123;</span><br><span class="line">            it-&gt;Operation();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Add</span><span class="params">(Component *com)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        m_vCom.push_back(com);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Remove</span><span class="params">(Component *com)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">auto</span> it = find(m_vCom.begin(), m_vCom.end(), com);</span><br><span class="line">        <span class="keyword">if</span>(it != m_vCom.end())</span><br><span class="line">        &#123;</span><br><span class="line">            m_vCom.erase(it);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Component* <span class="title">GetChild</span><span class="params">(<span class="keyword">int</span> index)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(index &gt;= m_vCom.size())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> m_vCom[index];</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;Component*&gt; m_vCom;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Leaf</span> :</span> <span class="keyword">public</span> Component       <span class="comment">//叶子节点，不可添加子节点</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Leaf()</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    ~Leaf()</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Operation</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"Leaf "</span>&lt;&lt;__FUNCTION__&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Leaf *l = <span class="keyword">new</span> Leaf();</span><br><span class="line">    l-&gt;Operation();</span><br><span class="line">    Componsite *com = <span class="keyword">new</span> Componsite();</span><br><span class="line">    com-&gt;Add(l);</span><br><span class="line">    com-&gt;Operation();</span><br><span class="line">    Component *ll = com-&gt;GetChild(<span class="number">0</span>);</span><br><span class="line">    ll-&gt;Operation();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ol>
<li>设计模式之禅</li>
<li>GoF+23种设计模式解析</li>
</ol>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式探秘-21-备忘录模式</title>
    <url>/2017/09/07/design-pattern-21-memento/</url>
    <content><![CDATA[<p>备忘录模式的学习与实践</p>
<h1 id="模式定义"><a href="#模式定义" class="headerlink" title="模式定义"></a>模式定义</h1><p>在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。这样以后就可将该对象恢复到原先保存的状态。</p>
<h2 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h2><p><img src="https://www.plantuml.com/plantuml/svg/SoWkIImgAStDuKhEIImkLl0loapFp4iioIzIgEPI00BjuDGItzJSrBoIV8rSAoXB4oBbN9IQM98AazNagkM2cW8LWXdXdbeIN09KgQ49DnB6XsjnJYnABKdCJWNP2nH4SeSka9bHeci7CvKBPhfkJcfQYMu-GYkNGsfU2j0l0000"></p>
<ol>
<li>Originator 发起人角色 记录当前时刻的内部状态，负责定义哪些属于备份范围的状态，负责创建和恢复备忘录数据。</li>
<li>Memento 备忘录角色 负责存储Originator发起人对象的内部状态，在需要的时候提供发起人需要的内部状态。</li>
<li>Caretaker 备忘录管理员角色 对备忘录进行管理、保存和提供备忘录。</li>
</ol>
<h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ol>
<li>需要保存和回数数据的相关状态场景。</li>
<li>提供一个可回滚的操作。</li>
<li>需要监控的副本场景中。</li>
<li>数据库连接的事物管理。</li>
</ol>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol>
<li>备忘录的生命期。</li>
<li>备忘录的性能。</li>
</ol>
<h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><ol>
<li>clone方式的备忘录</li>
<li>多状态的备忘录</li>
<li>多备份的备忘录</li>
<li>封装性更好的备忘录</li>
</ol>
<h2 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h2><h2 id="简单实现"><a href="#简单实现" class="headerlink" title="简单实现"></a>简单实现</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">string</span> State;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Originator</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Memento</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">Originator</span>;</span></span><br><span class="line"></span><br><span class="line">    Memento();</span><br><span class="line">    Memento(<span class="keyword">const</span> State &amp;sdt);</span><br><span class="line">    ~Memento()</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">SetState</span><span class="params">(<span class="keyword">const</span> State &amp;sdt)</span></span>;</span><br><span class="line">    <span class="function">State <span class="title">GetState</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    State m_sSdt;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Memento::Memento()</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Memento::Memento(<span class="keyword">const</span> State &amp;sdt)</span><br><span class="line">&#123;</span><br><span class="line">    m_sSdt = sdt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">State <span class="title">Memento::GetState</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> m_sSdt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Memento::SetState</span><span class="params">(<span class="keyword">const</span> State &amp;sdt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    m_sSdt = sdt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Originator</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Originator()</span><br><span class="line">    &#123;</span><br><span class="line">        m_sSdt = <span class="string">""</span>;</span><br><span class="line">        m_pMt = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Originator(<span class="keyword">const</span> State &amp;sdt)</span><br><span class="line">    &#123;</span><br><span class="line">        m_sSdt = sdt;</span><br><span class="line">        m_pMt = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ~Originator()</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Memento *<span class="title">CreateMemento</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Memento(m_sSdt);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">RestoreToMemento</span><span class="params">(Memento *mt)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        m_sSdt = mt-&gt;GetState();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">State <span class="title">GetState</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m_sSdt;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">SetState</span><span class="params">(<span class="keyword">const</span> State &amp;sdt)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        m_sSdt = sdt;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">PrintState</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"Originator "</span>&lt;&lt;__FUNCTION__&lt;&lt;<span class="string">" "</span>&lt;&lt;m_sSdt&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    State m_sSdt;</span><br><span class="line">    Memento *m_pMt;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Originator *o = <span class="keyword">new</span> Originator();</span><br><span class="line">    o-&gt;SetState(<span class="string">"old"</span>);</span><br><span class="line">    o-&gt;PrintState();</span><br><span class="line">    Memento *m = o-&gt;CreateMemento();</span><br><span class="line">    o-&gt;SetState(<span class="string">"new"</span>);</span><br><span class="line">    o-&gt;PrintState();</span><br><span class="line">    o-&gt;RestoreToMemento(m);</span><br><span class="line">    o-&gt;PrintState();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ol>
<li>设计模式之禅</li>
<li>GoF+23种设计模式解析</li>
</ol>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式探秘-17-迭代器模式</title>
    <url>/2017/09/05/design-pattern-17-iterator/</url>
    <content><![CDATA[<p>迭代器模式的学习与实践</p>
<h1 id="迭代器模式"><a href="#迭代器模式" class="headerlink" title="迭代器模式"></a>迭代器模式</h1><p>迭代器模式：提供一种方法访问一个容器对象中各个元素，而又不需暴露该对象的内部细节。</p>
<h2 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h2><p><img src="https://www.plantuml.com/plantuml/svg/RP3T2i8m38NlynIzLAHxX3Af2Bln7SeCTR2racOmKD_T8EiSjBdA8UVBNvlO4S_J2FteKb9dxmczOrGlK18dIoYgOoJ7aGv7-C1gjJ7qX8nxP2jc8BUv3fHOw9-uuRBbNRh4W5dPcGW32ptLHkswIgrSGCzF_JR_8w00LqVM5GCD_i7QbETLvZMDANQ35iDT7le5"></p>
<ol>
<li>Iterator 抽象迭代器 抽象迭代器负责定义访问和遍历元素的接口</li>
<li>ConcreteIterator 具体迭代器 实现迭代器接口，完成容器元素的遍历</li>
<li>Aggregate 抽象容器 负责提供具体迭代器角色的接口</li>
<li>ConcreteAggregate 具体容器 具体容器实现容器接口定义的方法，创建出容纳迭代器的对象</li>
</ol>
<h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><h2 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h2><h2 id="简单实现"><a href="#简单实现" class="headerlink" title="简单实现"></a>简单实现</h2><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ol>
<li>设计模式之禅</li>
<li>GoF+23种设计模式解析</li>
</ol>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式探秘-24-解释器模式</title>
    <url>/2017/09/07/design-pattern-24-interpreter/</url>
    <content><![CDATA[<p>解释器模式的学习与实践</p>
<h1 id="模式定义"><a href="#模式定义" class="headerlink" title="模式定义"></a>模式定义</h1><p>给定一门语言，定义其文法的一种表示，并定义一个解释器，该解释器使用该表示来解释语言中的句子。</p>
<h2 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h2><p><img src="https://www.plantuml.com/plantuml/svg/SoWkIImgAStDuKhEIImkLd3EoKpDAr6evghbWedavvMaLg08EIOLbnGb9gUwLXGKfHONP-Rd0MKLW43R4wYs22XOeg69K1wIMfIRcPUOWw8SBki7CX-x0YmQTKiBT6liiBY02xivkDL3VQfRb9cUKQABLqbEQXf81JGaSDc4tGo7rBmKOF020000"></p>
<ol>
<li>AbstraceExpression 抽象解释器 具体的解释任务由各个实现类完成，TerminalExpression和NonterminalExpression完成具体解释器</li>
<li>TerminalExpression 终结符表达式 实现与文法中的元素相关联的解释操作，通常一个解释器模式中只有一个终结符表达式，但由多个实例，对应不同终结符。</li>
<li>NonterminalExpression 非终结符表达式 文法中的每条规则对应于一个非终结表达式。</li>
<li>Context 环境角色</li>
</ol>
<p>解释器是一个比较少用的模式。</p>
<h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><p>解释器是简单语法分析工具，最显著的优点是扩展性，修改语法规则只要修改相应的非终结符表达式，若扩展语法，则只要增加非终结符类即可。</p>
<h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ol>
<li>解释器模式会引起类膨胀</li>
<li>解释器模式采用递归调用方法</li>
<li>效率问题</li>
</ol>
<h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ol>
<li>重复发生的问题可以使用解释器模式</li>
<li>一个简单语法需要解释的场景</li>
</ol>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>在重要模块尽量不要使用解释器模式，否则维护会比较麻烦。</p>
<h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><h2 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h2><h2 id="简单实现"><a href="#简单实现" class="headerlink" title="简单实现"></a>简单实现</h2><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ol>
<li>设计模式之禅</li>
<li>GoF+23种设计模式解析</li>
</ol>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式探秘-19-观察者模式</title>
    <url>/2017/09/06/design-pattern-19-observer/</url>
    <content><![CDATA[<p>观察者模式的学习与实践，观察者模式是软件开发过程中必须掌握和使用的模式之一。</p>
<h1 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h1><p>观察者模式（发布订阅模式）：定义对象间一种一对多的依赖关系，使得每当一个对象改变状态，则所有依赖于它的对象都会得到通知并被自动更新。</p>
<h2 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h2><p><img src="https://www.plantuml.com/plantuml/svg/SoWkIImgAStDuKhEIImkLWWkJSfAJIvHgEPI009jnvAInEGCZNmh_wJYrAAor29DYBXBAdPnl_oIpBHA3KskMYweWJ05C1D32r8IIrAHLJZdvoKNfPQa8gp6a48o12Y7ha6tj42tnWxcT2uCJL1v69yBhayNIT0XDIy560m0"></p>
<ol>
<li>Subject 被观察者 定义被观察者必须实现的职责，必须能能够动态地增加、删除观察者。一般是抽象类或者是实现类，仅仅完成作为被观察者必须实现的职责：管理观察者并通知观察者。</li>
<li>Observer 观察者 观察者接收到消息后，即进行update（更新方法）操作，对接收到的信息进行处理。</li>
<li>ConcreteSubject 具体的被观察者 定义被观察者自己的业务逻辑，同时定义对哪些事件进行通知。</li>
<li>ConcreteObserver 具体的观察者 每个观察者在接收到信息后的处理反应是不同的，各个观察者有自己的处理流程。</li>
</ol>
<h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ol>
<li>观察者和被观察者之间是抽象耦合，增加观察者和被观察者非常容易扩展。</li>
<li>建立一套触发机制。</li>
</ol>
<h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><p>开发效率和运行效率问题。</p>
<h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ol>
<li>关联行为场景。关联行为是可拆分的，而不是“组合”关系。</li>
<li>事件多级触发场景。</li>
<li>跨系统的消息交换场景。</li>
</ol>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol>
<li>广播链的问题。建议一个观察者模式中最多出现一个对象既是观察者也是被观察者。</li>
<li>异步处理问题。</li>
</ol>
<h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><h2 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h2><h2 id="简单实现"><a href="#简单实现" class="headerlink" title="简单实现"></a>简单实现</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">string</span> State;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Observer</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Subject</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">virtual</span> ~Subject()</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Attach</span><span class="params">(Observer *obv)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        m_lObvs.push_front(obv);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Detach</span><span class="params">(Observer *obv)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(obv != <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            m_lObvs.remove(obv);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Notify</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">SetState</span><span class="params">(<span class="keyword">const</span> State &amp;st)</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> State <span class="title">GetState</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    Subject()</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">list</span>&lt;Observer *&gt; m_lObvs;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteSubject</span> :</span> <span class="keyword">public</span> Subject</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ConcreteSubject()</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    ~ConcreteSubject()</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">State <span class="title">GetState</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m_sSt;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">SetState</span><span class="params">(<span class="keyword">const</span> State&amp; st)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        m_sSt = st;</span><br><span class="line">        Notify();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    State m_sSt;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Observer</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">virtual</span> ~Observer()</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Update</span><span class="params">(Subject *sub)</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">PrintInfo</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    Observer()</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    State m_sSt;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteObserverA</span> :</span> <span class="keyword">public</span> Observer</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> Subject *<span class="title">GetSubject</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m_pSub;</span><br><span class="line">    &#125;</span><br><span class="line">    ConcreteObserverA(Subject *sub)</span><br><span class="line">    &#123;</span><br><span class="line">        m_pSub = sub;</span><br><span class="line">        m_pSub-&gt;Attach(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">virtual</span> ~ConcreteObserverA()</span><br><span class="line">    &#123;</span><br><span class="line">        m_pSub-&gt;Detach(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span><span class="params">(Subject *sub)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        m_sSt = m_pSub-&gt;GetState();</span><br><span class="line">        PrintInfo();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">PrintInfo</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"A  "</span>&lt;&lt;m_pSub-&gt;GetState()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Subject *m_pSub;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteObserverB</span> :</span> <span class="keyword">public</span> Observer</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> Subject *<span class="title">GetSubject</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m_pSub;</span><br><span class="line">    &#125;</span><br><span class="line">    ConcreteObserverB(Subject *sub)</span><br><span class="line">    &#123;</span><br><span class="line">        m_pSub = sub;</span><br><span class="line">        m_pSub-&gt;Attach(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">virtual</span> ~ConcreteObserverB()</span><br><span class="line">    &#123;</span><br><span class="line">        m_pSub-&gt;Detach(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span><span class="params">(Subject *sub)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        m_sSt = m_pSub-&gt;GetState();</span><br><span class="line">        PrintInfo();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">PrintInfo</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"B  "</span>&lt;&lt;m_pSub-&gt;GetState()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Subject *m_pSub;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Subject::Notify</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> pObv : m_lObvs)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(pObv != <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            pObv-&gt;Update(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ConcreteSubject *sub = <span class="keyword">new</span> ConcreteSubject();</span><br><span class="line">    Observer *o1 = <span class="keyword">new</span> ConcreteObserverA(sub);</span><br><span class="line">    sub-&gt;SetState(<span class="string">"state1"</span>);</span><br><span class="line">    Observer *o2 = <span class="keyword">new</span> ConcreteObserverB(sub);</span><br><span class="line">    sub-&gt;SetState(<span class="string">"state2"</span>);</span><br><span class="line">    sub-&gt;SetState(<span class="string">"state3"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">delete</span> o1;</span><br><span class="line">    <span class="keyword">delete</span> o2;</span><br><span class="line">    <span class="keyword">delete</span> sub;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ol>
<li>设计模式之禅</li>
<li>GoF+23种设计模式解析</li>
</ol>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式探秘-22-访问者模式</title>
    <url>/2017/09/07/design-pattern-22-visitor/</url>
    <content><![CDATA[<p>访问者模式的学习与实践</p>
<h1 id="模式定义"><a href="#模式定义" class="headerlink" title="模式定义"></a>模式定义</h1><p>封装一些作用于某种数据结构中的各元素的操作，可以在不改变数据结构的前提下定义作用于这些元素的新的操作。</p>
<h2 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h2><p><img src="https://www.plantuml.com/plantuml/svg/PP2n3i8W48PtdeAnnl027KnDu-nWuexq1Wo51euwgE_kARJ5beNS_zzzFrmJK7gClM7Ao11uQpHOv4_sPbcvwg3HUP8udVslR9rL7YJ2oK1F_HNGNVErl5ieoK9OQBELcwU0er8mO3NMkNK3MVWbvNoxWy8B-eZHGtBMeI8EudMOViGskEpdakRJCeGePhBKkOSb-J-LhHxn7PnWSqO1Qy1sjFeF"></p>
<ol>
<li>Visitor 抽象访问者 抽象类或者接口，声明访问者可以访问的元素。具体到程序中即visit方法的参数定义哪些对象是可以被访问的。</li>
<li>ConcreteVisitor 具体访问者 影响访问者访问到一个类后该怎么干，要做什么事情。</li>
<li>Element 抽象元素 接口或者抽象类，声明接受哪一类访问者访问，程序上通过accept方法中的参数定义。</li>
<li>ConcreateElement 具体元素 实现accept方法，通常是visitor.visit(this) 基本上形成了一个模式。</li>
<li>ObjectStruture 结构对象 元素产生者，一般容纳多个不同类、不同接口的容器。项目中很少抽象出该角色。</li>
</ol>
<h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ol>
<li>符合单一职责原则</li>
<li>优秀的扩展性</li>
<li>灵活性非常高</li>
</ol>
<h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ol>
<li>具体元素对访问者公布细节</li>
<li>具体元素变更比较困难</li>
<li>违背依赖倒置原则</li>
</ol>
<h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>业务规则要求遍历多个不同对象。</p>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><ol>
<li>统计功能</li>
<li>多个访问者</li>
</ol>
<h2 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h2><h2 id="简单实现"><a href="#简单实现" class="headerlink" title="简单实现"></a>简单实现</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//访问者模式</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteElementA</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteElementB</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Element</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Visitor</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">virtual</span> ~Visitor()</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">VisitConcreteElementA</span><span class="params">(Element *elm)</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">VisitConcreteElementB</span><span class="params">(Element *elm)</span> </span>= <span class="number">0</span>;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    Visitor()</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteVisitorA</span> :</span> <span class="keyword">public</span> Visitor</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ConcreteVisitorA()</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">virtual</span> ~ConcreteVisitorA()</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">VisitConcreteElementA</span><span class="params">(Element *elm)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;__FUNCTION__&lt;&lt;<span class="string">"  i will visit ConcreteElementA..."</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">VisitConcreteElementB</span><span class="params">(Element *elm)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;__FUNCTION__&lt;&lt;<span class="string">"  i will visit ConcreteElementB..."</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteVisitorB</span> :</span> <span class="keyword">public</span> Visitor</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ConcreteVisitorB()</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">virtual</span> ~ConcreteVisitorB()</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">VisitConcreteElementA</span><span class="params">(Element *elm)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;__FUNCTION__&lt;&lt;<span class="string">"  i will visit ConcreteElementA..."</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">VisitConcreteElementB</span><span class="params">(Element *elm)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;__FUNCTION__&lt;&lt;<span class="string">"  i will visit ConcreteElementB..."</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Element</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">virtual</span> ~Element()</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Accept</span><span class="params">(Visitor *vis)</span> </span>= <span class="number">0</span>;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    Element()</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteElementA</span> :</span> <span class="keyword">public</span> Element</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ConcreteElementA()</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    ~ConcreteElementA()</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Accept</span><span class="params">(Visitor *vis)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"visiting ConcreteElementA..."</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        vis-&gt;VisitConcreteElementA(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteElementB</span> :</span> <span class="keyword">public</span> Element</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ConcreteElementB()</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    ~ConcreteElementB()</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Accept</span><span class="params">(Visitor *vis)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"visiting ConcreteElementB..."</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        vis-&gt;VisitConcreteElementB(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Visitor *visa = <span class="keyword">new</span> ConcreteVisitorA();</span><br><span class="line">    Element *elma = <span class="keyword">new</span> ConcreteElementA();</span><br><span class="line">    elma-&gt;Accept(visa);</span><br><span class="line"></span><br><span class="line">    Visitor *visb = <span class="keyword">new</span> ConcreteVisitorB();</span><br><span class="line">    Element *elmb = <span class="keyword">new</span> ConcreteElementB();</span><br><span class="line">    elmb-&gt;Accept(visb);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ol>
<li>设计模式之禅</li>
<li>GoF+23种设计模式解析</li>
</ol>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式探秘-20-门面模式（外观）</title>
    <url>/2017/09/06/design-pattern-20-facade/</url>
    <content><![CDATA[<p>门面模式的学习与实践</p>
<h1 id="门面模式（外观模式）"><a href="#门面模式（外观模式）" class="headerlink" title="门面模式（外观模式）"></a>门面模式（外观模式）</h1><p>要求一个子系统的外部与其内部的通信必须通过一个统一的对象进行。门面模式提供一个高层次的接口，使得子系统更易于使用。</p>
<h2 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h2><p><img src="https://www.plantuml.com/plantuml/svg/SoWkIImgAStDuKhEIImkLd1BJ4vCILMevghbWee4boOLLnQNfEOwWxYfnM0v1I20AjNLjSDGm-MGcfS2D1G0"></p>
<ol>
<li>Facade 门面角色 客户端调用该角色的方法，该角色知晓子系统的所有功能和责任。该角色将所有从客户端发来的请求委派到相应的子系统，即该角色没有实际的业务逻辑，只是一个委托类。</li>
<li>SubsystemClasses 子系统角色，可以同时存在一个或多个子系统，每个子系统都不是一个单独的类，而是一个类的集合。子系统并不知道门面的存在，对于子系统，门面仅仅是另一个客户端而已。</li>
</ol>
<h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ol>
<li>减少系统的相互依赖</li>
<li>提高灵活性</li>
<li>提高安全性</li>
</ol>
<h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><p>不符合开闭原则，门面角色一旦出现问题，遵从开闭原则，没有好的解决方法，只能修改门面角色的代码。</p>
<h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ol>
<li>为法则的模块或子系统提供一个供外界访问的接口。</li>
<li>子系统相对独立，外界对子系统的访问只是黑箱操作而已。</li>
<li>预防低水平人员带来的风险扩散。</li>
</ol>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol>
<li>一个子系统可以有多个门面<ol>
<li>门面过于庞大</li>
<li>子系统可以提供不同访问路径</li>
</ol>
</li>
<li>门面不参与子系统内的业务逻辑</li>
</ol>
<h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><h2 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h2><p>门面模式是很好的封装方法，一个子系统比较复杂时可以封装出一个或多个门面出来，项目结构简单，而且扩展性好。</p>
<h2 id="简单实现"><a href="#简单实现" class="headerlink" title="简单实现"></a>简单实现</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Subsystem1</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Subsystem1()</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    ~Subsystem1()</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Operation</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"Subsystem1 "</span>&lt;&lt;__FUNCTION__&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Subsystem2</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Subsystem2()</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    ~Subsystem2()</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Operation</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"Subsystem2 "</span>&lt;&lt;__FUNCTION__&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Facade</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Facade()</span><br><span class="line">    &#123;</span><br><span class="line">        m_pSub1 = <span class="keyword">new</span> Subsystem1();</span><br><span class="line">        m_pSub2 = <span class="keyword">new</span> Subsystem2();</span><br><span class="line">    &#125;</span><br><span class="line">    ~Facade()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">delete</span> m_pSub1;</span><br><span class="line">        <span class="keyword">delete</span> m_pSub2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Operation</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"Facade "</span>&lt;&lt;__FUNCTION__&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        m_pSub1-&gt;Operation();</span><br><span class="line">        m_pSub2-&gt;Operation();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Subsystem1 *m_pSub1;</span><br><span class="line">    Subsystem2 *m_pSub2;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Facade fac;</span><br><span class="line">    fac.Operation();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ol>
<li>设计模式之禅</li>
<li>GoF+23种设计模式解析</li>
</ol>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式探秘-16-适配器模式</title>
    <url>/2017/09/04/design-pattern-16-adapter/</url>
    <content><![CDATA[<p>适配器模式的学习与实践</p>
<h1 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h1><p>适配器模式：将一个类的接口变换成客户端所期待的另一种接口，使原本因接口不匹配而无法在一起工作的两个类能够在一起工作。</p>
<h2 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h2><p><img src="https://www.plantuml.com/plantuml/svg/SoWkIImgAStDuKhEIImkLd3EoKpDAr6evghbWeg491Qbfu945810EoYri3Irk4H3qweiFpC5eSen9R6W9BK8MID4A1McCxWWDJapBJCPqmIedRgwTb3Bk62cwPOMwDPWYkQaffM0nA4sS3cavgK0lG00"></p>
<ol>
<li>Target 目标角色，该角色定义把其他类转换为何种接口</li>
<li>Adaptee 源角色</li>
<li>Adapter适配器角色 适配器模式的核心角色，Target和Adaptee是已存在的角色，而Adapter是需要新建立的，职责是通过继承或者类关联的方式把源角色转化为目标角色。</li>
</ol>
<h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ol>
<li>可以把两个没有任何关系的类在一起运行</li>
<li>增加类的透明性</li>
<li>提高类的复用性</li>
<li>灵活性非常好</li>
</ol>
<h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>当需要修改一个已经使用的接口的时候</p>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>适配器模式不是为了解决开发阶段的问题，而是解决正在使用的项目问题。其主要使用场景是扩展应用中。</p>
<h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><p>对象适配器是对象的合成关系（或关联关系）。类适配器是类间关系。</p>
<h2 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h2><h2 id="简单实现"><a href="#简单实现" class="headerlink" title="简单实现"></a>简单实现</h2><p><code>cpp</code></p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ol>
<li>设计模式之禅</li>
<li>GoF+23种设计模式解析</li>
</ol>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式探秘-26-桥梁模式</title>
    <url>/2017/09/08/design-pattern-26-bridge/</url>
    <content><![CDATA[<p>桥梁模式的学习与实践</p>
<h1 id="模式定义"><a href="#模式定义" class="headerlink" title="模式定义"></a>模式定义</h1><p>桥梁模式也叫桥接模式，其定义：将抽象和实现解耦，使得两者可以独立地变化。</p>
<h2 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h2><p><img src="https://www.plantuml.com/plantuml/svg/SoWkIImgAStDuKhEIImkLd1CAYufIamkoSpFKwZcKW02RV-2rA94a8269bSj5rHTK6fQPbvg2Zxbdha5o3g0t9pKtDIyalmYe5Aui7D-Nd9HQaagXZGM6tHB2tHhx93To8LDErGPaX0NiYbQkaMPwHabkYWkibBGpimju798pKi11WO0"></p>
<ol>
<li>Abstraction 抽象化角色 主要职责是定义该角色的行为，同时保存一个对实现化角色的引用，该角色是一般为抽象类。</li>
<li>Implementor 实现化角色 接口或者抽象类，定义角色必须的行为和属性。</li>
<li>RefinedAbstraction 修正抽象化角色 引用实现化角色对抽象化角色进行修正。</li>
<li>ConcreteImplementor 具体具现化角色 实现接口或者抽象类定义的方法和属性。</li>
</ol>
<p>抽象角色引用实现角色，或者说抽象角色的部分实现是由实现角色完成的。<br>桥梁模式使用类间的聚合关系、继承、覆写等常用功能提供了非常清晰、稳定的架构。</p>
<h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ol>
<li>抽象和实现分离 完全是为了解决继承的缺点而提出的设计模式。该模式下实现可以不受抽象的约束，不用再绑定在一个固定的抽象层次上。</li>
<li>优秀的扩充能力。</li>
<li>实现细节对用户透明 客户不关心细节的实现，已经由抽象层通过聚合关系完成了封装。</li>
</ol>
<h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ol>
<li>不希望或不适用使用继承的场景</li>
<li>接口或抽象类不稳定的场景</li>
<li>重用性要求高的场景</li>
</ol>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>使用桥梁模式主要考虑如何拆分抽象和实现，并不是一涉及继承就要考虑使用该模式，桥梁模式的意图还是对变化的封装，尽量把可能变化的因素封装到最细、最小的逻辑单元中，避免风险扩散。当系统设计时发现类的继承有N层时，可以考虑使用桥梁模式。</p>
<h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><h2 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h2><p>Bridge是设计模式中比较复杂和难理解的模式之一，在ＯＯ开发中经常会使用到．使用组合（委托）的方式将抽象和实现彻底地解耦，抽象和实现分别独立的变化，系统的耦合性得到了下降。  　　<br>桥梁模式要抽象和实现分离，这里的实现不是指抽象基类中虚函数（接口）的实现，而是指如何去实现用户的需求，通过组合（委托）方式去实现，并不是指通过继承基类、实现基类接口，而是指通过对象组合实现用户的需求。</p>
<h2 id="简单实现"><a href="#简单实现" class="headerlink" title="简单实现"></a>简单实现</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//桥梁模式</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AbstractionImp</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Abstraction</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">virtual</span> ~Abstraction() &#123;&#125;;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Operation</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    Abstraction() &#123;&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AbstractionImp</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">virtual</span> ~AbstractionImp() &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Operation</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    AbstractionImp() &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AbstractionImp::Operation</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"IMP"</span>&lt;&lt;__FUNCTION__&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RefinedAbstraction</span> :</span> <span class="keyword">public</span> Abstraction</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    RefinedAbstraction(AbstractionImp *imp)</span><br><span class="line">    &#123;</span><br><span class="line">        m_pImp = imp;</span><br><span class="line">    &#125;</span><br><span class="line">    ~RefinedAbstraction() &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Operation</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        m_pImp-&gt;Operation();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    AbstractionImp *m_pImp;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteAbstractionImpA</span> :</span> <span class="keyword">public</span> AbstractionImp</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ConcreteAbstractionImpA() &#123;&#125;</span><br><span class="line">    ~ConcreteAbstractionImpA() &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Operation</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"A"</span>&lt;&lt;__FUNCTION__&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteAbstractionImpB</span> :</span> <span class="keyword">public</span> AbstractionImp</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ConcreteAbstractionImpB() &#123;&#125;</span><br><span class="line">    ~ConcreteAbstractionImpB() &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Operation</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"B"</span>&lt;&lt;__FUNCTION__&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    AbstractionImp *impa = <span class="keyword">new</span> ConcreteAbstractionImpA();</span><br><span class="line">    Abstraction *absa = <span class="keyword">new</span> RefinedAbstraction(impa);</span><br><span class="line">    absa-&gt;Operation();</span><br><span class="line"></span><br><span class="line">    AbstractionImp *impb = <span class="keyword">new</span> ConcreteAbstractionImpB();</span><br><span class="line">    Abstraction *absb = <span class="keyword">new</span> RefinedAbstraction(impb);</span><br><span class="line">    absb-&gt;Operation();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ol>
<li>设计模式之禅</li>
<li>GoF+23种设计模式解析</li>
</ol>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux I/O 阻塞、非阻塞、同步、异步的理解</title>
    <url>/2017/09/18/io-1/</url>
    <content><![CDATA[<p>Linux I/O 阻塞、非阻塞、同步、异步的理解</p>
<p>在进行网络编程时，常见到<strong>同步、异步、阻塞、非阻塞</strong>四种调用方式。<br>同步、异步关注的时<strong>消息通信机制</strong>。</p>
<ol>
<li>同步：发出一个调用时，在没有得到结果时，该调用不返回，一旦调用返回，就得到返回值。</li>
<li>异步：调用发出后，该调用直接返回，没有返回结果，被调用者通过状态、通知来通知调用者，或通过回调函数处理该调用。</li>
</ol>
<p>阻塞、非阻塞关注的是<strong>等待调用结果（消息、返回值）的状态</strong>。</p>
<ol>
<li>阻塞：调用结果返回之前，当前线程会被挂起，调用线程只有在得到结果之后才返回。</li>
<li>非阻塞：调用不能立即得到结果之前，该调用不会阻塞当前线程。</li>
</ol>
<p>在处理IO的时候，<strong>阻塞和非阻塞都是同步IO</strong>。只有特殊的API才是异步IO。<br>对于unix而言：<strong>阻塞式I/O（默认）、非阻塞式I/O（nonblock）、I/O复用（select/poll/epoll）都属于同步I/O</strong>，因为在数据由内核空间复制回进程缓冲区时都是阻塞的。只有<strong>异步I/O模型（AIO）时符合异步I/O操作含义</strong>的，即在数据准备完成，由内核空间拷贝回缓冲区后通知进程的。</p>
<p>阻塞和非阻塞的区别：如果因为各种原因不能马上进行IO操作，继续等待则是阻塞IO，否则则为非阻塞IO。<br>同步和异步的区别：等待一次IO操作完成再返回则是同步，否则为异步。</p>
<p>阻塞式IO<br><img src="/Picture/阻塞式IO.png" alt></p>
<p>非阻塞式IO<br><img src="/Picture/非阻塞式IO.png" alt></p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式探秘-25-享元模式</title>
    <url>/2017/09/08/design-pattern-25-flyweight/</url>
    <content><![CDATA[<p>享元模式的学习与实践</p>
<h1 id="模式定义"><a href="#模式定义" class="headerlink" title="模式定义"></a>模式定义</h1><p>享元模式是池技术的重要实现方式，使用享元对象可有效支持大量的细粒度的对象。</p>
<p>享元模式的定义提出了两点要求：细粒度的对象和共享对象。<br>细粒度对象使得对象数量多且性质相近，将对象的信息分为两部分：内部状态和外部状态。</p>
<ol>
<li>内部状态是对象可共享出来的信息，存储在享元对象内部并且不会随环境改变而变化，可以作为对象的动态附加信息，不必直接储存在具体某个对象中，属于可以共享的部分。</li>
<li>外部状态是对象得以依赖的一个标记，随环境改变而变化、不可以共享的状态。</li>
</ol>
<h2 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h2><p><img src="https://www.plantuml.com/plantuml/svg/VP512iCW44NtSmgNAS4BT142WNJPCuYPD5AhGKUAjBrxKqXIKqbdf_yvyxzJUnAEmas3rC9xrkfuHtKPg1MIh8li0MogyeIqIiKLum5UyFjaOSyZEa7AcYAX6ckaGyAKNiLW_20STd-XHYiqyqqEyZ3oP_Kr0_izCpGBpJNsn6qIxSZAVZbucAry6bNPbstLRFnMtdK9DPfksiiR"></p>
<ol>
<li>Flyweight 抽象享元角色 简单来说就是产品的抽象类，同时定义出对象的内部状态和外部状态的接口或实现。</li>
<li>ConcreteFlyweight 具体享元角色 具体的产品类，实现抽象角色定义的业务，该角色中需要注意内部状态处理应该与环境无关，不应该出现一个操作改变了内部状态，又改变了外部状态。</li>
<li>unsharedConcreteFlyweight 不可共享的享元角色 不存在外部状态或者安全要求不能使用共享计数的对象。</li>
<li>FlyweightFactory 享元工厂 职责非常简单 就是构造一个池容器，同时提供从池中获得对象的方法。</li>
</ol>
<h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><p>大大减少应用程序创建的对象，降低程序内存的占用，增强程序性能。</p>
<h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><p>提高了系统复杂性，需要分离出外部状态和内部状态，而且外部状态具有固话特性，不应该随内部状态改变而改变，否则导致系统的逻辑混乱。</p>
<h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ol>
<li>系统中有大量的相似对象</li>
<li>细粒度的对象都具备较接近的外部状态，而且内部状态与环境无关，即对象没有特定身份</li>
<li>需要缓冲池的场景</li>
</ol>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol>
<li>线程安全问题</li>
<li>性能平衡</li>
</ol>
<h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><h2 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h2><p>对象池着重在系统的复用上，池中对象可相互替换，从同一池中获取的对象对于客户端来说完全相同。享元模式主要解决对象的共享问题，如何建立多个可共享的细粒度对象是其关注的重点。</p>
<h2 id="简单实现"><a href="#简单实现" class="headerlink" title="简单实现"></a>简单实现</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//享元模式</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flyweight</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">virtual</span> ~Flyweight()</span><br><span class="line">    &#123;</span><br><span class="line">        ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Operation</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span> &amp;extrinsicState)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">GetIntrinsicState</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m_sIntrinsicState;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    Flyweight(<span class="built_in">string</span> intrinsicState)</span><br><span class="line">    &#123;</span><br><span class="line">        m_sIntrinsicState = intrinsicState;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">string</span> m_sIntrinsicState;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteFlyweight</span> :</span> <span class="keyword">public</span> Flyweight</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ConcreteFlyweight(<span class="built_in">string</span> intrinsicState) : Flyweight(intrinsicState)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"ConcreteFlyweight Build ...."</span>&lt;&lt;intrinsicState&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ~ConcreteFlyweight()</span><br><span class="line">    &#123;</span><br><span class="line">        ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Operation</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span> &amp;extrinsicState)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"ConcreteFlyweight:内"</span>&lt;&lt;GetIntrinsicState()&lt;&lt;<span class="string">"外"</span>&lt;&lt;extrinsicState&lt;&lt;<span class="built_in">endl</span>;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FlyweightFactory</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    FlyweightFactory()</span><br><span class="line">    &#123;</span><br><span class="line">        ;</span><br><span class="line">    &#125;</span><br><span class="line">    ~FlyweightFactory()</span><br><span class="line">    &#123;</span><br><span class="line">        ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Flyweight *<span class="title">GetFlywgight</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span> &amp;key)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//auto it = m_vFly.begin();</span></span><br><span class="line">        <span class="comment">//for(; it!=m_vFly.end(); ++it)</span></span><br><span class="line">        <span class="comment">//&#123;</span></span><br><span class="line">            <span class="comment">//if((*it)-&gt;GetIntrinsicState() == key)</span></span><br><span class="line">            <span class="comment">//&#123;</span></span><br><span class="line">                <span class="comment">//cout&lt;&lt;"already creteed by users ..."&lt;&lt;key&lt;&lt;endl;</span></span><br><span class="line">                <span class="comment">//return *it;</span></span><br><span class="line">            <span class="comment">//&#125;</span></span><br><span class="line">        <span class="comment">//&#125;</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> it:m_vFly)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(it-&gt;GetIntrinsicState() == key)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">"already creteed by users ..."</span>&lt;&lt;key&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                <span class="keyword">return</span> it;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Flyweight *fn = <span class="keyword">new</span> ConcreteFlyweight(key);</span><br><span class="line">        m_vFly.push_back(fn);</span><br><span class="line">        <span class="keyword">return</span> fn;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;Flyweight*&gt; m_vFly;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    FlyweightFactory fc;</span><br><span class="line">    Flyweight *fw1 = fc.GetFlywgight(<span class="string">"hello"</span>);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;fw1-&gt;GetIntrinsicState()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    Flyweight *fw2 = fc.GetFlywgight(<span class="string">"world"</span>);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;fw2-&gt;GetIntrinsicState()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    Flyweight *fw3 = fc.GetFlywgight(<span class="string">"hello"</span>);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;fw3-&gt;GetIntrinsicState()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ol>
<li>设计模式之禅</li>
<li>GoF+23种设计模式解析</li>
</ol>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式探秘-27-比较总结</title>
    <url>/2017/09/12/design-pattern-27/</url>
    <content><![CDATA[<p>创建类模式包括工厂方法模式、建造者模式、抽象工厂模式、单例模式和原型模式，都能够提供对象的创建和管理职责。单例模式要求在内存中只有一个对象，原型模式要求通过复制的方法产生一个新的对象。</p>
<h1 id="工厂方法模式和建造者模式"><a href="#工厂方法模式和建造者模式" class="headerlink" title="工厂方法模式和建造者模式"></a>工厂方法模式和建造者模式</h1><p>工厂方法模式注重的是整体对象的创建方法，而建造者模式注重的是部件构建的过程，旨在通过一步一步的精准构造创建出一个复杂的对象。<br><strong>工厂方法模式和建造者模式都属于对象创建类模式</strong>，都用来创建类的对象，但区别还是比较明显的：</p>
<ol>
<li><strong>意图不同</strong>，工厂方法模式中，关注产品整体，无须关心产品的各部分是如何创建出来的；在建造者模式中，一个具体产品的产生依赖各个部件的产生以及装配顺序，关注的是“由零件一步一步地组装出产品对象”。简单说：工厂模式是一个对象创建的粗线条应用，建造者模式则是通过细线条勾勒出一个复杂对象，关注产品组成部分的创建过程。</li>
<li><strong>产品复杂度不同</strong>，工厂方法模式创建的产品一般都是单一性质产品，而建造者模式创建的都是复合产品，由哥哥不见复合而成，不见不同产品对象也不相同。工厂方法模式的对象粒度比较粗，而建造者模式的对象粒度比较粗。</li>
</ol>
<h1 id="抽象工厂模式和建造者模式"><a href="#抽象工厂模式和建造者模式" class="headerlink" title="抽象工厂模式和建造者模式"></a>抽象工厂模式和建造者模式</h1><p>抽象工厂模式实现对产品家族的创建，一个产品家族是一系列的产品：具有不同分类维度的产品组合，采用抽象工厂模式则不需要关心构建过程，只关心什么产品由什么工厂生产即可，而建造者模式则是要求按照指定蓝图建造产品，主要目的是通过组装零部件而产生一个新产品。<br><strong>抽象工厂模式比建造者模式的尺度要大，关注产品整体，建造者模式关注建造过程</strong>，因此建造者模式可以很容易构建出一个崭新产品。<br>抽象工厂模式适用于希望屏蔽对象的创建过程，只提供一个封装良好的对象，而建造者模式可以用在构建的装配方面，通过不同装配方案产生新对象，其可产生一个非常灵活的架构，方便地扩展和维护系统。</p>
<p>结构类模式包括适配器模式、桥梁模式、组合模式、装饰模式、门面模式、享元模式、代理模式。结构类模式：通过组合类或对象产生更大结构以适应更高层次的逻辑需求。</p>
<h1 id="代理模式和装饰模式"><a href="#代理模式和装饰模式" class="headerlink" title="代理模式和装饰模式"></a>代理模式和装饰模式</h1><p><strong>装饰模式是代理模式的一种特殊应用</strong>。共同点：具有相同的接口。不同点：代理模式着重代理过程的控制，装饰模式则是对类的功能进行加强和减弱，着重类的功能变化。<br>代理模式把当前的行为或功能委托给其他对象执行，代理类负责接口限定：是否可以调用真实角色，以及是否对发送到真是角色的消息进行变形处理，不对被主题角色（被代理类）的功能做任何处理，保证原汁原味的调用。<br>装饰模式在保证接口不变的情况下加强类功能，保证被修饰对象功能比原始对象丰富，但不做准入条件判断和准入参数过滤。</p>
<h1 id="装饰模式和适配器模式"><a href="#装饰模式和适配器模式" class="headerlink" title="装饰模式和适配器模式"></a>装饰模式和适配器模式</h1><p>装饰模式和适配器模式在功能上相似，都是包装作用，通过委托方式实现其功能，不同点是，装饰模式包装的是自己的兄弟类，隶属同一个家族（相同接口或父类），适配器模式则修饰非血缘关系类，把一个非本家族的对象伪装成本家族的对象，注意是伪装，其本质还是非相同接口的对象。</p>
<p>不同点：</p>
<ol>
<li>意图不同<ol>
<li>装饰模式的意图是加强对象的功能。</li>
<li>适配器模式关注的是转化，主要意图是两个对象间的转化。</li>
</ol>
</li>
<li>施与对象不同<ol>
<li>装饰模式装饰对象必须是自己的同宗，即有相同的接口或父类</li>
<li>适配器模式必须是两个不同的对象</li>
</ol>
</li>
<li>场景不同<ol>
<li>装饰模式在任何时候都可以用，只是相增强类的功能</li>
<li>适配器模式则是一个补救模式，一般出现在系统成熟或已经构建完毕的羡慕中。</li>
</ol>
</li>
<li>扩展性不同<ol>
<li>装饰器模式易于扩展</li>
<li>适配器模式建立容易，想去掉就不容易拉</li>
</ol>
</li>
</ol>
<p>行为类模式包括责任链模式、命令模式、解释器模式、迭代器模式、中介者模式、备忘录模式、观察者模式、状态模式、策略模式、模版方法模式、访问者模式。</p>
<h1 id="命令模式和策略模式"><a href="#命令模式和策略模式" class="headerlink" title="命令模式和策略模式"></a>命令模式和策略模式</h1><p>策略模式的意图是封装算法，让算法独立，并且可以相互替换，让行为的变化独立于拥有行为的客户。命令模式是对动作的解耦，把一个动作的执行分为执行对象（接受者角色）、执行行为（命令角色）、让两者相互独立而不相互影响。</p>
<p>不同：</p>
<ol>
<li>关注点不同，策略模式关注算法的替换，而命令模式关注的是解耦问题。</li>
<li>角色功能不同，策略模式中的具体算法是负责一个完整算法逻辑，是不可再拆分的原子业务单元，一旦变更就是对算法整体的变更。命令模式关注命令的实现，也就是功能的实现。</li>
<li>使用场景不同，策略模式适用于算法要求变换的场景，命令模式适用于解耦两个有紧耦合关系的对象场合或者多命令多撤销的场景。</li>
</ol>
<h1 id="策略模式和状态模式"><a href="#策略模式和状态模式" class="headerlink" title="策略模式和状态模式"></a>策略模式和状态模式</h1><p>策略模式封装的是不同的算法，算法之间没有交互，以达到算法可以自由切换的目的，而状态模式封装的是不同的状态，已到达状态切换行为随之发生改变的目的。虽然都有变换的行为，但两者目标不同。</p>
<p>不同：</p>
<ol>
<li>环境角色的职责不同 策略模式的环境角色只是一个委托作用，负责算法的替换，而状态模式的环境角色不仅仅是委托行为，还具有登记状态变化的功能，与具体状态类协作，共同完成状态切换行为随之切换的任务。</li>
<li>解决问题的重点不同 策略模式旨在解决内部算法如何改变的问题，将内部算法的改变对外界的影响降低到最小程度，保证的是算法可以自由地切换，状态模式旨在解决内在状态变化而引起行为改变的问题，出发点是事物的状态，封装状态而暴露行为，一个对象的状态改变，从外界看好像行为改变。</li>
<li>解决问题的方法不同 策略模式只是确保算法可以自由切换，什么时候用什么算法它不能决定，而状态模式对外暴露的是行为，状态的变化由环境角色和具体状态共同完成，状态模式封装了状态的变化而暴露了不同行为或行为结果。</li>
<li>应用场景不同 策略模式的算法必须是平行的，状态模式要求一系列状态发生变化的场景，要求是有状态且有行为的场景，一个对象必须具有二维（状态和行为）描述才能采用状态模式，如果只有状态而没有行为，则状态的变化就失去了意义。</li>
<li>复杂度不同 策略模式较简单（结构简单，扩展容易，代码容易阅读）。状态模式较复杂，要从两个角色看出对象状态和行为的改变，即封装的是变化。</li>
</ol>
<h1 id="观察者模式和责任链模式"><a href="#观察者模式和责任链模式" class="headerlink" title="观察者模式和责任链模式"></a>观察者模式和责任链模式</h1><p>触发链和责任链虽然都是链结构，但有所区别</p>
<ol>
<li>链中的消息对象不同 从首节点开始到最终的尾节点，两个链中传递的消息对象是不同的。责任链模式基本不改变消息对象的结构，虽然每个节点都可以参与消费（一般不参与消费），但结构不会发生变化。触发链模式中链中对象可以自由变化，上下级之间传递对象了解即可，不要求链中消息对象不变化，只要求链中相邻两个节点的消息对象固定。</li>
<li>上下节点的关系不同 责任链模式中，上下节点没有关系，都接受相同的对象，所有传递的对象都是从链首传递过来，上一节点是没有什么关系，按照自己的逻辑处理即可。触发链模式上下级关系亲密，链中任意两个相邻节点都是一个牢固的独立团体。</li>
<li>消息分销渠道不同 责任链模式中，一个消息从链首传递进来后，沿着链条向链尾移动，方向是单一、固定的。触发链模式不同，采用观察者模式，非常灵活，一个消息传递到链首后，具体怎么传递不固定，可以广播方式传递，也可跳跃方式传递，取决于处理消息的逻辑。</li>
</ol>
<p>创建类模式描述如何创建对象，行为类模式关注如何管理对象的行为，结构类模式着重如何建立软件结构。</p>
<h1 id="策略模式和桥梁模式"><a href="#策略模式和桥梁模式" class="headerlink" title="策略模式和桥梁模式"></a>策略模式和桥梁模式</h1><p>策略模式是行为模式，旨在封装一系列的行为。桥梁模式解决在不破坏封装的情况下抽取出抽象部分和实现部分，前提是不破坏封装，让抽象部分和实现部分都可以独立的变化。策略模式使用继承和多态建立一套可以自由切换算法的模式，桥梁模式在不破坏封装性的前提下解决抽象和实现都可以独立扩展的模式。</p>
<h1 id="门面模式和中介者模式"><a href="#门面模式和中介者模式" class="headerlink" title="门面模式和中介者模式"></a>门面模式和中介者模式</h1><p>门面模式为复杂系统提供统一的访问界面，定义的是一个高层接口，该接口使子系统更加容易使用，避免外部模块深入到子系统内部，而产生与子系统内部细节耦合的问题。<br>中介者模式使用中介对象封装一系列同事对象的交互行为，使各个对象之间不再显式地引用，从而使其耦合松散，建立可扩展的应用架构。</p>
<p>不同：</p>
<ol>
<li>功能区别 门面模式只是增加了一个门面，对子系统没有增加任何功能，子系统脱离门面模式完全可以独立运行，中介者模式增加了业务功能，把各个同事类中的原有耦合关系移植到中介者，同事类不可能脱离中介者而独立存在。</li>
<li>知晓状态不同 门面模式中子系统不知道门面的存在，对中介者来说，每个同事类都知道中介者存在，因为要依靠中介者调和同事间关系。</li>
<li>封装程度不同 门面模式是简单封装，所有请求处理都委托给子系统完成，中介者模式则需要有一个中心，由中心协调同事类完成，并且中心本身也完成部分业务，术语更进一步的业务功能封装。</li>
</ol>
<h1 id="包装模式比较"><a href="#包装模式比较" class="headerlink" title="包装模式比较"></a>包装模式比较</h1><p>包装模式包括：装饰模式、适配器模式、门面模式、代理模式、桥梁模式。<br>包装模式都通过委托的方式对一个对象或一系列对象施行包装，使设计的系统更加灵活、稳定、具有扩展性。从实现角度看，都是代理的一种表现形式。</p>
<ol>
<li>代理模式：主要用在不希望展示一个对象内部细节的场景中。</li>
<li>装饰模式：特殊的代理模式，倡导不改变接口的前提下为对象增强功能，或动态添加额外职责，就扩展性而言，比子类更加灵活。</li>
<li>适配器模式：主要意图是接口转换，把一个对象的接口转换成系统希望的另一种接口，避免外界深入系统内部，提高系统的稳定性和可靠性。</li>
<li>桥梁模式：在抽象层产生耦合，解决自行扩展的问题，使两个耦合关系的对象互不影响的扩展。</li>
<li>门面模式：一个粗粒度的封装，提供一个方便访问子系统的接口，不具有任何业务逻辑，仅仅是一个访问复杂系统的快速通道，没有门面，子系统也可正常运行。</li>
</ol>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ol>
<li>设计模式之禅</li>
<li>GoF+23种设计模式解析</li>
</ol>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux I/O select、poll、epoll的使用方式和优缺点</title>
    <url>/2017/09/18/io-2-multiplexing/</url>
    <content><![CDATA[<p>Linux I/O select、poll、epoll的使用方式和优缺点</p>
<h1 id="I-O复用"><a href="#I-O复用" class="headerlink" title="I/O复用"></a>I/O复用</h1><p>I/O复用使得程序可以<strong>同时监听多个文件描述符</strong>，对提升程序性能至关重要。<br>I/O复用虽然能同时监听多个文件描述符，但它<strong>本身是阻塞的</strong>。多个文件描述符同时就绪，如果不采取措施，程序只能顺序以此处理其中的每个文件描述符，使得服务器看起来像是串行工作。如果要实现并发，只能使用多进程或多线程等编程手段。</p>
<p><img src="/Picture/IO复用.png" alt></p>
<p>Linux下实现I/O复用的系统调用主要有select、poll和epoll。</p>
<h1 id="select"><a href="#select" class="headerlink" title="select"></a>select</h1><p>select 系统调用的用途：在一段时间内，监听用户感兴趣的文件描述符的可读、可写和异常等事件。<br>select系统调用的原型：<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">select</span><span class="params">(<span class="keyword">int</span> nfds, fd_set *readfds, fd_set *writefds,</span></span></span><br><span class="line"><span class="function"><span class="params">          fd_set *exceptfds, struct timeval *timeout)</span></span>;</span><br></pre></td></tr></table></figure></p>
<ol>
<li>nfds通常被设置为selcet监听的所有文件描述符中的<strong>最大值加1</strong>，因为文件描述符是从0开始计数的。</li>
<li><p>readfds、writefds、exceptfds分别指向可读、可写、异常等事件对应的文件描述符集合。<code>fd_set</code>结构体仅包含一个整数数组，数组中每个元素的每一个位标记一个文件描述符。<code>fd_set</code>能容纳的文件描述符数量由FD_SETSIZE指定，限制了select能同时处理的文件描述符的总量。linux定义了一系列的宏来访问<code>fd_set</code>结构体中的位。</p>
 <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FD_CLR</span><span class="params">(<span class="keyword">int</span> fd, fd_set *<span class="built_in">set</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span>  <span class="title">FD_ISSET</span><span class="params">(<span class="keyword">int</span> fd, fd_set *<span class="built_in">set</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FD_SET</span><span class="params">(<span class="keyword">int</span> fd, fd_set *<span class="built_in">set</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FD_ZERO</span><span class="params">(fd_set *<span class="built_in">set</span>)</span></span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>timeout用来设置select函数的超时时间。是timeval结构体类型的指针。内核修改它告诉应用程序select等待了多长时间，这个timeval的返回指不能完全信任，比如调用失败时timeval值是不确定的。</p>
 <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">timeval</span> &#123;</span></span><br><span class="line">    <span class="keyword">long</span>    tv_sec;         <span class="comment">/* seconds */</span></span><br><span class="line">    <span class="keyword">long</span>    tv_usec;        <span class="comment">/* microseconds */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>由定义可见，select提供了微秒级的定时方式，如果给timeout变量的<code>tv_sec</code>成员和<code>tv_usec</code>成员都传递0，select将立即返回。select失败时返回-1并设置errno。如果在select等待期间，程序接收到信号，则select立即返回-1,并设置errno为EINTR。</p>
<p>网络编程中socket可读的情况：</p>
<ol>
<li>socket内核接收缓冲区中的字节数大于或等于其低水位标记SO_REVLOWAT。此时可以无阻塞地读socket，并且读操作返回的字节数大于0。</li>
<li>socket通信的对方关闭连接。此时对该socket的读操作返回0。</li>
<li>监听socket上有新的连接请求。</li>
<li>socket上有未处理的错误。可用getsockopt来读取和清除错误。</li>
</ol>
<p>网络编程中socket可写的情况：</p>
<ol>
<li>socket内核发送缓存区中的可用字节数大于或等于其最低水位标记SO_SNDLOWAT。此时可以无阻塞的写该socket，并且写操作返回的字节数大于0。</li>
<li>socket的写操作被关闭。对写操作被关闭的socket执行写操作将触发一个SIGPIPE信号。</li>
<li>socket使用非阻塞connect连接成功或失败（超时）之后。</li>
<li>socket上由未处理的错误。可使用getsockopt来读取和清楚该错误。</li>
</ol>
<p>网络编程中异常情况只有一种：socket上接收到带外数据。</p>
<h1 id="poll"><a href="#poll" class="headerlink" title="poll"></a>poll</h1><p>poll原型：<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;poll.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">poll</span><span class="params">(struct pollfd *fds, <span class="keyword">nfds_t</span> nfds, <span class="keyword">int</span> timeout)</span></span>;</span><br></pre></td></tr></table></figure></p>
<p>fds是pollfd结构类型的数组，指定所有感兴趣的文件描述符上发生的可读、可写和异常等时间。<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">pollfd</span> &#123;</span></span><br><span class="line">   <span class="keyword">int</span>   fd;         <span class="comment">/* file descriptor */</span></span><br><span class="line">   short events;     <span class="comment">/* requested events */</span></span><br><span class="line">   short revents;    <span class="comment">/* returned events */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<ol>
<li>fd成员指定文件描述符</li>
<li>events告诉poll监听fd的哪些事件</li>
<li>revents由内核修改，通知引用程序fd上实际发生了哪些事件</li>
</ol>
<p>poll支持的事件：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>事件</th>
<th style="text-align:center">描述</th>
<th style="text-align:center">是否可作为输入</th>
<th style="text-align:center">是否可作为输出</th>
</tr>
</thead>
<tbody>
<tr>
<td>POLLIN</td>
<td style="text-align:center">数据（包括普通数据和优先数据）可读</td>
<td style="text-align:center">是</td>
<td style="text-align:center">是</td>
</tr>
<tr>
<td>POLLRDNORM</td>
<td style="text-align:center">普通数据可读</td>
<td style="text-align:center">是</td>
<td style="text-align:center">是</td>
</tr>
<tr>
<td>POLLRDBAND</td>
<td style="text-align:center">优先级带数据可读（Linux）不支持</td>
<td style="text-align:center">是</td>
<td style="text-align:center">是</td>
</tr>
<tr>
<td>POLLPRI</td>
<td style="text-align:center">高优先级数据可读，比如TCP带外数据</td>
<td style="text-align:center">是</td>
<td style="text-align:center">是</td>
</tr>
<tr>
<td>POLLOUT</td>
<td style="text-align:center">数据（包括普通数据和优先数据）可写</td>
<td style="text-align:center">是</td>
<td style="text-align:center">是</td>
</tr>
<tr>
<td>POLLWRNORM</td>
<td style="text-align:center">普通数据可写</td>
<td style="text-align:center">是</td>
<td style="text-align:center">是</td>
</tr>
<tr>
<td>POLLWRBAND</td>
<td style="text-align:center">优先级带数据可写</td>
<td style="text-align:center">是</td>
<td style="text-align:center">是</td>
</tr>
<tr>
<td>POLLRDHUP</td>
<td style="text-align:center">TCP连接被对方关闭，或者对方关闭了写操作，由GNU引入</td>
<td style="text-align:center">是</td>
<td style="text-align:center">是</td>
</tr>
<tr>
<td>POLLERR</td>
<td style="text-align:center">错误</td>
<td style="text-align:center">否</td>
<td style="text-align:center">是</td>
</tr>
<tr>
<td>POLLHUP</td>
<td style="text-align:center">挂起。比如通道的写端被关闭后，读端描述符将收到POLLHUP事件</td>
<td style="text-align:center">否</td>
<td style="text-align:center">是</td>
</tr>
<tr>
<td>POLLNVAL</td>
<td style="text-align:center">文件描述符没有打开</td>
<td style="text-align:center">否</td>
<td style="text-align:center">是</td>
</tr>
</tbody>
</table>
</div>
<p>nfds参数指定被监听事件集合fds的大小。<br>timeout参数指定poll的超时时间，单位是毫秒。当timeout为-1时，poll调用将永远阻塞，直到某个事件发生；当timeout为0时，poll调用将立即返回。<br>poll系统调用的返回值含义与select相同。</p>
<h1 id="epoll"><a href="#epoll" class="headerlink" title="epoll"></a>epoll</h1><p>epoll维持一个内核事件表。<br>epoll是Linux特有的I/O复用函数。<br>epoll使用一组函数来完成任务。epoll将用户关心的文件描述符上的事件放在内核的一个事件表里。不需要像select和poll每次调用都重复传入文件描述符集或事件集。但epool需要一个额外的文件描述符，来唯一标识内核中的事件表。<br>内核事件表使用epoll_create函数创建。<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/epoll.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">epoll_create</span><span class="params">(<span class="keyword">int</span> <span class="built_in">size</span>)</span></span>;</span><br></pre></td></tr></table></figure></p>
<p>size并不起作用，只是给内核一个提示，告诉其内核事件表的期望大小。<br>操作内核事件表：<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">epoll_ctl</span><span class="params">(<span class="keyword">int</span> epfd, <span class="keyword">int</span> op, <span class="keyword">int</span> fd, struct epoll_event *event)</span></span>;</span><br></pre></td></tr></table></figure></p>
<p>fd参数是要操作的文件描述符，op参数则指定操作类型。操作类型有如下3种：</p>
<ol>
<li>EPOLL_CTL_ADD 往事件表注册fd上的事件</li>
<li>EPOLL_CTL_MOD 修改fd上的注册事件</li>
<li>EPOLL_CTL_DEL 删除fd上的注册事件</li>
</ol>
<p>event参数指定事件，是epoll_event结构指针类型。<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">union</span> epoll_data &#123;</span><br><span class="line">    <span class="keyword">void</span>        *ptr;</span><br><span class="line">    <span class="keyword">int</span>          fd;</span><br><span class="line">    <span class="keyword">uint32_t</span>     u32;</span><br><span class="line">    <span class="keyword">uint64_t</span>     u64;</span><br><span class="line">&#125; <span class="keyword">epoll_data_t</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span> &#123;</span></span><br><span class="line">    <span class="keyword">uint32_t</span>     events;      <span class="comment">/* Epoll events epoll事件*/</span></span><br><span class="line">    <span class="keyword">epoll_data_t</span> data;        <span class="comment">/* User data variable 用户数据*/</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>epoll支持的事件类型和poll基本相同，表示epoll类型的宏是在poll对应的宏前加上”E”。epoll两个额外的事件类型——EPOLLET和EPOLLONESHOT。<br>epoll_ctl成功返回0,失败返回-1并设置errno。<br>epoll_wait函数在一段时间内等待一组文件描述符上的事件。该函数返回就绪的文件描述符的个数，失败返回-1并设置errno。<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">epoll_wait</span><span class="params">(<span class="keyword">int</span> epfd, struct epoll_event *events,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">int</span> maxevents, <span class="keyword">int</span> timeout)</span></span>;</span><br></pre></td></tr></table></figure></p>
<p>maxevents指定最多监听多少个事件，必须大于0。<br>epoll_wait函数如果检测到事件，就将所有就绪的事件从内核事件表复制到events所指的数组中。</p>
<p>poll和epoll如何索引就绪文件描述符：<br><strong>poll必须遍历所有已注册文件描述符并找到其中的就绪者</strong>。<br><strong>epoll仅遍历就绪的ret个文件描述符</strong>。</p>
<p>epoll对文件描述符的操作有两种模式：<strong>LT（电平触发）模式和ET（边沿触发）模式</strong>。<strong>LT是默认的工作模式</strong>，错误率比较小。LT模式下epoll相当于一个效率较高的poll。当往epoll内核事件表中注册一个文件描述符上的<strong>EPOLLET</strong>事件时，epoll将以ET模式来操作文件描述符。<strong>ET是epoll的高效工作模式</strong>，错误率较大。<br>LT模式下，epoll_wait检测到事件发生并将此事件通知应用程序后，<strong>应用程序可以不立即处理该事件</strong>，下次调用epoll_wait时，epoll_wait还会再次通知该应用程序事件，直到事件被处理。<br>ET模式下，epoll_wait检测到事件发生并将此事件通知应用程序后，<strong>应用程序必须立即处理该事件</strong>。<br>每个使用ET模式的文件描述符都应该是非阻塞的。如果文件描述符是阻塞的，那么读或写操作就会因为没有后续的事件而一直处于阻塞状态（饥渴状态）。因为ET模式只通知以此，所以需要循环读、循环写，如果时阻塞模式当不能读写的时候会阻塞，所以要设置非阻塞模式。<br>epoll的EPOLLONESHOT事件，注册了EPOLLONESHOT事件的文件描述符，操作系统最多触发其上的注册的一个可读、可写或者异常事件，且只触发一次。</p>
<h1 id="select、poll、epoll的对比"><a href="#select、poll、epoll的对比" class="headerlink" title="select、poll、epoll的对比"></a>select、poll、epoll的对比</h1><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">系统调用</th>
<th style="text-align:center">select</th>
<th style="text-align:center">poll</th>
<th style="text-align:center">epoll</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">事件集合</td>
<td style="text-align:center">用户通过3个参数分别出入感兴趣的可读、可写、异常等事件，内核通过对这些参数的在线修改来反馈其中的就绪事件。使得用户每次调用select都要重置这3个参数。</td>
<td style="text-align:center">统一处理所有事件类型，因此只需要一个事件参数集合。用户通过pollfd.events传入感兴趣的事件，内核通过修改pollfd.revents反馈其中就绪的事件</td>
<td style="text-align:center">内核通过一个事件表直接管理用户感兴趣的所有事件。每次调用epoll_wait时，无须重复传入用户感兴趣的事件。epoll_wait系统调用的参数events仅用来反馈就绪的事件。</td>
</tr>
<tr>
<td style="text-align:center">应用程序索引就绪文件描述符的时间复杂度</td>
<td style="text-align:center">O(n)</td>
<td style="text-align:center">O(n)</td>
<td style="text-align:center">O(1)</td>
</tr>
<tr>
<td style="text-align:center">最大支持文件描述符数</td>
<td style="text-align:center">一般由最大值限制</td>
<td style="text-align:center">65535</td>
<td style="text-align:center">65535</td>
</tr>
<tr>
<td style="text-align:center">工作模式</td>
<td style="text-align:center">LT</td>
<td style="text-align:center">LT</td>
<td style="text-align:center">支持ET高效模式</td>
</tr>
<tr>
<td style="text-align:center">内核实现和工作效率</td>
<td style="text-align:center">采用轮询方式来检测就绪事件，算法复杂度O(n)</td>
<td style="text-align:center">采用轮询方式来检测就绪事件，算法时间复杂度O(n）</td>
<td style="text-align:center">采用回调方式来检测就绪事件，算法时间复杂度为O(1)</td>
</tr>
</tbody>
</table>
</div>
<h1 id="简单实现"><a href="#简单实现" class="headerlink" title="简单实现"></a>简单实现</h1><h2 id="client"><a href="#client" class="headerlink" title="client"></a>client</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/select.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> clisock = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">servaddr</span>;</span></span><br><span class="line">    <span class="built_in">memset</span>(&amp;servaddr, <span class="number">0</span>, <span class="keyword">sizeof</span>(servaddr));</span><br><span class="line">    servaddr.sin_family = AF_INET;</span><br><span class="line">    servaddr.sin_port = htons(<span class="number">9999</span>);</span><br><span class="line">    servaddr.sin_addr.s_addr = inet_addr(<span class="string">"127.0.0.1"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(connect(clisock, (struct sockaddr *)&amp;servaddr, <span class="keyword">sizeof</span>(servaddr)) &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"connect error "</span>&lt;&lt;errno&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"connect succ "</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    fd_set rfds;</span><br><span class="line">    fd_set wfds;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">timeval</span> <span class="title">tv</span>;</span></span><br><span class="line">    tv.tv_sec = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">int</span> retval;</span><br><span class="line">    <span class="keyword">char</span> buff[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">string</span> input;           <span class="comment">//命令行输入</span></span><br><span class="line">    <span class="built_in">string</span> serinput;        <span class="comment">//服务器返回</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        FD_ZERO(&amp;rfds);</span><br><span class="line">        FD_ZERO(&amp;wfds);</span><br><span class="line"></span><br><span class="line">        FD_SET(<span class="number">0</span>, &amp;rfds);</span><br><span class="line">        FD_SET(<span class="number">1</span>, &amp;wfds);</span><br><span class="line">        FD_SET(clisock, &amp;rfds);</span><br><span class="line">        FD_SET(clisock, &amp;wfds);</span><br><span class="line"></span><br><span class="line">        retval = select(clisock+<span class="number">1</span>, &amp;rfds, &amp;wfds, <span class="literal">NULL</span>, &amp;tv);</span><br><span class="line">        <span class="keyword">if</span>(retval == <span class="number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"select error "</span>&lt;&lt;errno&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(FD_ISSET(<span class="number">0</span>, &amp;rfds))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">"可读"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                <span class="built_in">cin</span>&gt;&gt;input;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(FD_ISSET(<span class="number">1</span>, &amp;wfds) &amp;&amp; !serinput.empty())</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">"server return: "</span>&lt;&lt;serinput&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                serinput.clear();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(FD_ISSET(clisock, &amp;rfds))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">char</span> buffer[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">                <span class="keyword">if</span>(recv(clisock, buffer, <span class="keyword">sizeof</span>(buffer), <span class="number">0</span>) &lt; <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    close(clisock);</span><br><span class="line">                    <span class="built_in">cout</span>&lt;&lt;<span class="string">"close "</span>&lt;&lt;clisock&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                serinput = <span class="built_in">string</span>(buffer);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(FD_ISSET(clisock, &amp;wfds) &amp;&amp; !input.empty())</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(send(clisock, input.c_str(), input.size(), <span class="number">0</span>) &gt; <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">cout</span>&lt;&lt;<span class="string">"send "</span>&lt;&lt;input&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    close(clisock);</span><br><span class="line">                    <span class="built_in">cout</span>&lt;&lt;<span class="string">"close "</span>&lt;&lt;clisock&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                input.clear();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="select-server"><a href="#select-server" class="headerlink" title="select_server"></a>select_server</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/select.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sersock = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">servaddr</span>;</span></span><br><span class="line">    <span class="built_in">memset</span>(&amp;servaddr, <span class="number">0</span>, <span class="keyword">sizeof</span>(servaddr));</span><br><span class="line">    servaddr.sin_family = AF_INET;</span><br><span class="line">    servaddr.sin_port = htons(<span class="number">9999</span>);</span><br><span class="line">    servaddr.sin_addr.s_addr = inet_addr(<span class="string">"127.0.0.1"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> on = <span class="number">1</span>;</span><br><span class="line">    setsockopt(sersock, SOL_SOCKET, SO_REUSEADDR, &amp;on, <span class="keyword">sizeof</span>(on));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(bind(sersock, (struct sockaddr *)&amp;servaddr, <span class="keyword">sizeof</span>(servaddr)) &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"bind error "</span>&lt;&lt;errno&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(listen(sersock, <span class="number">5</span>) == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"listen error "</span>&lt;&lt;errno&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fd_set rfds;</span><br><span class="line">    fd_set wfds;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">timeval</span> <span class="title">tv</span>;</span></span><br><span class="line">    <span class="keyword">int</span> retval;</span><br><span class="line">    <span class="keyword">char</span> buff[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="built_in">string</span>&gt; clisock;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> maxfd = sersock;</span><br><span class="line"></span><br><span class="line">        FD_ZERO(&amp;rfds);</span><br><span class="line">        FD_ZERO(&amp;wfds);</span><br><span class="line"></span><br><span class="line">        FD_SET(sersock, &amp;rfds);</span><br><span class="line">        <span class="keyword">for</span>( <span class="keyword">auto</span> pairs : clisock)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> c = pairs.first;</span><br><span class="line">            <span class="built_in">string</span> s = pairs.second;</span><br><span class="line">            FD_SET(c, &amp;rfds);</span><br><span class="line">            <span class="keyword">if</span>(!s.empty())</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">"s info: "</span>&lt;&lt;s&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                FD_SET(c, &amp;wfds);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"set fd: "</span>&lt;&lt;c&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            maxfd = c&gt;maxfd ? c : maxfd;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        tv.tv_sec = <span class="number">5</span>;</span><br><span class="line">        retval = select(maxfd+<span class="number">1</span>, &amp;rfds, &amp;wfds, <span class="literal">NULL</span>, &amp;tv);</span><br><span class="line">        <span class="keyword">if</span>(retval &lt; <span class="number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"select error "</span>&lt;&lt;errno&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(FD_ISSET(sersock, &amp;rfds))</span><br><span class="line">            &#123;</span><br><span class="line">                struct sockaddr_in clientaddr;</span><br><span class="line">                <span class="keyword">socklen_t</span> length = <span class="keyword">sizeof</span>(clientaddr);</span><br><span class="line">                <span class="keyword">int</span> c = accept(sersock, (struct sockaddr*)&amp;clientaddr, &amp;length);</span><br><span class="line">                clisock[c] = <span class="built_in">string</span>(<span class="string">""</span>);</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">"new conn "</span>&lt;&lt;c&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>( <span class="keyword">auto</span> &amp;pairs : clisock)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> c = pairs.first;</span><br><span class="line">                <span class="built_in">string</span> &amp;s = pairs.second;</span><br><span class="line">                <span class="keyword">if</span>(FD_ISSET(c, &amp;rfds))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">char</span> buffer[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">                    <span class="keyword">if</span>(recv(c, buffer, <span class="keyword">sizeof</span>(buffer), <span class="number">0</span>) &gt; <span class="number">0</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        clisock[c] = <span class="built_in">string</span>(buffer);</span><br><span class="line">                        <span class="built_in">cout</span>&lt;&lt;<span class="string">"recv: "</span>&lt;&lt;clisock[c]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        clisock.erase(c);</span><br><span class="line">                        close(c);</span><br><span class="line">                        FD_CLR(c, &amp;wfds);</span><br><span class="line">                        FD_CLR(c, &amp;rfds);</span><br><span class="line">                        <span class="built_in">cout</span>&lt;&lt;<span class="string">"recv close conn "</span>&lt;&lt;c&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(FD_ISSET(c, &amp;wfds))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(send(c, s.c_str(), s.size(), <span class="number">0</span>) &gt; <span class="number">0</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="built_in">cout</span>&lt;&lt;<span class="string">"send succ: "</span>&lt;&lt;s&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        clisock.erase(c);</span><br><span class="line">                        <span class="built_in">cout</span>&lt;&lt;<span class="string">"send close conn "</span>&lt;&lt;c&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    s.clear();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="poll-server"><a href="#poll-server" class="headerlink" title="poll_server"></a>poll_server</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/poll.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sersock = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">servaddr</span>;</span></span><br><span class="line">    <span class="built_in">memset</span>(&amp;servaddr, <span class="number">0</span>, <span class="keyword">sizeof</span>(servaddr));</span><br><span class="line">    servaddr.sin_family = AF_INET;</span><br><span class="line">    servaddr.sin_port = htons(<span class="number">9999</span>);</span><br><span class="line">    servaddr.sin_addr.s_addr = inet_addr(<span class="string">"127.0.0.1"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> on = <span class="number">1</span>;</span><br><span class="line">    setsockopt(sersock, SOL_SOCKET, SO_REUSEADDR, &amp;on, <span class="keyword">sizeof</span>(on));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(bind(sersock, (struct sockaddr *)&amp;servaddr, <span class="keyword">sizeof</span>(servaddr)) &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"bind error "</span>&lt;&lt;errno&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(listen(sersock, <span class="number">5</span>) == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"listen error "</span>&lt;&lt;errno&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> retval;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">pollfd</span> <span class="title">fds</span>[1024] = &#123;</span><span class="number">-1</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line">    fds[<span class="number">0</span>].fd = sersock;</span><br><span class="line">    fds[<span class="number">0</span>].events = POLLRDNORM;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> buff[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> maxi = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="built_in">string</span>&gt; clisock;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(;;)</span><br><span class="line">    &#123;</span><br><span class="line">        retval = poll(fds, maxi+<span class="number">1</span>, <span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">if</span>(retval &lt; <span class="number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"poll error "</span>&lt;&lt;errno&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(POLLRDNORM == (fds[<span class="number">0</span>].revents &amp; POLLRDNORM))</span><br><span class="line">            &#123;</span><br><span class="line">                struct sockaddr_in clientaddr;</span><br><span class="line">                <span class="keyword">socklen_t</span> length = <span class="keyword">sizeof</span>(clientaddr);</span><br><span class="line">                <span class="keyword">int</span> c = accept(sersock, (struct sockaddr*)&amp;clientaddr, &amp;length);</span><br><span class="line">                clisock[c] = <span class="built_in">string</span>(<span class="string">""</span>);</span><br><span class="line">                fds[++maxi].fd = c;</span><br><span class="line">                fds[maxi].events = POLLRDNORM;</span><br><span class="line">                fds[maxi].revents = <span class="number">0</span>;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">"new conn "</span>&lt;&lt;c&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;<span class="number">1024</span>; ++i)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(fds[i].fd &lt; <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">int</span> &amp;c = fds[i].fd;</span><br><span class="line">                <span class="keyword">auto</span> &amp;s = clisock[fds[i].fd];</span><br><span class="line">                <span class="keyword">if</span>(POLLRDNORM == (fds[i].revents &amp; POLLRDNORM))</span><br><span class="line">                &#123;</span><br><span class="line">                    fds[i].revents &amp;= ~POLLRDNORM;</span><br><span class="line">                    <span class="keyword">char</span> buffer[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">                    <span class="keyword">if</span>(recv(c, buffer, <span class="keyword">sizeof</span>(buffer), <span class="number">0</span>) &gt; <span class="number">0</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        clisock[c] = <span class="built_in">string</span>(buffer);</span><br><span class="line">                        <span class="built_in">cout</span>&lt;&lt;<span class="string">"recv: "</span>&lt;&lt;clisock[c]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                        fds[i].events |= POLLWRNORM;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        clisock.erase(c);</span><br><span class="line">                        close(c);</span><br><span class="line">                        fds[i].fd = <span class="number">-1</span>;</span><br><span class="line">                        fds[i].events = <span class="number">0</span>;</span><br><span class="line">                        fds[i].revents = <span class="number">0</span>;</span><br><span class="line">                        <span class="built_in">cout</span>&lt;&lt;<span class="string">"recv close conn "</span>&lt;&lt;c&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(POLLWRNORM == (fds[i].revents &amp; POLLWRNORM))</span><br><span class="line">                &#123;</span><br><span class="line">                    fds[i].revents &amp;= ~POLLWRNORM;</span><br><span class="line">                    <span class="keyword">if</span>(send(c, s.c_str(), s.size(), <span class="number">0</span>) &gt; <span class="number">0</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="built_in">cout</span>&lt;&lt;<span class="string">"send succ: "</span>&lt;&lt;s&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        clisock.erase(c);</span><br><span class="line">                        close(c);</span><br><span class="line">                        <span class="built_in">cout</span>&lt;&lt;<span class="string">"send close conn "</span>&lt;&lt;c&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    fds[i].events &amp;= ~POLLWRNORM;</span><br><span class="line">                    s.clear();</span><br><span class="line">                &#125;</span><br><span class="line">                fds[i].revents = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="epoll-server"><a href="#epoll-server" class="headerlink" title="epoll_server"></a>epoll_server</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/epoll.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sersock = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">servaddr</span>;</span></span><br><span class="line">    <span class="built_in">memset</span>(&amp;servaddr, <span class="number">0</span>, <span class="keyword">sizeof</span>(servaddr));</span><br><span class="line">    servaddr.sin_family = AF_INET;</span><br><span class="line">    servaddr.sin_port = htons(<span class="number">9999</span>);</span><br><span class="line">    servaddr.sin_addr.s_addr = inet_addr(<span class="string">"127.0.0.1"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> on = <span class="number">1</span>;</span><br><span class="line">    setsockopt(sersock, SOL_SOCKET, SO_REUSEADDR, &amp;on, <span class="keyword">sizeof</span>(on));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(bind(sersock, (struct sockaddr *)&amp;servaddr, <span class="keyword">sizeof</span>(servaddr)) &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"bind error "</span>&lt;&lt;errno&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(listen(sersock, <span class="number">5</span>) == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"listen error "</span>&lt;&lt;errno&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> retval;</span><br><span class="line">    <span class="keyword">int</span> epollfd = epoll_create(<span class="number">1024</span>);</span><br><span class="line">    <span class="keyword">if</span>(epollfd &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"epoll_create error"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span> <span class="title">tmpfds</span>;</span></span><br><span class="line">    tmpfds.events = EPOLLRDNORM;</span><br><span class="line">    tmpfds.data.fd = sersock;</span><br><span class="line">    epoll_ctl(epollfd, EPOLL_CTL_ADD, sersock, &amp;tmpfds);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> buff[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="built_in">string</span>&gt; clisock;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(;;)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span> <span class="title">fds</span>[1024];</span></span><br><span class="line">        retval = epoll_wait(epollfd, fds, <span class="number">1024</span>, <span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">if</span>(retval &lt; <span class="number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"epoll_wait error "</span>&lt;&lt;errno&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;retval; ++i)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(fds[i].data.fd == sersock &amp;&amp; (fds[i].events &amp; EPOLLRDNORM) == EPOLLRDNORM)</span><br><span class="line">                &#123;</span><br><span class="line">                    struct sockaddr_in clientaddr;</span><br><span class="line">                    <span class="keyword">socklen_t</span> length = <span class="keyword">sizeof</span>(clientaddr);</span><br><span class="line">                    <span class="keyword">int</span> c = accept(sersock, (struct sockaddr*)&amp;clientaddr, &amp;length);</span><br><span class="line">                    clisock[c] = <span class="built_in">string</span>(<span class="string">""</span>);</span><br><span class="line">                    tmpfds.data.fd = c;</span><br><span class="line">                    tmpfds.events = EPOLLRDNORM;</span><br><span class="line">                    epoll_ctl(epollfd, EPOLL_CTL_ADD, c, &amp;tmpfds);</span><br><span class="line">                    <span class="built_in">cout</span>&lt;&lt;<span class="string">"new conn "</span>&lt;&lt;c&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">int</span> c = fds[i].data.fd;</span><br><span class="line">                <span class="keyword">auto</span> &amp;s = clisock[c];</span><br><span class="line">                <span class="keyword">if</span>(fds[i].data.fd != sersock &amp;&amp;  (fds[i].events &amp; EPOLLRDNORM) == EPOLLRDNORM)</span><br><span class="line">                &#123;</span><br><span class="line"></span><br><span class="line">                    tmpfds.data.fd = c;</span><br><span class="line">                    tmpfds.events = EPOLLWRNORM | EPOLLRDNORM;</span><br><span class="line">                    epoll_ctl(epollfd, EPOLL_CTL_MOD, c, &amp;tmpfds);</span><br><span class="line">                    <span class="keyword">char</span> buffer[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">                    <span class="keyword">if</span>(recv(c, buffer, <span class="keyword">sizeof</span>(buffer), <span class="number">0</span>) &gt; <span class="number">0</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        clisock[c] = <span class="built_in">string</span>(buffer);</span><br><span class="line">                        <span class="built_in">cout</span>&lt;&lt;<span class="string">"recv: "</span>&lt;&lt;clisock[c]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        clisock.erase(c);</span><br><span class="line">                        close(c);</span><br><span class="line">                        epoll_ctl(epollfd, EPOLL_CTL_DEL, c, <span class="literal">NULL</span>);</span><br><span class="line">                        <span class="built_in">cout</span>&lt;&lt;<span class="string">"recv close conn "</span>&lt;&lt;c&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>((fds[i].events &amp; EPOLLWRNORM) == EPOLLWRNORM)</span><br><span class="line">                &#123;</span><br><span class="line">                    tmpfds.data.fd = c;</span><br><span class="line">                    tmpfds.events = EPOLLRDNORM;</span><br><span class="line">                    epoll_ctl(epollfd, EPOLL_CTL_MOD, c, &amp;tmpfds);</span><br><span class="line">                    <span class="keyword">if</span>(send(c, s.c_str(), s.size(), <span class="number">0</span>) &gt; <span class="number">0</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="built_in">cout</span>&lt;&lt;<span class="string">"send succ: "</span>&lt;&lt;s&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        clisock.erase(c);</span><br><span class="line">                        close(c);</span><br><span class="line">                        epoll_ctl(epollfd, EPOLL_CTL_DEL, c, <span class="literal">NULL</span>);</span><br><span class="line">                        <span class="built_in">cout</span>&lt;&lt;<span class="string">"send close conn "</span>&lt;&lt;c&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    s.clear();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux I/O 复用 select源码解析</title>
    <url>/2017/09/20/io-3-select/</url>
    <content><![CDATA[<p>Linux I/O select 源码分析</p>
<!-- vim-markdown-toc GFM -->
<ul>
<li><a href="#select">select</a><ul>
<li><a href="#select系统调用的具体实现过程图解">select系统调用的具体实现过程图解：</a></li>
<li><a href="#select结构体依赖关系">select结构体依赖关系</a></li>
</ul>
</li>
</ul>
<!-- vim-markdown-toc -->
<h1 id="select"><a href="#select" class="headerlink" title="select"></a>select</h1><p>select系统调用原型：<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">select</span><span class="params">(<span class="keyword">int</span> nfds, fd_set *readfds, fd_set *writefds, fd_set *exceptfds, struct timeval *timeout)</span></span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">timeval</span> &#123;</span></span><br><span class="line">    <span class="keyword">long</span>    tv_sec;    <span class="comment">//秒</span></span><br><span class="line">    <span class="keyword">long</span>    tv_usec;    <span class="comment">//微秒 10E-6秒</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">timespec</span> &#123;</span></span><br><span class="line">    <span class="keyword">long</span>    tv_sec;    <span class="comment">//秒</span></span><br><span class="line">    <span class="keyword">long</span>    tv_nsec;    <span class="comment">//纳秒 10E-9秒</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> fds_bits [<span class="number">1024</span>/(<span class="number">8</span> * <span class="keyword">sizeof</span>(<span class="keyword">unsigned</span> <span class="keyword">long</span>))]; <span class="comment">//unsigned long fds_bits[32]</span></span><br><span class="line">    <span class="comment">//32*4*8 = 1024</span></span><br><span class="line">&#125;fd_set;</span><br></pre></td></tr></table></figure></p>
<p>select实现在fs/select.c中，源码如下：<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//select主流程函数</span></span><br><span class="line">SYSCALL_DEFINE5(select, <span class="keyword">int</span>, n, fd_set __user *, inp, fd_set __user *, outp,</span><br><span class="line">fd_set __user *, <span class="built_in">exp</span>, struct timeval __user *, tvp)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">timespec</span> <span class="title">end_time</span>, *<span class="title">to</span> = <span class="title">NULL</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">timeval</span> <span class="title">tv</span>;</span></span><br><span class="line">    <span class="keyword">int</span> ret;</span><br><span class="line">    <span class="keyword">if</span> (tvp) &#123;    <span class="comment">//超时时间非空</span></span><br><span class="line">        <span class="keyword">if</span> (copy_from_user(&amp;tv, tvp, <span class="keyword">sizeof</span>(tv)))        <span class="comment">//把超时时间从用户空间复制到内核空间</span></span><br><span class="line">            <span class="keyword">return</span> -EFAULT;</span><br><span class="line">        to = &amp;end_time;</span><br><span class="line">        <span class="comment">//计算timespec类型的超时时间</span></span><br><span class="line">        <span class="keyword">if</span> (poll_select_set_timeout(to,</span><br><span class="line">                tv.tv_sec + (tv.tv_usec / USEC_PER_SEC),</span><br><span class="line">                (tv.tv_usec % USEC_PER_SEC) * NSEC_PER_USEC))</span><br><span class="line">            <span class="keyword">return</span> -EINVAL;</span><br><span class="line">    &#125;</span><br><span class="line">    ret = core_sys_select(n, inp, outp, <span class="built_in">exp</span>, to);       <span class="comment">//select实现的核心函数</span></span><br><span class="line">    <span class="comment">//复制剩余的超时时间拷贝到用户空间</span></span><br><span class="line">    ret = poll_select_copy_remaining(&amp;end_time, tvp, <span class="number">1</span>, ret);</span><br><span class="line">    <span class="keyword">return</span> ret;    <span class="comment">//返回就绪的文件描述符的个数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>core_sys_select实现select事件监听的主要功能。<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">core_sys_select</span><span class="params">(<span class="keyword">int</span> n, fd_set __user *inp, fd_set __user *outp,</span></span></span><br><span class="line"><span class="function"><span class="params">               fd_set __user *<span class="built_in">exp</span>, struct timespec *end_time)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    fd_set_bits fds;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    typedef struct &#123;</span></span><br><span class="line"><span class="comment">        unsigned long *in, *out, *ex;</span></span><br><span class="line"><span class="comment">        unsigned long *res_in, *res_out, *res_ex;</span></span><br><span class="line"><span class="comment">    &#125; fd_set_bits;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> *bits;</span><br><span class="line">    <span class="keyword">int</span> ret, max_fds;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="built_in">size</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">fdtable</span> *<span class="title">fdt</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    struct fdtable &#123;    //进程的文件描述符表</span></span><br><span class="line"><span class="comment">        unsigned int max_fds;</span></span><br><span class="line"><span class="comment">        struct file ** fd;     //文件对象指针数组,长度放在max_fds中</span></span><br><span class="line"><span class="comment">        fd_set *close_on_exec;</span></span><br><span class="line"><span class="comment">        fd_set *open_fds;</span></span><br><span class="line"><span class="comment">        struct rcu_head rcu;</span></span><br><span class="line"><span class="comment">        struct fdtable *next;</span></span><br><span class="line"><span class="comment">    &#125;;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">long</span> stack_fds[SELECT_STACK_ALLOC/<span class="keyword">sizeof</span>(<span class="keyword">long</span>)];    <span class="comment">//long stack_fds[64];</span></span><br><span class="line"></span><br><span class="line">    ret = -EINVAL;</span><br><span class="line">    <span class="keyword">if</span> (n &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">goto</span> out_nofds;</span><br><span class="line"></span><br><span class="line">    rcu_read_lock();    <span class="comment">//加锁</span></span><br><span class="line">    <span class="comment">//取得进程中的fdtable(文件描述符表)</span></span><br><span class="line">    fdt = files_fdtable(current-&gt;files);</span><br><span class="line">    max_fds = fdt-&gt;max_fds;        <span class="comment">//取得系统当前允许的最大文件描述符</span></span><br><span class="line">    rcu_read_unlock();    <span class="comment">//解锁</span></span><br><span class="line">    <span class="keyword">if</span> (n &gt; max_fds)    <span class="comment">//如果传入的n大于当前进程最大的文件描述符，修改n</span></span><br><span class="line">        n =     max_fds;</span><br><span class="line">    <span class="built_in">size</span> = FDS_BYTES(n);    <span class="comment">//按一个文件描述符一个bit位计算一个字段所需字节数</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    #define FDS_BITPERLONG    (8*sizeof(long))</span></span><br><span class="line"><span class="comment">    #define FDS_LONGS(nr)    (((nr)+FDS_BITPERLONG-1)/FDS_BITPERLONG)</span></span><br><span class="line"><span class="comment">    #define FDS_BYTES(nr)    (FDS_LONGS(nr)*sizeof(long))</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    bits = stack_fds;                <span class="comment">//bits先指向栈上空间，小对象使用栈上空间</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">size</span> &gt; <span class="keyword">sizeof</span>(stack_fds) / <span class="number">6</span>) &#123;    <span class="comment">//栈上空间不足，全部使用堆上空间，使用kmalloc申请空间</span></span><br><span class="line">        ret = -ENOMEM;</span><br><span class="line">        bits = kmalloc(<span class="number">6</span> * <span class="built_in">size</span>, GFP_KERNEL);</span><br><span class="line">        <span class="keyword">if</span> (!bits)</span><br><span class="line">            <span class="keyword">goto</span> out_nofds;</span><br><span class="line">    &#125;</span><br><span class="line">    fds.in      = bits;</span><br><span class="line">    fds.out     = bits +   <span class="built_in">size</span>;</span><br><span class="line">    fds.ex      = bits + <span class="number">2</span>*<span class="built_in">size</span>;</span><br><span class="line">    fds.res_in  = bits + <span class="number">3</span>*<span class="built_in">size</span>;</span><br><span class="line">    fds.res_out = bits + <span class="number">4</span>*<span class="built_in">size</span>;</span><br><span class="line">    fds.res_ex  = bits + <span class="number">5</span>*<span class="built_in">size</span>;</span><br><span class="line">    <span class="comment">//从用户空间拷贝fd_set到内核空间，调用copy_from_user()</span></span><br><span class="line">    <span class="keyword">if</span> ((ret = get_fd_set(n, inp, fds.in)) ||</span><br><span class="line">        (ret = get_fd_set(n, outp, fds.out)) ||</span><br><span class="line">        (ret = get_fd_set(n, <span class="built_in">exp</span>, fds.ex)))</span><br><span class="line">        <span class="keyword">goto</span> out;</span><br><span class="line">    <span class="comment">//将存放返回状态的字段清0</span></span><br><span class="line">    zero_fd_set(n, fds.res_in);</span><br><span class="line">    zero_fd_set(n, fds.res_out);</span><br><span class="line">    zero_fd_set(n, fds.res_ex);</span><br><span class="line">    ret = do_select(n, &amp;fds, end_time);     <span class="comment">//核心函数</span></span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>)    <span class="comment">//有错误</span></span><br><span class="line">        <span class="keyword">goto</span> out;</span><br><span class="line">    <span class="keyword">if</span> (!ret) &#123;        <span class="comment">//ret == 0，没有设备就绪</span></span><br><span class="line">        ret = -ERESTARTNOHAND;</span><br><span class="line">        <span class="keyword">if</span> (signal_pending(current))</span><br><span class="line">            <span class="keyword">goto</span> out;</span><br><span class="line">        ret = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将结果从内核空间拷贝到用户空间，调用__copy_to_user()</span></span><br><span class="line">    <span class="keyword">if</span> (set_fd_set(n, inp, fds.res_in) ||</span><br><span class="line">        set_fd_set(n, outp, fds.res_out) ||</span><br><span class="line">        set_fd_set(n, <span class="built_in">exp</span>, fds.res_ex))</span><br><span class="line">        ret = -EFAULT;</span><br><span class="line">out:</span><br><span class="line">    <span class="comment">//如果申请了空间kmalloc，释放空间</span></span><br><span class="line">    <span class="keyword">if</span> (bits != stack_fds)</span><br><span class="line">        kfree(bits);</span><br><span class="line">out_nofds:</span><br><span class="line">    <span class="keyword">return</span> ret;    <span class="comment">//返回就绪的文件描述符的个数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>一些select内核实现需要了解的数据结构<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">poll_wqueues</span> &#123;</span>    <span class="comment">//非常重要，一个调用select()的应用程序只存在一个poll_wqueues结构体，                    //用来统一辅佐实现这个进程中所有待检测的fd的轮询工作</span></span><br><span class="line">    poll_table pt;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">poll_table_page</span> *<span class="title">table</span>;</span>        <span class="comment">//动态申请的物理页挂在它上</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span> *<span class="title">polling_task</span>;</span>    <span class="comment">//保存当前调用select的用户进程struct task_struct结构体</span></span><br><span class="line">    <span class="comment">//struct task_struct即进程控制块PCB结构</span></span><br><span class="line">    <span class="keyword">int</span> triggered;    <span class="comment">// 当前用户进程被唤醒后置成1，以免该进程接着进睡眠</span></span><br><span class="line">    <span class="keyword">int</span> error;        <span class="comment">//错误码</span></span><br><span class="line">    <span class="keyword">int</span> inline_index;    <span class="comment">//数组inline_entries的引用下标</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">poll_table_entry</span> <span class="title">inline_entries</span>[<span class="title">N_INLINE_POLL_ENTRIES</span>];</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">void</span> <span class="params">(*poll_queue_proc)</span><span class="params">(struct file *, <span class="keyword">wait_queue_head_t</span> *, struct poll_table_struct *)</span></span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">poll_table_struct</span> &#123;</span></span><br><span class="line">    poll_queue_proc qproc;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> key;</span><br><span class="line">&#125; poll_table;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">poll_table_page</span> &#123;</span>        <span class="comment">//申请的物理页都会将起始地址强制转换成该结构体指针</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">poll_table_page</span> * <span class="title">next</span>;</span>        <span class="comment">//指向下一个申请的物理页</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">poll_table_entry</span> * <span class="title">entry</span>;</span>    <span class="comment">//指向entries[]中首个待分配(空的)poll_table_entry结构</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">poll_table_entry</span> <span class="title">entries</span>[0];</span>    <span class="comment">//该page页后边都是待分配的poll_table_entry结构体</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">poll_table_entry</span> &#123;</span>        <span class="comment">//每个fd的都有一个该结构体</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">file</span> *<span class="title">filp</span>;</span>            <span class="comment">//指向特定fd对应的file结构体</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> key;        <span class="comment">//等待特定fd对应硬件设备的事件掩码</span></span><br><span class="line">    <span class="keyword">wait_queue_t</span> wait;        <span class="comment">//代表调用select()的应用进程，等待在fd对应设备的特定事件（读或                        //写）的等待队列头上的等待队列项</span></span><br><span class="line">    <span class="keyword">wait_queue_head_t</span> *wait_address;        <span class="comment">//设备驱动程序中特定事件的等待队列头</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> __<span class="title">wait_queue</span> <span class="title">wait_queue_t</span>;</span></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">int</span> <span class="params">(*<span class="keyword">wait_queue_func_t</span>)</span><span class="params">(<span class="keyword">wait_queue_t</span> *wait, <span class="keyword">unsigned</span> mode, <span class="keyword">int</span> flags, <span class="keyword">void</span> *key)</span></span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">wait_queue</span> &#123;</span>        <span class="comment">//等待队列项</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> flags;        <span class="comment">//标记该等待的进程是互斥进程还是非互斥进程</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> WQ_FLAG_EXCLUSIVE    0x01        <span class="comment">//互斥进程</span></span></span><br><span class="line">    <span class="keyword">void</span> *<span class="keyword">private</span>;                <span class="comment">//指向poll_wqueues</span></span><br><span class="line">    <span class="keyword">wait_queue_func_t</span> func;        <span class="comment">//等待队列的回调函数</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">task_list</span>;</span>        <span class="comment">//链表的前向和后向指针</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">wait_queue_head</span> &#123;</span>    <span class="comment">//等待队列头</span></span><br><span class="line">    <span class="keyword">spinlock_t</span> lock;        <span class="comment">//锁</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">task_list</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> __<span class="title">wait_queue_head</span> <span class="title">wait_queue_head_t</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> *<span class="title">next</span>, *<span class="title">prev</span>;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">do_select</span><span class="params">(<span class="keyword">int</span> n, fd_set_bits *fds, struct timespec *end_time)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">ktime_t</span> expire, *to = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">poll_wqueues</span> <span class="title">table</span>;</span></span><br><span class="line">    poll_table *wait;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> retval, i, timed_out = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> slack      = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    rcu_read_lock();</span><br><span class="line">    <span class="comment">//检查fds中fd的有效性（要求fd必须打开），并获取当前最大的fd</span></span><br><span class="line">    retval = max_select_fd(n, fds);</span><br><span class="line">    rcu_read_unlock();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (retval &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> retval;</span><br><span class="line">    n = retval;</span><br><span class="line">    <span class="comment">//初始化table，设置函数指针table.pt.qproc为__pollwait</span></span><br><span class="line">    poll_initwait(&amp;table);</span><br><span class="line"></span><br><span class="line">    wait = &amp;table.pt;</span><br><span class="line">    <span class="comment">//超时时间设为0时</span></span><br><span class="line">    <span class="keyword">if</span> (end_time &amp;&amp; !end_time-&gt;tv_sec &amp;&amp; !end_time-&gt;tv_nsec) &#123;</span><br><span class="line">        wait = <span class="literal">NULL</span>;        <span class="comment">//不执行__pollwait</span></span><br><span class="line">        timed_out = <span class="number">1</span>;        <span class="comment">//timed_out设置为1，表示已超时。</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (end_time &amp;&amp; !timed_out)    <span class="comment">//设置的超时时间不为0</span></span><br><span class="line">        <span class="comment">//超时时间转换</span></span><br><span class="line">        slack = estimate_accuracy(end_time);</span><br><span class="line"></span><br><span class="line">    retval = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">long</span> *rinp, *routp, *rexp, *inp, *outp, *<span class="built_in">exp</span>;</span><br><span class="line">        inp = fds-&gt;in; outp = fds-&gt;out; <span class="built_in">exp</span> = fds-&gt;ex;</span><br><span class="line">        rinp = fds-&gt;res_in; routp = fds-&gt;res_out; rexp = fds-&gt;res_ex;</span><br><span class="line">        <span class="comment">//遍历所有的描述符（n个），i文件描述符  从这里可以看出select使用了遍历的方式</span></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; ++rinp, ++routp, ++rexp) &#123;</span><br><span class="line">            <span class="keyword">unsigned</span> <span class="keyword">long</span> in, out, ex, all_bits, <span class="built_in">bit</span> = <span class="number">1</span>, mask, j;</span><br><span class="line">            <span class="keyword">unsigned</span> <span class="keyword">long</span> res_in = <span class="number">0</span>, res_out = <span class="number">0</span>, res_ex = <span class="number">0</span>;</span><br><span class="line">            <span class="comment">//file_operations定义了一系列对字符设备的操作方法</span></span><br><span class="line">            <span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">file_operations</span> *<span class="title">f_op</span> = <span class="title">NULL</span>;</span></span><br><span class="line">            <span class="class"><span class="keyword">struct</span> <span class="title">file</span> *<span class="title">file</span> = <span class="title">NULL</span>;</span></span><br><span class="line">            <span class="comment">//检查当前的位置中的描述符</span></span><br><span class="line">            in = *inp++; out = *outp++; ex = *<span class="built_in">exp</span>++;</span><br><span class="line">            all_bits = in | out | ex;    <span class="comment">//组合要监测的事件</span></span><br><span class="line">            <span class="keyword">if</span> (all_bits == <span class="number">0</span>) &#123;        <span class="comment">//没有需要监测的描述符，下一个位置</span></span><br><span class="line">                <span class="comment">// #define __NFDBITS    (8 * sizeof(unsigned long))</span></span><br><span class="line">                i += __NFDBITS;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//每次循环32次  4字节 32个位 使用位图的方式</span></span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; __NFDBITS; ++j, ++i, <span class="built_in">bit</span> &lt;&lt;= <span class="number">1</span>) &#123;    <span class="comment">//第一次bit==1</span></span><br><span class="line">                <span class="keyword">int</span> fput_needed;</span><br><span class="line">                <span class="keyword">if</span> (i &gt;= n)        <span class="comment">//是否超出了最大待检测的fd</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="comment">//不需要监听描述符i，直接跳过</span></span><br><span class="line">                <span class="keyword">if</span> (!(<span class="built_in">bit</span> &amp; all_bits))</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                <span class="comment">//根据i指定的索引，从当前进程描述符中取得文件结构，并增加引用计数</span></span><br><span class="line">                file = fget_light(i, &amp;fput_needed);</span><br><span class="line">                <span class="keyword">if</span> (file) &#123;    <span class="comment">//file存在</span></span><br><span class="line">                    f_op = file-&gt;f_op;</span><br><span class="line">                    <span class="comment">//#define DEFAULT_POLLMASK (POLLIN | POLLOUT | POLLRDNORM | POLLWRNORM)</span></span><br><span class="line">                    mask = DEFAULT_POLLMASK;</span><br><span class="line">                    <span class="keyword">if</span> (f_op &amp;&amp; f_op-&gt;poll) &#123;</span><br><span class="line">                    <span class="comment">//设置当前fd待检测的事件掩码，wait-&gt;key</span></span><br><span class="line">                        wait_key_set(wait, in, out, <span class="built_in">bit</span>);</span><br><span class="line"></span><br><span class="line">                        <span class="comment">//获取当前的就绪状态，并添加进程到文件的对应等待队列中</span></span><br><span class="line">                        mask = (*f_op-&gt;poll)(file, wait);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//释放通过fget_light得到的file指针，实际就是减少引用计数</span></span><br><span class="line">                    fput_light(file, fput_needed);</span><br><span class="line">                    <span class="comment">//检测文件i是否已有事件就绪</span></span><br><span class="line">                    <span class="comment">//mask是每一个 (*f_op-&gt;poll)()程序返回的设备状态掩码</span></span><br><span class="line">                    <span class="keyword">if</span> ((mask &amp; POLLIN_SET) &amp;&amp; (in &amp; <span class="built_in">bit</span>)) &#123;</span><br><span class="line">                        <span class="comment">//mask&amp;POLLIN_SET该文件是否可写，in&amp;bit应用程序是否关心该文件可写</span></span><br><span class="line">                        res_in |= <span class="built_in">bit</span>;    <span class="comment">//fd对应的设备可写</span></span><br><span class="line">                        retval++;        <span class="comment">//就绪的文件描述符个数加1</span></span><br><span class="line">                        <span class="comment">//如果已有就绪事件就不再向其他文件的等待队列中添加回调函数。</span></span><br><span class="line">                        <span class="comment">//避免重复执行__pollwait()</span></span><br><span class="line">                        wait = <span class="literal">NULL</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> ((mask &amp; POLLOUT_SET) &amp;&amp; (out &amp; <span class="built_in">bit</span>)) &#123;</span><br><span class="line">                        res_out |= <span class="built_in">bit</span>;</span><br><span class="line">                        retval++;</span><br><span class="line">                        wait = <span class="literal">NULL</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> ((mask &amp; POLLEX_SET) &amp;&amp; (ex &amp; <span class="built_in">bit</span>)) &#123;</span><br><span class="line">                        res_ex |= <span class="built_in">bit</span>;</span><br><span class="line">                        retval++;</span><br><span class="line">                        wait = <span class="literal">NULL</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//根据poll()的结果，写回到输出字段里面</span></span><br><span class="line">            <span class="keyword">if</span> (res_in)</span><br><span class="line">                *rinp = res_in;</span><br><span class="line">            <span class="keyword">if</span> (res_out)</span><br><span class="line">                *routp = res_out;</span><br><span class="line">            <span class="keyword">if</span> (res_ex)</span><br><span class="line">                *rexp = res_ex;</span><br><span class="line">            cond_resched();</span><br><span class="line">        &#125;</span><br><span class="line">        wait = <span class="literal">NULL</span>;    <span class="comment">//避免重复执行__pollwait()</span></span><br><span class="line">        <span class="comment">//有设备就绪或有异常 || 超时 || 有终止信号出现</span></span><br><span class="line">        <span class="keyword">if</span> (retval || timed_out || signal_pending(current))</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span> (table.error) &#123;</span><br><span class="line">            retval = table.error;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//第一轮循环，时间的转换timespec到ktime</span></span><br><span class="line">        <span class="keyword">if</span> (end_time &amp;&amp; !to) &#123;</span><br><span class="line">            expire = timespec_to_ktime(*end_time);</span><br><span class="line">            to = &amp;expire;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//当前进程从这里进入睡眠，等待直到超时，或由注册的函数唤醒超时，返回0；被唤醒，返回-EINTR</span></span><br><span class="line">        <span class="keyword">if</span> (!poll_schedule_timeout(&amp;table, TASK_INTERRUPTIBLE,</span><br><span class="line">                       to, slack))</span><br><span class="line">            timed_out = <span class="number">1</span>;   <span class="comment">//超时后，将timed_out设为1，再遍历一次文件描述符后，退出循环</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//清除等待队列</span></span><br><span class="line">    poll_freewait(&amp;table);</span><br><span class="line">    <span class="keyword">return</span> retval;        <span class="comment">//返回就绪的文件描述符的个数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">poll_initwait</span><span class="params">(struct poll_wqueues *pwq)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    init_poll_funcptr(&amp;pwq-&gt;pt, __pollwait);</span><br><span class="line">    pwq-&gt;polling_task = current;</span><br><span class="line">    pwq-&gt;triggered    = <span class="number">0</span>;</span><br><span class="line">    pwq-&gt;error        = <span class="number">0</span>;</span><br><span class="line">    pwq-&gt;table        = <span class="literal">NULL</span>;</span><br><span class="line">    pwq-&gt;inline_index = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init_poll_funcptr</span><span class="params">(poll_table *pt, poll_queue_proc qproc)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    pt-&gt;qproc = qproc;        <span class="comment">//__pollwait</span></span><br><span class="line">    pt-&gt;key   = ~<span class="number">0U</span>L; <span class="comment">/* all events enabled */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> POLLIN_SET (POLLRDNORM | POLLRDBAND | POLLIN | POLLHUP | POLLERR)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> POLLOUT_SET (POLLWRBAND | POLLWRNORM | POLLOUT | POLLERR)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> POLLEX_SET (POLLPRI)</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">wait_key_set</span><span class="params">(poll_table *wait, <span class="keyword">unsigned</span> <span class="keyword">long</span> in,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">unsigned</span> <span class="keyword">long</span> out, <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="built_in">bit</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (wait) &#123;</span><br><span class="line">        wait-&gt;key = POLLEX_SET;</span><br><span class="line">        <span class="keyword">if</span> (in &amp; <span class="built_in">bit</span>)</span><br><span class="line">            wait-&gt;key |= POLLIN_SET;</span><br><span class="line">        <span class="keyword">if</span> (out &amp; <span class="built_in">bit</span>)</span><br><span class="line">            wait-&gt;key |= POLLOUT_SET;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>poll 方法是3 个系统调用的后端:poll, epoll, 和select, 都用作查询对一个或多个文件描述符的读或写是否会阻塞.poll 方法应当返回一个位掩码指示是否非阻塞的读或写是可能的,并且,可能地,提供给内核信息用来使调用进程睡眠直到I/O 变为可能.如果一个驱动的poll 方法为NULL, 设备假定为不阻塞地可读可写.<br>首先，对可能引起设备文件状态变化的等待队列调用poll_wait(),将对应的等待队列头添加到poll_table.然后，返回表示是否能对设备进行无阻塞读写访问的掩码。把当前进程添加到wait_address参数指定的等待列表中。需要注意的是这个函数是不会引起阻塞的。<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="title">int</span> <span class="params">(*poll)</span> <span class="params">(struct file *, struct poll_table_struct *)</span></span>;        <span class="comment">//设备驱动</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">evdev_poll</span><span class="params">(struct file *file, poll_table *wait)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">evdev_client</span> *<span class="title">client</span> = <span class="title">file</span>-&gt;<span class="title">private_data</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">evdev</span> *<span class="title">evdev</span>         = <span class="title">client</span>-&gt;<span class="title">evdev</span>;</span></span><br><span class="line">    poll_wait(file, &amp;evdev-&gt;wait, wait);</span><br><span class="line">    <span class="keyword">return</span> ((client-&gt;head == client-&gt;tail) ? <span class="number">0</span> : (POLLIN | POLLRDNORM)) |</span><br><span class="line">        (evdev-&gt;exist ? <span class="number">0</span> : (POLLHUP | POLLERR));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">poll_wait</span><span class="params">(struct file * filp, <span class="keyword">wait_queue_head_t</span> * wait_address, poll_table *p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (p &amp;&amp; wait_address)</span><br><span class="line">        p-&gt;qproc(filp, wait_address, p);    <span class="comment">//__pollwait</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//filp特定fd对应的file结构体指针</span></span><br><span class="line"><span class="comment">//wait 特定fd对应的硬件驱动程序中的等待队列头指针</span></span><br><span class="line"><span class="comment">//p 调用select()的应用程序中poll_wqueues结构体的poll_table项</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> __pollwait(struct file *filp, <span class="keyword">wait_queue_head_t</span> *wait_address,poll_table *p)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//通过container_of宏得到结构体poll_wqueues的地址</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">poll_wqueues</span> *<span class="title">pwq</span> = <span class="title">container_of</span>(<span class="title">p</span>, <span class="title">struct</span> <span class="title">poll_wqueues</span>, <span class="title">pt</span>);</span></span><br><span class="line">    <span class="comment">//调用poll_get_entry()得到一个poll_table_entry结构体</span></span><br><span class="line">    <span class="comment">//空间不足，动态申请物理内存页，以链表的形式挂在poll_wqueues.table上统一管理。</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">poll_table_entry</span> *<span class="title">entry</span> = <span class="title">poll_get_entry</span>(<span class="title">pwq</span>);</span></span><br><span class="line">    <span class="keyword">if</span> (!entry)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    get_file(filp);</span><br><span class="line">    entry-&gt;filp         = filp;         <span class="comment">// 保存对应的file结构体</span></span><br><span class="line">    entry-&gt;wait_address = wait_address; <span class="comment">// 保存来自设备驱动程序的等待队列头</span></span><br><span class="line">    entry-&gt;key          = p-&gt;key;       <span class="comment">// 保存对该fd关心的事件掩码</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化等待队列项，pollwake是唤醒该等待队列项时候调用的函数</span></span><br><span class="line">    init_waitqueue_func_entry(&amp;entry-&gt;wait, pollwake);</span><br><span class="line"></span><br><span class="line"><span class="comment">//static inline void init_waitqueue_func_entry(wait_queue_t *q,wait_queue_func_t func)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//    q-&gt;flags = 0;            //设为非互斥进程</span></span><br><span class="line"><span class="comment">//    q-&gt;private = NULL;</span></span><br><span class="line"><span class="comment">//    q-&gt;func = func;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//等待队列项private指向poll_wqueues</span></span><br><span class="line">    entry-&gt;wait.<span class="keyword">private</span> = pwq;</span><br><span class="line">    <span class="comment">//将该等待队列项添加到从驱动程序中传递过来的等待队列头中去</span></span><br><span class="line">    <span class="comment">//即：设置等待的进程为非互斥进程，并将其添加进等待队列头的队头中</span></span><br><span class="line">    add_wait_queue(wait_address, &amp;entry-&gt;wait);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">poll_freewait</span><span class="params">(struct poll_wqueues *pwq)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">poll_table_page</span> * <span class="title">p</span> = <span class="title">pwq</span>-&gt;<span class="title">table</span>;</span></span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; pwq-&gt;inline_index; i++)</span><br><span class="line">        free_poll_entry(pwq-&gt;inline_entries + i);</span><br><span class="line">    <span class="keyword">while</span> (p) &#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">poll_table_entry</span> * <span class="title">entry</span>;</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">poll_table_page</span> *<span class="title">old</span>;</span></span><br><span class="line">        entry = p-&gt;entry;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            entry--;</span><br><span class="line">            free_poll_entry(entry);</span><br><span class="line">        &#125; <span class="keyword">while</span> (entry &gt; p-&gt;entries);</span><br><span class="line">        old = p;</span><br><span class="line">        p   = p-&gt;next;</span><br><span class="line">        free_page((<span class="keyword">unsigned</span> <span class="keyword">long</span>) old);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">poll_schedule_timeout</span><span class="params">(struct poll_wqueues *pwq, <span class="keyword">int</span> state,</span></span></span><br><span class="line"><span class="function"><span class="params">              <span class="keyword">ktime_t</span> *expires, <span class="keyword">unsigned</span> <span class="keyword">long</span> slack)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> rc = -EINTR;</span><br><span class="line"></span><br><span class="line">    set_current_state(state);        <span class="comment">//设置当前进程的状态state = TASK_INTERRUPTIBLE,有可能在尚                            //未到期时由其它信号唤醒进程从而导致函数返回</span></span><br><span class="line">    <span class="keyword">if</span> (!pwq-&gt;triggered)    <span class="comment">//只要有一个fd对应的设备将当前进程唤醒，将会把triggered设置为1</span></span><br><span class="line">        rc = schedule_hrtimeout_range(expires, slack, HRTIMER_MODE_ABS);</span><br><span class="line">    __set_current_state(TASK_RUNNING);</span><br><span class="line">    set_mb(pwq-&gt;triggered, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> rc;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//唤醒的时候调用pollwake</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">pollwake</span><span class="params">(<span class="keyword">wait_queue_t</span> *wait, <span class="keyword">unsigned</span> mode, <span class="keyword">int</span> sync, <span class="keyword">void</span> *key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">poll_table_entry</span> *<span class="title">entry</span>;</span></span><br><span class="line">    <span class="comment">//取得文件对应的poll_table_entry</span></span><br><span class="line">    entry = container_of(wait, struct poll_table_entry, wait);</span><br><span class="line">    <span class="comment">//过滤不关心的事件,防止应用进程被误唤醒</span></span><br><span class="line">    <span class="keyword">if</span> (key &amp;&amp; !((<span class="keyword">unsigned</span> <span class="keyword">long</span>)key &amp; entry-&gt;key))</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//唤醒</span></span><br><span class="line">    <span class="keyword">return</span> __pollwake(wait, mode, sync, key);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> __pollwake(<span class="keyword">wait_queue_t</span> *wait, <span class="keyword">unsigned</span> mode, <span class="keyword">int</span> sync, <span class="keyword">void</span> *key)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">poll_wqueues</span> *<span class="title">pwq</span> = <span class="title">wait</span>-&gt;<span class="title">private</span>;</span></span><br><span class="line">    <span class="comment">//定义一个wait_queue_t类型的变量dummy_wait，并初始化</span></span><br><span class="line">    DECLARE_WAITQUEUE(dummy_wait, pwq-&gt;polling_task);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//#define __WAITQUEUE_INITIALIZER(name, tsk) &#123;                \</span></span><br><span class="line">    <span class="comment">//    .private   = tsk,                        \</span></span><br><span class="line">    <span class="comment">//    .func      = default_wake_function,            \</span></span><br><span class="line">    <span class="comment">//    .task_list = &#123; NULL, NULL &#125; &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//#define DECLARE_WAITQUEUE(name, tsk)                    \</span></span><br><span class="line">    <span class="comment">//    wait_queue_t name = __WAITQUEUE_INITIALIZER(name, tsk)</span></span><br><span class="line"></span><br><span class="line">    smp_wmb();</span><br><span class="line">    pwq-&gt;triggered = <span class="number">1</span>;    <span class="comment">//标记为已触发</span></span><br><span class="line">    <span class="comment">//唤醒函数</span></span><br><span class="line">    <span class="keyword">return</span> default_wake_function(&amp;dummy_wait, mode, sync, key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="select系统调用的具体实现过程图解："><a href="#select系统调用的具体实现过程图解：" class="headerlink" title="select系统调用的具体实现过程图解："></a>select系统调用的具体实现过程图解：</h2><p><img src="/Picture/select系统调用的具体实现过程.png" alt></p>
<h2 id="select结构体依赖关系"><a href="#select结构体依赖关系" class="headerlink" title="select结构体依赖关系"></a>select结构体依赖关系</h2><p><img src="/Picture/select结构体依赖关系.png" alt></p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux I/O 复用 epoll源码解析</title>
    <url>/2017/09/21/io-5-epoll/</url>
    <content><![CDATA[<p>Linux I/O epoll 源码分析</p>
<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><!-- vim-markdown-toc GFM -->
<ul>
<li><a href="#epoll">epoll</a><ul>
<li><a href="#epoll_create">epoll_create</a></li>
<li><a href="#epoll_ctl">epoll_ctl</a></li>
<li><a href="#epoll中的递归死循环和深度检查">epoll中的递归死循环和深度检查</a></li>
<li><a href="#循环检测">循环检测</a></li>
<li><a href="#唤醒风暴">唤醒风暴</a></li>
<li><a href="#epoll_create和epoll_ctl函数调用过程">epoll_create和epoll_ctl函数调用过程</a></li>
<li><a href="#epoll_wait函数调用主要过程">epoll_wait函数调用主要过程</a></li>
<li><a href="#epoll结构体间关系">epoll结构体间关系</a></li>
</ul>
</li>
</ul>
<!-- vim-markdown-toc -->
<h1 id="epoll"><a href="#epoll" class="headerlink" title="epoll"></a>epoll</h1><p>epoll的简单原理</p>
<ol>
<li>执行epoll_create时，创建了红黑树和就绪list链表。</li>
<li>执行epoll_ctl时，如果增加fd（socket），则检查在红黑树中是否存在，存在立即返回，不存在则添加到红黑树上，然后向内核注册回调函数，用于当中断事件来临时向准备就绪list链表中插入数据。</li>
<li>执行epoll_wait时立刻返回准备就绪链表里的数据即可。</li>
</ol>
<h2 id="epoll-create"><a href="#epoll-create" class="headerlink" title="epoll_create"></a>epoll_create</h2><p>epoll_create主要做两件事</p>
<ol>
<li>创建并初始化一个eventpoll结构体变量</li>
<li>创建epoll的file结构，并指定file的private_data指针指向刚创建的eventpoll变量，这样，只要根据epoll文件描述符epfd就可以拿到file进而就拿到了eventpoll变量了，该eventpoll就是epoll_ctl和epoll_wait工作的场所</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//epoll文件系统的相关实现</span></span><br><span class="line"><span class="comment">//epoll文件系统初始化，在系统启动时会调用  .init段</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> __init <span class="title">eventpoll_init</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sysinfo</span> <span class="title">si</span>;</span></span><br><span class="line">    si_meminfo(&amp;si);</span><br><span class="line">    <span class="comment">//限制可添加到epoll的最多的描述符数量</span></span><br><span class="line">    max_user_watches = (((si.totalram - si.totalhigh) / <span class="number">25</span>) &lt;&lt; PAGE_SHIFT) /</span><br><span class="line">        EP_ITEM_COST;</span><br><span class="line">    <span class="comment">//检查递归检查队列</span></span><br><span class="line">    ep_nested_calls_init(&amp;poll_loop_ncalls);</span><br><span class="line">    ep_nested_calls_init(&amp;poll_safewake_ncalls);</span><br><span class="line">    ep_nested_calls_init(&amp;poll_readywalk_ncalls);</span><br><span class="line">    <span class="comment">//在内核创建内存池</span></span><br><span class="line">    <span class="comment">//epoll用kmem_cache_create（slab分配器）分别用来分配epitem和eppoll_entry</span></span><br><span class="line">    epi_cache = kmem_cache_create(<span class="string">"eventpoll_epi"</span>, <span class="keyword">sizeof</span>(struct epitem),</span><br><span class="line">            <span class="number">0</span>, SLAB_HWCACHE_ALIGN | SLAB_PANIC, <span class="literal">NULL</span>);</span><br><span class="line">    pwq_cache = kmem_cache_create(<span class="string">"eventpoll_pwq"</span>,</span><br><span class="line">            <span class="keyword">sizeof</span>(struct eppoll_entry), <span class="number">0</span>, SLAB_PANIC, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">SYSCALL_DEFINE1(epoll_create, <span class="keyword">int</span>, size)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (size &lt;= <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> -EINVAL;</span><br><span class="line">    <span class="keyword">return</span> sys_epoll_create1(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SYSCALL_DEFINE1(epoll_create1, <span class="keyword">int</span>, flags)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> error, fd;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">eventpoll</span> *<span class="title">ep</span> = <span class="title">NULL</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">file</span> *<span class="title">file</span>;</span></span><br><span class="line">    BUILD_BUG_ON(EPOLL_CLOEXEC != O_CLOEXEC);</span><br><span class="line">    <span class="keyword">if</span> (flags &amp; ~EPOLL_CLOEXEC)</span><br><span class="line">        <span class="keyword">return</span> -EINVAL;</span><br><span class="line">    error = ep_alloc(&amp;ep);        <span class="comment">//为ep在堆上申请空间并初始化    eventpoll</span></span><br><span class="line">    <span class="keyword">if</span> (error &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> error;</span><br><span class="line">    fd = get_unused_fd_flags(O_RDWR | (flags &amp; O_CLOEXEC));<span class="comment">//会调用alloc_fd()分配文件描述符</span></span><br><span class="line">    <span class="keyword">if</span> (fd &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        error = fd;</span><br><span class="line">        <span class="keyword">goto</span> out_free_ep;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//创建与eventpoll结构体相对应的file结构体，匿名文件，ep保存在file-&gt;private_data结构体中</span></span><br><span class="line">    <span class="comment">//static const struct file_operations eventpoll_fops = &#123;</span></span><br><span class="line">    <span class="comment">//    .release    = ep_eventpoll_release,</span></span><br><span class="line">    <span class="comment">//    .poll        = ep_eventpoll_poll</span></span><br><span class="line">    <span class="comment">//&#125;;</span></span><br><span class="line">    file = anon_inode_getfile(<span class="string">"[eventpoll]"</span>, &amp;eventpoll_fops, ep,</span><br><span class="line">                 O_RDWR | (flags &amp; O_CLOEXEC));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (IS_ERR(file)) &#123;</span><br><span class="line">        error = PTR_ERR(file);</span><br><span class="line">        <span class="keyword">goto</span> out_free_fd;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//建立文件描述符和file之间的联系</span></span><br><span class="line">    fd_install(fd, file);</span><br><span class="line">    ep-&gt;file = file;</span><br><span class="line">    <span class="keyword">return</span> fd;</span><br><span class="line"></span><br><span class="line">out_free_fd:</span><br><span class="line">    put_unused_fd(fd);</span><br><span class="line">out_free_ep:</span><br><span class="line">    ep_free(ep);        <span class="comment">//释放ep  eventpoll</span></span><br><span class="line">    <span class="keyword">return</span> error;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="epoll-ctl"><a href="#epoll-ctl" class="headerlink" title="epoll_ctl"></a>epoll_ctl</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//epfd    epoll内核事件表的文件描述符</span></span><br><span class="line"><span class="comment">//op        要进行的操作类型</span></span><br><span class="line"><span class="comment">//fd        要监测的文件描述符</span></span><br><span class="line"><span class="comment">//event    要监测的事件</span></span><br><span class="line">SYSCALL_DEFINE4(epoll_ctl, <span class="keyword">int</span>, epfd, <span class="keyword">int</span>, op, <span class="keyword">int</span>, fd,</span><br><span class="line">        struct epoll_event __user *, event)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> error;</span><br><span class="line">    <span class="keyword">int</span> did_lock_epmutex = <span class="number">0</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">file</span> *<span class="title">file</span>, *<span class="title">tfile</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">eventpoll</span> *<span class="title">ep</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">epitem</span> *<span class="title">epi</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span> <span class="title">epds</span>;</span></span><br><span class="line"></span><br><span class="line">    error = -EFAULT;</span><br><span class="line">    <span class="comment">//判断参数的合法性，将event从用户空间复制到内核空间</span></span><br><span class="line">    <span class="keyword">if</span> (ep_op_has_event(op) &amp;&amp;</span><br><span class="line">        copy_from_user(&amp;epds, event, <span class="keyword">sizeof</span>(struct epoll_event)))</span><br><span class="line">        <span class="keyword">goto</span> error_return;</span><br><span class="line"></span><br><span class="line">    error = -EBADF;</span><br><span class="line">    file = fget(epfd);    <span class="comment">//根据文件描述符得到相应的文件对象，内核事件表</span></span><br><span class="line">    <span class="keyword">if</span> (!file)</span><br><span class="line">        <span class="keyword">goto</span> error_return;</span><br><span class="line"></span><br><span class="line">    tfile = fget(fd);        <span class="comment">//要监测的文件</span></span><br><span class="line">    <span class="keyword">if</span> (!tfile)</span><br><span class="line">        <span class="keyword">goto</span> error_fput;</span><br><span class="line"></span><br><span class="line">        error = -EPERM;</span><br><span class="line">    <span class="keyword">if</span> (!tfile-&gt;f_op || !tfile-&gt;f_op-&gt;poll)    <span class="comment">//要监测文件设备poll方法的检查</span></span><br><span class="line">        <span class="keyword">goto</span> error_tgt_fput;</span><br><span class="line">    error = -EINVAL;</span><br><span class="line">    <span class="keyword">if</span> (file == tfile || !is_file_epoll(file))</span><br><span class="line">        <span class="keyword">goto</span> error_tgt_fput;</span><br><span class="line">    ep = file-&gt;private_data;            <span class="comment">//获取epoll对应的eventpoll结构体</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (op == EPOLL_CTL_ADD || op == EPOLL_CTL_DEL) &#123;</span><br><span class="line">        mutex_lock(&amp;epmutex);</span><br><span class="line">        did_lock_epmutex = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (op == EPOLL_CTL_ADD) &#123;</span><br><span class="line">        <span class="keyword">if</span> (is_file_epoll(tfile)) &#123;</span><br><span class="line">            error = -ELOOP;</span><br><span class="line">            <span class="keyword">if</span> (ep_loop_check(ep, tfile) != <span class="number">0</span>) &#123;        <span class="comment">//循环检测</span></span><br><span class="line">                clear_tfile_check_list();</span><br><span class="line">                <span class="keyword">goto</span> error_tgt_fput;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span></span><br><span class="line">            list_add(&amp;tfile-&gt;f_tfile_llink, &amp;tfile_check_list);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mutex_lock_nested(&amp;ep-&gt;mtx, <span class="number">0</span>);        <span class="comment">//互斥锁加锁</span></span><br><span class="line">    <span class="comment">//防止重复添加（在ep的红黑树中查找是否存在这个fd），存在返回epitem，不存在返回NULL</span></span><br><span class="line">    epi = ep_find(ep, tfile, fd);</span><br><span class="line"></span><br><span class="line">    error = -EINVAL;</span><br><span class="line">    <span class="keyword">switch</span> (op) &#123;            <span class="comment">//不同的操作</span></span><br><span class="line">    <span class="keyword">case</span> EPOLL_CTL_ADD:</span><br><span class="line">        <span class="keyword">if</span> (!epi) &#123;    <span class="comment">//红黑树上不存在这个节点</span></span><br><span class="line">            epds.events |= POLLERR | POLLHUP;    <span class="comment">//确保“出错，连接挂起”被当作感兴趣的事件</span></span><br><span class="line">            error = ep_insert(ep, &amp;epds, tfile, fd);    <span class="comment">//添加</span></span><br><span class="line">        &#125; <span class="keyword">else</span></span><br><span class="line">            error = -EEXIST;</span><br><span class="line">        clear_tfile_check_list();        <span class="comment">//清空需要监测的文件的检查列表</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> EPOLL_CTL_DEL:</span><br><span class="line">        <span class="keyword">if</span> (epi)    <span class="comment">//红黑树上存在这个节点</span></span><br><span class="line">            error = ep_remove(ep, epi);        <span class="comment">//删除</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            error = -ENOENT;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> EPOLL_CTL_MOD:</span><br><span class="line">        <span class="keyword">if</span> (epi) &#123;</span><br><span class="line">            epds.events |= POLLERR | POLLHUP;</span><br><span class="line">            error = ep_modify(ep, epi, &amp;epds);</span><br><span class="line">        &#125; <span class="keyword">else</span></span><br><span class="line">            error = -ENOENT;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    mutex_unlock(&amp;ep-&gt;mtx);        <span class="comment">//互斥锁，解锁</span></span><br><span class="line"></span><br><span class="line">error_tgt_fput:</span><br><span class="line">    <span class="keyword">if</span> (did_lock_epmutex)</span><br><span class="line">        mutex_unlock(&amp;epmutex);</span><br><span class="line"></span><br><span class="line">    fput(tfile);</span><br><span class="line">error_fput:</span><br><span class="line">    fput(file);</span><br><span class="line">error_return:</span><br><span class="line">    <span class="keyword">return</span> error;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">ep_insert</span><span class="params">(struct eventpoll *ep, struct epoll_event *event,</span></span></span><br><span class="line"><span class="function"><span class="params">             struct file *tfile, <span class="keyword">int</span> fd)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> error, revents, pwake = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> flags;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">epitem</span> *<span class="title">epi</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ep_pqueue</span> <span class="title">epq</span>;</span></span><br><span class="line">    <span class="comment">//struct ep_pqueue &#123;        poll_table pt;        struct epitem *epi;        &#125;;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (unlikely(atomic_read(&amp;ep-&gt;user-&gt;epoll_watches) &gt;=</span><br><span class="line">             max_user_watches))</span><br><span class="line">        <span class="keyword">return</span> -ENOSPC;</span><br><span class="line">    <span class="comment">//初始化分配epi     epitem</span></span><br><span class="line">    <span class="keyword">if</span> (!(epi = kmem_cache_alloc(epi_cache, GFP_KERNEL)))</span><br><span class="line">        <span class="keyword">return</span> -ENOMEM;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//epi初始化</span></span><br><span class="line">    INIT_LIST_HEAD(&amp;epi-&gt;rdllink);        <span class="comment">//就绪的事件链表</span></span><br><span class="line">    INIT_LIST_HEAD(&amp;epi-&gt;fllink);        <span class="comment">//连接被监听的文件</span></span><br><span class="line">    INIT_LIST_HEAD(&amp;epi-&gt;pwqlist);        <span class="comment">//poll等待队列</span></span><br><span class="line">    epi-&gt;ep = ep;</span><br><span class="line">    ep_set_ffd(&amp;epi-&gt;ffd, tfile, fd);</span><br><span class="line">    epi-&gt;event = *event;</span><br><span class="line">    epi-&gt;nwait = <span class="number">0</span>;</span><br><span class="line">    epi-&gt;next = EP_UNACTIVE_PTR;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化的epq</span></span><br><span class="line">    epq.epi = epi;</span><br><span class="line">    <span class="comment">//epq.pt-&gt;qproc = ep_ptable_queue_proc    回调函数的设置</span></span><br><span class="line">    init_poll_funcptr(&amp;epq.pt, ep_ptable_queue_proc);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//内部会调用ep_ptable_queue_proc, 在文件对应的wait queue head 上注册回调函数</span></span><br><span class="line">    <span class="comment">//并返回当前文件的状态 </span></span><br><span class="line">    revents = tfile-&gt;f_op-&gt;poll(tfile, &amp;epq.pt);</span><br><span class="line"></span><br><span class="line">    error = -ENOMEM;</span><br><span class="line">    <span class="keyword">if</span> (epi-&gt;nwait &lt; <span class="number">0</span>)        <span class="comment">//f_op-&gt;poll过程出错</span></span><br><span class="line">        <span class="keyword">goto</span> error_unregister;</span><br><span class="line"></span><br><span class="line">    spin_lock(&amp;tfile-&gt;f_lock);</span><br><span class="line">    <span class="comment">//添加当前的epitem到要监测文件的tfile-&gt;f_ep_links链表</span></span><br><span class="line">    list_add_tail(&amp;epi-&gt;fllink, &amp;tfile-&gt;f_ep_links);</span><br><span class="line">    spin_unlock(&amp;tfile-&gt;f_lock);</span><br><span class="line">    <span class="comment">//插入epi到红黑树</span></span><br><span class="line">    ep_rbtree_insert(ep, epi);</span><br><span class="line"></span><br><span class="line">    error = -EINVAL;</span><br><span class="line">    <span class="keyword">if</span> (reverse_path_check())                <span class="comment">//唤醒风暴检查</span></span><br><span class="line">        <span class="keyword">goto</span> error_remove_epi;</span><br><span class="line"></span><br><span class="line">    spin_lock_irqsave(&amp;ep-&gt;lock, flags);</span><br><span class="line">    <span class="comment">//文件已经就绪，插入到epitem的就绪链表rdllist</span></span><br><span class="line">    <span class="keyword">if</span> ((revents &amp; event-&gt;events) &amp;&amp; !ep_is_linked(&amp;epi-&gt;rdllink)) &#123;</span><br><span class="line">        list_add_tail(&amp;epi-&gt;rdllink, &amp;ep-&gt;rdllist);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (waitqueue_active(&amp;ep-&gt;wq))</span><br><span class="line">    <span class="comment">//通知epoll_wait,调用回调函数唤醒epoll_wait上的进程</span></span><br><span class="line">            wake_up_locked(&amp;ep-&gt;wq);</span><br><span class="line">        <span class="keyword">if</span> (waitqueue_active(&amp;ep-&gt;poll_wait))        <span class="comment">//先不通知调用eventpoll_poll的进程</span></span><br><span class="line">            pwake++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    spin_unlock_irqrestore(&amp;ep-&gt;lock, flags);</span><br><span class="line">    atomic_inc(&amp;ep-&gt;user-&gt;epoll_watches);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pwake)</span><br><span class="line">        ep_poll_safewake(&amp;ep-&gt;poll_wait);        <span class="comment">//安全通知调用eventpoll_poll的进程</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">error_remove_epi:</span><br><span class="line">    spin_lock(&amp;tfile-&gt;f_lock);</span><br><span class="line">    <span class="comment">//删除文件上的epi</span></span><br><span class="line">    <span class="keyword">if</span> (ep_is_linked(&amp;epi-&gt;fllink))</span><br><span class="line">        list_del_init(&amp;epi-&gt;fllink);</span><br><span class="line">    spin_unlock(&amp;tfile-&gt;f_lock);</span><br><span class="line">    <span class="comment">//从红黑树中删除</span></span><br><span class="line">    rb_erase(&amp;epi-&gt;rbn, &amp;ep-&gt;rbr);</span><br><span class="line"></span><br><span class="line">error_unregister:</span><br><span class="line">    <span class="comment">//从文件的wait_queue中删除，释放epitem关联的所有epoll_entry</span></span><br><span class="line">    ep_unregister_pollwait(ep, epi);</span><br><span class="line">    spin_lock_irqsave(&amp;ep-&gt;lock, flags);</span><br><span class="line">    <span class="keyword">if</span> (ep_is_linked(&amp;epi-&gt;rdllink))</span><br><span class="line">        list_del_init(&amp;epi-&gt;rdllink);</span><br><span class="line">    spin_unlock_irqrestore(&amp;ep-&gt;lock, flags);</span><br><span class="line">    <span class="comment">//释放epi</span></span><br><span class="line">    kmem_cache_free(epi_cache, epi);</span><br><span class="line">    <span class="keyword">return</span> error;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// tfile-&gt;f_op-&gt;poll(tfile, &amp;epq.pt)   -&gt;   poll_wait()    -&gt;   ep_ptable_queue_proc()</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ep_ptable_queue_proc</span><span class="params">(struct file *file, <span class="keyword">wait_queue_head_t</span> *whead,</span></span></span><br><span class="line"><span class="function"><span class="params">                 poll_table *pt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">epitem</span> *<span class="title">epi</span> = <span class="title">ep_item_from_epqueue</span>(<span class="title">pt</span>);</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">eppoll_entry</span> *<span class="title">pwq</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (epi-&gt;nwait &gt;= <span class="number">0</span> &amp;&amp; (pwq = kmem_cache_alloc(pwq_cache, GFP_KERNEL))) &#123;</span><br><span class="line">        <span class="comment">//pwq初始化，pwq-&gt;wait.func = ep_poll_callback;    //唤醒回调函数</span></span><br><span class="line">        init_waitqueue_func_entry(&amp;pwq-&gt;wait, ep_poll_callback);</span><br><span class="line">        pwq-&gt;whead = whead;    <span class="comment">//监测文件的等待队列头</span></span><br><span class="line">        pwq-&gt;base = epi;        <span class="comment">//指向epitem</span></span><br><span class="line">        add_wait_queue(whead, &amp;pwq-&gt;wait);        <span class="comment">//将等待队列项，加入到等待队列中去</span></span><br><span class="line">        list_add_tail(&amp;pwq-&gt;llink, &amp;epi-&gt;pwqlist);    <span class="comment">//将等待队列项保存到epi-&gt;pwqlist链表中</span></span><br><span class="line">        epi-&gt;nwait++;            <span class="comment">//poll操作中事件的个数加1</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        epi-&gt;nwait = <span class="number">-1</span>;        <span class="comment">//标识调用出错</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">ep_remove</span><span class="params">(struct eventpoll *ep, struct epitem *epi)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> flags;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">file</span> *<span class="title">file</span> = <span class="title">epi</span>-&gt;<span class="title">ffd</span>.<span class="title">file</span>;</span>        <span class="comment">//获得要删除文件描述符的文件结构</span></span><br><span class="line"></span><br><span class="line">    ep_unregister_pollwait(ep, epi);    <span class="comment">//删除被监听文件的等待队列项</span></span><br><span class="line"></span><br><span class="line">    spin_lock(&amp;file-&gt;f_lock);</span><br><span class="line">    <span class="keyword">if</span> (ep_is_linked(&amp;epi-&gt;fllink))</span><br><span class="line">        list_del_init(&amp;epi-&gt;fllink);    <span class="comment">//从epitem.fllink中删除</span></span><br><span class="line">    spin_unlock(&amp;file-&gt;f_lock);</span><br><span class="line"></span><br><span class="line">    rb_erase(&amp;epi-&gt;rbn, &amp;ep-&gt;rbr);    <span class="comment">//从红黑树中删除</span></span><br><span class="line"></span><br><span class="line">    spin_lock_irqsave(&amp;ep-&gt;lock, flags);</span><br><span class="line">    <span class="keyword">if</span> (ep_is_linked(&amp;epi-&gt;rdllink))</span><br><span class="line">        list_del_init(&amp;epi-&gt;rdllink);    <span class="comment">//从epitem.rdllink中删除（就绪队列）</span></span><br><span class="line">    spin_unlock_irqrestore(&amp;ep-&gt;lock, flags);</span><br><span class="line"></span><br><span class="line">    kmem_cache_free(epi_cache, epi);        <span class="comment">//释放空间</span></span><br><span class="line"></span><br><span class="line">    atomic_dec(&amp;ep-&gt;user-&gt;epoll_watches);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">ep_modify</span><span class="params">(struct eventpoll *ep, struct epitem *epi, struct epoll_event *event)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pwake = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> revents;</span><br><span class="line"></span><br><span class="line">    epi-&gt;event.events = event-&gt;events;</span><br><span class="line">    epi-&gt;event.data = event-&gt;data;</span><br><span class="line"></span><br><span class="line">    smp_mb();</span><br><span class="line"></span><br><span class="line">    revents = epi-&gt;ffd.file-&gt;f_op-&gt;poll(epi-&gt;ffd.file, <span class="literal">NULL</span>);    <span class="comment">//获得事件掩码</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (revents &amp; event-&gt;events) &#123;</span><br><span class="line">        spin_lock_irq(&amp;ep-&gt;lock);</span><br><span class="line">        <span class="keyword">if</span> (!ep_is_linked(&amp;epi-&gt;rdllink)) &#123;</span><br><span class="line">            <span class="comment">//将已就绪的等待队列项，加入到ep-&gt;rdllist链表</span></span><br><span class="line">            list_add_tail(&amp;epi-&gt;rdllink, &amp;ep-&gt;rdllist);</span><br><span class="line">            <span class="keyword">if</span> (waitqueue_active(&amp;ep-&gt;wq))</span><br><span class="line">                wake_up_locked(&amp;ep-&gt;wq);</span><br><span class="line">            <span class="keyword">if</span> (waitqueue_active(&amp;ep-&gt;poll_wait))</span><br><span class="line">                pwake++;</span><br><span class="line">        &#125;</span><br><span class="line">        spin_unlock_irq(&amp;ep-&gt;lock);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pwake)</span><br><span class="line">        ep_poll_safewake(&amp;ep-&gt;poll_wait);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">SYSCALL_DEFINE4(epoll_wait, <span class="keyword">int</span>, epfd, struct epoll_event __user *, events,</span><br><span class="line">        <span class="keyword">int</span>, maxevents, <span class="keyword">int</span>, timeout)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> error;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">file</span> *<span class="title">file</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">eventpoll</span> *<span class="title">ep</span>;</span></span><br><span class="line">    <span class="comment">//检查输入数据有效性</span></span><br><span class="line">    <span class="keyword">if</span> (maxevents &lt;= <span class="number">0</span> || maxevents &gt; EP_MAX_EVENTS)</span><br><span class="line">        <span class="keyword">return</span> -EINVAL;</span><br><span class="line">    <span class="keyword">if</span> (!access_ok(VERIFY_WRITE, events, maxevents * <span class="keyword">sizeof</span>(struct epoll_event))) &#123;</span><br><span class="line">        error = -EFAULT;</span><br><span class="line">        <span class="keyword">goto</span> error_return;</span><br><span class="line">    &#125;</span><br><span class="line">    error = -EBADF;</span><br><span class="line">    file = fget(epfd);</span><br><span class="line">    <span class="keyword">if</span> (!file)</span><br><span class="line">        <span class="keyword">goto</span> error_return;</span><br><span class="line"></span><br><span class="line">    error = -EINVAL;</span><br><span class="line">    <span class="keyword">if</span> (!is_file_epoll(file))</span><br><span class="line">        <span class="keyword">goto</span> error_fput;</span><br><span class="line"></span><br><span class="line">    ep = file-&gt;private_data;        <span class="comment">//获得eventpoll结构</span></span><br><span class="line"></span><br><span class="line">    error = ep_poll(ep, events, maxevents, timeout);</span><br><span class="line">error_fput:</span><br><span class="line">    fput(file);</span><br><span class="line">error_return:</span><br><span class="line">    <span class="keyword">return</span> error;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">ep_poll</span><span class="params">(struct eventpoll *ep, struct epoll_event __user *events,</span></span></span><br><span class="line"><span class="function"><span class="params">           <span class="keyword">int</span> maxevents, <span class="keyword">long</span> timeout)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res, eavail;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> flags;</span><br><span class="line">    <span class="keyword">long</span> jtimeout;</span><br><span class="line">    <span class="keyword">wait_queue_t</span> wait;</span><br><span class="line">    <span class="comment">//timeout &lt; 0 或者timeout &gt;=  EP_MAX_MSTIMEO</span></span><br><span class="line">    jtimeout = (timeout &lt; <span class="number">0</span> || timeout &gt;= EP_MAX_MSTIMEO) ?</span><br><span class="line">        MAX_SCHEDULE_TIMEOUT : (timeout * HZ + <span class="number">999</span>) / <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line">retry:</span><br><span class="line">    spin_lock_irqsave(&amp;ep-&gt;lock, flags);</span><br><span class="line"></span><br><span class="line">    res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (list_empty(&amp;ep-&gt;rdllist)) &#123;        <span class="comment">//事件就绪队列为空</span></span><br><span class="line">        init_waitqueue_entry(&amp;wait, current);    <span class="comment">//对当前进程设置等待项</span></span><br><span class="line">        <span class="comment">//static inline void init_waitqueue_entry(wait_queue_t *q, struct task_struct *p)</span></span><br><span class="line">        <span class="comment">//&#123;</span></span><br><span class="line">        <span class="comment">//    q-&gt;flags = 0;</span></span><br><span class="line">        <span class="comment">//    q-&gt;private = p;</span></span><br><span class="line">        <span class="comment">//    q-&gt;func = default_wake_function;</span></span><br><span class="line">        <span class="comment">//&#125;</span></span><br><span class="line">        wait.flags |= WQ_FLAG_EXCLUSIVE;    <span class="comment">//标记等待的进程是互斥进程</span></span><br><span class="line">        __add_wait_queue(&amp;ep-&gt;wq, &amp;wait);    <span class="comment">//加入ep_wait()等待队列</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            <span class="comment">//进程状态的设置，TASK_INTERRUPTIBLE表示进程可以被信号和wake_up()唤醒</span></span><br><span class="line">            set_current_state(TASK_INTERRUPTIBLE);</span><br><span class="line">            <span class="comment">//就绪队列为不空  或者  睡眠时间为0</span></span><br><span class="line">            <span class="keyword">if</span> (!list_empty(&amp;ep-&gt;rdllist) || !jtimeout)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">if</span> (signal_pending(current)) &#123;        <span class="comment">//收到信号</span></span><br><span class="line">                res = -EINTR;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            spin_unlock_irqrestore(&amp;ep-&gt;lock, flags);</span><br><span class="line">            <span class="comment">//进入睡眠等待ep_poll_callback()将当前进程唤醒或超时，返回值是剩余的时间。</span></span><br><span class="line">            jtimeout = schedule_timeout(jtimeout);</span><br><span class="line">            spin_lock_irqsave(&amp;ep-&gt;lock, flags);</span><br><span class="line">        &#125; <span class="comment">//end for( ; ; )</span></span><br><span class="line">        __remove_wait_queue(&amp;ep-&gt;wq, &amp;wait);    <span class="comment">//将等待队列项从ep_wait()等待队列中移除</span></span><br><span class="line"></span><br><span class="line">        set_current_state(TASK_RUNNING);        <span class="comment">//表示TASK_RUNNING运行或就绪状态</span></span><br><span class="line">    &#125;  <span class="comment">//end if</span></span><br><span class="line">    <span class="comment">//ep-&gt;rdllist不空    或者  ep-&gt;ovflist不空   eavail为true</span></span><br><span class="line">    eavail = ! list_empty(&amp;ep-&gt;rdllist) || ep-&gt;ovflist != EP_UNACTIVE_PTR;</span><br><span class="line">    spin_unlock_irqrestore(&amp;ep-&gt;lock, flags);</span><br><span class="line">    <span class="comment">//如果没有被信号中断，并且有事件就绪，但发送成功的文件描述符为0，并且没有超时</span></span><br><span class="line">    <span class="comment">//则跳转到retry标签处，重新等待文件状态就绪</span></span><br><span class="line">    <span class="keyword">if</span> ( !res &amp;&amp; eavail &amp;&amp;  !(res = ep_send_events(ep, events, maxevents)) &amp;&amp; jtimeout)</span><br><span class="line">        <span class="keyword">goto</span> retry;</span><br><span class="line">    <span class="keyword">return</span> res;    <span class="comment">//返回获取的事件的个数或者错误码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//发送结果到用户空间</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">ep_send_events</span><span class="params">(struct eventpoll *ep,</span></span></span><br><span class="line"><span class="function"><span class="params">              struct epoll_event __user *events, <span class="keyword">int</span> maxevents)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ep_send_events_data</span> <span class="title">esed</span>;</span></span><br><span class="line">    esed.maxevents = maxevents;        <span class="comment">//需要检测的文件描述符个数</span></span><br><span class="line">    esed.events = events;</span><br><span class="line">    <span class="keyword">return</span> ep_scan_ready_list(ep, ep_send_events_proc, &amp;esed, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">ep_scan_ready_list</span><span class="params">(struct eventpoll *ep,</span></span></span><br><span class="line"><span class="function"><span class="params">                  <span class="keyword">int</span> (*sproc)(struct eventpoll *, struct list_head *, <span class="keyword">void</span> *),</span></span></span><br><span class="line"><span class="function"><span class="params">                  <span class="keyword">void</span> *priv,</span></span></span><br><span class="line"><span class="function"><span class="params">                  <span class="keyword">int</span> depth)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> error, pwake = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> flags;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">epitem</span> *<span class="title">epi</span>, *<span class="title">nepi</span>;</span></span><br><span class="line">    LIST_HEAD(txlist);</span><br><span class="line"></span><br><span class="line">    mutex_lock_nested(&amp;ep-&gt;mtx, depth);</span><br><span class="line"></span><br><span class="line">    spin_lock_irqsave(&amp;ep-&gt;lock, flags);</span><br><span class="line">    <span class="comment">//将ep-&gt;rdllist链表添加到txlist链表中去，使ep-&gt;rdllist链表为空</span></span><br><span class="line">    list_splice_init(&amp;ep-&gt;rdllist, &amp;txlist);</span><br><span class="line">    <span class="comment">//标记ep_scan_ready_list()准备向用户空间传递事件，当有唤醒函数ep_poll_callback()调用时</span></span><br><span class="line">    <span class="comment">//将就绪的文件描述符的epitem实例加入到ovflist链表中。</span></span><br><span class="line">    ep-&gt;ovflist = <span class="literal">NULL</span>;</span><br><span class="line">    spin_unlock_irqrestore(&amp;ep-&gt;lock, flags);</span><br><span class="line"></span><br><span class="line">    error = (*sproc)(ep, &amp;txlist, priv);        <span class="comment">//ep_send_events_proc</span></span><br><span class="line"></span><br><span class="line">    spin_lock_irqsave(&amp;ep-&gt;lock, flags);</span><br><span class="line">    <span class="comment">//在执行上面代码期间，又有可能有就绪事件，这样就进入ep-&gt;ovflist队列，</span></span><br><span class="line">    <span class="comment">//将ovflist链表中的就绪文件描述符加入到rdllist    #define EP_UNACTIVE_PTR ((void *) -1L)</span></span><br><span class="line">    <span class="keyword">for</span> (nepi = ep-&gt;ovflist;   (epi = nepi) != <span class="literal">NULL</span>;</span><br><span class="line">         nepi = epi-&gt;next, epi-&gt;next = EP_UNACTIVE_PTR) &#123;</span><br><span class="line">        <span class="comment">//如果epi-&gt;rdllink为空，将epi加入到ep-&gt;rdllist中</span></span><br><span class="line">        <span class="keyword">if</span> (!ep_is_linked(&amp;epi-&gt;rdllink))        <span class="comment">//list_empty(&amp;epi-&gt;rdllink)</span></span><br><span class="line">            list_add_tail(&amp;epi-&gt;rdllink, &amp;ep-&gt;rdllist);</span><br><span class="line">    &#125;</span><br><span class="line">    ep-&gt;ovflist = EP_UNACTIVE_PTR;        <span class="comment">//标记向用户空间传递事件结束</span></span><br><span class="line"></span><br><span class="line">    list_splice(&amp;txlist, &amp;ep-&gt;rdllist);        <span class="comment">//如果txlist不为空，将txlist链表加入到rdllist链表中</span></span><br><span class="line">    <span class="keyword">if</span> ( ! list_empty(&amp;ep-&gt;rdllist)) &#123;        <span class="comment">//如果文件描述符就绪链表ep-&gt;rdllist不为空</span></span><br><span class="line">        <span class="keyword">if</span> (waitqueue_active(&amp;ep-&gt;wq))</span><br><span class="line">        wake_up_locked(&amp;ep-&gt;wq);        <span class="comment">//如果ep-&gt;wq不空，唤醒ep-&gt;wq上的进程</span></span><br><span class="line">        <span class="keyword">if</span> (waitqueue_active(&amp;ep-&gt;poll_wait))</span><br><span class="line">            pwake++;                    <span class="comment">//如果ep-&gt;poll_wait不空</span></span><br><span class="line">    &#125;</span><br><span class="line">    spin_unlock_irqrestore(&amp;ep-&gt;lock, flags);</span><br><span class="line"></span><br><span class="line">    mutex_unlock(&amp;ep-&gt;mtx);</span><br><span class="line">    <span class="keyword">if</span> (pwake)</span><br><span class="line">        ep_poll_safewake(&amp;ep-&gt;poll_wait);    <span class="comment">//通知调用了poll的进程</span></span><br><span class="line">    <span class="keyword">return</span> error;        <span class="comment">//返回发送的就绪的文件描述符个数或错误码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">ep_send_events_proc</span><span class="params">(struct eventpoll *ep, struct list_head *head, <span class="keyword">void</span> *priv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ep_send_events_data</span> *<span class="title">esed</span> = <span class="title">priv</span>;</span></span><br><span class="line">    <span class="keyword">int</span> eventcnt;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> revents;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">epitem</span> *<span class="title">epi</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span> __<span class="title">user</span> *<span class="title">uevent</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (eventcnt = <span class="number">0</span>, uevent = esed-&gt;events;</span><br><span class="line">         !list_empty(head) &amp;&amp; eventcnt &lt; esed-&gt;maxevents;  ) &#123;</span><br><span class="line">        epi = list_first_entry(head, struct epitem, rdllink);        <span class="comment">//得到epitem结构体</span></span><br><span class="line"></span><br><span class="line">        list_del_init(&amp;epi-&gt;rdllink);        <span class="comment">//从就绪链表中删除该epitem</span></span><br><span class="line"><span class="comment">//立即返回当前文件的就绪事件</span></span><br><span class="line">        revents = epi-&gt;ffd.file-&gt;f_op-&gt;poll(epi-&gt;ffd.file, <span class="literal">NULL</span>) &amp; epi-&gt;event.events;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (revents) &#123;</span><br><span class="line"><span class="comment">//将就绪事件的poll_event发送至用户空间</span></span><br><span class="line">            <span class="keyword">if</span> (__put_user(revents, &amp;uevent-&gt;events) ||</span><br><span class="line">                __put_user(epi-&gt;event.data, &amp;uevent-&gt;data)) &#123;</span><br><span class="line">                list_add(&amp;epi-&gt;rdllink, head);        <span class="comment">//发送失败，将epi重新加入head</span></span><br><span class="line">                <span class="keyword">return</span> eventcnt ? eventcnt : -EFAULT;</span><br><span class="line">            &#125;</span><br><span class="line">            eventcnt++;</span><br><span class="line">            uevent++;</span><br><span class="line"><span class="comment">//#define EP_PRIVATE_BITS (EPOLLONESHOT | EPOLLET)</span></span><br><span class="line">            <span class="keyword">if</span> (epi-&gt;event.events &amp; EPOLLONESHOT)  <span class="comment">//如果文件描述符检测EPOLLONESHOT</span></span><br><span class="line">                epi-&gt;event.events &amp;= EP_PRIVATE_BITS;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (!(epi-&gt;event.events &amp; EPOLLET)) &#123;</span><br><span class="line"><span class="comment">//未设置为ET(非边缘触发)模式，就将epi-&gt;rdllink加入到ep-&gt;rdllist链表中</span></span><br><span class="line">                list_add_tail(&amp;epi-&gt;rdllink, &amp;ep-&gt;rdllist);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;    <span class="comment">//end if revents</span></span><br><span class="line">    &#125;    <span class="comment">//end for</span></span><br><span class="line">    <span class="keyword">return</span> eventcnt;    <span class="comment">//返回发送的就绪的文件描述符个数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//ep_poll_callback唤醒回调函数</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">ep_poll_callback</span><span class="params">(<span class="keyword">wait_queue_t</span> *wait, <span class="keyword">unsigned</span> mode, <span class="keyword">int</span> sync, <span class="keyword">void</span> *key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pwake = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> flags;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">epitem</span> *<span class="title">epi</span> = <span class="title">ep_item_from_wait</span>(<span class="title">wait</span>);</span>    <span class="comment">//得到epitem</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">eventpoll</span> *<span class="title">ep</span> = <span class="title">epi</span>-&gt;<span class="title">ep</span>;</span>                <span class="comment">//得到eventpoll</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((<span class="keyword">unsigned</span> <span class="keyword">long</span>)key &amp; POLLFREE) &#123;            <span class="comment">//有错误发生</span></span><br><span class="line">        ep_pwq_from_wait(wait)-&gt;whead = <span class="literal">NULL</span>;    <span class="comment">//等待队列头置为NULL</span></span><br><span class="line">        list_del_init(&amp;wait-&gt;task_list);        <span class="comment">//从等待队列中删除等待队列项</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    spin_lock_irqsave(&amp;ep-&gt;lock, flags);</span><br><span class="line">    <span class="comment">//#define EP_PRIVATE_BITS (EPOLLONESHOT | EPOLLET)</span></span><br><span class="line">    <span class="keyword">if</span> (!(epi-&gt;event.events &amp; ~EP_PRIVATE_BITS))<span class="comment">//有非EPOLLONESHOT | EPOLLET不懂！！！</span></span><br><span class="line">        <span class="keyword">goto</span> out_unlock;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (key &amp;&amp; !((<span class="keyword">unsigned</span> <span class="keyword">long</span>) key &amp; epi-&gt;event.events))</span><br><span class="line">        <span class="keyword">goto</span> out_unlock;                        <span class="comment">//没有事件发生</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//ep-&gt;ovflist != EP_UNACTIVE_PTR成立时，ep_scan_ready_list()正在向用户空间传递事件。</span></span><br><span class="line">    <span class="comment">//如果当前进程正在向用户空间传递事件，则将当前的事件对应的epitem实例加入到ovflist链表中。</span></span><br><span class="line">    <span class="keyword">if</span> (unlikely(ep-&gt;ovflist != EP_UNACTIVE_PTR)) &#123;</span><br><span class="line">        <span class="comment">//如果epi-&gt;next不等于EP_UNACTIVE_PTR，</span></span><br><span class="line">        <span class="comment">//则说明已经添加到ovflist链表中，就不用再添加了</span></span><br><span class="line">        <span class="keyword">if</span> (epi-&gt;next == EP_UNACTIVE_PTR) &#123;</span><br><span class="line">            epi-&gt;next = ep-&gt;ovflist;            <span class="comment">//把epi放到ovflist链表中</span></span><br><span class="line">            ep-&gt;ovflist = epi;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">goto</span> out_unlock;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!ep_is_linked(&amp;epi-&gt;rdllink))</span><br><span class="line">        list_add_tail(&amp;epi-&gt;rdllink, &amp;ep-&gt;rdllist); <span class="comment">//把epitem放到strcut eventpoll的rdllist中去</span></span><br><span class="line">    <span class="keyword">if</span> (waitqueue_active(&amp;ep-&gt;wq))</span><br><span class="line">        wake_up_locked(&amp;ep-&gt;wq);        <span class="comment">//唤醒调用epoll_wait()函数时睡眠的进程</span></span><br><span class="line">    <span class="keyword">if</span> (waitqueue_active(&amp;ep-&gt;poll_wait))</span><br><span class="line">        pwake++;</span><br><span class="line"></span><br><span class="line">out_unlock:</span><br><span class="line">    spin_unlock_irqrestore(&amp;ep-&gt;lock, flags);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pwake)</span><br><span class="line">        ep_poll_safewake(&amp;ep-&gt;poll_wait);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//由于epoll自身也是文件系统，其描述符也可以被poll/select/epoll监视，因此需要实现poll方法</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">ep_eventpoll_poll</span><span class="params">(struct file *file, poll_table *wait)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pollflags;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">eventpoll</span> *<span class="title">ep</span> = <span class="title">file</span>-&gt;<span class="title">private_data</span>;</span></span><br><span class="line">    <span class="comment">//把等待队列项插入到ep-&gt;poll_wait</span></span><br><span class="line">    poll_wait(file, &amp;ep-&gt;poll_wait, wait);</span><br><span class="line">    <span class="comment">//扫描就绪的文件列表，调用每个文件上的poll检查是否真的就绪，然后复制到用户空间，</span></span><br><span class="line">    <span class="comment">//文件列表中有可能有epoll文件，调用poll的时候有可能产生递归，</span></span><br><span class="line">    <span class="comment">//调用所以用ep_call_nested包装一下，防止死循环和过深的调用</span></span><br><span class="line">    pollflags = ep_call_nested(&amp;poll_readywalk_ncalls, EP_MAX_NESTS,</span><br><span class="line">                   ep_poll_readyevents_proc, ep, ep, current);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> pollflags != <span class="number">-1</span> ? pollflags : <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">ep_poll_readyevents_proc</span><span class="params">(<span class="keyword">void</span> *priv, <span class="keyword">void</span> *cookie, <span class="keyword">int</span> call_nests)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ep_scan_ready_list(priv, ep_read_events_proc, <span class="literal">NULL</span>, call_nests + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">ep_scan_ready_list</span><span class="params">(struct eventpoll *ep,</span></span></span><br><span class="line"><span class="function"><span class="params">                  <span class="keyword">int</span> (*sproc)(struct eventpoll *,</span></span></span><br><span class="line"><span class="function"><span class="params">                       struct list_head *, <span class="keyword">void</span> *),</span></span></span><br><span class="line"><span class="function"><span class="params">                  <span class="keyword">void</span> *priv,</span></span></span><br><span class="line"><span class="function"><span class="params">                  <span class="keyword">int</span> depth)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> error, pwake = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> flags;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">epitem</span> *<span class="title">epi</span>, *<span class="title">nepi</span>;</span></span><br><span class="line">    LIST_HEAD(txlist);</span><br><span class="line"></span><br><span class="line">    mutex_lock_nested(&amp;ep-&gt;mtx, depth);</span><br><span class="line">    spin_lock_irqsave(&amp;ep-&gt;lock, flags);</span><br><span class="line">    <span class="comment">//移动ep-&gt;rdllist到新的链表txlist</span></span><br><span class="line">    list_splice_init(&amp;ep-&gt;rdllist, &amp;txlist);</span><br><span class="line">    ep-&gt;ovflist = <span class="literal">NULL</span>;        <span class="comment">//改变ovflist的状态</span></span><br><span class="line">    spin_unlock_irqrestore(&amp;ep-&gt;lock, flags);</span><br><span class="line"></span><br><span class="line">    error = (*sproc)(ep, &amp;txlist, priv);        <span class="comment">//ep_read_events_proc</span></span><br><span class="line"></span><br><span class="line">    spin_lock_irqsave(&amp;ep-&gt;lock, flags);</span><br><span class="line">    <span class="comment">//调用ep_read_events_proc时可能出现了新的事件，遍历这些新的事件将其插入到rdllink</span></span><br><span class="line">    <span class="keyword">for</span> (nepi = ep-&gt;ovflist; (epi = nepi) != <span class="literal">NULL</span>;</span><br><span class="line">         nepi = epi-&gt;next, epi-&gt;next = EP_UNACTIVE_PTR) &#123;</span><br><span class="line">        <span class="comment">//epi不在rdllink,插入</span></span><br><span class="line">        <span class="keyword">if</span> (!ep_is_linked(&amp;epi-&gt;rdllink))</span><br><span class="line">            list_add_tail(&amp;epi-&gt;rdllink, &amp;ep-&gt;rdllist);</span><br><span class="line">    &#125;</span><br><span class="line">    ep-&gt;ovflist = EP_UNACTIVE_PTR;        <span class="comment">//还原ep-&gt;ovflist的状态</span></span><br><span class="line">    list_splice(&amp;txlist, &amp;ep-&gt;rdllist);        <span class="comment">//将处理后的txlist链接到rdllist</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!list_empty(&amp;ep-&gt;rdllist)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (waitqueue_active(&amp;ep-&gt;wq))</span><br><span class="line">            wake_up_locked(&amp;ep-&gt;wq);        <span class="comment">//唤醒epoll_wait</span></span><br><span class="line">        <span class="keyword">if</span> (waitqueue_active(&amp;ep-&gt;poll_wait))</span><br><span class="line">            pwake++;</span><br><span class="line">    &#125;</span><br><span class="line">    spin_unlock_irqrestore(&amp;ep-&gt;lock, flags);</span><br><span class="line"></span><br><span class="line">    mutex_unlock(&amp;ep-&gt;mtx);</span><br><span class="line">    <span class="keyword">if</span> (pwake)</span><br><span class="line">        ep_poll_safewake(&amp;ep-&gt;poll_wait);    <span class="comment">//安全唤醒外部的事件通知机制</span></span><br><span class="line">    <span class="keyword">return</span> error;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">ep_read_events_proc</span><span class="params">(struct eventpoll *ep, struct list_head *head,</span></span></span><br><span class="line"><span class="function"><span class="params">                   <span class="keyword">void</span> *priv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">epitem</span> *<span class="title">epi</span>, *<span class="title">tmp</span>;</span></span><br><span class="line"></span><br><span class="line">    list_for_each_entry_safe(epi, tmp, head, rdllink) &#123;</span><br><span class="line">        <span class="keyword">if</span> (epi-&gt;ffd.file-&gt;f_op-&gt;poll(epi-&gt;ffd.file, <span class="literal">NULL</span>) &amp;</span><br><span class="line">            epi-&gt;event.events)</span><br><span class="line"><span class="comment">//只要有一个文件描述符就绪返回可读 或 普通数据可写</span></span><br><span class="line">            <span class="keyword">return</span> POLLIN | POLLRDNORM;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//文件描述符未就绪，但在就绪队列中，将其移除</span></span><br><span class="line">            list_del_init(&amp;epi-&gt;rdllink);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ep_poll_safewake</span><span class="params">(<span class="keyword">wait_queue_head_t</span> *wq)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> this_cpu = get_cpu();</span><br><span class="line"></span><br><span class="line">    ep_call_nested(&amp;poll_safewake_ncalls, EP_MAX_NESTS,</span><br><span class="line">               ep_poll_wakeup_proc, <span class="literal">NULL</span>, wq, (<span class="keyword">void</span> *) (<span class="keyword">long</span>) this_cpu);</span><br><span class="line"></span><br><span class="line">    put_cpu();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">ep_poll_wakeup_proc</span><span class="params">(<span class="keyword">void</span> *priv, <span class="keyword">void</span> *cookie, <span class="keyword">int</span> call_nests)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ep_wake_up_nested((<span class="keyword">wait_queue_head_t</span> *) cookie, POLLIN,</span><br><span class="line">              <span class="number">1</span> + call_nests);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">ep_wake_up_nested</span><span class="params">(<span class="keyword">wait_queue_head_t</span> *wqueue,</span></span></span><br><span class="line"><span class="function"><span class="params">                     <span class="keyword">unsigned</span> <span class="keyword">long</span> events, <span class="keyword">int</span> subclass)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//唤醒所有正在等待此epfd的select/epoll/poll等</span></span><br><span class="line"><span class="comment">//如果唤醒的是epoll就可能唤醒所有其他的epoll，产生连锁反应</span></span><br><span class="line">    wake_up_poll(wqueue, events);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="epoll中的递归死循环和深度检查"><a href="#epoll中的递归死循环和深度检查" class="headerlink" title="epoll中的递归死循环和深度检查"></a>epoll中的递归死循环和深度检查</h2><p>如果epoll之间相互监视就有可能导致死循环。epoll的实现中，所有可能产生递归调用的函数都由函函数ep_call_nested进行包裹，递归调用过程中出现死循环或递归过深就会打破死循环和递归调用直接返回。该函数的实现依赖于一个外部的全局链表nested_call_node(不同的函数调用使用不同的节点)，每次调用可能发生递归的函数(nproc)就向链表中添加一个包含当前函数调用上下文ctx(进程，CPU，或epoll文件)和处理的对象标识cookie的节点，通过检测是否有相同的节点就可以知道是否发生了死循环，检查链表中同一上下文包含的节点个数就可以知道递归的深度。<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//限制epoll中直接或间接递归调用的深度并防止死循环</span></span><br><span class="line"><span class="comment">//ctx:任务运行上下文（进程，CPU等）</span></span><br><span class="line"><span class="comment">//cokie:每个任务的标识</span></span><br><span class="line"><span class="comment">//priv:任务运行需要的私有数据</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">ep_call_nested</span><span class="params">(struct nested_calls *ncalls, <span class="keyword">int</span> max_nests,</span></span></span><br><span class="line"><span class="function"><span class="params">              <span class="keyword">int</span> (*nproc)(<span class="keyword">void</span> *, <span class="keyword">void</span> *, <span class="keyword">int</span>), <span class="keyword">void</span> *priv,</span></span></span><br><span class="line"><span class="function"><span class="params">              <span class="keyword">void</span> *cookie, <span class="keyword">void</span> *ctx)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> error, call_nests = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> flags;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> *<span class="title">lsthead</span> = &amp;<span class="title">ncalls</span>-&gt;<span class="title">tasks_call_list</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">nested_call_node</span> *<span class="title">tncur</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">nested_call_node</span> <span class="title">tnode</span>;</span></span><br><span class="line"></span><br><span class="line">    spin_lock_irqsave(&amp;ncalls-&gt;lock, flags);</span><br><span class="line">    <span class="comment">//检查原有的嵌套调用链表ncalls，查看是否有深度超过限制的情况</span></span><br><span class="line">    list_for_each_entry(tncur, lsthead, llink) &#123;</span><br><span class="line">        <span class="comment">//同一上下文（ctx）中有相同的任务（cookie）说明产生了死循环</span></span><br><span class="line">        <span class="comment">//同一上下文的递归深度call_nests超过限制</span></span><br><span class="line">        <span class="keyword">if</span> (tncur-&gt;ctx == ctx &amp;&amp;</span><br><span class="line">            (tncur-&gt;cookie == cookie || ++call_nests &gt; max_nests)) &#123;</span><br><span class="line">            error = <span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">goto</span> out_unlock;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将当前的任务请求添加到调用列表</span></span><br><span class="line">    tnode.ctx = ctx;</span><br><span class="line">    tnode.cookie = cookie;</span><br><span class="line">    list_add(&amp;tnode.llink, lsthead);</span><br><span class="line"></span><br><span class="line">    spin_unlock_irqrestore(&amp;ncalls-&gt;lock, flags);</span><br><span class="line">    <span class="comment">//nproc 可能会导致递归调用(直接或间接)ep_call_nested ，如果发生递归调用, 那么在此函数返回之前, ncalls 又会被加入额外的节点, 这样通过前面的检测就可以知道递归调用的深度 </span></span><br><span class="line">    error = (*nproc)(priv, cookie, call_nests);</span><br><span class="line">    spin_lock_irqsave(&amp;ncalls-&gt;lock, flags);</span><br><span class="line">    <span class="comment">//从链表中删除当前任务</span></span><br><span class="line">    list_del(&amp;tnode.llink);</span><br><span class="line">out_unlock:</span><br><span class="line">    spin_unlock_irqrestore(&amp;ncalls-&gt;lock, flags);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> error;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="循环检测"><a href="#循环检测" class="headerlink" title="循环检测"></a>循环检测</h2><p>循环检查(ep_loop_check)，该函数递归调用ep_loop_check_proc利用ep_call_nested来实现epoll之间相互监视的死循环。因为ep_call_nested中已经对死循环和过深的递归做了检查，实际的ep_loop_check_proc的实现只是递归调用自己。其中的visited_list和visited标记完全是为了优化处理速度，如果没有visited_list和visited标记函数也是能够工作的。该函数中得上下文就是当前的进程，cookie就是正在遍历的epoll结构</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">ep_loop_check</span><span class="params">(struct eventpoll *ep, struct file *file)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">eventpoll</span> *<span class="title">ep_cur</span>, *<span class="title">ep_next</span>;</span></span><br><span class="line"></span><br><span class="line">    ret = ep_call_nested(&amp;poll_loop_ncalls, EP_MAX_NESTS,</span><br><span class="line">                  ep_loop_check_proc, file, ep, current);</span><br><span class="line"><span class="comment">//清除链表和标志</span></span><br><span class="line">    list_for_each_entry_safe(ep_cur, ep_next, &amp;visited_list,</span><br><span class="line">                            visited_list_link) &#123;</span><br><span class="line">        ep_cur-&gt;visited = <span class="number">0</span>;</span><br><span class="line">        list_del(&amp;ep_cur-&gt;visited_list_link);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">ep_loop_check_proc</span><span class="params">(<span class="keyword">void</span> *priv, <span class="keyword">void</span> *cookie, <span class="keyword">int</span> call_nests)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> error = <span class="number">0</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">file</span> *<span class="title">file</span> = <span class="title">priv</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">eventpoll</span> *<span class="title">ep</span> = <span class="title">file</span>-&gt;<span class="title">private_data</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">eventpoll</span> *<span class="title">ep_tovisit</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">rb_node</span> *<span class="title">rbp</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">epitem</span> *<span class="title">epi</span>;</span></span><br><span class="line"></span><br><span class="line">    mutex_lock_nested(&amp;ep-&gt;mtx, call_nests + <span class="number">1</span>);</span><br><span class="line">    ep-&gt;visited = <span class="number">1</span>;    <span class="comment">//标志当前为已遍历</span></span><br><span class="line">    list_add(&amp;ep-&gt;visited_list_link, &amp;visited_list);</span><br><span class="line">    <span class="comment">//遍历所有ep监视的文件</span></span><br><span class="line">    <span class="keyword">for</span> (rbp = rb_first(&amp;ep-&gt;rbr); rbp; rbp = rb_next(rbp)) &#123;</span><br><span class="line">        epi = rb_entry(rbp, struct epitem, rbn);</span><br><span class="line">        <span class="keyword">if</span> (unlikely(is_file_epoll(epi-&gt;ffd.file))) &#123;</span><br><span class="line">            ep_tovisit = epi-&gt;ffd.file-&gt;private_data;</span><br><span class="line">            <span class="keyword">if</span> (ep_tovisit-&gt;visited)    <span class="comment">//跳过先前已遍历的，避免循环检查</span></span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="comment">//所有ep监视的未遍历的epoll</span></span><br><span class="line">            error = ep_call_nested(&amp;poll_loop_ncalls, EP_MAX_NESTS,</span><br><span class="line">                    ep_loop_check_proc, epi-&gt;ffd.file,</span><br><span class="line">                    ep_tovisit, current);</span><br><span class="line">            <span class="keyword">if</span> (error != <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//文件不在file-&gt;tfile_check_list中，添加</span></span><br><span class="line">            <span class="comment">//最外层的epoll需要检查epoll监视的文件</span></span><br><span class="line">            <span class="keyword">if</span> (list_empty(&amp;epi-&gt;ffd.file-&gt;f_tfile_llink))</span><br><span class="line">                list_add(&amp;epi-&gt;ffd.file-&gt;f_tfile_llink,</span><br><span class="line">                     &amp;tfile_check_list);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    mutex_unlock(&amp;ep-&gt;mtx);</span><br><span class="line">    <span class="keyword">return</span> error;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="唤醒风暴"><a href="#唤醒风暴" class="headerlink" title="唤醒风暴"></a>唤醒风暴</h2><p>当文件状态发生改变时，会唤醒监听在其上的epoll文件，而这个epoll文件还可能唤醒其他的epoll文件，这种连续的唤醒就形成了一个唤醒路径，所有的唤醒路径就形成了一个有向图。如果文件对应的epoll唤醒有向图的节点过多，那么文件状态的改变就会唤醒所有的这些epoll(可能会唤醒很多进程，这样的开销是很大的)，而实际上一个文件经过少数epoll处理以后就可能从就绪转到未就绪，剩余的epoll虽然认为文件已就绪而实际上经过某些处理后已不可用。epoll的实现中考虑到了此问题，在每次添加新文件到epoll中时，就会首先检查是否会出现这样的唤醒风暴。<br>该函数的实现逻辑是这样的，递归调用reverse_path_check_proc遍历监听在当前文件上的epoll文件，在reverse_pach_check_proc中统计并检查不同路径深度上epoll的个数，从而避免产生唤醒风暴。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">reverse_path_check</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> length = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> error = <span class="number">0</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">file</span> *<span class="title">current_file</span>;</span></span><br><span class="line">    <span class="comment">//遍历全局tfile_chack_list中的文件，第一级</span></span><br><span class="line">    list_for_each_entry(current_file, &amp;tfile_check_list, f_tfile_llink) &#123;</span><br><span class="line">        length++;</span><br><span class="line">        <span class="comment">//初始化</span></span><br><span class="line">        path_count_init();</span><br><span class="line">        <span class="comment">//限制递归的深度，并检查每个深度上唤醒的epoll数量</span></span><br><span class="line">        error = ep_call_nested(&amp;poll_loop_ncalls, EP_MAX_NESTS,</span><br><span class="line">                    reverse_path_check_proc, current_file,</span><br><span class="line">                    current_file, current);</span><br><span class="line">        <span class="keyword">if</span> (error)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> error;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">reverse_path_check_proc</span><span class="params">(<span class="keyword">void</span> *priv, <span class="keyword">void</span> *cookie, <span class="keyword">int</span> call_nests)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> error = <span class="number">0</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">file</span> *<span class="title">file</span> = <span class="title">priv</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">file</span> *<span class="title">child_file</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">epitem</span> *<span class="title">epi</span>;</span></span><br><span class="line">    list_for_each_entry(epi, &amp;file-&gt;f_ep_links, fllink) &#123;</span><br><span class="line">        <span class="comment">//遍历监视file的epoll</span></span><br><span class="line">        child_file = epi-&gt;ep-&gt;file;</span><br><span class="line">        <span class="keyword">if</span> (is_file_epoll(child_file)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (list_empty(&amp;child_file-&gt;f_ep_links)) &#123;</span><br><span class="line">                <span class="comment">//没有其他的epoll监视当前的这个epoll，已经是叶子了</span></span><br><span class="line">                <span class="keyword">if</span> (path_count_inc(call_nests)) &#123;</span><br><span class="line">                    error = <span class="number">-1</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//遍历监视这个epoll文件的epoll，递归调用</span></span><br><span class="line">                error = ep_call_nested(&amp;poll_loop_ncalls,</span><br><span class="line">                            EP_MAX_NESTS,</span><br><span class="line">                            reverse_path_check_proc,</span><br><span class="line">                            child_file, child_file,</span><br><span class="line">                            current);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (error != <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            printk(KERN_ERR <span class="string">"reverse_path_check_proc: "</span></span><br><span class="line">                <span class="string">"file is not an ep!\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> error;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PATH_ARR_SIZE 5</span></span><br><span class="line"><span class="comment">//深度限制</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> path_limits[PATH_ARR_SIZE] = &#123; <span class="number">1000</span>, <span class="number">500</span>, <span class="number">100</span>, <span class="number">50</span>, <span class="number">10</span> &#125;;</span><br><span class="line"><span class="comment">//计算出来的深度</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> path_count[PATH_ARR_SIZE];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">path_count_inc</span><span class="params">(<span class="keyword">int</span> nests)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (nests == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (++path_count[nests] &gt; path_limits[nests])</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">path_count_init</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; PATH_ARR_SIZE; i++)</span><br><span class="line">        path_count[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="epoll-create和epoll-ctl函数调用过程"><a href="#epoll-create和epoll-ctl函数调用过程" class="headerlink" title="epoll_create和epoll_ctl函数调用过程"></a>epoll_create和epoll_ctl函数调用过程</h2><p><img src="/Picture/epoll_create和epoll_ctl函数调用过程.png" alt></p>
<h2 id="epoll-wait函数调用主要过程"><a href="#epoll-wait函数调用主要过程" class="headerlink" title="epoll_wait函数调用主要过程"></a>epoll_wait函数调用主要过程</h2><p><img src="/Picture/epoll_wait函数调用主要过程.png" alt></p>
<h2 id="epoll结构体间关系"><a href="#epoll结构体间关系" class="headerlink" title="epoll结构体间关系"></a>epoll结构体间关系</h2><p><img src="/Picture/epoll结构体间关系.png" alt></p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Libevent源码阅读——概述、实践</title>
    <url>/2017/10/02/libevent-1/</url>
    <content><![CDATA[<p>重新读下Libevent的源码，使用最新的Libevent版本libevent-release-2.1.8-stable</p>
<h1 id="Reactor模式简介"><a href="#Reactor模式简介" class="headerlink" title="Reactor模式简介"></a>Reactor模式简介</h1><p><img src="/Picture/Reactor.png" alt="Reactor模型"><br>Reactor模式要求主线程(I/O处理单元)只监听文件描述符上是否有事件发生,有的话立即将事件通知工作线程(逻辑单元),除此之外,主线程不进行任何其它实质性的工作,读写数据、接收新的连接、处理客户请求均在工作线程中进行.<br>使用同步I/O模型(以epoll_wait为例)实现的Reactor模式的工作流程:</p>
<ol>
<li>主线程往epoll内核事件表中注册socket上的读就绪事件</li>
<li>主线程调用epoll_wait等待socket上的读就绪事件</li>
<li>当socket上有数据可读时,epoll_wait通知主线程.主线程将socket可读事件放入请求队列</li>
<li>睡眠在请求队列上的的某个工作线程被唤醒,从socket读取数据,并处理客户端请求,然后往epoll内核事件表注册该socket上的写就绪事件</li>
<li>主线程调用epoll_wait等待socket可写</li>
<li>当socket可写时,epoll_wait通知主线程.主线程将socket可写事件放入请求队列</li>
<li>睡眠在请求队列上的某个工作线程被唤醒,往socket上写入服务器处理客户端的结果</li>
</ol>
<p><a href="http://www.casezheng.date/2017/05/31/001_asio_note/"><strong>更多Reactor介绍请点击</strong></a></p>
<h1 id="Libevent简介"><a href="#Libevent简介" class="headerlink" title="Libevent简介"></a>Libevent简介</h1><p>Libevent是一个使用C语言编写的、轻量级的开源高性能事件通知库，适用于windows、linux、bsd等多种平台，内部使用select、epoll、kqueue、IOCP等系统调用管理事件机制。  </p>
<h1 id="Libevent特点"><a href="#Libevent特点" class="headerlink" title="Libevent特点"></a>Libevent特点</h1><ol>
<li>事件驱动、高性能</li>
<li>轻量级、专注于网络</li>
<li>开源，代码精炼、易读</li>
<li>跨平台，支持Windows、Linux、BSD和Mac OS</li>
<li>支持多路I/O复用技术（epoll、poll、dev/poll、select和kqueue等），在不同操作系统下，做了多路复用模型的抽象，可以使用不同的模型，通过事件函数提供服务</li>
<li>支持I/O、定时器和信号等事件</li>
<li>采用Reactor模式</li>
<li>支持多线程</li>
</ol>
<h1 id="Libevent源码获取"><a href="#Libevent源码获取" class="headerlink" title="Libevent源码获取"></a>Libevent源码获取</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/libevent/libevent.git</span><br></pre></td></tr></table></figure>
<p>编译、安装详情请参考官方文档,大致过程如下<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">./autogen.sh</span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">make verify   # (optional)</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure></p>
<p>执行autogen.sh报错possibly undefined macro: AC_PROG_LIBTOOL安装libtool即可<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo yum install libtool</span><br></pre></td></tr></table></figure></p>
<h1 id="Libevent功能"><a href="#Libevent功能" class="headerlink" title="Libevent功能"></a>Libevent功能</h1><ol>
<li>事件通知：当文件描述符可读可写时将执行回调函数</li>
<li>IO缓存：缓存事件提供了输入输出缓存，能自动的读入和写入，用户不必直接操作IO</li>
<li>定时器：libevent提供定时器机制，能在一定事件间隔后调用回调函数</li>
<li>信号：触发信号，执行回调</li>
<li>异步DNS解析：libevent提供异步解析DNS服务器的DNS解析函数集</li>
<li>事件驱动的http服务器：libevent提供简单的、可集成到引用程序中的HTTP服务器</li>
<li>RPC客户端服务器框架：libevent为创建RPC服务器和客户端创建了一个RPC框架，能自动封装和解封数据结构</li>
</ol>
<h1 id="Libevent组件"><a href="#Libevent组件" class="headerlink" title="Libevent组件"></a>Libevent组件</h1><ol>
<li>evutil：用来抽象不同平台网络实现差异的通用功能。  </li>
<li>event和event_base：libevent的核心，为各种平台特定的、基于事件的非阻塞IO后端提供抽象API，让程序可以知道套接字何时准备好，可以读或者写，并且处理基本的超时事件，检测OS信号。  </li>
<li>bufferevent：为libevent基于事件的核心提供使用更方便的封装。除了通知程序套接字已经准备好读写之外，还让程序可以请求缓冲的读写操作，可以知道何时IO已经真正发生。（bufferevent接口有多个后端，可以采用系统能够提供的更快的非阻塞IO方式，如Windows中的IOCP。）  </li>
<li>evbuffer：在bufferevent层之下实现缓冲功能，并且提供方便有效的访问函数。  </li>
<li>evhttp：一个简单的HTTP客户端/服务器实现。  </li>
<li>evdns：一个简单DNS客户端/服务器实现。  </li>
<li>evrpc：一个简单RPC实现。  </li>
</ol>
<h1 id="Libevent库"><a href="#Libevent库" class="headerlink" title="Libevent库"></a>Libevent库</h1><p>安装libevent时，默认安装下列库<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[CaseZheng@localhost Blog]$ ll /usr/local/lib/libevent*</span><br><span class="line">-rw-r--r--. 1 root root 470890 9月  30 23:02 /usr/local/lib/libevent.a</span><br><span class="line">-rw-r--r--. 1 root root 299550 9月  30 23:02 /usr/local/lib/libevent_core.a</span><br><span class="line">lrwxrwxrwx. 1 root root     22 9月  30 23:04 /usr/local/lib/libevent_core.so -&gt; libevent_core.so.2.2.0</span><br><span class="line">-rwxr-xr-x. 1 root root 217848 9月  30 23:02 /usr/local/lib/libevent_core.so.2.2.0</span><br><span class="line">-rw-r--r--. 1 root root 171474 9月  30 23:02 /usr/local/lib/libevent_extra.a</span><br><span class="line">lrwxrwxrwx. 1 root root     23 9月  30 23:04 /usr/local/lib/libevent_extra.so -&gt; libevent_extra.so.2.2.0</span><br><span class="line">-rwxr-xr-x. 1 root root 149576 9月  30 23:02 /usr/local/lib/libevent_extra.so.2.2.0</span><br><span class="line">-rw-r--r--. 1 root root  26152 9月  30 23:02 /usr/local/lib/libevent_openssl.a</span><br><span class="line">lrwxrwxrwx. 1 root root     25 9月  30 23:04 /usr/local/lib/libevent_openssl.so -&gt; libevent_openssl.so.2.2.0</span><br><span class="line">-rwxr-xr-x. 1 root root  35240 9月  30 23:02 /usr/local/lib/libevent_openssl.so.2.2.0</span><br><span class="line">-rw-r--r--. 1 root root   4968 9月  30 23:02 /usr/local/lib/libevent_pthreads.a</span><br><span class="line">lrwxrwxrwx. 1 root root     26 9月  30 23:04 /usr/local/lib/libevent_pthreads.so -&gt; libevent_pthreads.so.2.2.0</span><br><span class="line">-rwxr-xr-x. 1 root root  13600 9月  30 23:02 /usr/local/lib/libevent_pthreads.so.2.2.0</span><br><span class="line">lrwxrwxrwx. 1 root root     17 9月  30 23:04 /usr/local/lib/libevent.so -&gt; libevent.so.2.2.0</span><br><span class="line">-rwxr-xr-x. 1 root root 346224 9月  30 23:02 /usr/local/lib/libevent.so.2.2.0</span><br></pre></td></tr></table></figure></p>
<ol>
<li>libevent_core：所有核心的事件和缓存功能，包括所有的event_base、evbuffer、bufferevent和工具函数。  </li>
<li>libevent_extra：定义程序可能需要，也可能不需要的协议特定功能，包括HTTP、DNS和RPC。  </li>
<li>libevent：历史原因而存在，包括libevent_core和libevent_extra。</li>
<li>libevent_pthreads：添加基于pthread可移植线程库的线程和锁定实现，独立于libevent_core。  </li>
<li>libevent_openssl：为使用bufferevent和OpenSSL进行加密的通信提供支持, 独立于libevent_core。</li>
</ol>
<h1 id="Libevent头文件"><a href="#Libevent头文件" class="headerlink" title="Libevent头文件"></a>Libevent头文件</h1><p>libevent公用头文件安装在event2目录中  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[CaseZheng@localhost /]$ ll /usr/local/include/event2/</span><br><span class="line">总用量 408</span><br><span class="line">-rw-r--r--. 1 root root  4700 9月  30 22:58 buffer_compat.h</span><br><span class="line">-rw-r--r--. 1 root root  4538 9月  30 22:58 bufferevent_compat.h</span><br><span class="line">-rw-r--r--. 1 root root 34518 9月  30 22:58 bufferevent.h</span><br><span class="line">-rw-r--r--. 1 root root  4848 9月  30 22:58 bufferevent_ssl.h</span><br><span class="line">-rw-r--r--. 1 root root  4135 9月  30 22:58 bufferevent_struct.h</span><br><span class="line">-rw-r--r--. 1 root root 39078 9月  30 22:58 buffer.h</span><br><span class="line">-rw-r--r--. 1 root root 12588 9月  30 22:58 dns_compat.h</span><br><span class="line">-rw-r--r--. 1 root root 26873 9月  30 22:58 dns.h</span><br><span class="line">-rw-r--r--. 1 root root  2596 9月  30 22:58 dns_struct.h</span><br><span class="line">-rw-r--r--. 1 root root  7639 9月  30 22:58 event_compat.h</span><br><span class="line">-rw-r--r--. 1 root root 15740 9月  30 23:02 event-config.h</span><br><span class="line">-rw-r--r--. 1 root root 62445 9月  30 22:58 event.h</span><br><span class="line">-rw-r--r--. 1 root root  5024 9月  30 22:58 event_struct.h</span><br><span class="line">-rw-r--r--. 1 root root  3265 9月  30 22:58 http_compat.h</span><br><span class="line">-rw-r--r--. 1 root root 42821 9月  30 22:58 http.h</span><br><span class="line">-rw-r--r--. 1 root root  4809 9月  30 22:58 http_struct.h</span><br><span class="line">-rw-r--r--. 1 root root  2603 9月  30 22:58 keyvalq_struct.h</span><br><span class="line">-rw-r--r--. 1 root root  7445 9月  30 22:58 listener.h</span><br><span class="line">-rw-r--r--. 1 root root  2351 9月  30 22:58 rpc_compat.h</span><br><span class="line">-rw-r--r--. 1 root root 21702 9月  30 22:58 rpc.h</span><br><span class="line">-rw-r--r--. 1 root root  3235 9月  30 22:58 rpc_struct.h</span><br><span class="line">-rw-r--r--. 1 root root  2141 9月  30 22:58 tag_compat.h</span><br><span class="line">-rw-r--r--. 1 root root  4914 9月  30 22:58 tag.h</span><br><span class="line">-rw-r--r--. 1 root root  9952 9月  30 22:58 thread.h</span><br><span class="line">-rw-r--r--. 1 root root 28536 9月  30 22:58 util.h</span><br><span class="line">-rw-r--r--. 1 root root  2818 9月  30 22:58 visibility.h</span><br></pre></td></tr></table></figure>
<ol>
<li>API头文件：定义libevent公用接口。  </li>
<li>兼容头文件：已废弃的函数提供兼容的头部包含定义。不应该使用这类头文件。  </li>
<li>结构头文件：以”_struct”为后缀，定义各种结构体，为了快速访问而暴露，或因为历史原因而暴露。不要直接依赖这类头文件中的任何结构体，会破坏对其他版本libevent的二进制兼容性。  </li>
</ol>
<h1 id="简单的定时器和信号事件示例"><a href="#简单的定时器和信号事件示例" class="headerlink" title="简单的定时器和信号事件示例"></a>简单的定时器和信号事件示例</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;event2/event.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;event2/util.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">timeval</span> <span class="title">lasttime</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">timeout_cb</span><span class="params">(<span class="keyword">evutil_socket_t</span> fd, short events, <span class="keyword">void</span> *arg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">timeval</span> <span class="title">newtime</span>, <span class="title">difference</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">event</span> *<span class="title">timeout</span> = (<span class="title">struct</span> <span class="title">event</span>*)<span class="title">arg</span>;</span></span><br><span class="line">    <span class="keyword">double</span> elapsed;</span><br><span class="line">    evutil_gettimeofday(&amp;newtime, <span class="literal">NULL</span>);</span><br><span class="line">    evutil_timersub(&amp;newtime, &amp;lasttime, &amp;difference);</span><br><span class="line">    elapsed = difference.tv_sec + (difference.tv_usec / <span class="number">1.0e6</span>);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"timeout_cb called at "</span>&lt;&lt;newtime.tv_sec&lt;&lt;<span class="string">": "</span>&lt;&lt;elapsed&lt;&lt;<span class="string">"second elapsed"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    lasttime = newtime;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">signal_cb</span><span class="params">(<span class="keyword">evutil_socket_t</span> fd, short events, <span class="keyword">void</span> *arg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">event_base</span> *<span class="title">base</span> = (<span class="title">struct</span> <span class="title">event_base</span> *)<span class="title">arg</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">timeval</span> <span class="title">delay</span> = &#123;</span><span class="number">1</span>, <span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"1 s after exit"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    event_base_loopexit(base, &amp;delay);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">event_base</span> *<span class="title">base</span> = <span class="title">event_base_new</span>();</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="literal">NULL</span> == base)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"event_base_new error"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;strerror(errno)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">event</span> *<span class="title">signalevent</span> = <span class="title">evsignal_new</span>(<span class="title">base</span>, <span class="title">SIGINT</span>, <span class="title">signal_cb</span>, (<span class="title">void</span>*)<span class="title">base</span>);</span></span><br><span class="line">    event_add(signalevent, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">event</span> *<span class="title">timeout_event</span> = <span class="title">evtimer_new</span>(<span class="title">base</span>, <span class="title">timeout_cb</span>, <span class="title">NULL</span>);</span></span><br><span class="line">    <span class="comment">//flags设置为EV_PERSIST表示该事件一直有效</span></span><br><span class="line">    <span class="keyword">int</span> flags = EV_PERSIST;</span><br><span class="line">    <span class="comment">//flags设置为0，该事件触发一次就会被删除，需要再次添加</span></span><br><span class="line">    <span class="comment">//int flags = 0;</span></span><br><span class="line">    event_assign(timeout_event, base, <span class="number">-1</span>, flags, timeout_cb, (<span class="keyword">void</span>*) timeout_event);</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">timeval</span> <span class="title">tv</span>;</span></span><br><span class="line">    evutil_timerclear(&amp;tv);</span><br><span class="line">    tv.tv_sec = <span class="number">2</span>;</span><br><span class="line">    event_add(timeout_event, &amp;tv);</span><br><span class="line"></span><br><span class="line">    evutil_gettimeofday(&amp;lasttime, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    event_base_dispatch(base);</span><br><span class="line">    event_free(signalevent);</span><br><span class="line">    event_free(timeout_event);</span><br><span class="line">    event_base_free(base);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="简单的回显服务器"><a href="#简单的回显服务器" class="headerlink" title="简单的回显服务器"></a>简单的回显服务器</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;event2/event.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;event2/listener.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;event2/util.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">accept_cb</span><span class="params">(<span class="keyword">int</span> fd, short events, <span class="keyword">void</span> *arg)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">socket_read_cb</span><span class="params">(<span class="keyword">int</span> fd, short events, <span class="keyword">void</span> *arg)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">tcp_server_init</span><span class="params">(<span class="keyword">int</span> port, <span class="keyword">int</span> listen_num)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> listener = tcp_server_init(<span class="number">9999</span>, <span class="number">5</span>);</span><br><span class="line">    <span class="keyword">if</span>(listener == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"tcp_server_init error"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">event_base</span> * <span class="title">base</span> = <span class="title">event_base_new</span>();</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="literal">NULL</span> == base)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"event_base_new error"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">event</span> * <span class="title">ev_listen</span> = <span class="title">event_new</span>(<span class="title">base</span>, <span class="title">listener</span>, <span class="title">EV_READ</span>|<span class="title">EV_PERSIST</span>, <span class="title">accept_cb</span>, <span class="title">base</span>);</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="literal">NULL</span> == ev_listen)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"event_new error"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    event_add(ev_listen, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    event_base_dispatch(base);</span><br><span class="line"></span><br><span class="line">    event_free(ev_listen);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">accept_cb</span><span class="params">(<span class="keyword">int</span> fd, short evnets, <span class="keyword">void</span> *arg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">client</span>;</span></span><br><span class="line">    <span class="keyword">socklen_t</span> len = <span class="keyword">sizeof</span>(client);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">evutil_socket_t</span> sockfd = ::accept(fd, (struct sockaddr*)&amp;client, &amp;len);</span><br><span class="line">    <span class="keyword">if</span>(sockfd &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"accept error"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    evutil_make_socket_nonblocking(sockfd);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"accpet a conn fd: "</span>&lt;&lt;sockfd&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">event_base</span> *<span class="title">base</span> = (<span class="title">struct</span> <span class="title">event_base</span>*)<span class="title">arg</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">event</span> *<span class="title">ev</span> = <span class="title">event_new</span>(<span class="title">NULL</span>, -1, 0, <span class="title">NULL</span>, <span class="title">NULL</span>);</span></span><br><span class="line">    event_assign(ev, base, sockfd, EV_READ|EV_PERSIST, socket_read_cb, (<span class="keyword">void</span>*)ev);</span><br><span class="line">    event_add(ev, <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">socket_read_cb</span><span class="params">(<span class="keyword">int</span> fd, short events, <span class="keyword">void</span> *arg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> buff[<span class="number">4096</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">event</span> *<span class="title">ev</span> = (<span class="title">struct</span> <span class="title">event</span>*)<span class="title">arg</span>;</span></span><br><span class="line">    <span class="keyword">int</span> len = read(fd, buff, <span class="keyword">sizeof</span>(buff)<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">if</span>(len &lt;= <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"read error len: "</span>&lt;&lt;len&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        event_free(ev);</span><br><span class="line">        close(fd);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    buff[len] = <span class="string">'\0'</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"read msg : "</span>&lt;&lt;buff&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    write(fd, buff, <span class="built_in">strlen</span>(buff));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">tcp_server_init</span><span class="params">(<span class="keyword">int</span> port, <span class="keyword">int</span> listen_num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">evutil_socket_t</span> listener;</span><br><span class="line">    listener = ::socket(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>(listener &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"create socket error"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    evutil_make_listen_socket_reuseable(listener);</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">sin</span>;</span></span><br><span class="line">    <span class="built_in">sin</span>.sin_family = AF_INET;</span><br><span class="line">    <span class="built_in">sin</span>.sin_addr.s_addr = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">sin</span>.sin_port = htons(port);</span><br><span class="line">    <span class="keyword">if</span>(::bind(listener, (struct sockaddr*)&amp;<span class="built_in">sin</span>, <span class="keyword">sizeof</span>(<span class="built_in">sin</span>)) &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"bind error"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(::listen(listener, listen_num) &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"listen error"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    evutil_make_socket_nonblocking(listener);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> listener;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="使用bufferevent的回显服务器"><a href="#使用bufferevent的回显服务器" class="headerlink" title="使用bufferevent的回显服务器"></a>使用bufferevent的回显服务器</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;event2/event.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;event2/bufferevent.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;event2/listener.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;event2/util.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">accept_cb</span><span class="params">(<span class="keyword">int</span> fd, short events, <span class="keyword">void</span> *arg)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">socket_read_cb</span><span class="params">(struct bufferevent *bev, <span class="keyword">void</span> *arg)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">event_cb</span><span class="params">(struct bufferevent *bev, short event, <span class="keyword">void</span> *arg)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">tcp_server_init</span><span class="params">(<span class="keyword">int</span> port, <span class="keyword">int</span> listen_num)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> listener = tcp_server_init(<span class="number">9999</span>, <span class="number">5</span>);</span><br><span class="line">    <span class="keyword">if</span>(listener == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"tcp_server_init error"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">event_base</span> * <span class="title">base</span> = <span class="title">event_base_new</span>();</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="literal">NULL</span> == base)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"event_base_new error"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">event</span> * <span class="title">ev_listen</span> = <span class="title">event_new</span>(<span class="title">base</span>, <span class="title">listener</span>, <span class="title">EV_READ</span>|<span class="title">EV_PERSIST</span>, <span class="title">accept_cb</span>, <span class="title">base</span>);</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="literal">NULL</span> == ev_listen)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"event_new error"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    event_add(ev_listen, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    event_base_dispatch(base);</span><br><span class="line"></span><br><span class="line">    event_free(ev_listen);</span><br><span class="line">    event_base_free(base);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">accept_cb</span><span class="params">(<span class="keyword">int</span> fd, short evnets, <span class="keyword">void</span> *arg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">client</span>;</span></span><br><span class="line">    <span class="keyword">socklen_t</span> len = <span class="keyword">sizeof</span>(client);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">evutil_socket_t</span> sockfd = ::accept(fd, (struct sockaddr*)&amp;client, &amp;len);</span><br><span class="line">    <span class="keyword">if</span>(sockfd &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"accept error"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    evutil_make_socket_nonblocking(sockfd);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"accpet a conn fd: "</span>&lt;&lt;sockfd&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">event_base</span> *<span class="title">base</span> = (<span class="title">struct</span> <span class="title">event_base</span>*)<span class="title">arg</span>;</span></span><br><span class="line"></span><br><span class="line">    bufferevent *bev = bufferevent_socket_new(base, sockfd, BEV_OPT_CLOSE_ON_FREE);</span><br><span class="line">    <span class="keyword">if</span>(<span class="literal">NULL</span> == bev)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"bufferevent_socket_new error"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        close(fd);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    bufferevent_setcb(bev, socket_read_cb, <span class="literal">NULL</span>, event_cb, arg);</span><br><span class="line">    bufferevent_enable(bev, EV_READ | EV_PERSIST);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">socket_read_cb</span><span class="params">(bufferevent *bev, <span class="keyword">void</span> *arg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> buff[<span class="number">4096</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">size_t</span> len = bufferevent_read(bev, buff, <span class="keyword">sizeof</span>(buff));</span><br><span class="line">    <span class="keyword">if</span>(len &lt;= <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"read error len: "</span>&lt;&lt;len&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    buff[len] = <span class="string">'\0'</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"read msg : "</span>&lt;&lt;buff&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    bufferevent_write(bev, buff, <span class="built_in">strlen</span>(buff));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">event_cb</span><span class="params">(struct bufferevent *bev, short event, <span class="keyword">void</span> *arg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(event &amp; BEV_EVENT_EOF)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"conn close"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(event &amp;BEV_EVENT_ERROR)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"conn error"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"event :"</span>&lt;&lt;event&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    bufferevent_free(bev);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">tcp_server_init</span><span class="params">(<span class="keyword">int</span> port, <span class="keyword">int</span> listen_num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">evutil_socket_t</span> listener;</span><br><span class="line">    listener = ::socket(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>(listener &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"create socket error"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    evutil_make_listen_socket_reuseable(listener);</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">sin</span>;</span></span><br><span class="line">    <span class="built_in">sin</span>.sin_family = AF_INET;</span><br><span class="line">    <span class="built_in">sin</span>.sin_addr.s_addr = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">sin</span>.sin_port = htons(port);</span><br><span class="line">    <span class="keyword">if</span>(::bind(listener, (struct sockaddr*)&amp;<span class="built_in">sin</span>, <span class="keyword">sizeof</span>(<span class="built_in">sin</span>)) &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"bind error"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(::listen(listener, listen_num) &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"listen error"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    evutil_make_socket_nonblocking(listener);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> listener;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="使用evconnlistener的服务器"><a href="#使用evconnlistener的服务器" class="headerlink" title="使用evconnlistener的服务器"></a>使用evconnlistener的服务器</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;event2/event.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;event2/bufferevent.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;event2/listener.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;event2/util.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">accept_cb</span><span class="params">(evconnlistener *listener, <span class="keyword">evutil_socket_t</span> fd, \</span></span></span><br><span class="line"><span class="function"><span class="params">        struct sockaddr *sock, <span class="keyword">int</span> socklen, <span class="keyword">void</span> *arg)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">socket_read_cb</span><span class="params">(struct bufferevent *bev, <span class="keyword">void</span> *arg)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">event_cb</span><span class="params">(struct bufferevent *bev, short event, <span class="keyword">void</span> *arg)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">sin</span>;</span></span><br><span class="line">    <span class="built_in">memset</span>(&amp;<span class="built_in">sin</span>, <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="built_in">sin</span>));</span><br><span class="line">    <span class="built_in">sin</span>.sin_family = AF_INET;</span><br><span class="line">    <span class="built_in">sin</span>.sin_port = htons(<span class="number">9999</span>);</span><br><span class="line"></span><br><span class="line">    event_base *base = event_base_new();</span><br><span class="line"></span><br><span class="line">    evconnlistener * listener = evconnlistener_new_bind(base, accept_cb, \</span><br><span class="line">            base, LEV_OPT_REUSEABLE | LEV_OPT_CLOSE_ON_FREE, \</span><br><span class="line">            <span class="number">10</span>, (struct sockaddr*)&amp;<span class="built_in">sin</span>, \</span><br><span class="line">            <span class="keyword">sizeof</span>(struct sockaddr_in));</span><br><span class="line"></span><br><span class="line">    event_base_dispatch(base);</span><br><span class="line"></span><br><span class="line">    evconnlistener_free(listener);</span><br><span class="line">    event_base_free(base);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">accept_cb</span><span class="params">(evconnlistener *listener, <span class="keyword">evutil_socket_t</span> fd, \</span></span></span><br><span class="line"><span class="function"><span class="params">        struct sockaddr *sock, <span class="keyword">int</span> socklen, <span class="keyword">void</span> *arg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"accept a client fd: "</span>&lt;&lt;fd&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    event_base *base = (event_base*)arg;</span><br><span class="line"></span><br><span class="line">    bufferevent *bev = bufferevent_socket_new(base, fd, BEV_OPT_CLOSE_ON_FREE);</span><br><span class="line">    <span class="keyword">if</span>(<span class="literal">NULL</span> == bev)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"bufferevent_socket_new error"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        close(fd);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    bufferevent_setcb(bev, socket_read_cb, <span class="literal">NULL</span>, event_cb, arg);</span><br><span class="line">    bufferevent_enable(bev, EV_READ | EV_PERSIST);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">socket_read_cb</span><span class="params">(bufferevent *bev, <span class="keyword">void</span> *arg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> buff[<span class="number">4096</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">size_t</span> len = bufferevent_read(bev, buff, <span class="keyword">sizeof</span>(buff));</span><br><span class="line">    <span class="keyword">if</span>(len &lt;= <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"read error len: "</span>&lt;&lt;len&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    buff[len] = <span class="string">'\0'</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"read msg : "</span>&lt;&lt;buff&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    bufferevent_write(bev, buff, <span class="built_in">strlen</span>(buff));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">event_cb</span><span class="params">(struct bufferevent *bev, short event, <span class="keyword">void</span> *arg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(event &amp; BEV_EVENT_EOF)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"conn close"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(event &amp;BEV_EVENT_ERROR)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"conn error"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"event :"</span>&lt;&lt;event&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    bufferevent_free(bev);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="Libevent-DNS客户端的实现"><a href="#Libevent-DNS客户端的实现" class="headerlink" title="Libevent DNS客户端的实现"></a>Libevent DNS客户端的实现</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;event2/event.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;event2/dns.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">callback</span><span class="params">(<span class="keyword">int</span> errcode, struct evutil_addrinfo *addr, <span class="keyword">void</span> *ptr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (errcode)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"error :"</span>&lt;&lt;evutil_gai_strerror(errcode)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        struct evutil_addrinfo *ai;</span><br><span class="line">        <span class="keyword">if</span> (addr-&gt;ai_canonname)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"cannoname :"</span>&lt;&lt;addr-&gt;ai_canonname&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//addr是一个链表,遍历链表</span></span><br><span class="line">        <span class="keyword">for</span>( ai = addr ; ai != <span class="literal">NULL</span> ; ai = ai-&gt;ai_next)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">char</span> buf[<span class="number">128</span>];</span><br><span class="line">            <span class="keyword">const</span> <span class="keyword">char</span> *s = <span class="literal">NULL</span>;</span><br><span class="line">            <span class="keyword">if</span> ( ai-&gt;ai_family == AF_INET)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> *<span class="title">sin</span> = (<span class="title">struct</span> <span class="title">sockaddr_in</span> *)<span class="title">ai</span>-&gt;<span class="title">ai_addr</span>;</span></span><br><span class="line">                s = evutil_inet_ntop(AF_INET, &amp;<span class="built_in">sin</span>-&gt;sin_addr, buf, <span class="number">128</span>);</span><br><span class="line">            &#125; </span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ( ai-&gt;ai_family == AF_INET6)</span><br><span class="line">            &#123;</span><br><span class="line">                struct sockaddr_in6 *sin6 = (struct sockaddr_in6 *)ai-&gt;ai_addr;</span><br><span class="line">                s = evutil_inet_ntop(AF_INET6, &amp;sin6-&gt;sin6_addr, buf, <span class="number">128</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(s)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">"  -&gt;"</span>&lt;&lt;s&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        evutil_freeaddrinfo(addr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">event_base</span> *<span class="title">base</span> = <span class="title">event_base_new</span>();</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">evdns_base</span> *<span class="title">dnsbase</span> = <span class="title">evdns_base_new</span>(<span class="title">base</span>, 1);</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">evutil_addrinfo</span> <span class="title">hints</span>;</span></span><br><span class="line">    <span class="built_in">memset</span>(&amp;hints, <span class="number">0</span>, <span class="keyword">sizeof</span>(hints));</span><br><span class="line">    hints.ai_family = AF_UNSPEC ; <span class="comment">//不指定.</span></span><br><span class="line">    hints.ai_flags = EVUTIL_AI_CANONNAME; <span class="comment">//返回规范名.</span></span><br><span class="line">    hints.ai_socktype = SOCK_STREAM; <span class="comment">//只需要SOCK_STREAM套接字类型</span></span><br><span class="line">    hints.ai_protocol = IPPROTO_TCP; <span class="comment">//只需要TCP协议的.</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* nodename = <span class="string">"github.com"</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">evdns_getaddrinfo_request</span> *<span class="title">req</span>;</span></span><br><span class="line">    req = evdns_getaddrinfo(dnsbase , nodename , <span class="literal">NULL</span> , &amp;hints , callback , <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    event_base_dispatch(base);</span><br><span class="line">    <span class="keyword">if</span> ( req != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">free</span>( req );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    evdns_base_free(dnsbase, <span class="number">0</span>);</span><br><span class="line">    event_base_free(base);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="Libevent-HTTP服务器"><a href="#Libevent-HTTP服务器" class="headerlink" title="Libevent HTTP服务器"></a>Libevent HTTP服务器</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;event2/event.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;event2/http.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;event2/buffer.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">callback</span><span class="params">(struct evhttp_request *request, <span class="keyword">void</span> *arg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">evhttp_uri</span> * <span class="title">uri</span> = <span class="title">evhttp_request_get_evhttp_uri</span>(<span class="title">request</span>);</span></span><br><span class="line">    <span class="keyword">char</span> url[<span class="number">8192</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    evhttp_uri_join(<span class="keyword">const_cast</span>&lt;struct evhttp_uri*&gt;(uri), url, <span class="number">8192</span>);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"accept request url:"</span>&lt;&lt;url&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">evbuffer</span> *<span class="title">evbuf</span> = <span class="title">evbuffer_new</span>();</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="literal">NULL</span> == evbuf)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"error! evbuffer_new"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    evbuffer_add_printf(evbuf, <span class="string">"%s"</span>, <span class="string">"hello libevent http"</span>);</span><br><span class="line">    evhttp_send_reply(request, HTTP_OK, <span class="string">"OK"</span>, evbuf);</span><br><span class="line">    evbuffer_free(evbuf);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">event_base</span> *<span class="title">base</span> = <span class="title">event_base_new</span>();</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">evhttp</span> *<span class="title">http</span> = <span class="title">evhttp_new</span>(<span class="title">base</span>);</span></span><br><span class="line">    evhttp_bind_socket(http, <span class="string">"0.0.0.0"</span>, <span class="number">9999</span>);</span><br><span class="line">    evhttp_set_gencb(http, callback, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    event_base_dispatch(base);</span><br><span class="line"></span><br><span class="line">    event_base_free(base);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ol>
<li><a href="http://blog.csdn.net/majianfei1023/article/details/46485705" target="_blank" rel="noopener">libevent源码分析</a></li>
<li><a href="http://blog.csdn.net/column/details/libevent-src.html" target="_blank" rel="noopener">libevent专栏</a></li>
<li><a href="http://www.jianshu.com/p/906c8b9f0629" target="_blank" rel="noopener">libevent evhttp学习——http服务端</a></li>
</ol>
]]></content>
      <categories>
        <category>网络库</category>
      </categories>
      <tags>
        <tag>cpp</tag>
        <tag>网络</tag>
        <tag>libevent</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux I/O 复用 poll源码解析</title>
    <url>/2017/09/21/io-4-poll/</url>
    <content><![CDATA[<p>Linux I/O poll 源码分析</p>
<!-- vim-markdown-toc GFM -->
<ul>
<li><a href="#poll">poll</a><ul>
<li><a href="#poll系统调用的函数调用过程">poll系统调用的函数调用过程</a></li>
<li><a href="#poll系统调用图解">poll系统调用图解</a></li>
</ul>
</li>
</ul>
<!-- vim-markdown-toc -->
<h1 id="poll"><a href="#poll" class="headerlink" title="poll"></a>poll</h1><p>poll函数系统调用<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">poll</span><span class="params">(struct polled* fds, <span class="keyword">nfds_t</span> nfds, <span class="keyword">int</span> timeout)</span></span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">pollfd</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> fd;</span><br><span class="line">    short events;</span><br><span class="line">    short revents;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">SYSCALL_DEFINE3(poll, struct pollfd __user *, ufds, <span class="keyword">unsigned</span> <span class="keyword">int</span>, nfds,</span><br><span class="line">        <span class="keyword">long</span>, timeout_msecs)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">timespec</span> <span class="title">end_time</span>, *<span class="title">to</span> = <span class="title">NULL</span>;</span></span><br><span class="line">    <span class="keyword">int</span> ret;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//计算timespec类型的超时时间</span></span><br><span class="line">    <span class="keyword">if</span> (timeout_msecs &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        to = &amp;end_time;</span><br><span class="line">        poll_select_set_timeout(to, timeout_msecs / MSEC_PER_SEC,</span><br><span class="line">            NSEC_PER_MSEC * (timeout_msecs % MSEC_PER_SEC));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ret = do_sys_poll(ufds, nfds, to);        <span class="comment">//重要函数，返回就绪的文件描述符的总数</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// do_sys_poll 被信号中断, 重新调用, 对使用者来说 poll 是不会被信号中断的.</span></span><br><span class="line">    <span class="keyword">if</span> (ret == -EINTR) &#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">restart_block</span> *<span class="title">restart_block</span>;</span></span><br><span class="line">        restart_block = &amp;current_thread_info()-&gt;restart_block;</span><br><span class="line">        restart_block-&gt;fn = do_restart_poll;        <span class="comment">//设置重启的函数</span></span><br><span class="line">        restart_block-&gt;poll.ufds = ufds;</span><br><span class="line">        restart_block-&gt;poll.nfds = nfds;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (timeout_msecs &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            restart_block-&gt;poll.tv_sec = end_time.tv_sec;</span><br><span class="line">            restart_block-&gt;poll.tv_nsec = end_time.tv_nsec;</span><br><span class="line">            restart_block-&gt;poll.has_timeout = <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span></span><br><span class="line">            restart_block-&gt;poll.has_timeout = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// ERESTART_RESTARTBLOCK 不会返回给用户进程,  而是会被系统捕获, 然后调用 do_restart_poll</span></span><br><span class="line">        ret = -ERESTART_RESTARTBLOCK;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">long</span> <span class="title">do_restart_poll</span><span class="params">(struct restart_block *restart_block)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">pollfd</span> __<span class="title">user</span> *<span class="title">ufds</span> = <span class="title">restart_block</span>-&gt;<span class="title">poll</span>.<span class="title">ufds</span>;</span></span><br><span class="line">    <span class="keyword">int</span> nfds = restart_block-&gt;poll.nfds;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">timespec</span> *<span class="title">to</span> = <span class="title">NULL</span>, <span class="title">end_time</span>;</span></span><br><span class="line">    <span class="keyword">int</span> ret;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (restart_block-&gt;poll.has_timeout) &#123;</span><br><span class="line">        end_time.tv_sec = restart_block-&gt;poll.tv_sec;</span><br><span class="line">        end_time.tv_nsec = restart_block-&gt;poll.tv_nsec;</span><br><span class="line">        to = &amp;end_time;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ret = do_sys_poll(ufds, nfds, to);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ret == -EINTR) &#123;</span><br><span class="line">        restart_block-&gt;fn = do_restart_poll;</span><br><span class="line">        ret = -ERESTART_RESTARTBLOCK;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">do_sys_poll</span><span class="params">(struct pollfd __user *ufds, <span class="keyword">unsigned</span> <span class="keyword">int</span> nfds,</span></span></span><br><span class="line"><span class="function"><span class="params">        struct timespec *end_time)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">poll_wqueues</span> <span class="title">table</span>;</span></span><br><span class="line">     <span class="keyword">int</span> err = -EFAULT, fdcount, len, <span class="built_in">size</span>;</span><br><span class="line">    <span class="comment">//首先使用栈上的空间，加速访问</span></span><br><span class="line">    <span class="keyword">long</span> stack_pps[POLL_STACK_ALLOC/<span class="keyword">sizeof</span>(<span class="keyword">long</span>)];    <span class="comment">//long stack_pps[64];</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    struct poll_list &#123;</span></span><br><span class="line"><span class="comment">        struct poll_list *next;</span></span><br><span class="line"><span class="comment">        int len;                //本poll_list的entries长度</span></span><br><span class="line"><span class="comment">        struct pollfd entries[0];</span></span><br><span class="line"><span class="comment">    &#125;;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">poll_list</span> *<span class="title">const</span> <span class="title">head</span> = (<span class="title">struct</span> <span class="title">poll_list</span> *)<span class="title">stack_pps</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">poll_list</span> *<span class="title">walk</span> = <span class="title">head</span>;</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> todo = nfds;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (nfds &gt; current-&gt;signal-&gt;rlim[RLIMIT_NOFILE].rlim_cur)</span><br><span class="line">        <span class="keyword">return</span> -EINVAL;    <span class="comment">// 文件描述符数量超过当前进程限制</span></span><br><span class="line"></span><br><span class="line">    len = <span class="keyword">min_t</span>(<span class="keyword">unsigned</span> <span class="keyword">int</span>, nfds, N_STACK_PPS);        <span class="comment">//计算链表头结点的entries数组长度</span></span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;        <span class="comment">//将用户空间的pollfd全部拷贝到内核空间</span></span><br><span class="line">        walk-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">        walk-&gt;len = len;</span><br><span class="line">        <span class="keyword">if</span> (!len)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="comment">//当用户传入的fd很多时，由于poll系统调用每次都要把所有struct pollfd拷进内核，所以参数传递和页分配此时就成了poll系统调用的性能瓶颈。</span></span><br><span class="line">        <span class="keyword">if</span> (copy_from_user(walk-&gt;entries, ufds + nfds-todo,</span><br><span class="line">                    <span class="keyword">sizeof</span>(struct pollfd) * walk-&gt;len))        <span class="comment">//拷贝前walk-&gt;len个</span></span><br><span class="line">            <span class="keyword">goto</span> out_fds;</span><br><span class="line"></span><br><span class="line">        todo -= walk-&gt;len;    <span class="comment">//计算未拷贝的pollfd个数</span></span><br><span class="line">        <span class="keyword">if</span> (!todo)</span><br><span class="line">            <span class="keyword">break</span>;        <span class="comment">//全部已拷贝，退出</span></span><br><span class="line"></span><br><span class="line">        len = <span class="built_in">min</span>(todo, POLLFD_PER_PAGE);    <span class="comment">//计算个数</span></span><br><span class="line">        <span class="built_in">size</span> = <span class="keyword">sizeof</span>(struct poll_list) + <span class="keyword">sizeof</span>(struct pollfd) * len;    <span class="comment">//计算申请空间的大小</span></span><br><span class="line">        walk = walk-&gt;next = kmalloc(<span class="built_in">size</span>, GFP_KERNEL);        <span class="comment">//在堆上申请空间</span></span><br><span class="line">        <span class="keyword">if</span> (!walk) &#123;</span><br><span class="line">            err = -ENOMEM;</span><br><span class="line">            <span class="keyword">goto</span> out_fds;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//初始化table，设置函数指针table.pt.qproc为__pollwait</span></span><br><span class="line">    poll_initwait(&amp;table);</span><br><span class="line">    fdcount = do_poll(nfds, head, &amp;table, end_time);</span><br><span class="line">    poll_freewait(&amp;table);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (walk = head; walk; walk = walk-&gt;next) &#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">pollfd</span> *<span class="title">fds</span> = <span class="title">walk</span>-&gt;<span class="title">entries</span>;</span></span><br><span class="line">        <span class="keyword">int</span> j;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; walk-&gt;len; j++, ufds++)</span><br><span class="line">            <span class="keyword">if</span> (__put_user(fds[j].revents, &amp;ufds-&gt;revents))</span><br><span class="line">                <span class="keyword">goto</span> out_fds;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    err = fdcount;</span><br><span class="line">out_fds:</span><br><span class="line">    walk = head-&gt;next;</span><br><span class="line">    <span class="keyword">while</span> (walk) &#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">poll_list</span> *<span class="title">pos</span> = <span class="title">walk</span>;</span></span><br><span class="line">        walk = walk-&gt;next;</span><br><span class="line">        kfree(pos);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> err;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">poll_initwait</span><span class="params">(struct poll_wqueues *pwq)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    init_poll_funcptr(&amp;pwq-&gt;pt, __pollwait);</span><br><span class="line">    pwq-&gt;polling_task = current;</span><br><span class="line">    pwq-&gt;triggered = <span class="number">0</span>;</span><br><span class="line">    pwq-&gt;error = <span class="number">0</span>;</span><br><span class="line">    pwq-&gt;table = <span class="literal">NULL</span>;</span><br><span class="line">    pwq-&gt;inline_index = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init_poll_funcptr</span><span class="params">(poll_table *pt, poll_queue_proc qproc)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    pt-&gt;qproc = qproc;        <span class="comment">//__pollwait</span></span><br><span class="line">    pt-&gt;key   = ~<span class="number">0U</span>L; <span class="comment">/* all events enabled */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">do_poll</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> nfds,  struct poll_list *<span class="built_in">list</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">           struct poll_wqueues *wait, struct timespec *end_time)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    poll_table* pt = &amp;wait-&gt;pt;</span><br><span class="line">    <span class="keyword">ktime_t</span> expire, *to = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">int</span> timed_out = <span class="number">0</span>, count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> slack = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (end_time &amp;&amp; !end_time-&gt;tv_sec &amp;&amp; !end_time-&gt;tv_nsec) &#123;    <span class="comment">//已超时</span></span><br><span class="line">        pt = <span class="literal">NULL</span>;        <span class="comment">//不执行__pollwait</span></span><br><span class="line">        timed_out = <span class="number">1</span>;    <span class="comment">//不睡眠</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (end_time &amp;&amp; !timed_out)        <span class="comment">//计算睡眠时间，纳秒</span></span><br><span class="line">        slack = estimate_accuracy(end_time);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">poll_list</span> *<span class="title">walk</span>;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (walk = <span class="built_in">list</span>; walk != <span class="literal">NULL</span>; walk = walk-&gt;next) &#123;    <span class="comment">//遍历整个链表</span></span><br><span class="line">            <span class="class"><span class="keyword">struct</span> <span class="title">pollfd</span> * <span class="title">pfd</span>, * <span class="title">pfd_end</span>;</span></span><br><span class="line"></span><br><span class="line">            pfd = walk-&gt;entries;</span><br><span class="line">            pfd_end = pfd + walk-&gt;len;</span><br><span class="line">            <span class="keyword">for</span> (; pfd != pfd_end; pfd++) &#123;    <span class="comment">//遍历一个节点中的entries数组</span></span><br><span class="line">                <span class="comment">//当用户传入的fd很多时，对do_pollfd就会调用很多次，poll效率瓶颈的另一原因就在这里。</span></span><br><span class="line">                <span class="keyword">if</span> (do_pollfd(pfd, pt)) &#123;</span><br><span class="line">                    count++;            <span class="comment">//就绪文件描述符个数加1</span></span><br><span class="line">                    pt = <span class="literal">NULL</span>;          <span class="comment">//有文件描述符就绪，进程不需要再睡眠了，所以不需要再给后面文件的wait queue中添加唤醒函数了</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        pt = <span class="literal">NULL</span>;          <span class="comment">//所有的文件描述符都已执行__pollwait，以后不再执行</span></span><br><span class="line">        <span class="keyword">if</span> (!count) &#123;       <span class="comment">//若count为0（表示无文件描述符就绪）</span></span><br><span class="line">            count = wait-&gt;error;    <span class="comment">//count = 0；</span></span><br><span class="line">            <span class="comment">//当用户程序在调用poll后挂起时，发信号可以让程序迅速退出poll调用，而通常的系统调用是不会被信号打断的。</span></span><br><span class="line">            <span class="keyword">if</span> (signal_pending(current))    <span class="comment">//判断是否为信号唤醒</span></span><br><span class="line">                count = -EINTR;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (count || timed_out)    <span class="comment">//有文件描述符就绪 或者 进程不再睡眠</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (end_time &amp;&amp; !to) &#123;    <span class="comment">//仅首次循环时执行，超时时间转换，转换为内核时间</span></span><br><span class="line">            expire = timespec_to_ktime(*end_time);</span><br><span class="line">            to = &amp;expire;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//当前进程从这里进入睡眠，等待直到超时，或由回调函数唤醒，喊醒后文件等待队列中的等待    //队列项并不清除，到后边统一清除</span></span><br><span class="line">        <span class="comment">//超时，返回0；被唤醒，返回-EINTR</span></span><br><span class="line">        <span class="keyword">if</span> (!poll_schedule_timeout(wait, TASK_INTERRUPTIBLE, to, slack))</span><br><span class="line">            timed_out = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">do_pollfd</span><span class="params">(struct pollfd *pollfd, poll_table *pwait)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> mask;</span><br><span class="line">    <span class="keyword">int</span> fd;</span><br><span class="line"></span><br><span class="line">    mask = <span class="number">0</span>;</span><br><span class="line">    fd = pollfd-&gt;fd;    <span class="comment">//得到要检测文件的文件描述符</span></span><br><span class="line">    <span class="keyword">if</span> (fd &gt;= <span class="number">0</span>) &#123;        <span class="comment">//检测fd的正确性</span></span><br><span class="line">        <span class="keyword">int</span> fput_needed;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">file</span> * <span class="title">file</span>;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//从当前进程描述符中取得文件结构，并增加引用计数</span></span><br><span class="line">        file = fget_light(fd, &amp;fput_needed);</span><br><span class="line">        mask = POLLNVAL;        <span class="comment">//初始化，文件描述符没有打开</span></span><br><span class="line">        <span class="keyword">if</span> (file != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="comment">//#define DEFAULT_POLLMASK (POLLIN | POLLOUT | POLLRDNORM | POLLWRNORM)</span></span><br><span class="line">            mask = DEFAULT_POLLMASK;</span><br><span class="line">            <span class="keyword">if</span> (file-&gt;f_op &amp;&amp; file-&gt;f_op-&gt;poll) &#123;</span><br><span class="line">                <span class="keyword">if</span> (pwait)        <span class="comment">//设置当前fd待检测的事件掩码</span></span><br><span class="line">                    pwait-&gt;key = pollfd-&gt;events | POLLERR | POLLHUP;</span><br><span class="line">                <span class="comment">//获取当前的就绪状态，并添加进程到文件的对应等待队列中</span></span><br><span class="line">                mask = file-&gt;f_op-&gt;poll(file, pwait);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//去除不关心的状态掩码</span></span><br><span class="line">            mask &amp;= pollfd-&gt;events | POLLERR | POLLHUP;</span><br><span class="line">            <span class="comment">//释放通过fget_light得到的file指针，实际就是减少引用计数</span></span><br><span class="line">            fput_light(file, fput_needed);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//记录当前fd的就绪状态</span></span><br><span class="line">    pollfd-&gt;revents = mask;</span><br><span class="line">    <span class="keyword">return</span> mask;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>select用位图组织文件描述符和事件掩码，而poll用链表+数组的形式</li>
<li>要检测的文件描述符多的情况下，select全部用堆上的空间，poll用栈空间和堆空间</li>
<li>select可以被信号终止，poll不能被信号终止，会重新启动</li>
</ol>
<h2 id="poll系统调用的函数调用过程"><a href="#poll系统调用的函数调用过程" class="headerlink" title="poll系统调用的函数调用过程"></a>poll系统调用的函数调用过程</h2><p><img src="/Picture/poll系统调用的函数调用过程.png" alt></p>
<h2 id="poll系统调用图解"><a href="#poll系统调用图解" class="headerlink" title="poll系统调用图解"></a>poll系统调用图解</h2><p><img src="/Picture/poll系统调用图解.jpg" alt></p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Libevent源码阅读——API简介</title>
    <url>/2017/10/08/libevent-2/</url>
    <content><![CDATA[<p>重新读下Libevent的源码，使用最新的Libevent版本libevent-release-2.1.8-stable，本篇主要是Libevent event_base的设置、Libevent 事件循环的启动和停止、Libevent事件的创建和处理、Libevent http服务相关API的介绍</p>
<h1 id="基础API"><a href="#基础API" class="headerlink" title="基础API"></a>基础API</h1><h2 id="日志打印回调设置API-event-set-log-callback"><a href="#日志打印回调设置API-event-set-log-callback" class="headerlink" title="日志打印回调设置API event_set_log_callback"></a>日志打印回调设置API event_set_log_callback</h2><p>Libevent记录内部的错误和警告日志，如果编译了日志支持功能，也会记录调试信息，<strong>日志信息默认输出到stderr</strong>，可以通过提供自己的日志函数的方法来覆盖该行为。调用event_set_log_callback()传入event_log_cb类型的函数改变默认行为，传入NULL置为默认行为。默认调试日志是禁止的，可以通过event_enable_debug_logging()函数打开调试(DEBUG)日志，EVENT_DBG_NONE为默认行为，EVENT_DBG_ALL打开所有支持的调试日志。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Libevent日志登记</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EVENT_LOG_DEBUG 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EVENT_LOG_MSG   1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EVENT_LOG_WARN  2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EVENT_LOG_ERR   3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//severity libevent日志等级</span></span><br><span class="line"><span class="comment">//msg libevent日志信息</span></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">void</span> <span class="params">(*event_log_cb)</span><span class="params">(<span class="keyword">int</span> severity, <span class="keyword">const</span> <span class="keyword">char</span> *msg)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//log_fn libevent默认的日志回调函数</span></span><br><span class="line"><span class="keyword">static</span> event_log_cb log_fn = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置libevent新的日志回调函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">event_set_log_callback</span><span class="params">(event_log_cb cb)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	log_fn = cb;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EVENT_DBG_ALL 0xffffffffu</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EVENT_DBG_NONE 0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">event_enable_debug_logging</span><span class="params">(<span class="keyword">ev_uint32_t</span> which)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	event_debug_logging_mask_ = which;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="https://github.com/CaseZheng/Study/blob/master/Libevent/libevent_server.cpp" target="_blank" rel="noopener">Github示例代码</a></p>
<h2 id="致命错误退出回调设置API-event-set-fatal-callback"><a href="#致命错误退出回调设置API-event-set-fatal-callback" class="headerlink" title="致命错误退出回调设置API event_set_fatal_callback"></a>致命错误退出回调设置API event_set_fatal_callback</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">void</span> <span class="params">(*event_fatal_cb)</span><span class="params">(<span class="keyword">int</span> err)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> event_fatal_cb fatal_fn = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">event_set_fatal_callback</span><span class="params">(event_fatal_cb cb)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	fatal_fn = cb;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Libevent在遇到致命错误时默认调用exit()或abort()退出当前进程，Libevent提供接口在其退出前会调用一次。</p>
<h2 id="更换内存管理函数的API-event-set-mem-functions"><a href="#更换内存管理函数的API-event-set-mem-functions" class="headerlink" title="更换内存管理函数的API event_set_mem_functions"></a>更换内存管理函数的API event_set_mem_functions</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> *(*mm_malloc_fn_)(<span class="keyword">size_t</span> sz) = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> *(*mm_realloc_fn_)(<span class="keyword">void</span> *p, <span class="keyword">size_t</span> sz) = <span class="literal">NULL</span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="title">void</span> <span class="params">(*mm_free_fn_)</span><span class="params">(<span class="keyword">void</span> *p)</span> </span>= <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">event_set_mem_functions</span><span class="params">(<span class="keyword">void</span> *(*malloc_fn)(<span class="keyword">size_t</span> sz),</span></span></span><br><span class="line"><span class="function"><span class="params">			<span class="keyword">void</span> *(*realloc_fn)(<span class="keyword">void</span> *ptr, <span class="keyword">size_t</span> sz),</span></span></span><br><span class="line"><span class="function"><span class="params">			<span class="keyword">void</span> (*free_fn)(<span class="keyword">void</span> *ptr))</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	mm_malloc_fn_ = malloc_fn;</span><br><span class="line">	mm_realloc_fn_ = realloc_fn;</span><br><span class="line">	mm_free_fn_ = free_fn;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>默认情况下Libevent会使用原生的malloc、calloc、realloc、free。<br>注意:更换内存管理函数将会影响LibEvent后续所有调用allocate、resize和free内存的函数.因此你需要确保在LibEvent调用其它函数之前替换掉这些函数.否则LibEvent将会调用你提供的free函数来释放从C语言库版本的malloc分配的内存.</p>
<ul>
<li>你的malloc和realloc函数需要返回和C语言库相同的内存对齐.</li>
<li>你的realloc函数需要正确处理realloc(NULL,sz),也就是说当做(malloc(sz)处理).</li>
<li>你的realloc函数需要正确处理realloc(ptr,0),也就是说当做free(ptr)处理.</li>
<li>你的free函数不必去处理free(NULL).</li>
<li>你的malloc函数不必去处理malloc(0).</li>
<li>如果你不止一个线程使用LibEvent,那么你提供的的内存管理替代函数必须是线程安全的.</li>
</ul>
<p><a href="https://github.com/CaseZheng/Study/blob/master/Libevent/libevent_server.cpp" target="_blank" rel="noopener">Github示例代码</a></p>
<h2 id="释放LibEvent全局结构体-libevent-global-shutdown"><a href="#释放LibEvent全局结构体-libevent-global-shutdown" class="headerlink" title="释放LibEvent全局结构体 libevent_global_shutdown"></a>释放LibEvent全局结构体 libevent_global_shutdown</h2><p>当进程退出时所有内存都会被释放，但残留的结构体会导致某些调试工具认为Libevent存在内存泄露，使用libevent_global_shutdown可以释放所有库内部的全局数据结构。但libevent_global_shutdown不会释放返回到Libevent外部的结构体，如events、event_base、bufferevents等。<br>调用libevent_global_shutdown()函数将会使得别的LibEvent的函数产生不可预知的行为.除了程序调用了最后一个LibEvent的函数否则不要调用它。<br><a href="https://github.com/CaseZheng/Study/blob/master/Libevent/libevent_timer_signal.cpp" target="_blank" rel="noopener">Github示例代码</a></p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>以下设置请看官方文档或<a href="http://blog.csdn.net/zhouyongku/article/details/53431597" target="_blank" rel="noopener">Libevent中文帮助手册</a></p>
<ol>
<li>线程和锁</li>
<li>调试锁的使用</li>
<li>调试事件的使用</li>
<li>Libevent版本的检查</li>
</ol>
<h1 id="event-base创建"><a href="#event-base创建" class="headerlink" title="event_base创建"></a>event_base创建</h1><h2 id="默认的event-base"><a href="#默认的event-base" class="headerlink" title="默认的event_base"></a>默认的event_base</h2><p>event_base_new()函数分配和返回一个默认参数的event_base，event_base_new()函数检查环境变量，然后分配一个指向新的event_base的指针，如果错误，返回NULL。<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">struct event_base *<span class="title">event_base_new</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br></pre></td></tr></table></figure></p>
<h2 id="复杂的event-base"><a href="#复杂的event-base" class="headerlink" title="复杂的event_base"></a>复杂的event_base</h2><p>创建复杂的event_base需要传入event_config。event_config通过event_config_new获得。<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">struct event_config *<span class="title">event_config_new</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br></pre></td></tr></table></figure></p>
<p>获得event_config后对其进行设置，然后调用event_base_new_with_config()创建event_base。<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">struct event_base *<span class="title">event_base_new_with_config</span><span class="params">(<span class="keyword">const</span> struct event_config *cfg)</span></span>;</span><br></pre></td></tr></table></figure></p>
<p>使用完event_config后需要调用event_config_free()释放event_config。<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">event_config_free</span><span class="params">(struct event_config *cfg)</span></span>;</span><br></pre></td></tr></table></figure></p>
<p>event_config的设置需要调用别的函数。<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">event_config_avoid_method</span><span class="params">(struct event_config *cfg, <span class="keyword">const</span> <span class="keyword">char</span> *method)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> event_method_feature &#123;</span><br><span class="line">    EV_FEATURE_ET = <span class="number">0x01</span>,</span><br><span class="line">    EV_FEATURE_O1 = <span class="number">0x02</span>,</span><br><span class="line">    EV_FEATURE_FDS = <span class="number">0x04</span>,</span><br><span class="line">    EV_FEATURE_EARLY_CLOSE = <span class="number">0x08</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">event_config_require_features</span><span class="params">(struct event_config *cfg, <span class="keyword">int</span> features)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> event_base_config_flag &#123;</span><br><span class="line">	EVENT_BASE_FLAG_NOLOCK = <span class="number">0x01</span>,</span><br><span class="line">	EVENT_BASE_FLAG_IGNORE_ENV = <span class="number">0x02</span>,</span><br><span class="line">	EVENT_BASE_FLAG_STARTUP_IOCP = <span class="number">0x04</span>,</span><br><span class="line">	EVENT_BASE_FLAG_NO_CACHE_TIME = <span class="number">0x08</span>,</span><br><span class="line">	EVENT_BASE_FLAG_EPOLL_USE_CHANGELIST = <span class="number">0x10</span>,</span><br><span class="line">	EVENT_BASE_FLAG_PRECISE_TIMER = <span class="number">0x20</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">event_config_set_flag</span><span class="params">(struct event_config *cfg, <span class="keyword">int</span> flag)</span></span>;</span><br></pre></td></tr></table></figure></p>
<p>event_config_avoid_method()可通过名字让libevent避免使用特定的可用后端。<br>event_config_require_features()可让libevent不使用不能提供所有指定特征的后端。<br>event_config_set_flag()让libevent在创建event_base时设置一个或多个运行时标志。</p>
<h3 id="event-config-require-features"><a href="#event-config-require-features" class="headerlink" title="event_config_require_features()"></a>event_config_require_features()</h3><p>可识别的选项值有：</p>
<ol>
<li>EV_FEATURE_ET 要求支持ET模式的后端（边沿触发）</li>
<li>EV_FEATURE_O1 要求添加、删除单个事件，或者确定哪个事件激活的操作时O(1)复杂度的后端</li>
<li>EV_FEATURE_FDS 要求支持任意文件描述符，而不仅仅是套接字的后端</li>
<li>EV_FEATURE_EARLY_CLOSE 要求后台方法可以使用EV_CLOSED检测链接关闭，而不需要读完所有未决数据才能判断 支持EV_CLOSED的后台方法不是所有OS内核都支持的</li>
</ol>
<p>设置成功返回0，失败返回-1</p>
<h3 id="event-config-set-flag"><a href="#event-config-set-flag" class="headerlink" title="event_config_set_flag()"></a>event_config_set_flag()</h3><p>可识别的选项值有：</p>
<ol>
<li>EVENT_BASE_FLAG_NOLOCK 不要为 event_base分配锁.设置这个选项可以为event_base节省一点用于锁定和解锁的时间,但是让在多个线程中访问 event_base成为不安全的</li>
<li>EVENT<em>BASE_FLAG_IGNORE_ENV 选择使用的后端时,不要检测``EVENT</em>*``环境变量.</li>
<li>EVENT_BASE_FLAG_STARTUP_IOCP 仅用于 Windows,让 libevent在启动时就启用任何必需的IOCP分发逻辑,而不是按需启用</li>
<li>EVENT_BASE_FLAG_NO_CACHE_TIME 不是在事件循环每次准备执行超时回调时检测当前时间,而是在每次超时回调后进行检测.注意:这会消耗更多的CPU时间</li>
<li>EVENT_BASE_FLAG_EPOLL_USE_CHANGELIST 如果决定使用epoll后端,可以安全地使用更快的基于 changelist的后端.epoll-changelist后端可以在后端的分发函数调用之间,同样的fd多次修改其状态的情况下,避免不必要的系统调用.但是如果传递任何使用 dup ()或者其变体克隆的 fd给libevent, epoll-changelist后端会触发一个内核bug,导致不正确的结果.在不使用epoll后端的情况下,这个标志是没有效果的.也可以通过设置 EVENT_EPOLL_USE_CHANGELIST:环境变量来打开epoll-changelist选项.</li>
<li>EVENT_BASE_FLAG_PRECISE_TIMER 使用更加精确的定时机制</li>
</ol>
<p>设置成功返回0，失败返回-1</p>
<h3 id="获得特定event-base的配置信息"><a href="#获得特定event-base的配置信息" class="headerlink" title="获得特定event_base的配置信息"></a>获得特定event_base的配置信息</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">const</span> <span class="keyword">char</span> *<span class="title">event_base_get_method</span><span class="params">(<span class="keyword">const</span> struct event_base *base)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">event_base_get_features</span><span class="params">(<span class="keyword">const</span> struct event_base *base)</span></span>;</span><br></pre></td></tr></table></figure>
<p>event_base_get_method返回一个指针,指向event_base所选择的后端的名称<br>event_base_get_features返回event_base所选后端支持的特征值的比特掩码</p>
<p><a href="https://github.com/CaseZheng/Study/blob/master/Libevent/libevent_timer_signal.cpp" target="_blank" rel="noopener">示例代码</a></p>
<h1 id="运行循环"><a href="#运行循环" class="headerlink" title="运行循环"></a>运行循环</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EVLOOP_ONCE	0x01</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EVLOOP_NONBLOCK	0x02</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EVLOOP_NO_EXIT_ON_EMPTY 0x04</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">event_base_loop</span><span class="params">(struct event_base *base, <span class="keyword">int</span> flags)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">event_base_dispatch</span> <span class="params">(struct event_base *base)</span></span>;</span><br></pre></td></tr></table></figure>
<p>event_base_loop会运行一个event_base直到没有event注册进来，循环运行，不断重复判断是否有注册的event触发。<br>flags标记可改变event_base_loop的行为：</p>
<ol>
<li>EVLOOP_ONCE 循环将等待某些事件成为激活的，执行激活的事件直到没有更多的事件可以执行，然会返回</li>
<li>EVLOOP_NONBLOCK：循环不等待事件被触发，循环将仅仅检测是否有事件已经就绪，可以立即触发，如果有，则执行事件的回调。</li>
<li>EVLOOP_NO_EXIT_ON_EMPTY：没有事件仍不退出，而是由其他函数触发退出</li>
</ol>
<p>event_base_dispatch采用默认的配置调用event_base_loop();<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">event_base_dispatch</span><span class="params">(struct event_base *event_base)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> (event_base_loop(event_base, <span class="number">0</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="停止循环"><a href="#停止循环" class="headerlink" title="停止循环"></a>停止循环</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">event_base_loopexit</span><span class="params">(struct event_base *event_base, <span class="keyword">const</span> struct timeval *tv)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">event_base_loopbreak</span><span class="params">(struct event_base *event_base)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">event_base_got_break</span><span class="params">(struct event_base *event_base)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">event_base_got_exit</span><span class="params">(struct event_base *event_base)</span></span>;</span><br></pre></td></tr></table></figure>
<h2 id="event-base-loopexit"><a href="#event-base-loopexit" class="headerlink" title="event_base_loopexit()"></a>event_base_loopexit()</h2><p>要求event_base在指定时间后停止，如果tv为NULL，则立即停止。但该函数实际会使部分event_base在执行完全部的callback之后才返回。</p>
<h2 id="event-base-loopbreak"><a href="#event-base-loopbreak" class="headerlink" title="event_base_loopbreak()"></a>event_base_loopbreak()</h2><p>要求event_base立即停止，无视其他的active事件而停止。如果当前没有callback，则会导致event_base等到执行完下一个callback之后才退出。</p>
<h2 id="event-base-got-break-和-event-base-got-exit"><a href="#event-base-got-break-和-event-base-got-exit" class="headerlink" title="event_base_got_break() 和 event_base_got_exit()"></a>event_base_got_break() 和 event_base_got_exit()</h2><p>event_base_got_break 如果循环因为event_base_loopbreak()退出，event_base_got_break返回true，否则返回false<br>event_base_got_exit 如果循环因为event_base_loopexit()退出，event_base_got_exit返回true，否则返回false</p>
<p><a href="https://github.com/CaseZheng/Study/blob/master/Libevent/libevent_timer_signal.cpp" target="_blank" rel="noopener">示例代码</a></p>
<h1 id="event"><a href="#event" class="headerlink" title="event"></a>event</h1><h2 id="event简介"><a href="#event简介" class="headerlink" title="event简介"></a>event简介</h2><p>libevent的基本操作单元是事件event，每个事件代表一组条件：</p>
<ol>
<li>文件描述符已经就绪，可以读取或者写入</li>
<li>文件描述符变为就绪状态，可以读取或者写入（仅对于边沿触发IO）</li>
<li>超时事件</li>
<li>信号</li>
<li>用户手动触发</li>
</ol>
<p>当一个event被设置好，并且关联到一个event_base里面时，它被称为“initialized”。此时你可以执行add，这使得它进入pending(等待、未决的)状态。当event被触发或超时时，它的状态称为active，这个情况下对应的callback会被调用。如果event被配置为persist，那么它在callback执行前后都会保持pending的状态。可以通过delete来使得一个event从pending状态重新变成nonpending。</p>
<h2 id="event-API-介绍"><a href="#event-API-介绍" class="headerlink" title="event API 介绍"></a>event API 介绍</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">void</span> <span class="params">(*event_callback_fn)</span><span class="params">(<span class="keyword">evutil_socket_t</span>, short, <span class="keyword">void</span> *)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">struct event * <span class="title">event_new</span><span class="params">(struct event_base *base, \</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">evutil_socket_t</span> fd, \</span></span></span><br><span class="line"><span class="function"><span class="params">    short events, \</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">void</span> (*cb)(<span class="keyword">evutil_socket_t</span>, short, <span class="keyword">void</span> *), \</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">void</span> *arg)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">event_free</span><span class="params">(struct event *ev)</span></span>;</span><br></pre></td></tr></table></figure>
<h3 id="event创建-event-new"><a href="#event创建-event-new" class="headerlink" title="event创建 event_new"></a>event创建 event_new</h3><p>event_new 创建一个新的event。其中fd是文件描述符，需要自行初始化之后再作为参数传入。event_free()释放event的资源。如果event是active或者是pending状态，则函数会将event先变成非active且非pending的状态，然后再释放它。<br>参数events表示event的需要关注绑定该fd上的哪些事件。</p>
<ol>
<li>EV_TIMEOUT：超时</li>
<li>EV_READ：有数据可读</li>
<li>EV_WRITE：数据可写</li>
<li>EV_SIGNAL：系统发出的信号（signal）</li>
<li>EV_PERSIST：持续事件</li>
<li>EV_ET：边沿触发</li>
</ol>
<p>cb是event被触发后调用的回调函数，cb的类型为event_callback_fn。<br>arg为用户数据在调用回调函数时传给回调函数。</p>
<h3 id="EV-PERSIST-事件持久化"><a href="#EV-PERSIST-事件持久化" class="headerlink" title="EV_PERSIST 事件持久化"></a>EV_PERSIST 事件持久化</h3><p>默认情况下，每当未决事件成为激活的(因为fd已经准备好读取或者写入,或者因为超时),事件将在其回调被执行前成为非未决的。如果想让事件再次成为未决的,可以在回调函数中再次对其调用event_add()。<br>如果设置了EV_PERSIST标志,事件就是持久的。这意味着即使其回调被激活,事件还是会保持为未决状态。如果想在回调中让事件成为非未决的,可以对其调用event_del()。每次执行事件回调的时候,持久事件的超时值会被复位。</p>
<h3 id="超时事件的创建"><a href="#超时事件的创建" class="headerlink" title="超时事件的创建"></a>超时事件的创建</h3><p>纯超时事件不需要fd（传-1即可）。libevent定义了创建超时事件的宏：<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> evtimer_assign(ev, b, cb, arg) \</span></span><br><span class="line">	event_assign((ev), (b), <span class="number">-1</span>, <span class="number">0</span>, (cb), (arg))</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> evtimer_new(b, cb, arg)	       event_new((b), -1, 0, (cb), (arg))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> evtimer_add(ev, tv)		event_add((ev), (tv))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> evtimer_del(ev)			event_del(ev)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> evtimer_pending(ev, tv)		event_pending((ev), EV_TIMEOUT, (tv))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> evtimer_initialized(ev)		event_initialized(ev)</span></span><br></pre></td></tr></table></figure></p>
<h3 id="信号事件的创建"><a href="#信号事件的创建" class="headerlink" title="信号事件的创建"></a>信号事件的创建</h3><p>信号事件不需要传入fd，而是传入signum。libevent定义了创建信号事件的宏：<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> evsignal_add(ev, tv)		event_add((ev), (tv))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> evsignal_assign(ev, b, x, cb, arg)			\</span></span><br><span class="line">	event_assign((ev), (b), (x), EV_SIGNAL|EV_PERSIST, cb, (arg))</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> evsignal_new(b, x, cb, arg)				\</span></span><br><span class="line">	event_new((b), (x), EV_SIGNAL|EV_PERSIST, (cb), (arg))</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> evsignal_del(ev)		event_del(ev)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> evsignal_pending(ev, tv)	event_pending((ev), EV_SIGNAL, (tv))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> evsignal_initialized(ev)	event_initialized(ev)</span></span><br></pre></td></tr></table></figure></p>
<h3 id="事件的初始化"><a href="#事件的初始化" class="headerlink" title="事件的初始化"></a>事件的初始化</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">event_assign</span><span class="params">(struct event *, struct event_base *, <span class="keyword">evutil_socket_t</span>, short, event_callback_fn, <span class="keyword">void</span> *)</span></span>;</span><br></pre></td></tr></table></figure>
<p>可以使用event_new在创建event时初始化event，也可以使用event_assign初始化未初始化的event，event_assign的参数与event_new的参数意义相同。<br>不要对已经在event_base中未决的事件调用event_assign(),这可能会导致难以诊断的错误。如果已经初始化和成为未决的,调用event_assign()之前需要调用event_del()。libevent提供了方便的宏将event_assign()用于仅超时事件或者信号事件。</p>
<h3 id="event添加监听与取消监听"><a href="#event添加监听与取消监听" class="headerlink" title="event添加监听与取消监听"></a>event添加监听与取消监听</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">event_add</span><span class="params">(struct event *ev, <span class="keyword">const</span> struct timeval *tv)</span></span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> evtimer_add(ev, tv)		event_add((ev), (tv))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> evsignal_add(ev, tv)		event_add((ev), (tv))</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">event_del</span><span class="params">(struct event *ev)</span></span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> evtimer_del(ev)			event_del(ev)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> evsignal_del(ev)		event_del(ev)</span></span><br></pre></td></tr></table></figure>
<p>event_add 添加事件监听, tv为指定的超时值，如果为NULL表示不超时。event_del 取消事件监听。</p>
<h3 id="event设置优先级"><a href="#event设置优先级" class="headerlink" title="event设置优先级"></a>event设置优先级</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">event_priority_init</span><span class="params">(<span class="keyword">int</span> npriorities)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">event_priority_set</span><span class="params">(struct event *ev, <span class="keyword">int</span> pri)</span></span>;</span><br></pre></td></tr></table></figure>
<p>event_priority_init()初始化优先级等级。即设置event_base的优先级数目<br>event_priority_set()设置ev的优先级。pri是[0, npriorities)的一个值。</p>
<h3 id="event状态检测"><a href="#event状态检测" class="headerlink" title="event状态检测"></a>event状态检测</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">event_pending</span><span class="params">(<span class="keyword">const</span> struct event *ev, short event, struct timeval *tv)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">evutil_socket_t</span> <span class="title">event_get_fd</span><span class="params">(<span class="keyword">const</span> struct event *ev)</span></span>;</span><br><span class="line"><span class="function">struct event_base *<span class="title">event_get_base</span><span class="params">(<span class="keyword">const</span> struct event *ev)</span></span>;</span><br><span class="line"><span class="function">short <span class="title">event_get_events</span><span class="params">(<span class="keyword">const</span> struct event *ev)</span></span>;</span><br><span class="line"><span class="function">event_callback_fn <span class="title">event_get_callback</span><span class="params">(<span class="keyword">const</span> struct event *ev)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">event_get_callback_arg</span><span class="params">(<span class="keyword">const</span> struct event *ev)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">event_get_priority</span><span class="params">(<span class="keyword">const</span> struct event *ev)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">event_get_assignment</span><span class="params">(<span class="keyword">const</span> struct event *event, struct event_base **base_out, <span class="keyword">evutil_socket_t</span> *fd_out, short *events_out, event_callback_fn *callback_out, <span class="keyword">void</span> **arg_out)</span></span>;</span><br></pre></td></tr></table></figure>
<h4 id="event-pending"><a href="#event-pending" class="headerlink" title="event_pending"></a>event_pending</h4><p>event_pending函数确定给出的event是未决的还是活动的.如果EV_READ、EV_WRITE、EV_SIGNAL、EV_TIMEOUT被设置为event参数,函数会返回event是未决的或者活动的所有标志.如果提供了tv_out并且设置了EV_TIMEOUT标志给event参数,当前event是未决的或者活跃在超时上,tv_out设置为保存event超时后的时间。</p>
<h4 id="event-get-fd"><a href="#event-get-fd" class="headerlink" title="event_get_fd"></a>event_get_fd</h4><p>函数返回了event配置的文件描述符或者信号值。</p>
<h4 id="event-get-base"><a href="#event-get-base" class="headerlink" title="event_get_base"></a>event_get_base</h4><p>返回event配置的event_base。</p>
<h4 id="event-get-events"><a href="#event-get-events" class="headerlink" title="event_get_events"></a>event_get_events</h4><p>返回事件的标志(EV_READ、EV_WRITE等)</p>
<h4 id="event-get-callback-和-event-get-callback-arg"><a href="#event-get-callback-和-event-get-callback-arg" class="headerlink" title="event_get_callback 和 event_get_callback_arg"></a>event_get_callback 和 event_get_callback_arg</h4><p>event_get_callback()和event_get_callback_arg()函数返回了event的回掉函数和它的参数指针</p>
<h4 id="event-get-priority"><a href="#event-get-priority" class="headerlink" title="event_get_priority"></a>event_get_priority</h4><p>返回了事件当前分配的优先级</p>
<h4 id="event-get-assignment"><a href="#event-get-assignment" class="headerlink" title="event_get_assignment"></a>event_get_assignment</h4><p>拷贝了event分配的所有字段到提供的指针。如果指针为空,则忽略。</p>
<h2 id="手动激活事件"><a href="#手动激活事件" class="headerlink" title="手动激活事件"></a>手动激活事件</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">event_active</span><span class="params">(struct event *ev, <span class="keyword">int</span> res, short ncalls)</span></span>;</span><br></pre></td></tr></table></figure>
<p>使ev以标志res(EV_READ、EV_WRITE、EV_TIMEOUT的组合)激活,ev不需要预先的被未决,激活event也不需要使其未决。</p>
<h1 id="evbuffer"><a href="#evbuffer" class="headerlink" title="evbuffer"></a>evbuffer</h1><p>evbuffer 用于处理缓冲网络 IO 的”缓冲”部分.</p>
<h2 id="创建和释放evbuffer"><a href="#创建和释放evbuffer" class="headerlink" title="创建和释放evbuffer"></a>创建和释放evbuffer</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">struct evbuffer * <span class="title">evbuffer_new</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">evbuffer_free</span><span class="params">(struct evbuffer *<span class="built_in">buffer</span>)</span></span>;</span><br></pre></td></tr></table></figure>
<p>evbuffer_new() 分配和返回一个新的空evbuffer;而evbuffer_free()释放evbuffer和其内容</p>
<h2 id="evbuffer与线程安全"><a href="#evbuffer与线程安全" class="headerlink" title="evbuffer与线程安全"></a>evbuffer与线程安全</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">evbuffer_enable_locking</span><span class="params">(struct evbuffer *buf, <span class="keyword">void</span> *lock)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">evbuffer_lock</span><span class="params">(struct evbuffer *buf)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">evbuffer_unlock</span><span class="params">(struct evbuffer *buf)</span></span>;</span><br></pre></td></tr></table></figure>
<p>默认情况下，在多个线程中同时访问 evbuffer 是不安全的。如果需要这样的访问，可以调用 evbuffer_enable_locking() 。 如果lock参数为NULL,libevent会使用evthread_set_lock_creation_callback 提供的锁创建函数创建一个锁.否则,libevent将lock参数用作锁。evbuffer_lock()和 evbuffer_unlock()函数分别请求和释放 evbuffer 上的锁。可以使用这两个函数让一系列操作是原子的。如果 evbuffer 没有启用锁，这两个函数不做任何操作。<br>注意：对于单个操作，不需要调用evbuffer_lock()和evbuffer_unlock()：如果evbuffer启用了锁，单个操作就已经是原子的。只有在需要多个操作连续执行，不让其他线程介入的时候，才需要手动锁定evbuffer</p>
<h2 id="检查evbuffer"><a href="#检查evbuffer" class="headerlink" title="检查evbuffer"></a>检查evbuffer</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">size_t</span> <span class="title">evbuffer_get_length</span><span class="params">(<span class="keyword">const</span> struct evbuffer *<span class="built_in">buffer</span>)</span></span>;</span><br></pre></td></tr></table></figure>
<p>返回evbuffer存储的字节数</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">size_t</span> <span class="title">evbuffer_get_contiguous_space</span><span class="params">(<span class="keyword">const</span> struct evbuffer *buf)</span></span>;</span><br></pre></td></tr></table></figure>
<p>返回连续地存储在 evbuffer 前面的字节数。evbuffer 中的数据可能存储在多个分隔开的内存块中，这个函数返回当前第一个块中的字节数</p>
<h2 id="向evbuffer添加数据"><a href="#向evbuffer添加数据" class="headerlink" title="向evbuffer添加数据"></a>向evbuffer添加数据</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">evbuffer_add</span><span class="params">(struct evbuffer *buf, <span class="keyword">const</span> <span class="keyword">void</span> *data_in, <span class="keyword">size_t</span> datlen)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">evbuffer_add_printf</span><span class="params">(struct evbuffer *buf, <span class="keyword">const</span> <span class="keyword">char</span> *fmt, ...)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">evbuffer_add_vprintf</span><span class="params">(struct evbuffer *buf, <span class="keyword">const</span> <span class="keyword">char</span> *fmt, va_list ap)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">evbuffer_expand</span><span class="params">(struct evbuffer *buf, <span class="keyword">size_t</span> datlen)</span></span>;</span><br></pre></td></tr></table></figure>
<p>evbuffer_add()添加data处的datlen字节到buf的末尾.<br>evbuffer_add_printf()和evbuffer_add_vprintf()添加格式化的数据到buf末尾.<br>evbuffer_expand()修改缓冲区最后一块,或者添加一个新的块,使缓冲区足以容纳datlen字节,而不需要更多的内存分配</p>
<h2 id="将数据从一个evbuffer移动到另一个"><a href="#将数据从一个evbuffer移动到另一个" class="headerlink" title="将数据从一个evbuffer移动到另一个"></a>将数据从一个evbuffer移动到另一个</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">evbuffer_add_buffer</span><span class="params">(struct evbuffer *outbuf, struct evbuffer *inbuf)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">evbuffer_remove_buffer</span><span class="params">(struct evbuffer *src, struct evbuffer *dst, <span class="keyword">size_t</span> datlen)</span></span>;</span><br></pre></td></tr></table></figure>
<p>evbuffer_add_buffer()将inbuf的所有数据移动到outbuf末尾.<br>evbuffer_remove_buffer()从src中移动datlen字节到dst末尾,尽量少进行复制.如果字节数小于datlen,所有字节被移动.</p>
<h2 id="添加数据到evbuffer前面"><a href="#添加数据到evbuffer前面" class="headerlink" title="添加数据到evbuffer前面"></a>添加数据到evbuffer前面</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">evbuffer_prepend</span><span class="params">(struct evbuffer *buf, <span class="keyword">const</span> <span class="keyword">void</span> *data, <span class="keyword">size_t</span> datlen)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">evbuffer_prepend_buffer</span><span class="params">(struct evbuffer *outbuf, struct evbuffer *inbuf)</span></span>;</span><br></pre></td></tr></table></figure>
<p>将数据移动到目标缓冲区前面</p>
<h2 id="从evbuffer中移除数据"><a href="#从evbuffer中移除数据" class="headerlink" title="从evbuffer中移除数据"></a>从evbuffer中移除数据</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">evbuffer_drain</span><span class="params">(struct evbuffer *buf, <span class="keyword">size_t</span> len)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">evbuffer_remove</span><span class="params">(struct evbuffer *buf, <span class="keyword">void</span> *data_out, <span class="keyword">size_t</span> datlen)</span></span>;</span><br></pre></td></tr></table></figure>
<p>evbuffer_drain()函数从buf前面移除len字节内存<br>evbuffer_remove()函数从buf前面复制和移除datlen字节到data_out处的内存中.如果可用字节少于datlen,复制所有字节.</p>
<h2 id="从evbuffer中复制出数据"><a href="#从evbuffer中复制出数据" class="headerlink" title="从evbuffer中复制出数据"></a>从evbuffer中复制出数据</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">ev_ssize_t</span> <span class="title">evbuffer_copyout</span><span class="params">(struct evbuffer *buf, <span class="keyword">void</span> *data_out, <span class="keyword">size_t</span> datlen)</span></span>;</span><br></pre></td></tr></table></figure>
<p>前面复制 datlen 字节到 data_out 处的内存中。如果可用字节少于 datlen，函数会复制所有字节。失败时返回-1，否则返回复制的字节数。</p>
<h2 id="面向行的输入"><a href="#面向行的输入" class="headerlink" title="面向行的输入"></a>面向行的输入</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> evbuffer_eol_style &#123;</span><br><span class="line">	EVBUFFER_EOL_ANY,</span><br><span class="line">	EVBUFFER_EOL_CRLF,</span><br><span class="line">	EVBUFFER_EOL_CRLF_STRICT,</span><br><span class="line">	EVBUFFER_EOL_LF,</span><br><span class="line">	EVBUFFER_EOL_NUL</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span> * <span class="title">evbuffer_readln</span><span class="params">(struct evbuffer *<span class="built_in">buffer</span>, <span class="keyword">size_t</span> *n_read_out, <span class="keyword">enum</span> evbuffer_eol_style eol_style)</span></span>;</span><br></pre></td></tr></table></figure>
<p>evbuffer_readln()函数从 evbuffer 前面取出一行，用一个新分配的空字符结束的字符串返回这一行。如果 n_read_out 不是 NULL，则它被设置为返回的字符串的字节数。如果没有整行供读取，函数返回空。返回的字符串不包括行结束符。evbuffer_readln()理解4种行结束格式</p>
<ol>
<li>EVBUFFER_EOL_ANY,行尾是单个换行符</li>
<li>EVBUFFER_EOL_CRLF,行尾是一个回车符，后随一个换行符</li>
<li>EVBUFFER_EOL_CRLF_STRICT,行尾是一个可选的回车，后随一个换行符</li>
<li>EVBUFFER_EOL_LF,行尾是任意数量、任意次序的回车和换行符。</li>
</ol>
<h2 id="在evbuffer中搜索"><a href="#在evbuffer中搜索" class="headerlink" title="在evbuffer中搜索"></a>在evbuffer中搜索</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">evbuffer_ptr</span> &#123;</span></span><br><span class="line">	<span class="keyword">ev_ssize_t</span> pos;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">		<span class="keyword">void</span> *chain;</span><br><span class="line">		<span class="keyword">size_t</span> pos_in_chain;</span><br><span class="line">	&#125; internal_;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function">struct evbuffer_ptr <span class="title">evbuffer_search</span><span class="params">(struct evbuffer *<span class="built_in">buffer</span>, <span class="keyword">const</span> <span class="keyword">char</span> *what, <span class="keyword">size_t</span> len, <span class="keyword">const</span> struct evbuffer_ptr *start)</span></span>;</span><br><span class="line"><span class="function">struct evbuffer_ptr <span class="title">evbuffer_search_range</span><span class="params">(struct evbuffer *<span class="built_in">buffer</span>, <span class="keyword">const</span> <span class="keyword">char</span> *what, <span class="keyword">size_t</span> len, <span class="keyword">const</span> struct evbuffer_ptr *start, <span class="keyword">const</span> struct evbuffer_ptr *<span class="built_in">end</span>)</span></span>;</span><br><span class="line"><span class="function">struct evbuffer_ptr <span class="title">evbuffer_search_eol</span><span class="params">(struct evbuffer *<span class="built_in">buffer</span>, struct evbuffer_ptr *start, <span class="keyword">size_t</span> *eol_len_out, <span class="keyword">enum</span> evbuffer_eol_style eol_style)</span></span>;</span><br></pre></td></tr></table></figure>
<p>evbuffer_search()函数在缓冲区中查找含有 len 个字符的字符串 what。函数返回包含字符串位置，或者在没有找到字符串时包含-1的 evbuffer_ptr 结构体。如果提供了 start 参数，则从指定的位置开始搜索；否则，从开始处进行搜索。<br>evbuffer_search_range()函数和 evbuffer_search 行为相同，只是它只考虑在 end 之前出现 的 what。<br>evbuffer_search_eol()函数像 evbuffer_readln()一样检测行结束，但是不复制行，而是返回指向行结束符的 evbuffer_ptr。如果 eol_len_out 非空，则它被设置为 EOL 字符串长度。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> evbuffer_ptr_how &#123;</span><br><span class="line">	EVBUFFER_PTR_SET,</span><br><span class="line">	EVBUFFER_PTR_ADD</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">evbuffer_ptr_set</span><span class="params">(struct evbuffer *buf, struct evbuffer_ptr *pos, <span class="keyword">size_t</span> <span class="built_in">position</span>, <span class="keyword">enum</span> evbuffer_ptr_how how)</span></span>;</span><br></pre></td></tr></table></figure>
<p>evbuffer_ptr_set 函数操作 buffer 中的位置 pos。如果 how 等于 EVBUFFER_PTR_SET,指针被移动到缓冲区中的绝对位置 position；如果等于 EVBUFFER_PTR_ADD，则向前移动 position 字节。成功时函数返回0，失败时返回-1。<br>任何修改 evbuffer 或者其布局的调用都会使得 evbuffer_ptr 失效，不能再安全地使用。</p>
<h2 id="检测数据而不复制"><a href="#检测数据而不复制" class="headerlink" title="检测数据而不复制"></a>检测数据而不复制</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">evbuffer_iovec</span> &#123;</span></span><br><span class="line">	<span class="keyword">void</span> *iov_base;</span><br><span class="line">	<span class="keyword">size_t</span> iov_len;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">evbuffer_peek</span><span class="params">(struct evbuffer *<span class="built_in">buffer</span>, <span class="keyword">ev_ssize_t</span> len, struct evbuffer_ptr *start_at, struct evbuffer_iovec *vec, <span class="keyword">int</span> n_vec)</span></span>;</span><br></pre></td></tr></table></figure>
<p>调用 evbuffer_peek()的时候，通过 vec_out 给定一个 evbuffer_iovec 数组，数组的长度是n_vec。函数会让每个结构体包含指向 evbuffer 内部内存块的指针（iov_base)和块中数据长度。如果 len 小于0，evbuffer_peek()会试图填充所有 evbuffer_iovec 结构体。否则，函数会进行填充，直到使用了所有结构体，或者见到 len 字节为止。如果函数可以给出所有请求的数据，则返回实际使用的结构体个数；否则，函数返回给出所有请求数据所需的结构体个数。如果 ptr 为 NULL，函数从缓冲区开始处进行搜索。否则，从 ptr 处开始搜索。</p>
<ol>
<li>修改 evbuffer_iovec 所指的数据会导致不确定的行为</li>
<li>如果任何函数修改了 evbuffer，则 evbuffer_peek()返回的指针会失效</li>
<li>如果在多个线程中使用evbuffer，确保在调用evbuffer_peek()之前使用evbuffer_lock()，在使用完evbuffer_peek()给出的内容之后进行解锁.</li>
</ol>
<h2 id="直接向evbuffer添加数据"><a href="#直接向evbuffer添加数据" class="headerlink" title="直接向evbuffer添加数据"></a>直接向evbuffer添加数据</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">evbuffer_reserve_space</span><span class="params">(struct evbuffer *buf, <span class="keyword">ev_ssize_t</span> <span class="built_in">size</span>, struct evbuffer_iovec *vec, <span class="keyword">int</span> n_vecs)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">evbuffer_commit_space</span><span class="params">(struct evbuffer *buf, struct evbuffer_iovec *vec, <span class="keyword">int</span> n_vecs)</span></span>;</span><br></pre></td></tr></table></figure>
<p>evbuffer_reserve_space()函数给出 evbuffer 内部空间的指针。函数会扩展缓冲区以至少提供 size 字节的空间。到扩展空间的指针，以及其长度，会存储在通过 vec 传递的向量数组中，n_vec 是数组的长度。n_vec 的值必须至少是1。如果只提供一个向量，libevent 会确保请求的所有连续空间都在单个扩展区中，但是这可能要求重新排列缓冲区，或者浪费内存。为取得更好的性能，应该至少提供2个向量。函数返回提供请求的空间所需的向量数。<br>写入到向量中的数据不会是缓冲区的一部分，直到调用 evbuffer_commit_space()，使得写入的数据进入缓冲区。如果需要提交少于请求的空间，可以减小任何 evbuffer_iovec 结构体的 iov_len 字段，也可以提供较少的向量。函数成功时返回0，失败时返回-1。</p>
<ol>
<li>调用任何重新排列evbuffer或者向其添加数据的函数都将使从 evbuffer_reserve_space()获取的指针失效。</li>
<li>当前实现中，不论用户提供多少个向量，evbuffer_reserve_space()从不使用多于两个。未来版本可能会改变这一点。</li>
<li>如果在多个线程中使用evbuffer，确保在调用evbuffer_reserve_space()之前使用 evbuffer_lock()进行锁定，然后在提交后解除锁定</li>
</ol>
<h2 id="使用evbuffer的网络IO"><a href="#使用evbuffer的网络IO" class="headerlink" title="使用evbuffer的网络IO"></a>使用evbuffer的网络IO</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">evbuffer_write</span><span class="params">(struct evbuffer *<span class="built_in">buffer</span>, <span class="keyword">evutil_socket_t</span> fd)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">evbuffer_write_atmost</span><span class="params">(struct evbuffer *<span class="built_in">buffer</span>, <span class="keyword">evutil_socket_t</span> fd, <span class="keyword">ev_ssize_t</span> howmuch)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">evbuffer_read</span><span class="params">(struct evbuffer *buf, <span class="keyword">evutil_socket_t</span> fd, <span class="keyword">int</span> howmuch)</span></span>;</span><br></pre></td></tr></table></figure>
<p>vbuffer_read()函数从套接字 fd 读取至多 howmuch 字节到 buffer 末尾。成功时函数返回读取的字节数，0表示 EOF，失败时返回-1。注意，错误码可能指示非阻塞操作不能立即成功，应该检查错误码 EAGAIN（或者 Windows 中的 WSAWOULDBLOCK）。如果 howmuch 为负，evbuffer_read()试图猜测要读取多少数据。evbuffer_write_atmost()函数试图将 buffer 前面至多 howmuch 字节写入到套接字 fd 中。成功时函数返回写入的字节数，失败时返回-1。跟 evbuffer_read()一样，应该检查错误码，看是真的错误，还是仅仅指示非阻塞 IO 不能立即完成。如果为 howmuch 给出负值，函数会试图写入 buffer 的所有内容。调用 evbuffer_write()与使用负的 howmuch 参数调用 evbuffer_write_atmost()一样：函数会试图尽量清空 buffer 的内容。在 Unix 中，这些函数应该可以在任何支持 read 和 write 的文件描述符上正确工作。在 Windows 中，仅仅支持套接字.</p>
<h2 id="evbuffer和回调"><a href="#evbuffer和回调" class="headerlink" title="evbuffer和回调"></a>evbuffer和回调</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">evbuffer_cb_info</span> &#123;</span></span><br><span class="line">	<span class="keyword">size_t</span> orig_size;</span><br><span class="line">	<span class="keyword">size_t</span> n_added;</span><br><span class="line">	<span class="keyword">size_t</span> n_deleted;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">void</span> <span class="params">(*evbuffer_cb_func)</span><span class="params">(struct evbuffer *<span class="built_in">buffer</span>, <span class="keyword">const</span> struct evbuffer_cb_info *info, <span class="keyword">void</span> *arg)</span></span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">evbuffer_cb_entry</span> &#123;</span></span><br><span class="line">	LIST_ENTRY(evbuffer_cb_entry) next;</span><br><span class="line">	<span class="keyword">union</span> &#123;</span><br><span class="line">		evbuffer_cb_func cb_func;</span><br><span class="line">		evbuffer_cb cb_obsolete;</span><br><span class="line">	&#125; cb;</span><br><span class="line">	<span class="keyword">void</span> *cbarg;</span><br><span class="line">	<span class="keyword">ev_uint32_t</span> flags;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function">struct evbuffer_cb_entry * <span class="title">evbuffer_add_cb</span><span class="params">(struct evbuffer *<span class="built_in">buffer</span>, evbuffer_cb_func cb, <span class="keyword">void</span> *cbarg)</span></span>;</span><br></pre></td></tr></table></figure>
<p>向 evbuffer 添加数据，或者从中移除数据的时候，回调函数会被调用。函数收到缓冲区指针、一个 evbuffer_cb_info 结构体指针，和用户提供的参数。evbuffer_cb_info 结构体的 orig_size 字段指示缓冲区改变大小前的字节数，n_added 字段指示向缓冲区添加了多少字节；n_deleted 字段指示移除了多少字节。</p>
<p>evbuffer_add_cb()函数为 evbuffer 添加一个回调函数，返回一个不透明的指针，随后可用于代表这个特定的回调实例。cb 参数是将被调用的函数，cbarg 是用户提供的将传给这个函数的指针。可以为单个 evbuffer 设置多个回调，添加新的回调不会移除原来的回调<br>注意：释放非空 evbuffer 不会清空其数据，释放 evbuffer 也不会为回调释放用户提供的数据指针。如果不想让缓冲区上的回调永远激活，可以移除或者禁用回调：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">evbuffer_remove_cb_entry</span><span class="params">(struct evbuffer *<span class="built_in">buffer</span>, struct evbuffer_cb_entry *ent)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">evbuffer_remove_cb</span><span class="params">(struct evbuffer *<span class="built_in">buffer</span>, evbuffer_cb_func cb, <span class="keyword">void</span> *cbarg)</span></span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EVBUFFER_CB_ENABLED 1</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">evbuffer_cb_set_flags</span><span class="params">(struct evbuffer *<span class="built_in">buffer</span>, struct evbuffer_cb_entry *cb, <span class="keyword">ev_uint32_t</span> flags)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">evbuffer_cb_clear_flags</span><span class="params">(struct evbuffer *<span class="built_in">buffer</span>, struct evbuffer_cb_entry *cb, <span class="keyword">ev_uint32_t</span> flags)</span></span>;</span><br></pre></td></tr></table></figure>
<p>可以通过添加回调时候的 evbuffer_cb_entry 来移除回调，也可以通过回调函数和参数指针来移除。成功时函数返回0，失败时返回-1。evbuffer_cb_set_flags()和 evbuffer_cb_clear_flags()函数分别为回调函数设置或者清除给定的标志。当前只有一个标志是用户可见的：EVBUFFER_CB_ENABLED。这个标志默认是打开的。如果清除这个标志，对 evbuffer 的修改不会调用回调函数.</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">evbuffer_defer_callbacks</span><span class="params">(struct evbuffer *<span class="built_in">buffer</span>, struct event_base *base)</span></span>;</span><br></pre></td></tr></table></figure>
<p>跟 bufferevent 回调一样，可以让 evbuffer 回调不在 evbuffer 被修改时立即运行，而是延迟到某 event_base 的事件循环中执行。如果有多个 evbuffer，它们的回调潜在地让数据添加到 evbuffer 中，或者从中移除，又要避免栈崩溃，延迟回调是很有用的。如果回调被延迟，则最终执行时，它可能是多个操作结果的总和。与 bufferevent 一样，evbuffer 具有内部引用计数的，所以即使还有未执行的延迟回调，释放 evbuffer 也是安全的。</p>
<h2 id="为基于evbuffer的IO避免数据复制"><a href="#为基于evbuffer的IO避免数据复制" class="headerlink" title="为基于evbuffer的IO避免数据复制"></a>为基于evbuffer的IO避免数据复制</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">void</span> <span class="params">(*evbuffer_ref_cleanup_cb)</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span> *data, <span class="keyword">size_t</span> datalen, <span class="keyword">void</span> *extra)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">evbuffer_add_reference</span><span class="params">(struct evbuffer *outbuf, <span class="keyword">const</span> <span class="keyword">void</span> *data, <span class="keyword">size_t</span> datlen, evbuffer_ref_cleanup_cb cleanupfn, <span class="keyword">void</span> *extra)</span></span>;</span><br></pre></td></tr></table></figure>
<p>通过引用向 evbuffer 末尾添加一段数据。不会进行复制：evbuffer 只会存储一个到data 处的 datlen 字节的指针。因此，在 evbuffer 使用这个指针期间，必须保持指针是有效的。evbuffer 会在不再需要这部分数据的时候调用用户提供的 cleanupfn 函数，带有提供的data 指针、datlen 值和 extra 指针参数。函数成功时返回0，失败时返回-1</p>
<h1 id="接受TCP连接"><a href="#接受TCP连接" class="headerlink" title="接受TCP连接"></a>接受TCP连接</h1><p>evconnlistener机制提供了监听和接受TCP连接的方法.</p>
<h2 id="创建和释放evconnlistener"><a href="#创建和释放evconnlistener" class="headerlink" title="创建和释放evconnlistener"></a>创建和释放evconnlistener</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">struct evconnlistener *<span class="title">evconnlistener_new</span><span class="params">(struct event_base *base, evconnlistener_cb cb, <span class="keyword">void</span> *ptr, <span class="keyword">unsigned</span> flags, <span class="keyword">int</span> backlog, <span class="keyword">evutil_socket_t</span> fd)</span></span>;</span><br><span class="line"><span class="function">struct evconnlistener *<span class="title">evconnlistener_new_bind</span><span class="params">(struct event_base *base, evconnlistener_cb cb, <span class="keyword">void</span> *ptr, <span class="keyword">unsigned</span> flags, <span class="keyword">int</span> backlog, <span class="keyword">const</span> struct sockaddr *sa, <span class="keyword">int</span> socklen)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">evconnlistener_free</span><span class="params">(struct evconnlistener *lev)</span></span>;</span><br></pre></td></tr></table></figure>
<p>两个 evconnlistener_new*()函数都分配和返回一个新的连接监听器对象。连接监听器使用 event_base 来得知什么时候在给定的监听套接字上有新的 TCP 连接。新连接到达时，监听器调用你给出的回调函数。两个函数中，base 参数都是监听器用于监听连接的 event_base。cb 是收到新连接时要调用的回调函数；如果 cb 为 NULL，则监听器是禁用的，直到设置了回调函数为止。ptr 指针将传递给回调函数。flags 参数控制回调函数的行为，下面会更详细论述。backlog 是任何时刻网络栈允许处于还未接受状态的最大未决连接数。更多细节请查看系统的 listen()函数文档。如果 backlog 是负的，libevent 会试图挑选一个较好的值；如果为0，libevent 认为已经对提供的套接字调用了 listen()。<br>两个函数的不同在于如何建立监听套接字。evconnlistener_new()函数假定已经将套接字绑定到要监听的端口，然后通过 fd 传入这个套接字。如果要 libevent 分配和绑定套接字，可以调用 evconnlistener_new_bind()，传输要绑定到的地址和地址长度。<br>要释放连接监听器，调用 evconnlistener_free()</p>
<p>可标识的标志<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//默认情况下，连接监听器接收新套接字后，会将其设置为非阻塞的，以便将其用于 libevent。如果不想要这种行为，可以设置这个标志。</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LEV_OPT_LEAVE_SOCKETS_BLOCKING	(1u&lt;&lt;0)</span></span><br><span class="line"><span class="comment">//如果设置了这个选项，释放连接监听器会关闭底层套接字。</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LEV_OPT_CLOSE_ON_FREE		(1u&lt;&lt;1)</span></span><br><span class="line"><span class="comment">//如果设置了这个选项，连接监听器会为底层套接字设置 close-on-exec 标志。</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LEV_OPT_CLOSE_ON_EXEC		(1u&lt;&lt;2)</span></span><br><span class="line"><span class="comment">//某些平台在默认情况下，关闭某监听套接字后，要过一会儿其他套接字才可以绑定到同一个端口。设置这个标志会让 libevent 标记套接字是可重用的，这样一旦关闭，可以立即打开其他套接字，在相同端口进行监听。</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LEV_OPT_REUSEABLE		(1u&lt;&lt;3)</span></span><br><span class="line"><span class="comment">//为监听器分配锁，这样就可以在多个线程中安全地使用了</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LEV_OPT_THREADSAFE		(1u&lt;&lt;4)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LEV_OPT_DISABLED		(1u&lt;&lt;5)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LEV_OPT_DEFERRED_ACCEPT		(1u&lt;&lt;6)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LEV_OPT_REUSEABLE_PORT		(1u&lt;&lt;7)</span></span><br></pre></td></tr></table></figure></p>
<p>连接监听器回调<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">void</span> <span class="params">(*evconnlistener_cb)</span><span class="params">(struct evconnlistener *, <span class="keyword">evutil_socket_t</span>, struct sockaddr *, <span class="keyword">int</span> socklen, <span class="keyword">void</span> *)</span></span>;</span><br></pre></td></tr></table></figure></p>
<p>stener参数是接收连接的连接监听器。sock参数是新接收的套接字。addr和len参数是接收连接的地址和地址长度。ptr是调用evconnlistener_new()时用户提供的指针。</p>
<h2 id="禁用和启用evconnlistener"><a href="#禁用和启用evconnlistener" class="headerlink" title="禁用和启用evconnlistener"></a>禁用和启用evconnlistener</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">evconnlistener_disable</span><span class="params">(struct evconnlistener *lev)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">evconnlistener_enable</span><span class="params">(struct evconnlistener *lev)</span></span>;</span><br></pre></td></tr></table></figure>
<p>暂时禁止或者重新允许监听新连接</p>
<h2 id="设置evconnlistener的回调函数"><a href="#设置evconnlistener的回调函数" class="headerlink" title="设置evconnlistener的回调函数"></a>设置evconnlistener的回调函数</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">evconnlistener_set_cb</span><span class="params">(struct evconnlistener *lev, evconnlistener_cb cb, <span class="keyword">void</span> *arg)</span></span>;</span><br></pre></td></tr></table></figure>
<p>函数调整 evconnlistener 的回调函数和其参数。</p>
<h2 id="检测evconnlistener"><a href="#检测evconnlistener" class="headerlink" title="检测evconnlistener"></a>检测evconnlistener</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">evutil_socket_t</span> <span class="title">evconnlistener_get_fd</span><span class="params">(struct evconnlistener *lev)</span></span>;</span><br><span class="line"><span class="function">struct event_base *<span class="title">evconnlistener_get_base</span><span class="params">(struct evconnlistener *lev)</span></span>;</span><br></pre></td></tr></table></figure>
<p>分别返回监听器关联的套接字和 event_base</p>
<h2 id="侦测错误"><a href="#侦测错误" class="headerlink" title="侦测错误"></a>侦测错误</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">void</span> <span class="params">(*evconnlistener_errorcb)</span><span class="params">(struct evconnlistener *, <span class="keyword">void</span> *)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">evconnlistener_set_error_cb</span><span class="params">(struct evconnlistener *lev, evconnlistener_errorcb errorcb)</span></span>;</span><br></pre></td></tr></table></figure>
<p>如果使用 evconnlistener_set_error_cb()为监听器设置了错误回调函数，则监听器发生错误时回调函数就会被调用。第一个参数是监听器，第二个参数是调用 evconnlistener_new() 时传入的 ptr。</p>
<h1 id="bufferevent"><a href="#bufferevent" class="headerlink" title="bufferevent"></a>bufferevent</h1><h2 id="bufferevent-和-evbuffer"><a href="#bufferevent-和-evbuffer" class="headerlink" title="bufferevent 和 evbuffer"></a>bufferevent 和 evbuffer</h2><p>每个bufferevent都有一个输出缓冲区和一个输入缓冲区,类型都是”struct evbuffer”,有数据要写入到bufferevent时,添加数据到输出缓冲区;bufferevent中有数据供读取的时候,从输入缓冲区抽取数据.</p>
<h2 id="回调和水位"><a href="#回调和水位" class="headerlink" title="回调和水位"></a>回调和水位</h2><p>每个bufferevent有两个数据相关的回调:读取回调和写入回调.默认情况下,从底层传输端口读取任意量的数据后会调用读取回调;输出去有足够的数据被清空到底层传输端口后写入回调会被调用.</p>
<p>每个bufferevent有四个水位:</p>
<ol>
<li>读取低水位:读取操作使得输入缓冲区的数据量在此级别或者更高时，读取回调将被调用。默认值为0，所以每个读取操作都会导致读取回调被调用。</li>
<li>读取高水位:输入缓冲区中的数据量达到此级别后，bufferevent 将停止读取，直到输入缓冲区中足够量的数据被抽取，使得数据量低于此级别。默认值是无限，所以永远不会因为输入缓冲区的大小而停止读取。</li>
<li>写入低水位:写入操作使得输出缓冲区的数据量达到或者低于此级别时，写入回调将被调用。默认值是0，所以只有输出缓冲区空的时候才会调用写入回调。</li>
<li>写入高水位:bufferevent 没有直接使用这个水位。它在 bufferevent 用作另外一个bufferevent 的底层传输端口时有特殊意义。</li>
</ol>
<p>错误或事件回调(向应用通知非面向数据的事件)</p>
<ol>
<li>BEV_EVENT_READING:读取操作时发生某事件</li>
<li>BEV_EVENT_WRITING:写入操作时发生某事件</li>
<li>BEV_EVENT_EOF:遇到文件结束指示</li>
<li>BEV_EVENT_ERROR:操作时发生错误,调用EVUTIL_SOCKET_ERROR()获取更错错误信息</li>
<li>BEV_EVENT_TIMEOUT:发生超时</li>
<li>BEV_EVENT_CONNECTED:请求的连接过程已经完成</li>
</ol>
<h2 id="延迟回调"><a href="#延迟回调" class="headerlink" title="延迟回调"></a>延迟回调</h2><p>默认情况下,bufferevent的回调在相应的条件发生时立即被执行.在依赖关系复杂的情况下,立即调用会产生问题.要解决该问题,可以请求bufferevent延迟其回调.条件满足时,延迟回调不会立即被调用,而是在event_loop()调用中被排队.然后在通常的事件回调后执行.</p>
<h2 id="buffervent的选项标记bufferevent-options"><a href="#buffervent的选项标记bufferevent-options" class="headerlink" title="buffervent的选项标记bufferevent_options"></a>buffervent的选项标记bufferevent_options</h2><ol>
<li>BEV_OPT_CLOSE_ON_FREE:释放bufferevent时关闭底层传输端口.将关闭底层套接字,释放底层bufferevent等.</li>
<li>BEV_OPT_THREADSAFE:自动为bufferevent分配锁,可以安全的在多个线程中使用bufferevent</li>
<li>BEV_OPT_DEFER_CALLBACKS:设置该标记,bufferevent延迟所有回调</li>
<li>BEV_OPT_UNLOCK_CALLBACKS:默认情况下,如果设置bufferevent为线程安全的,则bufferevent会在调用用户提供的回调时进行锁定.设置该选项让Libevent在执行回调时不锁定.</li>
</ol>
<h2 id="基于套接字的bufferevent"><a href="#基于套接字的bufferevent" class="headerlink" title="基于套接字的bufferevent"></a>基于套接字的bufferevent</h2><h2 id="创建基于套接字的bufferevent"><a href="#创建基于套接字的bufferevent" class="headerlink" title="创建基于套接字的bufferevent"></a>创建基于套接字的bufferevent</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">bufferevent</span> *</span></span><br><span class="line"><span class="class"><span class="title">bufferevent_socket_new</span>(<span class="title">struct</span> <span class="title">event_base</span> *<span class="title">base</span>, <span class="title">evutil_socket_t</span> <span class="title">fd</span>,</span></span><br><span class="line"><span class="class">    <span class="title">int</span> <span class="title">options</span>);</span></span><br></pre></td></tr></table></figure>
<p>base时event_base反应堆 fd是套接字的文件描述符 options是bufferevent选项</p>
<h2 id="在基于套接字的bufferevent上启动连接"><a href="#在基于套接字的bufferevent上启动连接" class="headerlink" title="在基于套接字的bufferevent上启动连接"></a>在基于套接字的bufferevent上启动连接</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bufferevent_socket_connect</span><span class="params">(struct bufferevent *bev, <span class="keyword">const</span> struct sockaddr *sa, <span class="keyword">int</span> socklen)</span></span>;</span><br></pre></td></tr></table></figure>
<p>如果还没有为 bufferevent 设置套接字，调用函数将为其分配一个新的流套接字，并且设置为非阻塞的。如果已经为 bufferevent 设置套接字，调用 bufferevent_socket_connect()将告知 libevent 套接字还未连接，直到连接成功之前不应该对其进行读取或者写入操作。连接完成之前可以向输出缓冲区添加数据。如果连接成功启动，函数返回0；如果发生错误则返回-1。<br>注意:如果使用bufferevent_socket_connect() 发起连接,将只会收到 BEV_EVENT_CONNECTED 事件。如果自己调用 connect()，则连接上将被报告为写入事件</p>
<h2 id="通过主机名启动连接"><a href="#通过主机名启动连接" class="headerlink" title="通过主机名启动连接"></a>通过主机名启动连接</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bufferevent_socket_connect_hostname</span><span class="params">(struct bufferevent *bev, struct evdns_base *evdns_base, <span class="keyword">int</span> family, <span class="keyword">const</span> <span class="keyword">char</span> *hostname, <span class="keyword">int</span> port)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bufferevent_socket_get_dns_error</span><span class="params">(struct bufferevent *bev)</span></span>;</span><br></pre></td></tr></table></figure>
<p>bufferevent_socket_connect_hostnam解析hostname,通过其family类型地址(允许的地址族类型有AF_INET,IF_INET6和AF_UNSPEC).如果名字解析失败,函数将调用事件回调,报告错误事件.如果解析成功,函数将启动连接请求.<br>dns_base参数可选:如果为NULL,等待名字查找完成期间调用线程将被阻塞.如果提供dns_base参数,libevent将使用它异步查询主机名.<br>函数返回的错误可能是DNS主机名查询错误，可以调用bufferevent_socket_get_dns_error() 来获取最近的错误。返回值0表示没有检测到 DNS 错误。</p>
<h2 id="操作回调、水位和启用-禁用"><a href="#操作回调、水位和启用-禁用" class="headerlink" title="操作回调、水位和启用/禁用"></a>操作回调、水位和启用/禁用</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">void</span> <span class="params">(*bufferevent_data_cb)</span><span class="params">(struct bufferevent *bev, <span class="keyword">void</span> *ctx)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">void</span> <span class="params">(*bufferevent_event_cb)</span><span class="params">(struct bufferevent *bev, short what, <span class="keyword">void</span> *ctx)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bufferevent_setcb</span><span class="params">(struct bufferevent *bufev,</span></span></span><br><span class="line"><span class="function"><span class="params">    bufferevent_data_cb readcb, bufferevent_data_cb writecb,</span></span></span><br><span class="line"><span class="function"><span class="params">    bufferevent_event_cb eventcb, <span class="keyword">void</span> *cbarg)</span></span>;</span><br></pre></td></tr></table></figure>
<p>bufferevent_setcb()函数修改bufferevent的一个或多个回调.readcb、writecb、eventcb函数分别在读取到足够的数据、写入足够的数据、发生错误时被调用.每个回调的第一个参数都是发生了事件的bufferevent,最后一个参数都是调用bufferevent_setcb()时用户提供的cbarg参数(通过cbarg参数向回调函数传递参数).事件回调的events参数是一个表示事件标志的位掩码.<br>要禁用回调,传递NULL而不是回调函数.注意:<strong>bufferevent的所有回调函数共享单个cbarg,修改它需要特别小心</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bufferevent_enable</span><span class="params">(struct bufferevent *bufev, short event)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bufferevent_disable</span><span class="params">(struct bufferevent *bufev, short event)</span></span>;</span><br><span class="line"><span class="function">short <span class="title">bufferevent_get_enabled</span><span class="params">(struct bufferevent *bufev)</span></span>;</span><br></pre></td></tr></table></figure>
<p>bufferevent_enable()函数开启bufferevent的EV_READ、EV_WRITE事件<br>bufferevent_disable()函数禁用bufferevent的EV_READ、EV_WRITE事件<br>没有启用读取或写入事件时,bufferevent将不会试图进行数据的读取和写入</p>
<p>没有必要在输出缓冲区空时禁用写入事件：bufferevent 将自动停止写入，然后在有数据等待写入时重新开始<br>没有必要在输入缓冲区高于高水位时禁用读取事件：bufferevent 将自动停止读取，然后在有空间用于读取时重新开始读取<br>默认情况下，新创建的 bufferevent 的写入是启用的，但是读取没有启用<br>bufferevent_get_enabled()可以确定bufferevent上当前开启的事件.</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bufferevent_setwatermark</span><span class="params">(struct bufferevent *bufev, short events, <span class="keyword">size_t</span> lowmark, <span class="keyword">size_t</span> highmark)</span></span>;</span><br></pre></td></tr></table></figure>
<p>bufferevent_setwatermark()函数设置单个bufferevent的读取水位、写入水位.如果events设置为EV_READ调整读取水位,events设置为EV_WARITE调整写入水位.<br>对于高水位,0表示”无限”</p>
<h2 id="bufferevent中数据的操作"><a href="#bufferevent中数据的操作" class="headerlink" title="bufferevent中数据的操作"></a>bufferevent中数据的操作</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">struct evbuffer * bufferevent_get_input(struct bufferevent *bufev);</span><br><span class="line">struct evbuffer * bufferevent_get_output(struct bufferevent *bufev);</span><br></pre></td></tr></table></figure>
<p>bufferevent_get_input()返回输入缓冲区<br>bufferevent_get_output()返回输出缓冲区</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bufferevent_write</span><span class="params">(struct bufferevent *bufev, <span class="keyword">const</span> <span class="keyword">void</span> *data, <span class="keyword">size_t</span> <span class="built_in">size</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bufferevent_write_buffer</span><span class="params">(struct bufferevent *bufev, struct evbuffer *buf)</span></span>;</span><br></pre></td></tr></table></figure>
<p>bufferevent_write()将内从从data处开始的size字节数据添加到输出缓冲区末尾.<br>bufferevent_write_buffer()移除buf的所有内容,将其放置到输出缓冲区末尾.</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">size_t</span> <span class="title">bufferevent_read</span><span class="params">(struct bufferevent *bufev, <span class="keyword">void</span> *data, <span class="keyword">size_t</span> <span class="built_in">size</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bufferevent_read_buffer</span><span class="params">(struct bufferevent *bufev, struct evbuffer *buf)</span></span>;</span><br></pre></td></tr></table></figure>
<p>bufferevent_read()至多从输入缓冲区移除size字节的数据,将其存储到内存中data处,返回实际移除的字节数<br>bufferevent_read_buffer()抽空输入缓冲区的所有内容,将其放置到buf中,成功返回0,失败返回-1</p>
<h2 id="读写超时"><a href="#读写超时" class="headerlink" title="读写超时"></a>读写超时</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bufferevent_set_timeouts</span><span class="params">(struct bufferevent *bufev,</span></span></span><br><span class="line"><span class="function"><span class="params">			 <span class="keyword">const</span> struct timeval *tv_read,</span></span></span><br><span class="line"><span class="function"><span class="params">			 <span class="keyword">const</span> struct timeval *tv_write)</span></span>;</span><br></pre></td></tr></table></figure>
<p>bufferevent_set_timeouts()设置超时时间为NULL会移除超时回调<br>试图读取数据的时候，如果至少等待了 timeout_read 秒，则读取超时事件将被触发。试图写入数据的时候，如果至少等待了 timeout_write 秒，则写入超时事件将被触发。<br>注意，只有在读取或者写入的时候才会计算超时。即如果 bufferevent 的读取被禁止，或者输入缓冲区满（达到其高水位），则读取超时被禁止。如果写入被禁止，或者没有数据待写入，则写入超时被禁止。读取或者写入超时发生时，相应的读取或者写入操作被禁止，然后超时事件回调被调用，带有标志BEV_EVENT_TIMEOUT | BEV_EVENT_READING或者BEV_EVENT_TIMEOUT | BEV_EVENT_WRITING。</p>
<h2 id="清空bufferevent"><a href="#清空bufferevent" class="headerlink" title="清空bufferevent"></a>清空bufferevent</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bufferevent_flush</span><span class="params">(struct bufferevent *bufev,</span></span></span><br><span class="line"><span class="function"><span class="params">    short iotype,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">enum</span> bufferevent_flush_mode mode)</span></span>;</span><br></pre></td></tr></table></figure>
<p>清空 bufferevent 要求 bufferevent 强制从底层传输端口读取或者写入尽可能多的数据，而忽略其他可能保持数据不被写入的限制条件。函数的细节功能依赖于 bufferevent 的具体类型。iotype 参数应该是 EV_READ、EV_WRITE 或者 EV_READ | EV_WRITE，用于指示应该处理读取、写入，还是二者都处理。state 参数可以是 BEV_NORMAL、BEV_FLUSH 或者BEV_FINISHED。BEV_FINISHED 指示应该告知另一端，没有更多数据需要发送了； 而 BEV_NORMAL 和 BEV_FLUSH 的区别依赖于具体的 bufferevent 类型。<br>失败时 bufferevent_flush()返回-1，如果没有数据被清空则返回0，有数据被清空则返回1</p>
<h2 id="类型特定的bufferevent函数"><a href="#类型特定的bufferevent函数" class="headerlink" title="类型特定的bufferevent函数"></a>类型特定的bufferevent函数</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bufferevent_priority_set</span><span class="params">(struct bufferevent *bufev, <span class="keyword">int</span> priority)</span></span>;</span><br></pre></td></tr></table></figure>
<p>调整bufev的优先级为priority.成功返回0,失败返回-1,该函数仅作用域基于套接字的bufferevent</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bufferevent_setfd</span><span class="params">(struct bufferevent *bev, <span class="keyword">evutil_socket_t</span> fd)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">evutil_socket_t</span> <span class="title">bufferevent_getfd</span><span class="params">(struct bufferevent *bev)</span></span>;</span><br></pre></td></tr></table></figure>
<p>设置或返回基于fd的事件的文件描述符.只有基于套接字的bufferevent支持bufferevent_setfd.</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">struct event_base * <span class="title">bufferevent_get_base</span><span class="params">(struct bufferevent *bufev)</span></span>;</span><br></pre></td></tr></table></figure>
<p>返回bufferevent的event_base</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">struct bufferevent * <span class="title">bufferevent_get_underlying</span><span class="params">(struct bufferevent *bev)</span></span>;</span><br></pre></td></tr></table></figure>
<p>返回作为 bufferevent 底层传输端口的另一个 bufferevent。</p>
<h2 id="手动锁定和解锁"><a href="#手动锁定和解锁" class="headerlink" title="手动锁定和解锁"></a>手动锁定和解锁</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bufferevent_lock</span><span class="params">(struct bufferevent *bev)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bufferevent_unlock</span><span class="params">(struct bufferevent *bev)</span></span>;</span><br></pre></td></tr></table></figure>
<p>注意:如果创建 bufferevent 时没有指定 BEV_OPT_THREADSAFE 标志,或者没有激活 libevent 的线程支持，则锁定操作是没有效果的.用这个函数锁定 bufferevent 将自动同时锁定相关联的 evbuffer.这些函数是递归的:锁定已经持有锁的 bufferevent 是安全的.当然,对于每次锁定都必须进行一次解锁.</p>
<h1 id="http服务相关"><a href="#http服务相关" class="headerlink" title="http服务相关"></a>http服务相关</h1><h2 id="http-Server的创建与开始"><a href="#http-Server的创建与开始" class="headerlink" title="http Server的创建与开始"></a>http Server的创建与开始</h2><p>首先需要使用event_base_new或event_base_new_with_config创建一个event_base，然后使用evhttp_new创建evhttp。<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">struct evhttp *<span class="title">evhttp_new</span><span class="params">(struct event_base *base)</span></span>;</span><br></pre></td></tr></table></figure></p>
<p>在需要释放evhttp时需要调用evhttp_free来释放。<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">evhttp_free</span><span class="params">(struct evhttp* http)</span></span>;</span><br></pre></td></tr></table></figure></p>
<p>再为evhttp设置回调函数，evhttp_set_cb为特定URL指定回调函数，evhttp_set_gencb注册通用回调函数，在没有指定URL回调函数的情况下该回调函数被调用。<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//uri 特定的uri</span></span><br><span class="line"><span class="comment">//cb 回调函数</span></span><br><span class="line"><span class="comment">//cbarg 传入回调函数的参数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">evhttp_set_cb</span><span class="params">(struct evhttp *http, <span class="keyword">const</span> <span class="keyword">char</span> *uri, \</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">void</span> (*cb)(struct evhttp_request *, <span class="keyword">void</span> *), <span class="keyword">void</span> *cbarg)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//cb 回调函数</span></span><br><span class="line"><span class="comment">//cbarg 传入回调函数的参数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">evhttp_set_gencb</span><span class="params">(struct evhttp *http,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">void</span> (*cb)(struct evhttp_request *, <span class="keyword">void</span> *), <span class="keyword">void</span> *cbarg)</span></span>;</span><br></pre></td></tr></table></figure></p>
<p>再为evhttp绑定需要监听的ip和port。使用evhttp_bind_socket_with_handle函数。<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">struct evhttp_bound_socket *<span class="title">evhttp_bind_socket_with_handle</span><span class="params">(struct evhttp *http, <span class="keyword">const</span> <span class="keyword">char</span> *address, <span class="keyword">ev_uint16_t</span> port)</span></span>;</span><br></pre></td></tr></table></figure></p>
<p>可以使用libevent提供的相关函数打印监听端口信息。<br>最后使用event_base_dispatch进入事件循环。</p>
<h2 id="http请求的处理"><a href="#http请求的处理" class="headerlink" title="http请求的处理"></a>http请求的处理</h2><p>evhttp_request_get_uri得到当前请求的uri地址。<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">const</span> <span class="keyword">char</span> *<span class="title">evhttp_request_get_uri</span><span class="params">(<span class="keyword">const</span> struct evhttp_request *req)</span></span>;</span><br></pre></td></tr></table></figure></p>
<p>evhttp_request_get_command得到当前请求的类型。<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> evhttp_cmd_type &#123;</span><br><span class="line">	EVHTTP_REQ_GET     = <span class="number">1</span> &lt;&lt; <span class="number">0</span>,</span><br><span class="line">	EVHTTP_REQ_POST    = <span class="number">1</span> &lt;&lt; <span class="number">1</span>,</span><br><span class="line">	EVHTTP_REQ_HEAD    = <span class="number">1</span> &lt;&lt; <span class="number">2</span>,</span><br><span class="line">	EVHTTP_REQ_PUT     = <span class="number">1</span> &lt;&lt; <span class="number">3</span>,</span><br><span class="line">	EVHTTP_REQ_DELETE  = <span class="number">1</span> &lt;&lt; <span class="number">4</span>,</span><br><span class="line">	EVHTTP_REQ_OPTIONS = <span class="number">1</span> &lt;&lt; <span class="number">5</span>,</span><br><span class="line">	EVHTTP_REQ_TRACE   = <span class="number">1</span> &lt;&lt; <span class="number">6</span>,</span><br><span class="line">	EVHTTP_REQ_CONNECT = <span class="number">1</span> &lt;&lt; <span class="number">7</span>,</span><br><span class="line">	EVHTTP_REQ_PATCH   = <span class="number">1</span> &lt;&lt; <span class="number">8</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">enum</span> evhttp_cmd_type <span class="title">evhttp_request_get_command</span><span class="params">(<span class="keyword">const</span> struct evhttp_request *req)</span></span>;</span><br></pre></td></tr></table></figure></p>
<p>evhttp_uri_parse URI解析，得到evhttp_uri。<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">struct evhttp_uri *<span class="title">evhttp_uri_parse</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *source_uri)</span></span>;</span><br></pre></td></tr></table></figure></p>
<p>evhttp_parse_query对uri参数进行解析，结果保存在struct evkeyvalq结构体中。<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">evhttp_parse_query</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *uri, struct evkeyvalq *args)</span></span>;</span><br></pre></td></tr></table></figure></p>
<p>evhttp<em>decode_uri URL解码，得到UTF编码的字符，得到数据所占内存需要自己释放。<br>evhttp_encode_uri URL编码，对所有非alphanumeric及-\</em>的字符都被类似于%和一个2位16进制字符替换(其中空格被+号替换)。<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">evhttp_encode_uri</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *str)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">evhttp_decode_uri</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *uri)</span></span>;</span><br></pre></td></tr></table></figure></p>
<h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ol>
<li><a href="http://blog.csdn.net/column/details/libevent-src.html" target="_blank" rel="noopener">libevent专栏</a></li>
<li><a href="http://blog.csdn.net/zhouyongku/article/details/53431597" target="_blank" rel="noopener">Libevent中文帮助手册</a></li>
<li><a href="https://segmentfault.com/a/1190000005594871" target="_blank" rel="noopener">Libevent 官方文档学习笔记</a></li>
</ol>
]]></content>
      <categories>
        <category>网络库</category>
      </categories>
      <tags>
        <tag>cpp</tag>
        <tag>网络</tag>
        <tag>libevent</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL SQL语句基础</title>
    <url>/2017/10/31/mysql-3/</url>
    <content><![CDATA[<p>SQL语句基础知识的复习与学习</p>
<h1 id="SQL简介"><a href="#SQL简介" class="headerlink" title="SQL简介"></a>SQL简介</h1><p>SQL是Structure Query Language（结构化查询语言）的缩写，使用关系数据模型的数据库应用语言。</p>
<h1 id="SQL分类"><a href="#SQL分类" class="headerlink" title="SQL分类"></a>SQL分类</h1><p>SQL语句主要分为3类</p>
<h2 id="DDL（Data-Definition-Language）数据定义语句"><a href="#DDL（Data-Definition-Language）数据定义语句" class="headerlink" title="DDL（Data Definition Language）数据定义语句"></a>DDL（Data Definition Language）数据定义语句</h2><p>定义不同的数据段、数据库、数据表、列、索引等数据库对象的定义。常用关键字：create、drop、alter等。</p>
<h2 id="DML（Data-Manipulation-Language）数据操纵语句"><a href="#DML（Data-Manipulation-Language）数据操纵语句" class="headerlink" title="DML（Data Manipulation Language）数据操纵语句"></a>DML（Data Manipulation Language）数据操纵语句</h2><p>用于添加、删除、更新和查询数据库记录，并检查数据完整性，常用的语句关键词主要包括insert、delete、update和select等。</p>
<h2 id="DCL（Data-Control-Language）数据控制语句"><a href="#DCL（Data-Control-Language）数据控制语句" class="headerlink" title="DCL（Data Control Language）数据控制语句"></a>DCL（Data Control Language）数据控制语句</h2><p>用于控制不同数据段直接的许可和访问级别的语句。定义了数据库、表、字段、用户的访问权限和安全级别，主要的关键字包括grant、revoke等。</p>
<h1 id="DDL"><a href="#DDL" class="headerlink" title="DDL"></a>DDL</h1><p>DDL是数据定义语言的缩写，是对数据库内部的对象进行创建、删除、修改的操作语言。和DML语言的最大区别是DML只对表内部的操作，而不涉及表的定义、结构的修改，更不会涉及到其他对象。DDL语句更多被数据库管理员（DBA）所使用。</p>
<h2 id="数据库创建"><a href="#数据库创建" class="headerlink" title="数据库创建"></a>数据库创建</h2><p>create database dbname;<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MariaDB [(none)]&gt; show databases;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">+--------------------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [(none)]&gt; create database test;</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [(none)]&gt; show databases;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| test               |</span><br><span class="line">+--------------------+</span><br><span class="line">4 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></p>
<h2 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h2><p>drop database dbname;<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MariaDB [information_schema]&gt; show databases;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| test               |</span><br><span class="line">+--------------------+</span><br><span class="line">4 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [information_schema]&gt; drop database test;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [information_schema]&gt; show databases;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">+--------------------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></p>
<h2 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h2><p>create table tablename(column_name_1 column_type_1 constraints, column_name_2 column_type_2 constraints, … … , column_name_n column_type_n constraints)<br>MySQL的表名以目录形式存在磁盘上，表名的字符可以使用任何目录名允许的字符。column_name是列的名字，column_type是列的数据类型，contraints是列的约束条件。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MariaDB [test]&gt; create table student(name char(32), age int(4), sex int(2));</span><br><span class="line">Query OK, 0 rows affected (0.04 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [test]&gt; show tables;</span><br><span class="line">+----------------+</span><br><span class="line">| Tables_in_test |</span><br><span class="line">+----------------+</span><br><span class="line">| student        |</span><br><span class="line">+----------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [test]&gt; desc student;</span><br><span class="line">+-------+----------+------+-----+---------+-------+</span><br><span class="line">| Field | Type     | Null | Key | Default | Extra |</span><br><span class="line">+-------+----------+------+-----+---------+-------+</span><br><span class="line">| name  | char(32) | YES  |     | NULL    |       |</span><br><span class="line">| age   | int(4)   | YES  |     | NULL    |       |</span><br><span class="line">| sex   | int(2)   | YES  |     | NULL    |       |</span><br><span class="line">+-------+----------+------+-----+---------+-------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [test]&gt; show create table student\G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">       Table: student</span><br><span class="line">Create Table: CREATE TABLE `student` (</span><br><span class="line">  `name` char(32) DEFAULT NULL,</span><br><span class="line">  `age` int(4) DEFAULT NULL,</span><br><span class="line">  `sex` int(2) DEFAULT NULL</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=latin1</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure></p>
<h2 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h2><p>drop table tablename;<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MariaDB [test]&gt; drop table student;</span><br><span class="line">Query OK, 0 rows affected (0.02 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [test]&gt; show tables;</span><br><span class="line">Empty set (0.00 sec)</span><br></pre></td></tr></table></figure></p>
<h2 id="修改表"><a href="#修改表" class="headerlink" title="修改表"></a>修改表</h2><p>表结构的修改一般使用alter table语句。</p>
<h3 id="修改表类型"><a href="#修改表类型" class="headerlink" title="修改表类型"></a>修改表类型</h3><p>alter table tablename modify [column] column_definition [first | after col_name]<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MariaDB [test]&gt; desc student;</span><br><span class="line">+-------+----------+------+-----+---------+-------+</span><br><span class="line">| Field | Type     | Null | Key | Default | Extra |</span><br><span class="line">+-------+----------+------+-----+---------+-------+</span><br><span class="line">| name  | char(32) | YES  |     | NULL    |       |</span><br><span class="line">| age   | int(4)   | YES  |     | NULL    |       |</span><br><span class="line">| sex   | int(2)   | YES  |     | NULL    |       |</span><br><span class="line">+-------+----------+------+-----+---------+-------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br><span class="line">MariaDB [test]&gt; alter table student modify age int(2);</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line">Records: 0  Duplicates: 0  Warnings: 0</span><br><span class="line"></span><br><span class="line">MariaDB [test]&gt; desc student;</span><br><span class="line">+-------+----------+------+-----+---------+-------+</span><br><span class="line">| Field | Type     | Null | Key | Default | Extra |</span><br><span class="line">+-------+----------+------+-----+---------+-------+</span><br><span class="line">| name  | char(32) | YES  |     | NULL    |       |</span><br><span class="line">| age   | int(2)   | YES  |     | NULL    |       |</span><br><span class="line">| sex   | int(2)   | YES  |     | NULL    |       |</span><br><span class="line">+-------+----------+------+-----+---------+-------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></p>
<h3 id="新增表字段"><a href="#新增表字段" class="headerlink" title="新增表字段"></a>新增表字段</h3><p>alter table tablename add [column] column_definition [first | after col_name]<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MariaDB [test]&gt; alter table student add birthday date;</span><br><span class="line">Query OK, 0 rows affected (0.03 sec)</span><br><span class="line">Records: 0  Duplicates: 0  Warnings: 0</span><br><span class="line"></span><br><span class="line">MariaDB [test]&gt; desc student;</span><br><span class="line">+----------+----------+------+-----+---------+-------+</span><br><span class="line">| Field    | Type     | Null | Key | Default | Extra |</span><br><span class="line">+----------+----------+------+-----+---------+-------+</span><br><span class="line">| name     | char(32) | YES  |     | NULL    |       |</span><br><span class="line">| age      | int(2)   | YES  |     | NULL    |       |</span><br><span class="line">| sex      | int(2)   | YES  |     | NULL    |       |</span><br><span class="line">| birthday | date     | YES  |     | NULL    |       |</span><br><span class="line">+----------+----------+------+-----+---------+-------+</span><br><span class="line">4 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></p>
<h3 id="删除表字段"><a href="#删除表字段" class="headerlink" title="删除表字段"></a>删除表字段</h3><p>alter table tablename drop [column] column_name;<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MariaDB [test]&gt; alter table student drop column birthday;</span><br><span class="line">Query OK, 0 rows affected (0.04 sec)</span><br><span class="line">Records: 0  Duplicates: 0  Warnings: 0</span><br><span class="line"></span><br><span class="line">MariaDB [test]&gt; desc student;</span><br><span class="line">+-------+----------+------+-----+---------+-------+</span><br><span class="line">| Field | Type     | Null | Key | Default | Extra |</span><br><span class="line">+-------+----------+------+-----+---------+-------+</span><br><span class="line">| name  | char(32) | YES  |     | NULL    |       |</span><br><span class="line">| age   | int(2)   | YES  |     | NULL    |       |</span><br><span class="line">| sex   | int(2)   | YES  |     | NULL    |       |</span><br><span class="line">+-------+----------+------+-----+---------+-------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></p>
<h3 id="字段改名"><a href="#字段改名" class="headerlink" title="字段改名"></a>字段改名</h3><p>alter table tablename change [column] old_col_name column_definition [first | after col_name]<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MariaDB [test]&gt; alter table student change sex grade int(4);</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line">Records: 0  Duplicates: 0  Warnings: 0</span><br><span class="line"></span><br><span class="line">MariaDB [test]&gt; desc student;</span><br><span class="line">+-------+----------+------+-----+---------+-------+</span><br><span class="line">| Field | Type     | Null | Key | Default | Extra |</span><br><span class="line">+-------+----------+------+-----+---------+-------+</span><br><span class="line">| name  | char(32) | YES  |     | NULL    |       |</span><br><span class="line">| age   | int(2)   | YES  |     | NULL    |       |</span><br><span class="line">| grade | int(4)   | YES  |     | NULL    |       |</span><br><span class="line">+-------+----------+------+-----+---------+-------+</span><br><span class="line">3 rows in set (0.01 sec)</span><br></pre></td></tr></table></figure></p>
<p><strong>change和modify都可以修改表定义，但change后面需要写两次列名，不方便。不过change的优点是可以修改列名称，modify则不能。</strong></p>
<h3 id="修改字段排列顺序"><a href="#修改字段排列顺序" class="headerlink" title="修改字段排列顺序"></a>修改字段排列顺序</h3><p>字段增加和修改(add/change/modify)中，都有可选项first|after column_name，该选项可以修改字段在表中的位置，默认add增加新字段加再表的最后位置，而change/modify默认不该表字段位置。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MariaDB [test]&gt; alter table student add sex int(2) after name;</span><br><span class="line">Query OK, 0 rows affected (0.04 sec)</span><br><span class="line">Records: 0  Duplicates: 0  Warnings: 0</span><br><span class="line"></span><br><span class="line">MariaDB [test]&gt; desc student;</span><br><span class="line">+-------+----------+------+-----+---------+-------+</span><br><span class="line">| Field | Type     | Null | Key | Default | Extra |</span><br><span class="line">+-------+----------+------+-----+---------+-------+</span><br><span class="line">| name  | char(32) | YES  |     | NULL    |       |</span><br><span class="line">| sex   | int(2)   | YES  |     | NULL    |       |</span><br><span class="line">| age   | int(2)   | YES  |     | NULL    |       |</span><br><span class="line">| grade | int(4)   | YES  |     | NULL    |       |</span><br><span class="line">+-------+----------+------+-----+---------+-------+</span><br><span class="line">4 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></p>
<h3 id="表改名"><a href="#表改名" class="headerlink" title="表改名"></a>表改名</h3><p>alter table tablename rename [to] new_tablename;<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MariaDB [test]&gt; show tables;</span><br><span class="line">+----------------+</span><br><span class="line">| Tables_in_test |</span><br><span class="line">+----------------+</span><br><span class="line">| student        |</span><br><span class="line">+----------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [test]&gt; alter table student rename to student_new;</span><br><span class="line">Query OK, 0 rows affected (0.02 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [test]&gt; show tables;</span><br><span class="line">+----------------+</span><br><span class="line">| Tables_in_test |</span><br><span class="line">+----------------+</span><br><span class="line">| student_new    |</span><br><span class="line">+----------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure></p>
<h1 id="DML"><a href="#DML" class="headerlink" title="DML"></a>DML</h1><p>DML操作是指对数据库中表记录的操作，主要包括表记录的插入(insert)、更新(update)、删除(delete)和查询(select)。</p>
<h2 id="插入记录"><a href="#插入记录" class="headerlink" title="插入记录"></a>插入记录</h2><p>insert into tablename (field1, field2, ……, fieldn) values(value1, value2, ……, valuen);<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MariaDB [test]&gt; insert into student (name, sex, age) values(&quot;haha&quot;, 1, 10);</span><br><span class="line">Query OK, 1 row affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [test]&gt; select * from student;</span><br><span class="line">+------+------+------+-------+</span><br><span class="line">| name | sex  | age  | grade |</span><br><span class="line">+------+------+------+-------+</span><br><span class="line">| haha |    1 |   10 |  NULL |</span><br><span class="line">+------+------+------+-------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure></p>
<p>也可以不指定字段名称，但values的顺序要和字段排列顺序一致，且不能缺少任何一个。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MariaDB [test]&gt; insert into student values(&quot;gaga&quot;, 2, 14, 1);</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [test]&gt; select * from student;</span><br><span class="line">+------+------+------+-------+</span><br><span class="line">| name | sex  | age  | grade |</span><br><span class="line">+------+------+------+-------+</span><br><span class="line">| haha |    1 |   10 |  NULL |</span><br><span class="line">| gaga |    2 |   14 |     1 |</span><br><span class="line">+------+------+------+-------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></p>
<p>在MySQL中insert语句可一次插入多条记录。在插入大量记录时，节省很多网络开销，大大提高插入效率。<br>insert into tablename (field1, field2, ……, fieldn)<br>values<br>(value1_1, value1_2, ……, value1_n),<br>(value2_1, value2_2, ……, value2_n),<br>… …<br>(valuen_1, valuen_2, ……, valuen_n);<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MariaDB [test]&gt; insert into student (name, sex, grade) values</span><br><span class="line">    -&gt; (&quot;h1&quot;, 1, 3),</span><br><span class="line">    -&gt; (&quot;h3&quot;, 0, 4),</span><br><span class="line">    -&gt; (&quot;h5&quot;, 1, 5);</span><br><span class="line">Query OK, 3 rows affected (0.01 sec)</span><br><span class="line">Records: 3  Duplicates: 0  Warnings: 0</span><br><span class="line"></span><br><span class="line">MariaDB [test]&gt; select * from student;</span><br><span class="line">+------+------+------+-------+</span><br><span class="line">| name | sex  | age  | grade |</span><br><span class="line">+------+------+------+-------+</span><br><span class="line">| haha |    1 |   10 |  NULL |</span><br><span class="line">| gaga |    2 |   14 |     1 |</span><br><span class="line">| h1   |    1 | NULL |     3 |</span><br><span class="line">| h3   |    0 | NULL |     4 |</span><br><span class="line">| h5   |    1 | NULL |     5 |</span><br><span class="line">+------+------+------+-------+</span><br><span class="line">5 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></p>
<h2 id="更新记录"><a href="#更新记录" class="headerlink" title="更新记录"></a>更新记录</h2><p>update tablename set field1=value1, field2=value2, ……, fieldn=valuen [where condition];<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MariaDB [test]&gt; update student set sex=0, grade=0 where name= &apos;haha&apos;;</span><br><span class="line">Query OK, 1 row affected (0.01 sec)</span><br><span class="line">Rows matched: 1  Changed: 1  Warnings: 0</span><br><span class="line"></span><br><span class="line">MariaDB [test]&gt; select * from student;</span><br><span class="line">+------+------+------+-------+</span><br><span class="line">| name | sex  | age  | grade |</span><br><span class="line">+------+------+------+-------+</span><br><span class="line">| haha |    0 |   10 |     0 |</span><br><span class="line">| gaga |    2 |   14 |     1 |</span><br><span class="line">| h1   |    1 | NULL |     3 |</span><br><span class="line">| h3   |    0 | NULL |     4 |</span><br><span class="line">| h5   |    1 | NULL |     5 |</span><br><span class="line">+------+------+------+-------+</span><br><span class="line">5 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></p>
<p>MySQL中update可以同时更新多个表中数据。<br>update t1, t2, ……, tn set t1.field1=expr1, t2.field2=expr2, ……,  tn.fieldn=exprn [where condition];<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MariaDB [test]&gt; select * from home;</span><br><span class="line">+------+--------+</span><br><span class="line">| id   | addr   |</span><br><span class="line">+------+--------+</span><br><span class="line">|    1 | hhhhhh |</span><br><span class="line">|    2 | jjjjj  |</span><br><span class="line">+------+--------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [test]&gt; select * from student;</span><br><span class="line">+------+------+------+-------+</span><br><span class="line">| name | sex  | age  | grade |</span><br><span class="line">+------+------+------+-------+</span><br><span class="line">| haha |    0 |   10 |     0 |</span><br><span class="line">| gaga |    2 |   14 |     1 |</span><br><span class="line">| h1   |    1 | NULL |     3 |</span><br><span class="line">| h3   |    0 | NULL |     4 |</span><br><span class="line">| h5   |    1 | NULL |     5 |</span><br><span class="line">+------+------+------+-------+</span><br><span class="line">5 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [test]&gt; update student, home set student.grade=10, home.id=20 where student.name=&apos;haha&apos;;</span><br><span class="line">Query OK, 3 rows affected (0.00 sec)</span><br><span class="line">Rows matched: 3  Changed: 3  Warnings: 0</span><br><span class="line"></span><br><span class="line">MariaDB [test]&gt; select * from home;</span><br><span class="line">+------+--------+</span><br><span class="line">| id   | addr   |</span><br><span class="line">+------+--------+</span><br><span class="line">|   20 | hhhhhh |</span><br><span class="line">|   20 | jjjjj  |</span><br><span class="line">+------+--------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [test]&gt; select * from student;</span><br><span class="line">+------+------+------+-------+</span><br><span class="line">| name | sex  | age  | grade |</span><br><span class="line">+------+------+------+-------+</span><br><span class="line">| haha |    0 |   10 |    10 |</span><br><span class="line">| gaga |    2 |   14 |     1 |</span><br><span class="line">| h1   |    1 | NULL |     3 |</span><br><span class="line">| h3   |    0 | NULL |     4 |</span><br><span class="line">| h5   |    1 | NULL |     5 |</span><br><span class="line">+------+------+------+-------+</span><br><span class="line">5 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></p>
<h2 id="删除记录"><a href="#删除记录" class="headerlink" title="删除记录"></a>删除记录</h2><p>delete from tablename [where condition];<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MariaDB [test]&gt; select * from student;</span><br><span class="line">+------+------+</span><br><span class="line">| name | age  |</span><br><span class="line">+------+------+</span><br><span class="line">| haha |    1 |</span><br><span class="line">| hehe |    2 |</span><br><span class="line">| gaga |    3 |</span><br><span class="line">+------+------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [test]&gt; delete from student where age=2;</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [test]&gt; select * from student;</span><br><span class="line">+------+------+</span><br><span class="line">| name | age  |</span><br><span class="line">+------+------+</span><br><span class="line">| haha |    1 |</span><br><span class="line">| gaga |    3 |</span><br><span class="line">+------+------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></p>
<p>delete t1,t2,…tn from t1,t2,…tn [where condition];<br>如果 from 后面的表名用别名，则 delete 后面的也要用相应的别名，否则会提示语法错误。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MariaDB [test]&gt; select * from boy;</span><br><span class="line">+------+-------+</span><br><span class="line">| name | score |</span><br><span class="line">+------+-------+</span><br><span class="line">| haha |    10 |</span><br><span class="line">| gaga |    30 |</span><br><span class="line">+------+-------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [test]&gt; select * from student;</span><br><span class="line">+------+------+</span><br><span class="line">| name | age  |</span><br><span class="line">+------+------+</span><br><span class="line">| haha |    1 |</span><br><span class="line">| gaga |    3 |</span><br><span class="line">+------+------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [test]&gt; delete boy, s from boy, student s where s.age=1 and boy.name=s.name;</span><br><span class="line">Query OK, 2 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [test]&gt; select * from student;</span><br><span class="line">+------+------+</span><br><span class="line">| name | age  |</span><br><span class="line">+------+------+</span><br><span class="line">| gaga |    3 |</span><br><span class="line">+------+------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [test]&gt; select * from boy;</span><br><span class="line">+------+-------+</span><br><span class="line">| name | score |</span><br><span class="line">+------+-------+</span><br><span class="line">| gaga |    30 |</span><br><span class="line">+------+-------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure></p>
<h2 id="查询记录"><a href="#查询记录" class="headerlink" title="查询记录"></a>查询记录</h2><p>基本语法<br>select * from tablename [where condition];</p>
<h3 id="查询不重复记录-去重"><a href="#查询不重复记录-去重" class="headerlink" title="查询不重复记录(去重)"></a>查询不重复记录(去重)</h3><p>使用<strong>distinct关键字</strong>实现<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MariaDB [test]&gt; select age from student;</span><br><span class="line">+------+</span><br><span class="line">| age  |</span><br><span class="line">+------+</span><br><span class="line">|    3 |</span><br><span class="line">|    3 |</span><br><span class="line">|    4 |</span><br><span class="line">+------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [test]&gt; select distinct age from student;</span><br><span class="line">+------+</span><br><span class="line">| age  |</span><br><span class="line">+------+</span><br><span class="line">|    3 |</span><br><span class="line">|    4 |</span><br><span class="line">+------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></p>
<h3 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h3><p>使用<strong>where关键字</strong>实现<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MariaDB [test]&gt; select * from student where age=4;</span><br><span class="line">+------+------+</span><br><span class="line">| name | age  |</span><br><span class="line">+------+------+</span><br><span class="line">| tete |    4 |</span><br><span class="line">+------+------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure></p>
<h3 id="排序和限制"><a href="#排序和限制" class="headerlink" title="排序和限制"></a>排序和限制</h3><p>排序使用order by关键字实现<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from tablename [where condition] [order by field1 [desc|asc] , field2 [desc|asc],......fieldn [desc|asc]]</span><br></pre></td></tr></table></figure></p>
<p>desc 和 asc 是排序顺序关键字，desc表示按照字段进行降序排列，asc则表示升序排列，如果不写此关键字默认是升序排列。order by后面可以跟多个不同的排序字段，并 且每个排序字段可以有不同的排序顺序。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MariaDB [test]&gt; select * from student;</span><br><span class="line">+------+------+</span><br><span class="line">| name | age  |</span><br><span class="line">+------+------+</span><br><span class="line">| gaga |    3 |</span><br><span class="line">| haha |    3 |</span><br><span class="line">| tete |    4 |</span><br><span class="line">| haha |    1 |</span><br><span class="line">| tete |    2 |</span><br><span class="line">+------+------+</span><br><span class="line">5 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [test]&gt; select * from student order by age;</span><br><span class="line">+------+------+</span><br><span class="line">| name | age  |</span><br><span class="line">+------+------+</span><br><span class="line">| haha |    1 |</span><br><span class="line">| tete |    2 |</span><br><span class="line">| gaga |    3 |</span><br><span class="line">| haha |    3 |</span><br><span class="line">| tete |    4 |</span><br><span class="line">+------+------+</span><br><span class="line">5 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [test]&gt; select * from student order by age , name desc;</span><br><span class="line">+------+------+</span><br><span class="line">| name | age  |</span><br><span class="line">+------+------+</span><br><span class="line">| haha |    1 |</span><br><span class="line">| tete |    2 |</span><br><span class="line">| haha |    3 |</span><br><span class="line">| gaga |    3 |</span><br><span class="line">| tete |    4 |</span><br><span class="line">+------+------+</span><br><span class="line">5 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></p>
<p><strong>限制显示个数使用limit关键字</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select ... ... [limit offset_start, row_count]</span><br></pre></td></tr></table></figure></p>
<p>offset_start起始偏移量 row_count显示行数，默认情况下起始偏移量为0，只写显示行数，显示前n条记录。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MariaDB [test]&gt; select * from student limit 2;</span><br><span class="line">+------+------+</span><br><span class="line">| name | age  |</span><br><span class="line">+------+------+</span><br><span class="line">| gaga |    3 |</span><br><span class="line">| haha |    3 |</span><br><span class="line">+------+------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [test]&gt; select * from student limit 3, 2;</span><br><span class="line">+------+------+</span><br><span class="line">| name | age  |</span><br><span class="line">+------+------+</span><br><span class="line">| haha |    1 |</span><br><span class="line">| tete |    2 |</span><br><span class="line">+------+------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [test]&gt; select * from student;</span><br><span class="line">+------+------+</span><br><span class="line">| name | age  |</span><br><span class="line">+------+------+</span><br><span class="line">| gaga |    3 |</span><br><span class="line">| haha |    3 |</span><br><span class="line">| tete |    4 |</span><br><span class="line">| haha |    1 |</span><br><span class="line">| tete |    2 |</span><br><span class="line">+------+------+</span><br><span class="line">5 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></p>
<h3 id="聚合"><a href="#聚合" class="headerlink" title="聚合"></a>聚合</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select [field1, field2, ...... fieldn] fun_name</span><br><span class="line">from tablename</span><br><span class="line">[where wehre_contition]</span><br><span class="line">[group by field1, field2, ... fieldn]</span><br><span class="line">[with rollup]</span><br><span class="line">[having where_contition]</span><br></pre></td></tr></table></figure>
<p>fun_name聚合操作(聚合函数)，常用的有：sum(求和)、count(总个数)、max(最大值)、min(最小值)<br>group by关键字表示要进行分类聚合的字段<br>where rollup可选语法，表示是否对分类聚合的结果进行再汇总<br>having 关键字表示对分类后的结果再进行条件的过滤</p>
<p>having 和 where 的区别在于 having 是对聚合后的结果进行条件的过滤，而 where 是在聚合前就对记录进行过滤，如果逻辑允许，我们尽可能用 where 先过滤记录，这样因为结果集减小，将对聚合的效率大大提高，最后再根据逻辑看是否用 having 进行再过滤<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MariaDB [test]&gt; select * from student_score;</span><br><span class="line">+------+--------+-------+-------+-------+</span><br><span class="line">| name | shuxue | yuwen | yinyu | class |</span><br><span class="line">+------+--------+-------+-------+-------+</span><br><span class="line">| gaga |      1 |     3 |     4 |     1 |</span><br><span class="line">| fef  |      9 |    23 |    21 |     2 |</span><br><span class="line">| ii   |     45 |   123 |    42 |     1 |</span><br><span class="line">| gr   |     56 |    34 |    86 |     2 |</span><br><span class="line">| ce   |     45 |    23 |    98 |     2 |</span><br><span class="line">| gr   |      1 |     3 |     4 |     3 |</span><br><span class="line">| khj  |      9 |    23 |    21 |     4 |</span><br><span class="line">| ko   |     45 |   123 |    42 |     4 |</span><br><span class="line">| po   |     56 |    34 |    86 |     5 |</span><br><span class="line">| ds   |     45 |    23 |    98 |     3 |</span><br><span class="line">+------+--------+-------+-------+-------+</span><br><span class="line">10 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [test]&gt; select sum(shuxue), max(yinyu), min(yuwen) from student_score;</span><br><span class="line">+-------------+------------+------------+</span><br><span class="line">| sum(shuxue) | max(yinyu) | min(yuwen) |</span><br><span class="line">+-------------+------------+------------+</span><br><span class="line">|         312 |         98 |          3 |</span><br><span class="line">+-------------+------------+------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [test]&gt; select class, sum(shuxue), sum(yinyu) from student_score group by class;</span><br><span class="line">+-------+-------------+------------+</span><br><span class="line">| class | sum(shuxue) | sum(yinyu) |</span><br><span class="line">+-------+-------------+------------+</span><br><span class="line">|     1 |          46 |         46 |</span><br><span class="line">|     2 |         110 |        205 |</span><br><span class="line">|     3 |          46 |        102 |</span><br><span class="line">|     4 |          54 |         63 |</span><br><span class="line">|     5 |          56 |         86 |</span><br><span class="line">+-------+-------------+------------+</span><br><span class="line">5 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [test]&gt; select class, sum(shuxue), sum(yinyu) from student_score group by class with rollup;</span><br><span class="line">+-------+-------------+------------+</span><br><span class="line">| class | sum(shuxue) | sum(yinyu) |</span><br><span class="line">+-------+-------------+------------+</span><br><span class="line">|     1 |          46 |         46 |</span><br><span class="line">|     2 |         110 |        205 |</span><br><span class="line">|     3 |          46 |        102 |</span><br><span class="line">|     4 |          54 |         63 |</span><br><span class="line">|     5 |          56 |         86 |</span><br><span class="line">|  NULL |         312 |        502 |</span><br><span class="line">+-------+-------------+------------+</span><br><span class="line">6 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [test]&gt; select class, sum(shuxue), sum(yinyu) from student_score group by class with rollup having sum(shuxue) &gt; 50;</span><br><span class="line">+-------+-------------+------------+</span><br><span class="line">| class | sum(shuxue) | sum(yinyu) |</span><br><span class="line">+-------+-------------+------------+</span><br><span class="line">|     2 |         110 |        205 |</span><br><span class="line">|     4 |          54 |         63 |</span><br><span class="line">|     5 |          56 |         86 |</span><br><span class="line">|  NULL |         312 |        502 |</span><br><span class="line">+-------+-------------+------------+</span><br><span class="line">4 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></p>
<h3 id="表连接"><a href="#表连接" class="headerlink" title="表连接"></a>表连接</h3><p>表连接分为内连接和外连接，内连接仅选出两张表中互相存在的记录，而外连接会选出其他不匹配的记录。<br>外连接分为左连接和右连接</p>
<ol>
<li>左连接：包含所有的左边表中的记录甚至是右边表中没有和它匹配的记录。</li>
<li>右连接：包含所有的右边表中的记录甚至是左边表中没有和它匹配的记录。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MariaDB [test]&gt; select * from student;</span><br><span class="line">+------+------+</span><br><span class="line">| name | age  |</span><br><span class="line">+------+------+</span><br><span class="line">| gaga |    3 |</span><br><span class="line">| haha |    3 |</span><br><span class="line">| tete |    4 |</span><br><span class="line">| haha |    1 |</span><br><span class="line">| tete |    2 |</span><br><span class="line">| fee  |    2 |</span><br><span class="line">| ko   |    3 |</span><br><span class="line">+------+------+</span><br><span class="line">7 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [test]&gt; select * from student_score;</span><br><span class="line">+------+--------+-------+-------+-------+</span><br><span class="line">| name | shuxue | yuwen | yinyu | class |</span><br><span class="line">+------+--------+-------+-------+-------+</span><br><span class="line">| gaga |      1 |     3 |     4 |     1 |</span><br><span class="line">| fef  |      9 |    23 |    21 |     2 |</span><br><span class="line">| ii   |     45 |   123 |    42 |     1 |</span><br><span class="line">| gr   |     56 |    34 |    86 |     2 |</span><br><span class="line">| ce   |     45 |    23 |    98 |     2 |</span><br><span class="line">| gr   |      1 |     3 |     4 |     3 |</span><br><span class="line">| khj  |      9 |    23 |    21 |     4 |</span><br><span class="line">| ko   |     45 |   123 |    42 |     4 |</span><br><span class="line">| po   |     56 |    34 |    86 |     5 |</span><br><span class="line">| ds   |     45 |    23 |    98 |     3 |</span><br><span class="line">+------+--------+-------+-------+-------+</span><br><span class="line">10 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [test]&gt; select * from student, student_score where student.name=student_score.name;</span><br><span class="line">+------+------+------+--------+-------+-------+-------+</span><br><span class="line">| name | age  | name | shuxue | yuwen | yinyu | class |</span><br><span class="line">+------+------+------+--------+-------+-------+-------+</span><br><span class="line">| gaga |    3 | gaga |      1 |     3 |     4 |     1 |</span><br><span class="line">| ko   |    3 | ko   |     45 |   123 |    42 |     4 |</span><br><span class="line">+------+------+------+--------+-------+-------+-------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [test]&gt; select * from student left join student_score on student.name=student_score.name;</span><br><span class="line">+------+------+------+--------+-------+-------+-------+</span><br><span class="line">| name | age  | name | shuxue | yuwen | yinyu | class |</span><br><span class="line">+------+------+------+--------+-------+-------+-------+</span><br><span class="line">| gaga |    3 | gaga |      1 |     3 |     4 |     1 |</span><br><span class="line">| ko   |    3 | ko   |     45 |   123 |    42 |     4 |</span><br><span class="line">| haha |    3 | NULL |   NULL |  NULL |  NULL |  NULL |</span><br><span class="line">| tete |    4 | NULL |   NULL |  NULL |  NULL |  NULL |</span><br><span class="line">| haha |    1 | NULL |   NULL |  NULL |  NULL |  NULL |</span><br><span class="line">| tete |    2 | NULL |   NULL |  NULL |  NUULL |  NULL |</span><br><span class="line">| fee  |    2 | NULL |   NULL |  NULL |  NULL |  NULL |</span><br><span class="line">+------+------+------+--------+-------+-------+-------+</span><br><span class="line">7 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [test]&gt; select * from student right join student_score on student.name=student_score.name;</span><br><span class="line">+------+------+------+--------+-------+-------+-------+</span><br><span class="line">| name | age  | name | shuxue | yuwen | yinyu | class |</span><br><span class="line">+------+------+------+--------+-------+-------+-------+</span><br><span class="line">| gaga |    3 | gaga |      1 |     3 |     4 |     1 |</span><br><span class="line">| ko   |    3 | ko   |     45 |   123 |    42 |     4 |</span><br><span class="line">| NULL | NULL | fef  |      9 |    23 |    21 |     2 |</span><br><span class="line">| NULL | NULL | ii   |     45 |   123 |    42 |     1 |</span><br><span class="line">| NULL | NULL | gr   |     56 |    34 |    86 |     2 |</span><br><span class="line">| NULL | NULL | ce   |     45 |    23 |    98 |     2 |</span><br><span class="line">| NULL | NULL | gr   |      1 |     3 |     4 |     3 |</span><br><span class="line">| NULL | NULL | khj  |      9 |    23 |    21 |     4 |</span><br><span class="line">| NULL | NULL | po   |     56 |    34 |    86 |     5 |</span><br><span class="line">| NULL | NULL | ds   |     45 |    23 |    98 |     3 |</span><br><span class="line">+------+------+------+--------+-------+-------+-------+</span><br><span class="line">10 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MariaDB [test]&gt; select * from student where name in (select name from student_score);</span><br><span class="line">+------+------+</span><br><span class="line">| name | age  |</span><br><span class="line">+------+------+</span><br><span class="line">| gaga |    3 |</span><br><span class="line">| ko   |    3 |</span><br><span class="line">+------+------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>
<p>某些情况下子查询和表连接可以相互转化</p>
<h3 id="记录联合"><a href="#记录联合" class="headerlink" title="记录联合"></a>记录联合</h3><p>union和union all用于实现记录联合<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MariaDB [test]&gt; select name from student union all select name from student_score;</span><br><span class="line">+------+</span><br><span class="line">| name |</span><br><span class="line">+------+</span><br><span class="line">| gaga |</span><br><span class="line">| haha |</span><br><span class="line">| tete |</span><br><span class="line">| haha |</span><br><span class="line">| tete |</span><br><span class="line">| fee  |</span><br><span class="line">| ko   |</span><br><span class="line">| gaga |</span><br><span class="line">| fef  |</span><br><span class="line">| ii   |</span><br><span class="line">| gr   |</span><br><span class="line">| ce   |</span><br><span class="line">| gr   |</span><br><span class="line">| khj  |</span><br><span class="line">| ko   |</span><br><span class="line">| po   |</span><br><span class="line">| ds   |</span><br><span class="line">+------+</span><br><span class="line">17 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [test]&gt; select name from student union select name from student_score;</span><br><span class="line">+------+</span><br><span class="line">| name |</span><br><span class="line">+------+</span><br><span class="line">| gaga |</span><br><span class="line">| haha |</span><br><span class="line">| tete |</span><br><span class="line">| fee  |</span><br><span class="line">| ko   |</span><br><span class="line">| fef  |</span><br><span class="line">| ii   |</span><br><span class="line">| gr   |</span><br><span class="line">| ce   |</span><br><span class="line">| khj  |</span><br><span class="line">| po   |</span><br><span class="line">| ds   |</span><br><span class="line">+------+</span><br><span class="line">12 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></p>
<p>union 和 union all的区别在于union all将结果集直接合并在一起，而union将union all的结果进行一次distinct，去除重复记录的结果。</p>
<h1 id="DCL"><a href="#DCL" class="headerlink" title="DCL"></a>DCL</h1><p>DCL语句主要是DBA用来管理系统中的对象权限所使用的，一般开发人员很少使用。<br>grant和revoke分别授出和收回用户权限。</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>vim的自动补全插件的安装YouCompleteMe</title>
    <url>/2017/10/19/vim-youcompleteme/</url>
    <content><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h1 id="YouCompleteMe-Linux"><a href="#YouCompleteMe-Linux" class="headerlink" title="YouCompleteMe Linux"></a>YouCompleteMe Linux</h1><p><a href="https://github.com/CaseZheng/CaseZhengVim" target="_blank" rel="noopener">个人vim配置</a></p>
<p>环境 Fedora26<br><a href="http://valloric.github.io/YouCompleteMe/#full-installation-guide" target="_blank" rel="noopener">YouCompleteMe官网</a><br>前期准备工作</p>
<ol>
<li>vim 支持python vim版本</li>
<li><p>安装各种库和工具</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo yum install -y ruby ruby-devel lua lua-devel luajit     luajit-devel ctags git python python-devel     python3 python3-devel tcl-devel     perl perl-devel perl-ExtUtils-ParseXS     perl-ExtUtils-XSpp perl-ExtUtils-CBuilder     perl-ExtUtils-Embed</span><br><span class="line">sudo sudo dnf install automake gcc gcc-c++ kernel-devel cmake</span><br><span class="line">sudo dnf install python-devel python3-devel</span><br><span class="line">sudo dnf install clang</span><br><span class="line">sudo dnf install boost-devel boost</span><br><span class="line">sudo dnf install golang</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用Vundle vim插件管理器下载YouCompleteMe</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Plugin &apos;Valloric/YouCompleteMe&apos;</span><br></pre></td></tr></table></figure>
</li>
<li><p>下载到YouCompleteMe后，进入YouCompleteMe目录，执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git submodule update --init --recursive</span><br></pre></td></tr></table></figure>
</li>
<li><p>编译YouCompleteMe 可根据自己需要安装 详情见官网</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">./install.py --clang-completer --system-libclang --system-boost --gocode-completer</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>.vimrc 配置<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let g:ycm_global_ycm_extra_conf = &apos;~/.vim/.ycm_extra_conf.py&apos; &quot;此处是全局配置文件路径</span><br><span class="line">let g:ycm_confirm_extra_conf = 0    &quot;关闭每次导入配置文件前的询问</span><br><span class="line">let g:syntastic_always_populate_loc_list = 1 &quot;方便使用syntastic进行语法检查</span><br><span class="line">let g:ycm_seed_identifiers_with_syntax=1 &quot; 开启语法关键字补全</span><br></pre></td></tr></table></figure></p>
<p>.ycm_extra_conf.py配置<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd ~/.vim/</span><br><span class="line">cp bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py .</span><br></pre></td></tr></table></figure></p>
<p>修改.ycm_extra_conf，主要是加入库文件<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flags = [</span><br><span class="line">&apos;-Wall&apos;,</span><br><span class="line">&apos;-Wextra&apos;,</span><br><span class="line">&apos;-Werror&apos;,</span><br><span class="line">&apos;-Wno-long-long&apos;,</span><br><span class="line">&apos;-Wno-variadic-macros&apos;,</span><br><span class="line">&apos;-fexceptions&apos;,</span><br><span class="line">&apos;-DNDEBUG&apos;,</span><br><span class="line"># You 100% do NOT need -DUSE_CLANG_COMPLETER in your flags; only the YCM</span><br><span class="line"># source code needs it.</span><br><span class="line">&apos;-DUSE_CLANG_COMPLETER&apos;,</span><br><span class="line"># THIS IS IMPORTANT! Without the &apos;-x&apos; flag, Clang won&apos;t know which language to</span><br><span class="line"># use when compiling headers. So it will guess. Badly. So C++ headers will be</span><br><span class="line"># compiled as C headers. You don&apos;t want that so ALWAYS specify the &apos;-x&apos; flag.</span><br><span class="line"># For a C project, you would set this to &apos;c&apos; instead of &apos;c++&apos;.</span><br><span class="line">&apos;-std=c++11&apos;,</span><br><span class="line">&apos;-x&apos;,</span><br><span class="line">&apos;c++&apos;,</span><br><span class="line">&apos;-isystem&apos;,</span><br><span class="line">&apos;../BoostParts&apos;,</span><br><span class="line">&apos;-isystem&apos;,</span><br><span class="line">get_python_inc(),</span><br><span class="line">&apos;-isystem&apos;,</span><br><span class="line">&apos;../llvm/include&apos;,</span><br><span class="line">&apos;-isystem&apos;,</span><br><span class="line">&apos;../llvm/tools/clang/include&apos;,</span><br><span class="line">&apos;-I&apos;,</span><br><span class="line">&apos;.&apos;,</span><br><span class="line">&apos;-I&apos;,</span><br><span class="line">&apos;./ClangCompleter&apos;,</span><br><span class="line">&apos;-isystem&apos;,</span><br><span class="line">&apos;./tests/gmock/gtest&apos;,</span><br><span class="line">&apos;-isystem&apos;,</span><br><span class="line">&apos;./tests/gmock/gtest/include&apos;,</span><br><span class="line">&apos;-isystem&apos;,</span><br><span class="line">&apos;./tests/gmock&apos;,</span><br><span class="line">&apos;-isystem&apos;,</span><br><span class="line">&apos;./tests/gmock/include&apos;,</span><br><span class="line">&apos;-isystem&apos;,</span><br><span class="line">&apos;./benchmarks/benchmark/include&apos;,</span><br><span class="line">]</span><br><span class="line"># 需要屏蔽下面这部分</span><br><span class="line"># try:</span><br><span class="line">#   final_flags.remove( &apos;-stdlib=libc++&apos; )</span><br><span class="line"># except ValueError:</span><br><span class="line">#   pass</span><br></pre></td></tr></table></figure></p>
<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><h2 id="YouCompleteMe-unavailable-invalid-syntax-vimsupport-py-line-1224"><a href="#YouCompleteMe-unavailable-invalid-syntax-vimsupport-py-line-1224" class="headerlink" title="YouCompleteMe unavailable: invalid syntax (vimsupport.py, line 1224)"></a>YouCompleteMe unavailable: invalid syntax (vimsupport.py, line 1224)</h2><p>在使用时报这个错,最后发现是编译的vim未支持python3导致的,重新编译vim支持python3即可</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://www.jianshu.com/p/d908ce81017a?nomobile=yes" target="_blank" rel="noopener">一步一步带你安装史上最难安装的 vim 插件 —— YouCompleteMe</a></li>
<li><a href="http://valloric.github.io/YouCompleteMe/#full-installation-guide" target="_blank" rel="noopener">官方文档</a></li>
</ol>
]]></content>
      <categories>
        <category>other</category>
      </categories>
      <tags>
        <tag>vim</tag>
      </tags>
  </entry>
  <entry>
    <title>网络相关知识复习</title>
    <url>/2017/09/16/network-review/</url>
    <content><![CDATA[<p>复习下网络相关知识，包括TCP/IP协议族题解结构和主要协议介绍、封装、复用、ARP协议、IP协议、TCP协议、IP模块工作流程、TCP网络连接的建立和状态转移、DNS服务、HTTP服务的介绍。</p>
<h1 id="浏览器网页访问的过程简介"><a href="#浏览器网页访问的过程简介" class="headerlink" title="浏览器网页访问的过程简介"></a>浏览器网页访问的过程简介</h1><ol>
<li>浏览器分析链接指向的URL</li>
<li>浏览器向DNS请求解析域名的IP地址(DNS协议基于UDP协议)<ol>
<li>UDP(用户数据报)协议 不可靠、无连接、基于数据报</li>
<li>IP协议 不可靠(不保证IP数据报准确到达接收端)、无连接、无状态(简单、高效)</li>
<li>封装 DNS报文 + UDP头部 -&gt; UDP数据报 + IP头部 -&gt; IP数据报 + 以太网头部 + 以太网尾部 -&gt; 以太网帧</li>
<li>传输<ol>
<li>传输层端对端</li>
<li>网络层 选路和转发 使用IP地址寻址</li>
<li>数据链路层 网络驱动程序 使用物理地址寻址 (ARP协议 IP地址转为物理地址) (RARP协议 物理地址转化为IP地址)</li>
<li>分片:帧的最大传输单元(MTU),受到网络类型的限制,以太网帧的MTU1500字节,过长的IP数据报可能会被分片传输.分片只有在最终目标机器上才会被内核IP模块重新组装.</li>
</ol>
</li>
<li>分用 以太网帧到目的主机后,根据各层协议头,将报文逐层解析,最终将处理后的数据交给目标应用程序</li>
</ol>
</li>
<li>DNS获取域名的IP地址,并返回解析到的IP地址<ol>
<li>递归查询(一般采用方式) 主机 -&gt; 本地域名服务器 -&gt; 根域名服务器 -&gt; 本地域名服务器 -&gt; 顶级域名服务器 -&gt; 本地域名服务器 -&gt; 权限域名服务器 -&gt; 本地域名服务器 -&gt; 主机</li>
<li>迭代查询 主机 -&gt; 本地域名服务器 -&gt; 根域名服务器 -&gt; 顶级域名服务器 -&gt; 权限域名服务器 -&gt; 顶级域名服务器 -&gt; 根域名服务器 -&gt; 本地域名服务器 -&gt; 主机</li>
</ol>
</li>
<li>浏览器和服务器建立TCP链接(TCP三次握手)<ol>
<li>TCP(传输控制)协议 可靠(发送应答机制,超时重传机制,乱序/重复IP报文重排/整理机制)、面向连接(保存状态占用内核资源,全双工)、基于流(数据的发送和接收没有边界限制)</li>
<li>浏览器(CLOSED-&gt;SYN_SENT)发送SYN到服务器</li>
<li>服务器(LISTEN-&gt;SYN_RECV)接收SYN并发送SYN和ACK到浏览器</li>
<li>浏览器(SYN_SENT-&gt;ESTABLISHED)接收ACK并发送ACK到服务器(SYN_RECV-&gt;ESTABLISHED)</li>
</ol>
</li>
<li>浏览器发出命令<ol>
<li>HTTP协议 无连接,无状态</li>
<li>封装</li>
<li>传输<ol>
<li>拥塞窗口</li>
<li>慢开始</li>
<li>拥塞避免</li>
<li>慢开始门限(拥塞窗口)</li>
<li>快重传</li>
<li>快恢复</li>
<li>发送窗口(拥塞窗口和对方给出接收窗口中较小的那一个)</li>
<li>路由器的尾部丢弃和随机丢弃策略</li>
<li>糊涂窗口综合症</li>
<li>滑动窗口</li>
</ol>
</li>
<li>分用</li>
</ol>
</li>
<li>服务器给出响应</li>
<li>浏览器关闭释放TCP连接(TCP四次挥手)<ol>
<li>浏览器(ESTABLISHED-&gt;FIN_WAIT_1)发送FIN到服务器</li>
<li>服务器(ESTABLISHED-&gt;CLOSE_WAIT)接收FIN并发送ACK到浏览器,浏览器(FIN_WAIT_1-&gt;FIN_WAIT_2)接收ACK</li>
<li>服务器(CLOSE_WAIT-&gt;LAST_ACK)发送FIN到浏览器</li>
<li>浏览器(FIN_WAIT_2-&gt;TIME_WAIT)接收FIN,并发送ACK到服务器,服务器(LAST_ACK-&gt;CLOSED)接收ACK 先关闭链接的一方进入TIME_WAIT状态,TIME_WAIT状态需要等待2MSL(TCP报文段最大生存时间):<ol>
<li>可靠的终止链接(重发ACK)</li>
<li>保证让迟来的TCP报文段有足够时间被识别并丢弃</li>
</ol>
</li>
</ol>
</li>
<li>浏览器显示返回结果</li>
</ol>
<h1 id="TCP-IP协议族"><a href="#TCP-IP协议族" class="headerlink" title="TCP/IP协议族"></a>TCP/IP协议族</h1><p>Internet（因特网）主流协议族是TCP/IP协议族。<br>TCP/IP协议族是一个<strong>多层、多协议</strong>的通信协议。</p>
<h2 id="TCP-IP协议族体系结构和主要结构"><a href="#TCP-IP协议族体系结构和主要结构" class="headerlink" title="TCP/IP协议族体系结构和主要结构"></a>TCP/IP协议族体系结构和主要结构</h2><p>TCP/IP协议是<strong>四层</strong>协议系统，从底到上分别是<strong>数据链路层、传输层、网络层、应用层</strong>。<br>每层完成不同的功能，通过若干协议来实现，<strong>上层协议使用下层协议提供的服务</strong>。<br><img src="/Picture/TCP-IP协议族体系结构及主要协议.png" alt="TCP/IP协议族体系结构和主要结构"></p>
<h3 id="网络链路层"><a href="#网络链路层" class="headerlink" title="网络链路层"></a>网络链路层</h3><p>网络链路层实现网卡接口的<strong>网络驱动程序</strong>，处理数据在物理媒介（比如以太网、令牌环等）上的传输。<strong>不同的物理网络具有不同的电气特性</strong>，网络驱动程序隐藏了这些细节，为上层协议提供了一个统一的接口。<br>数据链路层主要协议：</p>
<ol>
<li><strong>ARP协议（地址解析协议）  将IP地址转换为物理地址</strong>（通常为MAC地址，以太网、令牌环、802.11无线网络都是用MAC地址）。</li>
<li><strong>RARP协议（逆地址解析协议）  将物理地址转化为IP地址</strong>，利用网卡上的物理地址向网络管理者（服务器或网络管理软件）查询自身的IP地址，RARP协议仅用于网络上的某些无盘工作站,无盘工作站缺乏存储设备，所以无法记住自身的地址。运行RARP服务的网络管理者通常存有该网路上所有及其的物理地址到IP地址的映射。</li>
</ol>
<p><strong>数据链路层使用物理地址来寻址一台机器，而网络层使用IP地址寻找一台机器。</strong></p>
<h3 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h3><p>网络层实现数据包的<strong>选路和转发</strong>。WAN（广域网）通常使用众多分级的路由器来连接分散的主机或LAN（局域网），因此，通信的两台主机一般不是直接相连的，而是通过多个中间节点（路由器）相连，<strong>网络层的任务就是选择这些中间节点，以确认主机之间的通信路径</strong>。<br>网络层对上层协议<strong>隐藏网络拓扑连接的细节</strong>，使得在传输层和网络应用程序看来，通信的双方是直接相连的。</p>
<p><strong>网络层核心协议：IP协议（因特网协议）</strong><br>IP协议通过数据包的目的IP地址来决定如何投递它。如果数据包不能直接发送给目的主机，那么IP协议就为它寻找一个和合适的下一跳路由器，并将数据包交付给该路由器来转发。多次重复该过程，数据包最终到达目标主机，或者因为发送失败而被丢弃。<br>IP协议使用<strong>逐跳</strong>的方式确定通信路径。<br>网络层重要协议<strong>ICMP协议（因特网控制报文协议），IP协议的重要补充，主要用来检测网络连接</strong>。</p>
<p><strong>ICMP协议并不是严格意义上的网络层协议</strong>，因为它使用处于同一层的IP协议提供的服务。<br><img src="/Picture/ICMP报文格式.png" alt="ICMP报文格式"><br>8位类型，用来区分报文类型</p>
<ol>
<li><strong>差错报文</strong>，主要用来回应网络错误，比如目标不可达（类型值为3）和重定向（类型值为5）。</li>
<li><strong>查询报文</strong>，主要用来查询网络信息，比如ping程序使用ICMP报文查看目标是否可达（类型值为8）。</li>
</ol>
<p>8位代码，进一步区分不同的条件，比如重定向报文使用代码值0表示对网络重定向，用代码值1标识对主机重定向。<br>16位校验和，对<strong>整个报文（包括头部和内容部分）进行循环冗余检验（CRC）</strong>，以检验报文在传输过程中是否损坏，不同的ICMP报文类型具有不同的正文内容。</p>
<h3 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a>传输层</h3><p>传输层为两台主机上的应用程序提供<strong>端到端的通信</strong>，传输层只关心通信的<strong>起始端和目的端</strong>，而<strong>不关心数据包的中转过程</strong>。<br>传输层协议主要有三个：<strong>TCP协议，UDP协议和SCTP协议</strong>。</p>
<ol>
<li><strong>TCP协议（传输控制协议）</strong>为应用层提供<strong>可靠的、面向连接的和基于流的</strong>服务。</li>
<li><strong>UDP协议（用户数据报协议）</strong>为应用层提供<strong>不可靠的、无连接的和基于数据报的</strong>服务。</li>
<li>SCTP协议（流控制传输协议）相对较新的传输层协议，为了在因特网上传输电话信号而设计。<br><img src="/Picture/传输层和网络层的区别.png" alt="传输层和网络层的区别"><br>图中垂直实线箭头表示TCP/IP协议族之间的实体通信（数据包确实沿着这些线路传递），水平虚线箭头表示逻辑通信线路。<br>数据链路层（驱动程序）封装了物理网路的电气细节；网络层封装了网络连接的细节；传输层为应用程序封装了一条端到端的逻辑通信链路，负责数据的收发、链路的超时重连等。</li>
</ol>
<h3 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h3><p>应用层负责处理应用程序的<strong>逻辑</strong>。数据链路层、网络层、传输层负责处理<strong>网络通信细节</strong>，这些部分必须<strong>既稳定又高效</strong>，因此它们都在<strong>内核空间</strong>中实现。应用层在用户空间实现，因为它处理众多逻辑，比如文件传输、名称查询、网络管理等。如果应用层实现在内核中，内核会变得非常庞大。应用层实现在内核中，内存不用在用户空间和内核空间中来回切换（主要是数据复制），可以提高工作效率，但实现复杂、不够灵活、不方便移植。<br>应用层协议众多：</p>
<ol>
<li>ping是应用程序，而是不协议，<strong>利用ICMP报文检测网络连接</strong>，是调试网络环境的必备工具。</li>
<li>telent协议是一种远程登陆协议，使我们能在本地完成远程任务。</li>
<li>OSPF（开放最短路径优先）协议是一种动态路由更新协议，用于路由器之间通信，以告知对方各自的路由信息。</li>
<li><strong>DNS（域名服务）协议提供及其域名到IP地址的转换</strong>。</li>
</ol>
<p>应用层协议（或程序）可以跳过传输层直接使用网络层提供的服务，比如ping程序和OSPF协议。<br>应用层协议（或程序）通常<strong>既可以使用TCP服务，又可以使用UDP协议</strong>，比如DNS协议。</p>
<h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><p>应用程序数据在发送到物理网络上之前，先沿着协议栈从上向下传递，<strong>每层协议都在上层数据的基础上加上自己的头部信息（有时还包括尾部信息）</strong>，以实现该层的功能，这个过程叫做<strong>封装</strong>。<br><img src="/Picture/封装.png" alt="封装"><br>经过TCP封装获得数据成为<strong>TCP报文段</strong>（TCP段）。<br>TCP协议为通信双方维持一个连接，并且在内核中存储相关数据。当发送端应用程序使用send（或者write）函数向一个TCP连接写入数据时，内核中TCP模块首先将这些数据复制到与该连接相对应的TCP内核发送缓存区中，然后TCP模块调用IP模块提供的服务，传递的参数包括<strong>TCP头部信息和TCP内核缓存区（发送缓存区或接收缓存区）数据一起构成TCP报文段</strong>。<br><img src="/Picture/TCP报文段封装过程.png" alt="TCP报文段封装过程"><br>经过UDP封装后的数据称为<strong>UDP数据报</strong>。UDP对应用程序数据的封装与TCP类似。UDP无须为应用层数据保存副本，提供不可靠的服务。当一个UDP数据报被成功发送后，UDP内核缓存区中的该数据报就被丢弃了。如果应用程序检测到该数据报未被接收端正确接收，并打算重发这个数据报，则应用程序需要重新从用户空间将该数据报拷贝到UDP内核发送缓存区。<br>经过IP封装后的数据称为<strong>IP数据报</strong>，IP数据报也包括<strong>头部信息和数据部分</strong>，其中数据部分就是一个TCP报文段、UDP数据报或着ICMP报文。<br>经过数据链路层封装的数据成为<strong>帧</strong>，传输媒介不同，帧的类型也不同。比如，以太网上是以太网帧，令牌环网络为令牌环帧。<br>以太网帧如下图所示：<br><img src="/Picture/以太网帧.png" alt="以太网帧"><br>以太网帧使用6字节的目的物理地址和6字节的源物理地址来表示通信的双方。<br>2字节类型字段用来标识上层协议。<br>4字节CRC字段对帧的其他部分提供循环冗余教研。<br>帧的最大传输单元（MTU），集帧最多携带多少上层协议数据，通常受到网络类型的限制，<strong>以太网帧的MTU是1500字节</strong>，过长的IP数据报可能需要被<strong>分片</strong>传输。<br><strong>帧才是最终在物理网络上传输的字节序列</strong>。</p>
<h2 id="分用"><a href="#分用" class="headerlink" title="分用"></a>分用</h2><p>当帧到达目的主机后，将沿着协议栈自底向上依次传递，各层协议以此处理帧中本层负责的头部信息获取所需的信息，并最终将处理后的数据交给目标应用程序，这个过程叫做分用。<br><img src="/Picture/以太网分用过程.png" alt="以太网分用过程"><br>分用是依靠<strong>头部信息中的类型字段</strong>来实现的。<br>帧中用2字节类型字段区分上层协议，即IP协议、ARP协议或RARP协议。<br>类型字段为0x800，即帧的数据部分为IP数据报。<br>类型字段为0x806，即帧的数据部分为ARP请求或应答报文。<br>类型字段为0x835，即帧的数据部分为RARP请求或应答报文。<br>IP数据报的头部采用16位的协议字段来区分ICMP协议、TCP协议和UDP协议。<br>TCP报文段和UDP报文段则通过其头部中的16位端口号字段来区分上层应用程序。</p>
<h2 id="ARP协议"><a href="#ARP协议" class="headerlink" title="ARP协议"></a>ARP协议</h2><p><strong>ARP协议实现任意网络层地址到物理层地址的转换</strong>。<br>IP地址到以太网地址（MAC）的转换。<br>工作原理：主机向自己所在的网络<strong>广播</strong>一个ARP请求，该请求包含目标机器的网络地址。此网络上的其他机器都将收到这个请求，但<strong>只有被请求的目标机器会回应一个ARP应答</strong>，其中包含自己的物理地址。<br><img src="/Picture/以太网ARP请求或应答报文.png" alt="以太网ARP请求或应答报文"><br>硬件类型：定义物理地址的类型，值为1表示MAC地址。<br>协议类型：表示要映射的协议地址类型，值为0x800表示IP地址。<br>硬件地址长度和协议地址长度：单位为字节。MAC地址长度为6,IP(v4)地址长度为4。<br>操作类型：4种操作类型。ARP请求（1）、ARP应答（2）、RARP请求（3）、RARP应答（4）。<br>最后四个字段指定通信双方的以太网地址（MAC）和IP地址。<br>发送端填充除了目的端以太网地址之外的其他3个字段，以构建ARP请求并发送。<br>接收端发送请求的目的端IP地址是自己，就把自己的以太网地址填充进取，然后交换两个目的端地址和两个发送端地址，以构建ARP应答并返回。<br>ARP请求/应答报文长度为28字节，加上以太网头部和尾部的18字节，一个携带ARP请求/应答的以太网帧帧长度为46字节，有的实现要求以太网数据长度至少为46字节，此时ARP请求/应答报文会增加一些填充字节，满足该要求，这样携带ARP请求/应答报文的以太网帧为64字节。<br><strong>ARP维护一个高速缓存</strong>，其中包含经常访问（比如网关地址）或最近访问的机器的IP地址到物理地址的映射。<strong>避免了重复的ARP请求，提高了发送数据报的速度</strong>。ARP高速缓存是<strong>动态变化</strong>的。<br><strong>每个ARP广播中都包含发送方的IP地址到物理地址的绑定，接收方在处理ARP分组前，先更新缓存中IP到物理地址的绑定信息</strong>。<br><img src="/Picture/ARP通信过程.png" alt="ARP通信过程"></p>
<h2 id="IP协议"><a href="#IP协议" class="headerlink" title="IP协议"></a>IP协议</h2><p>IP协议是TCP/IP协议的动力，为上层提供<strong>无状态、无连接、不可靠的服务</strong>。<br>无状态：IP通信双方<strong>不同步传输数据的状态信息</strong>。  优点：<strong>简单、高效</strong>。<br>无连接：IP通信双方<strong>不长久地维持双方的任何信息</strong>。上层协议每次发送数据的时候，都必须明确制定对方的IP地址。<br>不可靠：Ip协议<strong>不保证IP数据报准确地到达接收端</strong>。<br><img src="/Picture/IP报文.png" alt="IP报文"></p>
<p>选项：</p>
<ol>
<li>记录路由，告诉数据报途径的所有路由器都将自己的IP地址填入IP头部的选项部分，用于跟踪数据报的传递路径。</li>
<li>时间戳，告诉每个路由器都将数据报转发的时间填入IP头部的选项部分，测量途径路由之间的数据报传输时间。</li>
<li>松散源路由选择，指定一个路由器IP地址列表，数据报发送过程中必须经过所有的路由器。</li>
<li>严格源路由选择，和松散源路由选择类似，不过数据报只能经过被指定的路由器。</li>
</ol>
<p>当IP数据报的长度超过帧的MTU时，将被分片传输。分片可以发送在发送端，也可以发生在中转路由器上，而且在传输过程中可能被多次分片，但只有在最终的目的机器上，这些分片才会被内核中IP模块重新组装。<br>IP头部中的数据报标识、标志和片偏移三个字段给IP的分片和组装提供了足够的信息，一个IP数据报的每个分片都具有自己的IP头部，具有相同的标识符，但具有不同的片偏移。并且除了最后一个分片外，每个分片都将设置MF标志，每个分片的IP头部的总长度字段将被设置为该分片的长度。<br><img src="/Picture/IP头部信息结构体格式.png" alt="IP头部信息结构体格式"></p>
<h2 id="IP模块工作流程"><a href="#IP模块工作流程" class="headerlink" title="IP模块工作流程"></a>IP模块工作流程</h2><p><img src="/Picture/IP模块工作流程.png" alt><br>IP输出队列中存放的是所有等待发送的IP数据报，其中除了需要转发的IP数据报外，还包括本机上层数据（ICMP报文、TCP报文段和UDP报文段）的IP数据报。<br>从IP输入队列中取出一个IP数据报：</p>
<ol>
<li>对该IP数据报的头部做CRC校验，确认无误后分析其头部的具体信息。</li>
<li>如果该IP数据报的头部设置了源站选路选项（松散源路由选择或严格源路由选择），则IP模块调用数据报转发子模块来处理该数据报。</li>
<li>如果该IP数据报的头部中目标IP地址是本机的某个IP地址或者广播地址，即该数据报是发送给本机的，则IP模块根据数据报头部的协议字段来句町将它分派给那个上层应用（分用）。否则该数据报不是发送给本机的，将其交给转发子模块来处理。</li>
<li>数据报转发子模块将首先检测系统是否允许转发，如果不允许，IP模块就丢弃该数据报。如果允许，数据报转发子模块就对该数据报执行一些操作，然后将其交给IP数据报输出子模块。</li>
</ol>
<p><strong>IP数据报应该发送至下一跳路由（或者目标机器），以及经过哪个网卡来发送，就是IP路由过程</strong>。<br><strong>IP模块实现数据报路由的核心数据结构是路由表</strong>，这个表按照数据报的目标IP分类，同一类型的IP数据报就被发往相同的下一跳路由器（或目标机器）。<br>虚线箭头显示路由表更新的过程，这一过程是指通过路由协议或者route命令调整路由表，使之更适应最新的网络拓扑结构，成为IP路由测策略。<br><img src="/Picture/路由表.png" alt><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[CaseZheng@localhost Picture]$ route</span><br><span class="line">Kernel IP routing table</span><br><span class="line">Destination     Gateway         Genmask         Flags Metric Ref    Use Iface</span><br><span class="line">default         gateway         0.0.0.0         UG    100    0        0 enp2s0</span><br><span class="line">192.168.0.0     0.0.0.0         255.255.255.0   U     100    0        0 enp2s0</span><br><span class="line">192.168.122.0   0.0.0.0         255.255.255.0   U     0      0        0 virbr0</span><br></pre></td></tr></table></figure></p>
<p>IP路由机制：</p>
<ol>
<li>查找路由表中和数据报中的目的IP地址完全匹配的主机IP地址，如果找到，就是用该路由项，没找到则转步骤2。</li>
<li>查找路由表中和数据报中目标IP地址具有相同网路ID的网络IP地址。如果找到，就是用该路由项，没找到则转步骤3。</li>
<li>选择默认路由，通常表示网关。</li>
</ol>
<p>路由器更新：<br>路由器必须能够更新，以反映网络连接的变化，这样IP模块才能准确、高效地转发数据报。</p>
<ol>
<li>通过route命令或者其他工具手动修改路由表，是静态的路由更新方式。</li>
<li>对大型路由器，通过BGP（边际网关协议）、RIP（路由信息协议）、OSFP等协议来发现路径，并更新自己的路由表。这种方式是动态的、自动的。</li>
<li>ICMP重定向报文。</li>
</ol>
<p>IP转发：</p>
<ol>
<li>检测数据报头部的TTL值，如果TTL值已经为0,则丢弃该数据报。</li>
<li>查看数据报头部的严格源路由选择选项，如果该选项被设置，则检测数据报的目标IP地址是否是本机的某个IP地址，如果不是，则发送一个ICMP源站路由失败报文给发送端。</li>
<li>如果有必要，则给源端发送一个ICMP重定向报文，告诉它一个更合理的下一跳路由器。</li>
<li>将TTL值减1。</li>
<li>处理IP头部选项。</li>
<li>如果有必要，则执行IP分片。</li>
</ol>
<p>一般来说，主机只接收ICMP重定向报文，路由器只能发送ICMP重定向报文。<br>ICMP重定向报文的类型值为5，代码字段有4个可选值，用来区分不同的重定向类型。<br>主机重定向代码值为1。<br>更新路由表通常是更新路由表缓存，而不是直接更改路由表。<br><img src="/Picture/ICMP重定向报文.png" alt></p>
<h2 id="TCP协议"><a href="#TCP协议" class="headerlink" title="TCP协议"></a>TCP协议</h2><p><strong>TCP服务：面向连接、字节流和可靠传输</strong>。<br>面向连接：使用TCP通信的双方必须先<strong>建立连接</strong>，然后才可以开始数据的读写。双方必须为该连接分配必要的<strong>内核资源</strong>，以管理连接的状态和连接上的传输。TCP连接是<strong>全双工</strong>的，即双方的数据读写可以通过一个连接进行，完成数据交换后，通信双方必须断开连接以释放系统资源。TCP连接是<strong>一对一</strong>的，所以基于广播和多播的应用程序不能使用TCP连接。而无连接协议UDP协议则非常适合于广播和多播。<br>字节流：发送端执行的写操作次数和接收端执行的读操作次数没有任何数量关系，应用程序对<strong>数据的发送和接受没有边界限制</strong>。<br>可靠连接：</p>
<ol>
<li><strong>发送应答机制</strong>，发送端发送的每个TCP报文段都必须得到接收方的应答，才认为这个TCP报文段传输成功。</li>
<li><strong>超时重传机制</strong>，发送端在发送一个TCP报文后启动定时器，如果定时器时间内未收到应答，将重新发送该报文段。</li>
<li>TCP报文段最终以IP数据报发送，而IP数据报到达接收端可能是<strong>乱序、重复</strong>的，所以TCP协议会对接收到的IP报文<strong>重排、整理</strong>，再交给应用层。</li>
</ol>
<p>由于TCP使用两个端点来标识连接，一个机器上的某个TCP端口可以被多个连接所共享。<br><img src="/Picture/TCP-UDP发送接收.png" alt></p>
<p>TCP头部结构如下图所示<br><img src="/Picture/TCP头部结构.png" alt><br>16位端口号，告知主机该数据报来自哪个（源端口）以及传给哪个上层协议或应用程序（目的端口）的。进行TCP通信时，客户端使用系统自动选择的临时端口号，而服务器则使用知名服务端口号。<br>32位序列号，一次TCP通信（从TCP连接建立到断开）过程中某个传输方向上的字节流的每个字节的编号。<br>32位确认号，对于另一方发送来的TCP报文段的响应，其值是收到的TCP报文段的序号家1。<br>4位头部长度，表示该TCP头部有多少个32bit（4字节）。<br>6位标志位：</p>
<ol>
<li>URG，紧急指针是否有效。</li>
<li>ACK，表示确认号是否有效，携带ACK标志的TCP报文段为确认报文段。</li>
<li>PSH，提示接收端应用程序应该立即从TCP接收缓存区读走数据，为后续数据腾出空间。</li>
<li>RST，要求对方重新建立连接，携带RST标志的TCP报文段位复位报文段。</li>
<li>SYN，要求建立一个连接，携带SYN标志的TCP报文段位同步报文段。</li>
<li>FIN，通知对方本端要关闭了，携带FIN标志的TCP的报文段为结束报文段。</li>
</ol>
<p>16位窗口大小，是TCP流量控制的一个手段，指接收通告窗口，告诉对方本端的TCP接收缓存区还能容纳多少字节的数据，对方据此控制发送数据的速度。<br>16位校验和，由发送端填充，接收端对TCP报文段执行CRC算法以校验TCP报文段在传输过程中是否损坏，注意：检验<strong>包括头部和数据部分</strong>。是TCP可靠传输的一个保障。<br>16位紧急指针，一个正的偏移量，它和序号字段的值相加表示最后一个紧急数据的下一个字节的序号。该字段，实际是紧急指针相对当前序号的偏移，紧急偏移。TCP的紧急指针的发送端向接收端发送紧急数据的方法。<br>紧急指针指出紧急数据在报文段中的结束位置。</p>
<p><img src="/Picture/TCP头部选项的一般结构.png" alt><br>TCP头部的最后一个字段选项是可变长的可选信息，最多包含40个字节。<br>kind说明选项类型，常见的TCP选项有7种。<br>length说明该选项的长度。<br>info是选项的具体信息。<br><img src="/Picture/7种TCP选项.png" alt><br>kind=0,选项表结束选项。<br>kind=1,空操作选项，没有特殊含义，一般用于将TCP选项的长度填充为4字节的整数倍。<br>kind=2,最大报文段长度选项。<br>kind=3,窗口扩大引子选项。<br>kind=4,选择性确认（SACK）选项。<br>kind=5,SACK实际工作的选项。<br>kind=8,时间戳选项。</p>
<p>TCP报文段伪首部，用于TCP校验和计算。<br><img src="/Picture/TCP报文段伪首部.png" alt><br>TCP确认信息指出了接收方期望收到的下一个报文组的序号。<br><strong>拥塞窗口</strong>:拥塞窗口发送方使用,用来控制发送速率,避免发的过多.<br><strong>慢开始</strong>：在启动新连接的传输或者在拥塞之后增加通信量时，仅以一个报文段作为拥塞窗口的初始值，而每收到一个确认后，将拥塞窗口大小加1,使用慢开始算法后，每经过一个往返时间RTT，拥塞窗口的值就加倍。<br><strong>拥塞避免算法</strong>：让拥塞窗口缓慢增加，每经过一个往返时间RTT就把发送窗口的拥塞窗口加1,而不是加倍。<br><strong>慢开始门限</strong>：</p>
<ol>
<li>拥塞窗口小于慢开始门限，使用慢开始算法。</li>
<li>拥塞窗口大于慢开始门限，使用拥塞避免算法。</li>
<li>拥塞窗口等于慢开始门限，即可使用慢开始算法，也可使用拥塞避免算法。<br><strong>滑动窗口</strong>:控制接收和同步数据,通知接收方目前接收的数据范围,用于流量控制,接收端使用.<br><strong>快重传</strong>：接收方每收到一个失序的报文段就立即发出重复确认，而不是等待自己发送数据时才进行捎带确认。当发送方一次收到3个重复确认就应立即重传对方尚未收到的报文段。<br><strong>快恢复</strong>:当发送方连续收到三个重复确认时，就执行“乘法减小算法”，把快启动门限减半，把拥塞窗口设置为慢开始门限减半后的数值，然后开始执行拥塞避免算法。<br>发送方的发送窗口一定不能超过对方给出的接收窗口值。<strong>发送窗口</strong>的取值为<strong>拥塞窗口和对方给出的接收窗口中较小的那一个</strong>。<br><strong>路由器的尾部丢弃策略</strong>：如果数据报到达时输入队列已被填满，则丢弃该数据报。<br>可能会丢弃来自多个TCP连接的一个数据报，而不是来自一个连接的多个数据报，造成全局性的同步，丢失数据报的多个TCP连接同时进入慢开始状态。<br><strong>路由器的随机丢弃策略（RED）</strong>：当数据报到达时，如果输入队列已满，则丢弃这个数据报，如果输入队列未满，但大小超过了上限阀值，则通过按概率p丢弃数据报来避免同步。<br><strong>糊涂窗口综合症</strong>：发送方应用进程产生数据很慢或者接收端应用程序处理接收缓冲区数据很慢，或者二者皆有；就会导致应用进程间传送的报文很小；极端情况下，有效载荷可能只有1个字节，传输开销有40个字节（20个字节的IP头和20字节的TCP头）这种现象。<br>接收方避免糊涂窗口综合症的策略：通告0窗口后，要等缓冲区可用空间至少达到宗空间的一半或达到最大报文段长度后才发送更新的窗口通告。<br>实现接收方避免糊涂窗口综合症的策略可使用两种手段：</li>
<li>TCP对收到的报文段进行确认，但要等到窗口空间达到启发式策略所指定的限度之后才发出窗口增大的通告。</li>
<li>在窗口大小不足以避免该症的策略所指定的限度时，则延迟发送确认。TCP标准推荐延迟发送确认。<ol>
<li>延迟确认技术优点：降低通信量并提高吞吐量</li>
<li>延迟确认技术缺点：当接收方的确认延迟太大时，发送方会进行报文段的重传（浪费网络宽带，降低了吞吐量，加重了收发双方的计算负载）。推迟确认造成了估算值的混乱并增大了重传时间。TCP实现确认推迟时间最多推迟500ms，TCP标准推荐接收方按照至少每隔一个报文段使用正常的方式对报文段进行确认。<br>发送方避免糊涂窗口综合症的策略：在一个连接上已经传输的数据还未收到确认的情况下，发送方的应用程序又生成了后续数据，并照常将数据送到输出缓冲区中，但这时并不发送后续报文段，而是等数据足以填满一个达最大长度的报文段之后再把缓冲区的数据发送出去，该策略适用于任何情况，包括推操作在内。<br>现行的TCP要求收发双方实现避免糊涂窗口综合症的启发式策略。<strong>接收方要避免小窗口通告，而接收方要使用自适应机制来推迟传送，以便将数据组块形成较长的大报文段</strong>。</li>
</ol>
</li>
</ol>
<h2 id="TCP网络连接"><a href="#TCP网络连接" class="headerlink" title="TCP网络连接"></a>TCP网络连接</h2><p>TCP通信双方建立TCP连接的一般过程。如下图：<br><img src="/Picture/TCP三次握手四次挥手.png" alt></p>
<p>TCP通信双方的各种状态变化如下图所示：<br><img src="/Picture/TCP状态转移过程.png" alt></p>
<h1 id="DNS协议"><a href="#DNS协议" class="headerlink" title="DNS协议"></a>DNS协议</h1><p>DNS是一套分布式的域名服务系统，每个DNS服务器上都存放着大量的机器名和IP地址的映射，并且时动态更新的。众多网络客户端程序使用DNS协议来向服务器查询目标主机的IP地址。<br>DNS报文格式如下：<br><img src="/Picture/DNS查询和应答报文.png" alt><br>16位标识：用来标记一对DNS查询和应答，以此区分一个DNS应答是哪个DNS查询的回应。<br>16位标志：用来协商具体的通信方式和反馈通信状态<br><img src="/Picture/DNS报文头部的标志字段.png" alt><br>16位问题个数、16位应答资源记录个数、16位授权资源记录数目和16位额外的资源记录数目分别指出DNS报文的最后四个字段的资源记录数目。<br>对查询报文，一般包含一个查询问题，而应答资源记录数、授权资源记录数和额外资源记录数则为0。<br>对应答报文，应答资源记录数则至少为1,而授权资源记录数和额外资源记录数可为0或非0。<br><img src="/Picture/DNS查询问题格式和资源记录格式.png" alt></p>
<h1 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h1><p><img src="/Picture/HTTP.png" alt></p>
<h1 id="HTTP协议-1"><a href="#HTTP协议-1" class="headerlink" title="HTTP协议"></a>HTTP协议</h1><p>HTTPS是以安全为目标的HTTP通道,是HTTP的安全版本,即HTTP+SSL层,HTTPS的安全基础是SSL.<br>HTTPS协议的主要作用:</p>
<ol>
<li>建立一个信息安全通道,确保数据传输安全</li>
<li>确保网站真实性</li>
</ol>
<p>HTTP以明文方式发送内容,不提供任何方式的数据加密</p>
<h2 id="HTTP和HTTPS区别"><a href="#HTTP和HTTPS区别" class="headerlink" title="HTTP和HTTPS区别"></a>HTTP和HTTPS区别</h2><ol>
<li>HTTP是明文传输,HTTPS具有安全性的SSL加密传输协议</li>
<li>HTTPS需要CA申请证书,免费证书少,需要一定费用,HTTP则不需要</li>
<li>HTTP和HTTPS使用完全不同的连接方式,HTTP默认80端口,HTTPS默认443端口</li>
<li>HTTP连接无状态,HTTPS协议由HTTP+SSL协议构建,可进行加密传输、身份认证的网络协议,安全性高于HTTP</li>
</ol>
<h2 id="HTTPS优缺点"><a href="#HTTPS优缺点" class="headerlink" title="HTTPS优缺点"></a>HTTPS优缺点</h2><ol>
<li>优点:<ol>
<li>使用HTTPS协议认证用户的服务器,确保数据发送到正确的客户机和服务器</li>
<li>HTTPS有SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议,比HTTP协议安全,可防止数据在传输过程中不被窃取、改变,确保数据的安全和完整.</li>
</ol>
</li>
<li>缺点:<ol>
<li>HTTPS握手阶段耗时多</li>
<li>SSL证书需要钱</li>
<li>HTTPS的协议加密范围有限,</li>
</ol>
</li>
</ol>
<h1 id="面试问题"><a href="#面试问题" class="headerlink" title="面试问题"></a>面试问题</h1><h2 id="TCP三次握手-客户端发送的最后确认的ACK丢失-服务端会怎么样-服务器在没有收到第二个ACK时-客户端发送数据-被服务端接收到-服务端怎么处理-客户端在回复ACK的同时携带数据服务器会怎么处理"><a href="#TCP三次握手-客户端发送的最后确认的ACK丢失-服务端会怎么样-服务器在没有收到第二个ACK时-客户端发送数据-被服务端接收到-服务端怎么处理-客户端在回复ACK的同时携带数据服务器会怎么处理" class="headerlink" title="TCP三次握手,客户端发送的最后确认的ACK丢失,服务端会怎么样? 服务器在没有收到第二个ACK时,客户端发送数据,被服务端接收到,服务端怎么处理? 客户端在回复ACK的同时携带数据服务器会怎么处理?"></a>TCP三次握手,客户端发送的最后确认的ACK丢失,服务端会怎么样? 服务器在没有收到第二个ACK时,客户端发送数据,被服务端接收到,服务端怎么处理? 客户端在回复ACK的同时携带数据服务器会怎么处理?</h2><ol>
<li>TCP三次握手,如果第2个ACK丢失,此时服务端状态为SYN_RECV,等段时间后会触发超时重传,依次等待时间为3s,6s,12s,24s,48s,之后重发SYN+ACK包(服务端重发SYN+ACK包的次数可通过<code>/proc/sys/net/ipv4/tcp_synack_retries</code>修改,默认为5次),让客户端重发ACK.如果重发指定次数的SYN+ACK后仍然未收到ACK应答,过一段时间,Server将自动关闭这个连接.</li>
<li>虽然第二个ACK丢失,但客户端在发出ACK后即确认连接建立,此时发送数据到服务端,服务端将发送RST,让客户端断开这个异常连接.</li>
<li>客户端在第二个ACK携带数据,服务端会正常建立连接,并处理数据</li>
</ol>
<h2 id="主动关闭TCP连接的一方进入TIME-WAIT状态-还是被动关闭的一方进入-TIME-WAIT状态有何特殊之处-为什么"><a href="#主动关闭TCP连接的一方进入TIME-WAIT状态-还是被动关闭的一方进入-TIME-WAIT状态有何特殊之处-为什么" class="headerlink" title="主动关闭TCP连接的一方进入TIME_WAIT状态,还是被动关闭的一方进入?TIME_WAIT状态有何特殊之处,为什么?"></a>主动关闭TCP连接的一方进入TIME_WAIT状态,还是被动关闭的一方进入?TIME_WAIT状态有何特殊之处,为什么?</h2><ol>
<li>主动关闭的一方进入TIME_WAIT状态</li>
<li>TIME_WAIT状态需要等待2MSL(TCP报文段最大生存时间),才会完全关闭<ol>
<li>可靠地终止TCP连接,当被动关闭的一方发出FIN,在等待一段时间后未收到ACK,此时会重发FIN,令主动关闭的一方重发ACK.</li>
<li>保证来迟的TCP报文段有足够的时间被识别并丢弃</li>
</ol>
</li>
</ol>
<h2 id="关闭TCP连接时-如果通信双方同时发出了FIN会怎么样"><a href="#关闭TCP连接时-如果通信双方同时发出了FIN会怎么样" class="headerlink" title="关闭TCP连接时,如果通信双方同时发出了FIN会怎么样?"></a>关闭TCP连接时,如果通信双方同时发出了FIN会怎么样?</h2><ul>
<li>同时发出FIN则都先进入FIN_WAIT_1状态,在收到对方的FIN后进入CLOSING状态,并发出自己的ACK,等收到对方的ACK后,再进入TIME_WAIT状态</li>
</ul>
<h2 id="被动关闭一方在LAST-ACK收不到ACK如何关闭"><a href="#被动关闭一方在LAST-ACK收不到ACK如何关闭" class="headerlink" title="被动关闭一方在LAST_ACK收不到ACK如何关闭?"></a>被动关闭一方在LAST_ACK收不到ACK如何关闭?</h2><p>如果超时未收到ACK则会重发FIN,此时:</p>
<ol>
<li>主动关闭一方仍处于TIME_WAIT状态,则会发送ACK,被动关闭方收到ACK则顺利从LAST_ACK进入CLOSED.</li>
<li>主动断开的一方经过2MSL已经进入了CLOSED状态,此时会返回RST给被动关闭方,被断开方收到后从LAST_ACK进入CLOSED.</li>
</ol>
<h2 id="四次挥手可能变成三次挥手吗"><a href="#四次挥手可能变成三次挥手吗" class="headerlink" title="四次挥手可能变成三次挥手吗?"></a>四次挥手可能变成三次挥手吗?</h2><ul>
<li>当被动关闭方在收到FIN后,回复ACK的时候,可能由于TCP延迟确认,延迟发送这个ACK,此时被动关闭一方也关闭了连接,被动关闭一方将同时发送FIN和ACK给主动关闭一方,被动关闭方由CLOSE_WAIT状态直接到LAST_ACK状态,而主动关闭一方由FIN_WAIT_1状态直接进入TIME_WAIT状态.此时TCP四次挥手,变为三次挥手</li>
</ul>
<h2 id="四次挥手-被动关闭一方何时发送FIN"><a href="#四次挥手-被动关闭一方何时发送FIN" class="headerlink" title="四次挥手,被动关闭一方何时发送FIN?"></a>四次挥手,被动关闭一方何时发送FIN?</h2><ul>
<li>被动关闭一方收到FIN并回复ACK后不会理解发送FIN,需要等待应用层关闭连接后才会发送FIN</li>
</ul>
<h2 id="为什么是三次握手-四次挥手"><a href="#为什么是三次握手-四次挥手" class="headerlink" title="为什么是三次握手,四次挥手?"></a>为什么是三次握手,四次挥手?</h2><ol>
<li><strong>三次握手,为了防止已经失效的连接请求报文段突然又传到服务端,因而产生错误.</strong> 例如:客户端发送一个连接请求给服务端,这个请求并没有丢失,但由于未知原因在某个网络节点,导致延迟到连接释放的某个时间点到达服务端,这是一个本已失效的报文段,但服务端再收到报文后,会误以为A再次发出了一个新的连接请求,服务端向客户端发送确认报文,确认连接成功,但客户端并没有发出建立连接的请求,服务端等不到客户端的消息,也不会结束连接,白白浪费服务器资源</li>
<li><strong>四次挥手是因为TCP连接是全双工的</strong>,允许同时通信的双方同时进行数据的收发,也运行收发的两个方向的连接被独立关闭,避免客户端数据发送完毕,向服务端发送FIN关闭连接,而服务端还有发送到客户端的数据没有发送完毕的情况.所以关闭TCP连接需要四次,每次关闭一个方向上的连接需要FIN和ACK两次.</li>
</ol>
<h2 id="什么是半打开、半关闭、半连接"><a href="#什么是半打开、半关闭、半连接" class="headerlink" title="什么是半打开、半关闭、半连接?"></a>什么是半打开、半关闭、半连接?</h2><ol>
<li>半打开,一方已经关闭或者异常终止连接,而另一方却不知道,这样的连接称为半打开</li>
<li>半关闭,TCP是全双工的,其在关闭写后,仍然可以读取对方发送的数据称为半关闭</li>
<li>半连接,客户端向服务端发起TCP连接发送SYN,服务端正常回复SYN和ACK,但客户端未回复ACK</li>
</ol>
<h2 id="close和shutdown的区别"><a href="#close和shutdown的区别" class="headerlink" title="close和shutdown的区别"></a>close和shutdown的区别</h2><ul>
<li>单进程、单线程、多线程在使用close时行为是一致的,都会真正的关闭连接,而多进程下调用close函数只是对其引用计数减一,只有当引用计数为0时才会真正的关闭连接,如果多进程共享同一个socket则需要都调用close才会真正关闭连接</li>
<li>shutdown则和多进程、多线程无关,只要调用shutdown都会去真正的关闭连接.shutdown可以通过标志位选择关闭读(对端发送过来的消息丢弃掉)、关闭写(发送FIN)、关闭读写</li>
</ul>
<h2 id="listen函数的第二个参数的含义是什么"><a href="#listen函数的第二个参数的含义是什么" class="headerlink" title="listen函数的第二个参数的含义是什么?"></a>listen函数的第二个参数的含义是什么?</h2><ul>
<li>TCP在三次握手时,服务端维护了两个队列,一个是连接尚未建立完成的队列(SYN队列,即收到SYN,回复SYN+ACK后,尚未收到ACK),一个是连接建立完成的队列(ACCEPT队列,即收到SYN,回复SYN+ACK后,收到ACK),listen函数第二个参数的含义即为连接建立完成的队列的长度,一般设置为5-10,因为服务器处理能力优先,而且维护队列需要消耗资源</li>
</ul>
<h2 id="TCP的定时器有哪些"><a href="#TCP的定时器有哪些" class="headerlink" title="TCP的定时器有哪些?"></a>TCP的定时器有哪些?</h2><ol>
<li>建立连接定时器 TCP建立连接客户端发送第一个SYN后,起一个定时器(默认3s),如果SYN丢失,定时器到后会重发SYN,配置<code>/proc/sys/net/ipv4/tcp_syn_retries</code>查看重传次数,时间倍数递增</li>
<li>重传定时器 TCP发出数据时设定,超时未收到ACK则重传</li>
<li>延迟应答定时器 延迟应答时使用,延迟应答是为了提高网络传输的效率(糊涂窗口综合症)</li>
<li>坚持定时器 专门为对付零窗口通告而设立,发送端收到零窗口通告则启动,发送探测报文段</li>
<li>保活定时器 收到消息则重置保活定时器,如果超时(通常是2小时),则每75s(发送10次)发送一个探测报文段,若收不到响应则终止连接</li>
<li>FIN_WAIT_2定时器 主动断开连接一方发送FIN收到ACK后进入FIN_WAIT_2状态,此时启动该定时器,当对端一直不发送数据,超时后终止连接</li>
<li>TIME_WAIT定时器 2MSL定时器,主动关闭方进入TIME_WAIT状态时启动,定时器设定为1分钟,TCP控制块被删除,端口号可重用</li>
</ol>
<h2 id="大端和小端的区别"><a href="#大端和小端的区别" class="headerlink" title="大端和小端的区别"></a>大端和小端的区别</h2><ul>
<li>大端和小端都是指主机字节序,网络字节序采用大端的方式</li>
<li>小端将低位字节存放在内存的低地址端,高位字节存放在内存的高地址端</li>
<li>大端将低地字节存放在内存的高地址端,高位字节存放在内存的低地址段<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">栈  由高地址向低地址增长 <span class="number">1</span>的<span class="number">16</span>进制为 <span class="number">0x00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">01</span></span><br><span class="line">|----|          高地址</span><br><span class="line">|<span class="number">0x00</span>|</span><br><span class="line">|----|</span><br><span class="line">|<span class="number">0x00</span>|</span><br><span class="line">|----|</span><br><span class="line">|<span class="number">0x00</span>|</span><br><span class="line">|----|</span><br><span class="line">|<span class="number">0x01</span>|&lt;---&amp;x p  低地址</span><br><span class="line">|----|</span><br><span class="line">|    |</span><br><span class="line">|----|</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//方法1</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> x = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> *p = (<span class="keyword">unsigned</span> <span class="keyword">char</span>*)(&amp;x);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; (((<span class="keyword">int</span>)(*p) == <span class="number">1</span>) ? <span class="string">"小端"</span> : <span class="string">"大端"</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方法2</span></span><br><span class="line">    <span class="keyword">union</span> &#123;</span><br><span class="line">        <span class="keyword">unsigned</span> i;</span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">char</span> c;</span><br><span class="line">    &#125;un;</span><br><span class="line">    un.i = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ((un.c == <span class="number">1</span>) ? <span class="string">"小端"</span> : <span class="string">"大端"</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ol>
<li>Linux高性能服务器编程</li>
<li><a href="https://blog.csdn.net/zerooffdate/article/details/79359726" target="_blank" rel="noopener">TCP三次握手的第二个ack丢了会怎样</a></li>
<li><a href="https://yq.aliyun.com/articles/15118/" target="_blank" rel="noopener">TCP连接建立的三次握手过程可以携带数据吗？</a></li>
</ol>
]]></content>
      <categories>
        <category>基础</category>
      </categories>
      <tags>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL 简介与安装</title>
    <url>/2017/10/30/mysql-1/</url>
    <content><![CDATA[<p>mysql的简单介绍</p>
<h1 id="关系型数据库"><a href="#关系型数据库" class="headerlink" title="关系型数据库"></a>关系型数据库</h1><p>数据库是(Database)是按照数据结构来组织、存储和管理数据的仓库。<br>关系型数据库，是建立在关系模型基础上的数据库，借助于集合代数等数学概念和方法来处理数据库中的数据。</p>
<h2 id="RDBMS的特点："><a href="#RDBMS的特点：" class="headerlink" title="RDBMS的特点："></a>RDBMS的特点：</h2><ol>
<li>数据以表格的形式出现</li>
<li>每行为各种记录名称</li>
<li>每列为记录名称所对应的数据域</li>
<li>许多的行和列组成一张表单</li>
<li>若干的表单组成database</li>
</ol>
<h2 id="RDBMS的术语："><a href="#RDBMS的术语：" class="headerlink" title="RDBMS的术语："></a>RDBMS的术语：</h2><ol>
<li>数据库：数据库是一些关联表的集合。</li>
<li>数据表：表是数据的矩阵。</li>
<li>主键：主键是唯一的。一个数据表中只能包含一个主键。</li>
<li>外键：外键用于关联两个表。</li>
<li>复合键：复合键（组合键）将多个列作为一个索引键，一般用于复合索引。</li>
<li>索引：使用索引可快速访问数据库表中的特定信息。索引是对数据库表中一列或多列的值进行排序的一种结构。</li>
<li>参照完整性: 参照的完整性要求关系中不允许引用不存在的实体。与实体完整性是关系模型必须满足的完整性约束条件，目的是保证数据的一致性。</li>
</ol>
<h2 id="MySQL数据库"><a href="#MySQL数据库" class="headerlink" title="MySQL数据库"></a>MySQL数据库</h2><p>MySQL是一个关系型数据库管理系统(RDBMS, Relational Database Management System)，由瑞典MySQL AB 公司开发，目前属于 Oracle 旗下产品。<br>MySQL是最流行的RDBMS, 关系数据库将数据保存在不同的表中，而不是将所有数据放在一个大仓库内，这样就增加了速度并提高了灵活性。<br>MySQL所使用的 SQL 语言是用于访问数据库的最常用标准化语言。MySQL 软件采用了双授权政策，分为社区版和商业版，由于其体积小、速度快、总体拥有成本低，尤其是开放源码这一特点，一般中小型网站的开发都选择 MySQL 作为网站数据库。</p>
<h2 id="MySQL分支与变种"><a href="#MySQL分支与变种" class="headerlink" title="MySQL分支与变种"></a>MySQL分支与变种</h2><p>主流的三种变种：Percona Server,MariaDB和Drizzle</p>
<ol>
<li>Percona Server<br>Percona Server是个与Mysql向后兼容的替代品，它尽可能的不改变SQL语法，客户端/服务器协议和磁盘上的文件格式。任何运行在Mysql上的都可以运行在Percona Server上而不需要修改。切换到Percona Server只需关掉Mysql和启动Percona Server，不需要导出和重新导入数据。Percona Server包括Percona XtraDB引擎，即改进版本的InnoDB。Percona Server的许多改进特性在随后的Mysql版本中才会有体现，也就是说Percona Server成了许多新特性的“抢鲜”版。</li>
<li>MariaDB<br>从 MySQL 转向 MariaDB的代表厂家：谷歌（2013年9月）、RedHat（2013年6月）、维基百科（2013年4月）<br>MySQL 在 2008 年被Sun以10亿美金所收购，MySQL 创始人 Michael Widenius 则不满 Sun 开发团队脚步过慢，愤而离职成立开源数据库联盟，另外从现有 MySQL 程序代码中，开发出另一个延伸分支版本，也就是名为玛莉亚数据库的企业级开源数据。库玛莉亚数据库如同 MySQL 的影子版本，玛莉亚数据库是 MySQL 的一个分支版本（branch），而不是衍生版本（folk），提供的功能可和 MySQL 完全兼容。</li>
<li>Drizzle<br>Drizzle是真正的Mysql分支，而非只是个变种或增强版本。它并不与Mysql兼容，尽管区分上还并不是大相径庭。在许多场合并不能简单地将Mysql后端替换为Drizzle，因为它对Mysql的语法修改太大了。</li>
</ol>
<h1 id="MySQL的安装"><a href="#MySQL的安装" class="headerlink" title="MySQL的安装"></a>MySQL的安装</h1><p>最直接的方式，使用yum安装，这里使用MariaDB，操作系统是Fedora 26。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo yum install mariadb mariadb-server mariadb-devel mariadb-libs mariadb-common mariadb-config -y</span><br></pre></td></tr></table></figure></p>
<h1 id="MySQL的启动"><a href="#MySQL的启动" class="headerlink" title="MySQL的启动"></a>MySQL的启动</h1><p>将mariadb设置为开机自启动<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl enable mariadb.service</span><br><span class="line">systemctl start mariadb.service</span><br><span class="line">systemctl status mariadb.service</span><br></pre></td></tr></table></figure></p>
<p>检查服务器版本<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[CaseZheng@localhost ~]$ mysql --version</span><br><span class="line">mysql  Ver 15.1 Distrib 10.1.26-MariaDB, for Linux (x86_64) using readline 5.1</span><br></pre></td></tr></table></figure></p>
<h1 id="MySQL的连接"><a href="#MySQL的连接" class="headerlink" title="MySQL的连接"></a>MySQL的连接</h1><p>MySQL刚刚安装密码为空，可直接连接。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[CaseZheng@localhost ~]$ mysql</span><br><span class="line">Welcome to the MariaDB monitor.  Commands end with ; or \g.</span><br><span class="line">Your MariaDB connection id is 5</span><br><span class="line">Server version: 10.1.26-MariaDB MariaDB Server</span><br><span class="line">Copyright (c) 2000, 2017, Oracle, MariaDB Corporation Ab and others.</span><br><span class="line">Type &apos;help;&apos; or &apos;\h&apos; for help. Type &apos;\c&apos; to clear the current input statement.</span><br><span class="line">MariaDB [(none)]&gt;</span><br></pre></td></tr></table></figure></p>
<p>可以使用mysqladmin创建root用户的密码，记得需要在root用户下<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysqladmin -uroot password 123456</span><br></pre></td></tr></table></figure></p>
<h1 id="MySQL安装后的样例配置文件在-usr-share-mysql下"><a href="#MySQL安装后的样例配置文件在-usr-share-mysql下" class="headerlink" title="MySQL安装后的样例配置文件在/usr/share/mysql下"></a>MySQL安装后的样例配置文件在/usr/share/mysql下</h1><p>安装mariadb的则在/usr/share/mariadb该目录下<br>将/etc/my.cnf备份，再将选择的样例配置文件，复制到/etc/目录下，改名为my.cnf。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[CaseZheng@localhost mariadb]$ pwd</span><br><span class="line">/usr/share/mariadb</span><br><span class="line">[CaseZheng@localhost mariadb]$ ls *.cnf</span><br><span class="line">my-huge.cnf  my-innodb-heavy-4G.cnf  my-large.cnf  my-medium.cnf  my-small.cnf  wsrep.cnf</span><br></pre></td></tr></table></figure></p>
<h1 id="MySQl基本操作"><a href="#MySQl基本操作" class="headerlink" title="MySQl基本操作"></a>MySQl基本操作</h1><h2 id="show-databases"><a href="#show-databases" class="headerlink" title="show databases;"></a>show databases;</h2><p>查看所有的DB名称<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">MariaDB [mysql]&gt; show databases;</span><br><span class="line">+<span class="comment">--------------------+</span></span><br><span class="line">| Database           |</span><br><span class="line">+<span class="comment">--------------------+</span></span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| test               |</span><br><span class="line">+<span class="comment">--------------------+</span></span><br><span class="line">4 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure></p>
<h2 id="use-数据库名"><a href="#use-数据库名" class="headerlink" title="use 数据库名;"></a>use 数据库名;</h2><p>切换数据库<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">MariaDB [mysql]&gt; use mysql</span><br><span class="line">Database changed</span><br></pre></td></tr></table></figure></p>
<h2 id="show-tables"><a href="#show-tables" class="headerlink" title="show tables;"></a>show tables;</h2><p>查看当前数据库的所有表<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">MariaDB [mysql]&gt; show tables;</span><br><span class="line">+<span class="comment">---------------------------+</span></span><br><span class="line">| Tables_in_mysql           |</span><br><span class="line">+<span class="comment">---------------------------+</span></span><br><span class="line">| column_stats              |</span><br><span class="line">| time_zone_leap_second     |</span><br><span class="line">| time_zone_name            |</span><br><span class="line">| time_zone_transition      |</span><br><span class="line">| time_zone_transition_type |</span><br><span class="line">| user                      |</span><br><span class="line">+<span class="comment">---------------------------+</span></span><br></pre></td></tr></table></figure></p>
<h2 id="show-columns-from-数据表"><a href="#show-columns-from-数据表" class="headerlink" title="show columns from 数据表;"></a>show columns from 数据表;</h2><p>显示数据表的属性，属性类型，主键信息 ，是否为 NULL，默认值等其他信息。<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">MariaDB [mysql]&gt; show columns from host;</span><br><span class="line">+<span class="comment">-----------------------+---------------+------+-----+---------+-------+</span></span><br><span class="line">| Field                 | Type          | Null | Key | Default | Extra |</span><br><span class="line">+<span class="comment">-----------------------+---------------+------+-----+---------+-------+</span></span><br><span class="line">| Host                  | char(60)      | NO   | PRI |         |       |</span><br><span class="line">| Db                    | char(64)      | NO   | PRI |         |       |</span><br><span class="line">| Select_priv           | enum('N','Y') | NO   |     | N       |       |</span><br><span class="line">| Insert_priv           | enum('N','Y') | NO   |     | N       |       |</span><br><span class="line">| Update_priv           | enum('N','Y') | NO   |     | N       |       |</span><br><span class="line">| Delete_priv           | enum('N','Y') | NO   |     | N       |       |</span><br><span class="line">| Create_priv           | enum('N','Y') | NO   |     | N       |       |</span><br><span class="line">| Drop_priv             | enum('N','Y') | NO   |     | N       |       |</span><br><span class="line">| Grant_priv            | enum('N','Y') | NO   |     | N       |       |</span><br><span class="line">| References_priv       | enum('N','Y') | NO   |     | N       |       |</span><br><span class="line">| Index_priv            | enum('N','Y') | NO   |     | N       |       |</span><br><span class="line">| Alter_priv            | enum('N','Y') | NO   |     | N       |       |</span><br><span class="line">| Create_tmp_table_priv | enum('N','Y') | NO   |     | N       |       |</span><br><span class="line">| Lock_tables_priv      | enum('N','Y') | NO   |     | N       |       |</span><br><span class="line">| Create_view_priv      | enum('N','Y') | NO   |     | N       |       |</span><br><span class="line">| Show_view_priv        | enum('N','Y') | NO   |     | N       |       |</span><br><span class="line">| Create_routine_priv   | enum('N','Y') | NO   |     | N       |       |</span><br><span class="line">| Alter_routine_priv    | enum('N','Y') | NO   |     | N       |       |</span><br><span class="line">| Execute_priv          | enum('N','Y') | NO   |     | N       |       |</span><br><span class="line">| Trigger_priv          | enum('N','Y') | NO   |     | N       |       |</span><br><span class="line">+<span class="comment">-----------------------+---------------+------+-----+---------+-------+</span></span><br><span class="line">20 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure></p>
<h2 id="desc-数据表"><a href="#desc-数据表" class="headerlink" title="desc 数据表;"></a>desc 数据表;</h2><p>显示数据表的属性，属性类型，主键信息 ，是否为 NULL，默认值等其他信息。与show columns from 数据表作用相同。<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">MariaDB [mysql]&gt; desc host;</span><br><span class="line">+<span class="comment">-----------------------+---------------+------+-----+---------+-------+</span></span><br><span class="line">| Field                 | Type          | Null | Key | Default | Extra |</span><br><span class="line">+<span class="comment">-----------------------+---------------+------+-----+---------+-------+</span></span><br><span class="line">| Host                  | char(60)      | NO   | PRI |         |       |</span><br><span class="line">| Db                    | char(64)      | NO   | PRI |         |       |</span><br><span class="line">| Select_priv           | enum('N','Y') | NO   |     | N       |       |</span><br><span class="line">| Insert_priv           | enum('N','Y') | NO   |     | N       |       |</span><br><span class="line">| Update_priv           | enum('N','Y') | NO   |     | N       |       |</span><br><span class="line">| Delete_priv           | enum('N','Y') | NO   |     | N       |       |</span><br><span class="line">| Create_priv           | enum('N','Y') | NO   |     | N       |       |</span><br><span class="line">| Drop_priv             | enum('N','Y') | NO   |     | N       |       |</span><br><span class="line">| Grant_priv            | enum('N','Y') | NO   |     | N       |       |</span><br><span class="line">| References_priv       | enum('N','Y') | NO   |     | N       |       |</span><br><span class="line">| Index_priv            | enum('N','Y') | NO   |     | N       |       |</span><br><span class="line">| Alter_priv            | enum('N','Y') | NO   |     | N       |       |</span><br><span class="line">| Create_tmp_table_priv | enum('N','Y') | NO   |     | N       |       |</span><br><span class="line">| Lock_tables_priv      | enum('N','Y') | NO   |     | N       |       |</span><br><span class="line">| Create_view_priv      | enum('N','Y') | NO   |     | N       |       |</span><br><span class="line">| Show_view_priv        | enum('N','Y') | NO   |     | N       |       |</span><br><span class="line">| Create_routine_priv   | enum('N','Y') | NO   |     | N       |       |</span><br><span class="line">| Alter_routine_priv    | enum('N','Y') | NO   |     | N       |       |</span><br><span class="line">| Execute_priv          | enum('N','Y') | NO   |     | N       |       |</span><br><span class="line">| Trigger_priv          | enum('N','Y') | NO   |     | N       |       |</span><br><span class="line">+<span class="comment">-----------------------+---------------+------+-----+---------+-------+</span></span><br><span class="line">20 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure></p>
<h2 id="show-index-from-数据表"><a href="#show-index-from-数据表" class="headerlink" title="show index from 数据表;"></a>show index from 数据表;</h2><p>显示数据表的详细索引信息，包括PRIMARY KEY（主键）。<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">MariaDB [mysql]&gt; show index from user;</span><br><span class="line">+<span class="comment">-------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+</span></span><br><span class="line">| Table | Non_unique | Key_name | Seq_in_index | Column_name | Collation | Cardinality | Sub_part | Packed | Null | Index_type | <span class="keyword">Comment</span> | Index_comment |</span><br><span class="line">+<span class="comment">-------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+</span></span><br><span class="line">| <span class="keyword">user</span>  |          <span class="number">0</span> | PRIMARY  |            <span class="number">1</span> | Host        | A         |        <span class="literal">NULL</span> |     <span class="literal">NULL</span> | <span class="literal">NULL</span>   |      | BTREE      |         |               |</span><br><span class="line">| <span class="keyword">user</span>  |          <span class="number">0</span> | PRIMARY  |            <span class="number">2</span> | <span class="keyword">User</span>        | A         |           <span class="number">6</span> |     <span class="literal">NULL</span> | <span class="literal">NULL</span>   |      | BTREE      |         |               |</span><br><span class="line">+<span class="comment">-------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure></p>
<h2 id="show-table-status-from-db-name-like-‘pattern’-G"><a href="#show-table-status-from-db-name-like-‘pattern’-G" class="headerlink" title="show table status from db_name [like ‘pattern’]\G"></a>show table status from db_name [like ‘pattern’]\G</h2><p>输出Mysql数据库管理系统的性能及统计信息  命令后加\G则不需要再加;   且查询结果会按列打印<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">输出数据库mysql所有表的信息</span><br><span class="line">MariaDB [mysql]&gt; show table status from mysql\G</span><br><span class="line"></span><br><span class="line">数据数据库mysql以u开头的表信息</span><br><span class="line">MariaDB [mysql]&gt; show table status from mysql like 'u%'\G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">           Name: user</span><br><span class="line">         Engine: MyISAM</span><br><span class="line">        Version: 10</span><br><span class="line">     Row_format: Dynamic</span><br><span class="line">           Rows: 6</span><br><span class="line"> Avg_row_length: 74</span><br><span class="line">    Data_length: 444</span><br><span class="line">Max_data_length: 281474976710655</span><br><span class="line">   Index_length: 4096</span><br><span class="line">      Data_free: 0</span><br><span class="line"> Auto_increment: NULL</span><br><span class="line">    Create_time: 2017-08-27 18:47:47</span><br><span class="line">    Update_time: 2017-10-30 23:16:25</span><br><span class="line">     Check_time: NULL</span><br><span class="line">      Collation: utf8_bin</span><br><span class="line">       <span class="keyword">Checksum</span>: <span class="literal">NULL</span></span><br><span class="line"> Create_options:</span><br><span class="line">        <span class="keyword">Comment</span>: <span class="keyword">Users</span> <span class="keyword">and</span> <span class="keyword">global</span> <span class="keyword">privileges</span></span><br><span class="line"><span class="number">1</span> <span class="keyword">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure></p>
<h2 id="show-create-table-table-name-G"><a href="#show-create-table-table-name-G" class="headerlink" title="show create table table_name\G"></a>show create table table_name\G</h2><p>打印创建table_name表的SQL语句<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">MariaDB [mysql]&gt; show create table host\G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">       Table: host</span><br><span class="line"><span class="keyword">Create</span> <span class="keyword">Table</span>: <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`host`</span> (</span><br><span class="line">  <span class="string">`Host`</span> <span class="built_in">char</span>(<span class="number">60</span>) <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span>,</span><br><span class="line">  <span class="string">`Db`</span> <span class="built_in">char</span>(<span class="number">64</span>) <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span>,</span><br><span class="line">  <span class="string">`Select_priv`</span> enum(<span class="string">'N'</span>,<span class="string">'Y'</span>) <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'N'</span>,</span><br><span class="line">  <span class="string">`Insert_priv`</span> enum(<span class="string">'N'</span>,<span class="string">'Y'</span>) <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'N'</span>,</span><br><span class="line">  <span class="string">`Update_priv`</span> enum(<span class="string">'N'</span>,<span class="string">'Y'</span>) <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'N'</span>,</span><br><span class="line">  <span class="string">`Delete_priv`</span> enum(<span class="string">'N'</span>,<span class="string">'Y'</span>) <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'N'</span>,</span><br><span class="line">  <span class="string">`Create_priv`</span> enum(<span class="string">'N'</span>,<span class="string">'Y'</span>) <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'N'</span>,</span><br><span class="line">  <span class="string">`Drop_priv`</span> enum(<span class="string">'N'</span>,<span class="string">'Y'</span>) <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'N'</span>,</span><br><span class="line">  <span class="string">`Grant_priv`</span> enum(<span class="string">'N'</span>,<span class="string">'Y'</span>) <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'N'</span>,</span><br><span class="line">  <span class="string">`References_priv`</span> enum(<span class="string">'N'</span>,<span class="string">'Y'</span>) <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'N'</span>,</span><br><span class="line">  <span class="string">`Index_priv`</span> enum(<span class="string">'N'</span>,<span class="string">'Y'</span>) <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'N'</span>,</span><br><span class="line">  <span class="string">`Alter_priv`</span> enum(<span class="string">'N'</span>,<span class="string">'Y'</span>) <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'N'</span>,</span><br><span class="line">  <span class="string">`Create_tmp_table_priv`</span> enum(<span class="string">'N'</span>,<span class="string">'Y'</span>) <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'N'</span>,</span><br><span class="line">  <span class="string">`Lock_tables_priv`</span> enum(<span class="string">'N'</span>,<span class="string">'Y'</span>) <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'N'</span>,</span><br><span class="line">  <span class="string">`Create_view_priv`</span> enum(<span class="string">'N'</span>,<span class="string">'Y'</span>) <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'N'</span>,</span><br><span class="line">  <span class="string">`Show_view_priv`</span> enum(<span class="string">'N'</span>,<span class="string">'Y'</span>) <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'N'</span>,</span><br><span class="line">  <span class="string">`Create_routine_priv`</span> enum(<span class="string">'N'</span>,<span class="string">'Y'</span>) <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'N'</span>,</span><br><span class="line">  <span class="string">`Alter_routine_priv`</span> enum(<span class="string">'N'</span>,<span class="string">'Y'</span>) <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'N'</span>,</span><br><span class="line">  <span class="string">`Execute_priv`</span> enum(<span class="string">'N'</span>,<span class="string">'Y'</span>) <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'N'</span>,</span><br><span class="line">  <span class="string">`Trigger_priv`</span> enum(<span class="string">'N'</span>,<span class="string">'Y'</span>) <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'N'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`Host`</span>,<span class="string">`Db`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=MyISAM <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8 <span class="keyword">COLLATE</span>=utf8_bin <span class="keyword">COMMENT</span>=<span class="string">'Host privileges;  Merged with database privileges'</span></span><br><span class="line"><span class="number">1</span> <span class="keyword">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure></p>
<h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><ol>
<li><a href="http://www.runoob.com/mysql/mysql-tutorial.html" target="_blank" rel="noopener">MySQL教程</a></li>
<li><a href="http://www.cnblogs.com/mfyang/p/6735269.html" target="_blank" rel="noopener">MySQL简介</a></li>
</ol>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>linux添加开机启动任务</title>
    <url>/2017/12/31/rc-local/</url>
    <content><![CDATA[<h1 id="linxu添加开启启动任务"><a href="#linxu添加开启启动任务" class="headerlink" title="linxu添加开启启动任务"></a>linxu添加开启启动任务</h1><p>本机为fedora 26</p>
<p>先创建rc.local文件，编辑rc.local<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo touch /etc/rc.d/rc.local</span><br><span class="line">sudo vim /etc/rc.d/rc.local</span><br></pre></td></tr></table></figure></p>
<p>写入执行脚本<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">cd /home/CaseZheng/CaseZhengBlog &amp;&amp; nohup hexo serve &amp;</span><br></pre></td></tr></table></figure></p>
<p>给予执行权限<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo chmod +x /etc/rc.d/rc.local</span><br></pre></td></tr></table></figure></p>
<p>执行下面的命令<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo systemctl enable rc-local.service</span><br></pre></td></tr></table></figure></p>
<p>如果报错，编辑rc-local.service<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo vim /usr/lib/systemd/system/rc-local.service</span><br></pre></td></tr></table></figure></p>
<p>在最后面加入下列内容<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure></p>
<p>再执行命令<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo systemctl enable rc-local.service</span><br></pre></td></tr></table></figure></p>
<p>然后重启<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">reboot</span><br></pre></td></tr></table></figure></p>
<p>使用systemctl查看rc-local.service状态<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[CaseZheng@localhost CaseZhengBlog]$ sudo systemctl status rc-local.service</span><br><span class="line">● rc-local.service - /etc/rc.d/rc.local Compatibility</span><br><span class="line">   Loaded: loaded (/usr/lib/systemd/system/rc-local.service; enabled; vendor preset: disabled)</span><br><span class="line">   Active: active (running) since Sat 2017-12-30 23:45:57 CST; 1h 3min ago</span><br><span class="line">    Tasks: 11 (limit: 4915)</span><br><span class="line">   CGroup: /system.slice/rc-local.service</span><br><span class="line">           ├─852 /bin/bash /etc/rc.d/rc.local start</span><br><span class="line">           └─859 hexo</span><br></pre></td></tr></table></figure></p>
<p>如有错误会有报错信息</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux CRONTAB</title>
    <url>/2017/06/29/crontab/</url>
    <content><![CDATA[<h1 id="Crontab是什么"><a href="#Crontab是什么" class="headerlink" title="Crontab是什么"></a>Crontab是什么</h1><p>Crontab是一个用于设置周期性被执行的任务的工具。<br>被周期性执行的任务：Cron Job<br>周期性执行的任务列表：Cron Table</p>
<h1 id="Crontab的使用"><a href="#Crontab的使用" class="headerlink" title="Crontab的使用"></a>Crontab的使用</h1><p>service crond status 查看crontab的状态<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[CaseZheng@home ~]$ service crond status</span><br><span class="line">Redirecting to /bin/systemctl status  crond.service</span><br><span class="line">   crond.service - Command Scheduler</span><br><span class="line">   Loaded: loaded (/usr/lib/systemd/system/crond.service; enabled; vendor preset: enabled)</span><br><span class="line">   Active: active (running) since 四 2017-06-29 21:26:55 CST; 36min ago</span><br><span class="line"> Main PID: 921 (crond)</span><br><span class="line">    Tasks: 1 (limit: 4915)</span><br><span class="line">   CGroup: /system.slice/crond.service</span><br><span class="line">           └─921 /usr/sbin/crond -n</span><br><span class="line"></span><br><span class="line">6月 29 21:26:55 home systemd[1]: Started Command Scheduler.</span><br><span class="line">6月 29 21:26:55 home crond[921]: (CRON) INFO (Syslog will be used instead of sendmail.)</span><br><span class="line">6月 29 21:26:55 home crond[921]: (CRON) INFO (RANDOM_DELAY will be scaled with factor 81% if used.)</span><br><span class="line">6月 29 21:26:55 home crond[921]: (CRON) INFO (running with inotify support)</span><br><span class="line">6月 29 22:01:01 home CROND[3867]: (root) CMD (run-parts /etc/cron.hourly)</span><br><span class="line">6月 29 22:01:01 home run-parts[3870]: (/etc/cron.hourly) starting 0anacron</span><br><span class="line">6月 29 22:01:01 home anacron[3878]: Anacron started on 2017-06-29</span><br></pre></td></tr></table></figure></p>
<p>service crond 可以产看crontab支持的命令<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[CaseZheng@home ~]$ service crond</span><br><span class="line">The service command supports only basic LSB actions (start, stop, restart, try-restart, reload, force-reload, status). For other actions, please try to use systemctl.</span><br></pre></td></tr></table></figure></p>
<p>service crond start 启动crontab</p>
<p>service crond stop 停止crontab</p>
<p>crontab -e 编辑当前用户的cron table文件</p>
<h1 id="Crontab的基本组成"><a href="#Crontab的基本组成" class="headerlink" title="Crontab的基本组成"></a>Crontab的基本组成</h1><p>配置文件 使用文件方式设定定时任务<br>系统服务 CROND 每分钟从配置文件中刷新定时任务<br>配置工具 crontab用于调整定时任务<br><img src="/Picture/Linux-crontab.jpg" alt="crontab的基本组成"></p>
<h1 id="Crontab的配置文件格式"><a href="#Crontab的配置文件格式" class="headerlink" title="Crontab的配置文件格式"></a>Crontab的配置文件格式</h1><p><img src="/Picture/Linux-crontab-file-config.jpg" alt="Crontab的配置文件格式"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">每晚21：30重启apache</span><br><span class="line">    30 21 * * * service httpd restart</span><br><span class="line"></span><br><span class="line">每月1,10,22日的4：45重启apache  多个时间用逗号分隔</span><br><span class="line">    45 4 1,10,22 * * service httpdd restart</span><br><span class="line"></span><br><span class="line">每月1到10日的4：45重启apache  连续时间用-连接</span><br><span class="line">    45 4 1-10 * * service httpd restart</span><br><span class="line"></span><br><span class="line">每隔两分钟重启apache服务器</span><br><span class="line">    */2 * * * * service httpd restart</span><br><span class="line">    1-59/2 * * * * service httpd restart</span><br><span class="line"></span><br><span class="line">晚上11点到早上7点之间，每隔一小时重启apache</span><br><span class="line">    0 23-7/1 * * * service httpd restart</span><br><span class="line"></span><br><span class="line">每天18：00到23：00之间每隔30分钟重启apache</span><br><span class="line">    0,30 18-23 * * * service httpd restart</span><br><span class="line">    0-59/30 18-23 * * * service httpd restart</span><br></pre></td></tr></table></figure>
<p><img src="/Picture/Linux-crontab-file-config-2.jpg" alt="Crontab的配置文件格式"></p>
<h1 id="Crontab的使用-1"><a href="#Crontab的使用-1" class="headerlink" title="Crontab的使用"></a>Crontab的使用</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">查看crontab的帮助</span><br><span class="line">crontab --help</span><br><span class="line"></span><br><span class="line">crontab -l 查看当前用户的Cron table</span><br><span class="line">crontab -e 编辑当前用户的Cron table</span><br></pre></td></tr></table></figure>
<h1 id="Crontab的配置文件"><a href="#Crontab的配置文件" class="headerlink" title="Crontab的配置文件"></a>Crontab的配置文件</h1><p>全局（系统）配置文件  /etc/crontab<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@home CaseZheng]# cat /etc/crontab</span><br><span class="line">SHELL=/bin/bash</span><br><span class="line">PATH=/sbin:/bin:/usr/sbin:/usr/bin</span><br><span class="line">MAILTO=root</span><br><span class="line"></span><br><span class="line"># For details see man 4 crontabs</span><br><span class="line"></span><br><span class="line"># Example of job definition:</span><br><span class="line"># .---------------- minute (0 - 59)</span><br><span class="line"># |  .------------- hour (0 - 23)</span><br><span class="line"># |  |  .---------- day of month (1 - 31)</span><br><span class="line"># |  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ...</span><br><span class="line"># |  |  |  |  .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat</span><br><span class="line"># |  |  |  |  |</span><br><span class="line"># *  *  *  *  * user-name  command to be executed</span><br><span class="line">*/1 * * * * root echo &quot;First System Crontabs&quot;</span><br></pre></td></tr></table></figure></p>
<p>“First System Crontabs”可以在/var/log/cron中查看</p>
<h1 id="Crontab的日志"><a href="#Crontab的日志" class="headerlink" title="Crontab的日志"></a>Crontab的日志</h1><p>crontab的日志保存在/var/log/cron</p>
<h1 id="Crontab的常见错误"><a href="#Crontab的常见错误" class="headerlink" title="Crontab的常见错误"></a>Crontab的常见错误</h1>]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>博客搭建纪要</title>
    <url>/2018/03/12/hexo-plantuml/</url>
    <content><![CDATA[<h1 id="Hexo博客使用记录"><a href="#Hexo博客使用记录" class="headerlink" title="Hexo博客使用记录"></a>Hexo博客使用记录</h1><h2 id="Hexo安装"><a href="#Hexo安装" class="headerlink" title="Hexo安装"></a>Hexo安装</h2><h3 id="git"><a href="#git" class="headerlink" title="git"></a>git</h3><h3 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h3><ol>
<li><p>linux</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo yum install nodejs</span><br></pre></td></tr></table></figure>
</li>
<li><p>windows<br><a href="https://nodejs.org/en/" target="_blank" rel="noopener">官网下载安装</a></p>
</li>
</ol>
<h3 id="hexo"><a href="#hexo" class="headerlink" title="hexo"></a>hexo</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm i -g hexo</span><br></pre></td></tr></table></figure>
<h2 id="hexo中plantuml"><a href="#hexo中plantuml" class="headerlink" title="hexo中plantuml"></a>hexo中plantuml</h2><h3 id="安装java"><a href="#安装java" class="headerlink" title="安装java"></a>安装java</h3><ol>
<li><p>linux</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo yum install java</span><br><span class="line">sudo yum install java-devel</span><br></pre></td></tr></table></figure>
</li>
<li><p>windows<br><a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html" target="_blank" rel="noopener">下载地址</a><br>Java环境变量配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">变量名：JAVA_HOME</span><br><span class="line">变量值：C:\Program Files (x86)\Java\jdk1.8.0_91        // 要根据自己的实际路径配置</span><br><span class="line"></span><br><span class="line">变量名：CLASSPATH</span><br><span class="line">变量值：.;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar;         //记得前面有个&quot;.&quot;</span><br><span class="line"></span><br><span class="line">变量名：Path</span><br><span class="line">变量值：%JAVA_HOME%\bin;%JAVA_HOME%\jre\bin;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="安装graphviz"><a href="#安装graphviz" class="headerlink" title="安装graphviz"></a>安装graphviz</h3><ol>
<li><p>linux </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo yum install graphviz -y</span><br></pre></td></tr></table></figure>
</li>
<li><p>windows<br><a href="https://graphviz.gitlab.io/_pages/Download/Download_windows.html" target="_blank" rel="noopener">下载地址</a><br>将其bin目录加入系统Path变量中</p>
</li>
</ol>
<h3 id="安装Hexo插件hexo-filter-plantuml"><a href="#安装Hexo插件hexo-filter-plantuml" class="headerlink" title="安装Hexo插件hexo-filter-plantuml"></a>安装Hexo插件hexo-filter-plantuml</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install --save hexo-filter-plantuml</span><br></pre></td></tr></table></figure>
<p><a href="https://github.com/wafer-li/hexo-filter-plantuml" target="_blank" rel="noopener">hexo-filter-plantuml</a></p>
<h2 id="站内搜索功能"><a href="#站内搜索功能" class="headerlink" title="站内搜索功能"></a>站内搜索功能</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-search --save</span><br><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>
<h2 id="hexo命令"><a href="#hexo命令" class="headerlink" title="hexo命令"></a>hexo命令</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo n &quot;我的博客&quot; == hexo new &quot;我的博客&quot; #新建文章</span><br><span class="line">hexo p == hexo publish</span><br><span class="line">hexo g == hexo generate#生成</span><br><span class="line">hexo s == hexo server #启动服务预览</span><br><span class="line">hexo d == hexo deploy#部署</span><br><span class="line"></span><br><span class="line">hexo server --drafts 预览草稿</span><br></pre></td></tr></table></figure>
<h2 id="hexo报错解决"><a href="#hexo报错解决" class="headerlink" title="hexo报错解决"></a>hexo报错解决</h2><h3 id="找不到git部署"><a href="#找不到git部署" class="headerlink" title="找不到git部署"></a>找不到git部署</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ERROR Deployer not found: git</span><br></pre></td></tr></table></figure>
<p>解决方法<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></p>
<h1 id="Jekyll目录结构"><a href="#Jekyll目录结构" class="headerlink" title="Jekyll目录结构"></a>Jekyll目录结构</h1><ul>
<li>_config.yml 保存配置数据</li>
<li>_drafts 未发布文章 </li>
<li>_includes </li>
<li>_layouts 包裹在文章外部的模版，布局可以在YAML头信息中根据不同文章进行选择，标签<h1 id="Hexo博客使用记录"><a href="#Hexo博客使用记录" class="headerlink" title="Hexo博客使用记录"></a>Hexo博客使用记录</h1><h2 id="Hexo安装"><a href="#Hexo安装" class="headerlink" title="Hexo安装"></a>Hexo安装</h2><h3 id="git"><a href="#git" class="headerlink" title="git"></a>git</h3><h3 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h3><ol>
<li><p>linux</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo yum install nodejs</span><br></pre></td></tr></table></figure>
</li>
<li><p>windows<br><a href="https://nodejs.org/en/" target="_blank" rel="noopener">官网下载安装</a></p>
</li>
</ol>
<h3 id="hexo"><a href="#hexo" class="headerlink" title="hexo"></a>hexo</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm i -g hexo</span><br></pre></td></tr></table></figure>
<h2 id="hexo中plantuml"><a href="#hexo中plantuml" class="headerlink" title="hexo中plantuml"></a>hexo中plantuml</h2><h3 id="安装java"><a href="#安装java" class="headerlink" title="安装java"></a>安装java</h3><ol>
<li><p>linux</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo yum install java</span><br><span class="line">sudo yum install java-devel</span><br></pre></td></tr></table></figure>
</li>
<li><p>windows<br><a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html" target="_blank" rel="noopener">下载地址</a><br>Java环境变量配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">变量名：JAVA_HOME</span><br><span class="line">变量值：C:\Program Files (x86)\Java\jdk1.8.0_91        // 要根据自己的实际路径配置</span><br><span class="line"></span><br><span class="line">变量名：CLASSPATH</span><br><span class="line">变量值：.;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar;         //记得前面有个&quot;.&quot;</span><br><span class="line"></span><br><span class="line">变量名：Path</span><br><span class="line">变量值：%JAVA_HOME%\bin;%JAVA_HOME%\jre\bin;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="安装graphviz"><a href="#安装graphviz" class="headerlink" title="安装graphviz"></a>安装graphviz</h3><ol>
<li><p>linux </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo yum install graphviz -y</span><br></pre></td></tr></table></figure>
</li>
<li><p>windows<br><a href="https://graphviz.gitlab.io/_pages/Download/Download_windows.html" target="_blank" rel="noopener">下载地址</a><br>将其bin目录加入系统Path变量中</p>
</li>
</ol>
<h3 id="安装Hexo插件hexo-filter-plantuml"><a href="#安装Hexo插件hexo-filter-plantuml" class="headerlink" title="安装Hexo插件hexo-filter-plantuml"></a>安装Hexo插件hexo-filter-plantuml</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install --save hexo-filter-plantuml</span><br></pre></td></tr></table></figure>
<p><a href="https://github.com/wafer-li/hexo-filter-plantuml" target="_blank" rel="noopener">hexo-filter-plantuml</a></p>
<h2 id="站内搜索功能"><a href="#站内搜索功能" class="headerlink" title="站内搜索功能"></a>站内搜索功能</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-search --save</span><br><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>
<h2 id="hexo命令"><a href="#hexo命令" class="headerlink" title="hexo命令"></a>hexo命令</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo n &quot;我的博客&quot; == hexo new &quot;我的博客&quot; #新建文章</span><br><span class="line">hexo p == hexo publish</span><br><span class="line">hexo g == hexo generate#生成</span><br><span class="line">hexo s == hexo server #启动服务预览</span><br><span class="line">hexo d == hexo deploy#部署</span><br><span class="line"></span><br><span class="line">hexo server --drafts 预览草稿</span><br></pre></td></tr></table></figure>
<h2 id="hexo报错解决"><a href="#hexo报错解决" class="headerlink" title="hexo报错解决"></a>hexo报错解决</h2><h3 id="找不到git部署"><a href="#找不到git部署" class="headerlink" title="找不到git部署"></a>找不到git部署</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ERROR Deployer not found: git</span><br></pre></td></tr></table></figure>
<p>解决方法<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></p>
<h1 id="Jekyll目录结构"><a href="#Jekyll目录结构" class="headerlink" title="Jekyll目录结构"></a>Jekyll目录结构</h1><ul>
<li>_config.yml 保存配置数据</li>
<li>_drafts 未发布文章 </li>
<li>_includes </li>
<li>_layouts 包裹在文章外部的模版，布局可以在YAML头信息中根据不同文章进行选择，标签{{content}}可以将content插入页面中。</li>
<li>_posts 存放正式发布文章，文件格式很重要，必须符合：YEAR-MONTH-DAY-title.MARKUP</li>
<li>_data</li>
<li>_site Jekyll完成转换，生成的页面存放处(默认)，该目录最好加入.gitignore</li>
<li>index.html 其它html、markdown、testile 文件 如果文件包含YAML头信息部分，Jekyll自动将它们转换，其它.html、.markdown、.md或者.textile等在站点根目录下或者不是以上提到的目录中的文件也会被转化。</li>
<li>其它文件目录 其它未被提及的目录和文件豆浆杯完全拷贝到生成的site中。</li>
</ul>
<h1 id="头信息"><a href="#头信息" class="headerlink" title="头信息"></a>头信息</h1><ul>
<li>任何只要包含YAML头信息的文件在Jekyll中都被当做一个特殊的文件来处理</li>
<li>头信息必须在文件开始部分，需要安装YAML的格式卸载两行三虚线之间</li>
</ul>
<h2 id="预定义的全局变量"><a href="#预定义的全局变量" class="headerlink" title="预定义的全局变量"></a>预定义的全局变量</h2><ul>
<li>layout 如果设置的话，会指定使用该模板文件。指定模板文件时候不需要扩展名。模板文件需要放在 _layouts 目录下。</li>
<li>permalink 如果你需要让你的博客中的URL地址不同于默认值 /year/month/day/title.html 当你设置这个变量后，就会使用最终的URL地址。 </li>
<li>published 当站点生成的时候，如果你不需要展示一个具体的博文，可以设置这个变量为 false。 </li>
<li>category/categories 除过将博客文章放在某个文件夹下面外，你还可以根据文章的类别来给他们设置一个或者多个分类属性。这样当你的博客生成的时候这些文章就可以根据这些分类来阅读。在一个文章中多个类别可以通过 YAML list来指定，或者用空格隔开。 </li>
<li>tags 类似分类，一篇文章也可以给它增加一个或者多个标签。同样多个标签之间可以通过 YAML 列表或者空格隔开。 </li>
</ul>
<h2 id="自定义变量"><a href="#自定义变量" class="headerlink" title="自定义变量"></a>自定义变量</h2><p>在头信息中没有预先定义的任何变量都会在数据转换中通过 Liquid 模板被调用</p>
<h2 id="在文章中预定义的变量"><a href="#在文章中预定义的变量" class="headerlink" title="在文章中预定义的变量"></a>在文章中预定义的变量</h2><p>在文章中可以使用这些在头信息变量列表中未包含的变量<br>date 会覆盖文章名字中的日期。可以用来确定文章分类的正确。 </p>
可以将content插入页面中。</li>
<li>_posts 存放正式发布文章，文件格式很重要，必须符合：YEAR-MONTH-DAY-title.MARKUP</li>
<li>_data</li>
<li>_site Jekyll完成转换，生成的页面存放处(默认)，该目录最好加入.gitignore</li>
<li>index.html 其它html、markdown、testile 文件 如果文件包含YAML头信息部分，Jekyll自动将它们转换，其它.html、.markdown、.md或者.textile等在站点根目录下或者不是以上提到的目录中的文件也会被转化。</li>
<li>其它文件目录 其它未被提及的目录和文件豆浆杯完全拷贝到生成的site中。</li>
</ul>
<h1 id="头信息"><a href="#头信息" class="headerlink" title="头信息"></a>头信息</h1><ul>
<li>任何只要包含YAML头信息的文件在Jekyll中都被当做一个特殊的文件来处理</li>
<li>头信息必须在文件开始部分，需要安装YAML的格式卸载两行三虚线之间</li>
</ul>
<h2 id="预定义的全局变量"><a href="#预定义的全局变量" class="headerlink" title="预定义的全局变量"></a>预定义的全局变量</h2><ul>
<li>layout 如果设置的话，会指定使用该模板文件。指定模板文件时候不需要扩展名。模板文件需要放在 _layouts 目录下。</li>
<li>permalink 如果你需要让你的博客中的URL地址不同于默认值 /year/month/day/title.html 当你设置这个变量后，就会使用最终的URL地址。 </li>
<li>published 当站点生成的时候，如果你不需要展示一个具体的博文，可以设置这个变量为 false。 </li>
<li>category/categories 除过将博客文章放在某个文件夹下面外，你还可以根据文章的类别来给他们设置一个或者多个分类属性。这样当你的博客生成的时候这些文章就可以根据这些分类来阅读。在一个文章中多个类别可以通过 YAML list来指定，或者用空格隔开。 </li>
<li>tags 类似分类，一篇文章也可以给它增加一个或者多个标签。同样多个标签之间可以通过 YAML 列表或者空格隔开。 </li>
</ul>
<h2 id="自定义变量"><a href="#自定义变量" class="headerlink" title="自定义变量"></a>自定义变量</h2><p>在头信息中没有预先定义的任何变量都会在数据转换中通过 Liquid 模板被调用</p>
<h2 id="在文章中预定义的变量"><a href="#在文章中预定义的变量" class="headerlink" title="在文章中预定义的变量"></a>在文章中预定义的变量</h2><p>在文章中可以使用这些在头信息变量列表中未包含的变量<br>date 会覆盖文章名字中的日期。可以用来确定文章分类的正确。 </p>
]]></content>
      <categories>
        <category>other</category>
      </categories>
      <tags>
        <tag>other</tag>
      </tags>
  </entry>
  <entry>
    <title>linux系统架构</title>
    <url>/2018/03/13/linux-1-system-architecture/</url>
    <content><![CDATA[<p>Linux系统从应用角度来看，分为内核空间和用户空间两部分。内核空间是Linux操作系统的主要部分。</p>
<h1 id="Linux内核主要模块"><a href="#Linux内核主要模块" class="headerlink" title="Linux内核主要模块"></a>Linux内核主要模块</h1><p>Linux内核由5个子系统组成:进程调度、内存管理、虚拟文件系统、网络接口、进程间通信。</p>
<h2 id="进程调度SCHED"><a href="#进程调度SCHED" class="headerlink" title="进程调度SCHED"></a>进程调度SCHED</h2><p>进程调度指系统对进程的多种状态之间转换的策略。Linux进程调度主要有三种策略：SCHED_OTHER、SCHED_FIFO和SCHED_RR。</p>
<ol>
<li>SCHED_OTHER<strong>分时调度策略（默认）</strong>，针对<strong>普通进程的时间片轮转调度策略</strong>。系统给所有的运行状态的进程分配时间片。在当前进程的时间片用完后，系统从进程中优先级高的进程中选择进程运行。</li>
<li>SCHED_FIFO<strong>实时调度策略，先到先服务</strong>，针对运行的<strong>实时性要求比较高、运行时间短</strong>的进程调度策略。系统按照进入队列的先后进行进程的调度，在没有更高优先级到来或者当前进程没有因为等待资源而阻塞的情况下，会一直运行。</li>
<li>SCHED_RR<strong>实时调度策略，时间片轮转</strong>，针对<strong>实时性比较高、运行时间长</strong>的进行调度策略。SCHED_RR和SCHED_OTHER相似，但SCHED_RR的优先级要高的多。系统分配给SCHED_RR进程时间片，然后轮循进程，将时间片用完的进程放在队列末尾。</li>
</ol>
<p>由于存在多种调度方式，Linux进程调度采用“有条件可剥夺”的调度方式。普通进程中采用SCHED_OTHER的时间片轮询方式，<strong>实时进程可以剥夺普通进程</strong>。如果普通进程在用户空间运行，则普通进程立即停止运行，将资源让给实时进程；如果普通进程在内核空间，则需要等系统调用返回用户空间后方可剥夺资源。</p>
<h2 id="内存管理MMU"><a href="#内存管理MMU" class="headerlink" title="内存管理MMU"></a>内存管理MMU</h2><p>内存管理时多个进程间共享内存的策略。在Linux中内存管理主要概念是<strong>虚拟内存</strong>。虚拟内存让内存可以使用比实际物理内存更大的内存，每个进程的虚拟内存有不同的地址空间，多个进程的虚拟内存不会冲突。虚拟内存的分配策略是每个进程都可以公平地使用虚拟内存。</p>
<h2 id="虚拟文件系统VFS"><a href="#虚拟文件系统VFS" class="headerlink" title="虚拟文件系统VFS"></a>虚拟文件系统VFS</h2><p>Linux支持多种文件系统。最常见的文件格式是ext2和ext3。ext2文件系统用于固定文件系统和可活动文件系统，是ext的扩展。ext3是ext2上增加日志功能后的扩展。ext2和ext3可以互相转化。</p>
<h2 id="网络接口"><a href="#网络接口" class="headerlink" title="网络接口"></a>网络接口</h2><p>Linux支持多种网络接口和协议。网络接口分为网络协议和驱动程序，网络协议是网络传输的通信标准，驱动程序是对硬件设备的驱动程序。</p>
<h2 id="进程间通信"><a href="#进程间通信" class="headerlink" title="进程间通信"></a>进程间通信</h2><p>Linux下进程通信方式：<strong>管道、信号、消息队列、共享内存、套接字</strong>。</p>
<h1 id="Linux文件系统"><a href="#Linux文件系统" class="headerlink" title="Linux文件系统"></a>Linux文件系统</h1><p>Linux操作系统文件结构的开始是一个顶级目录结构，叫做<strong>根目录</strong>。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[CaseZheng@VM_187_252_centos /]$ cd /</span><br><span class="line">[CaseZheng@VM_187_252_centos /]$ ls</span><br><span class="line">bin  boot  data  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var</span><br></pre></td></tr></table></figure></p>
<p>根目录下常用目录作用：</p>
<ol>
<li>/bin Binary存放经常使用的命令</li>
<li>/boot 存放启动linux时需要使用的核心文件，包括连接文件和镜像文件</li>
<li>/dev Device存放Linux的外部设备</li>
<li>/etc 存放所有系统管理所需要的配置文件和子目录</li>
<li>/home 用户家目录</li>
<li>/lib 存放系统最基本的动态链接库</li>
<li>/lost+found 一般情况下是空的，当系统非法关机，存放一些文件</li>
<li>/media linux系统自动识别一些设备，当识别后会将识别的设备挂载在这个目录下</li>
<li>/mnt 专门给外挂的文件系统使用</li>
<li>/opt 可选的应用程序软件包</li>
<li>/proc 虚拟目录，系统内存的映射，可直接访问该目录获取系统信息，这个目录内容在内存中，而不是硬盘。</li>
<li>/root 根用户的主目录</li>
<li>/sbin 存放系统管理员使用的系统管理程序</li>
<li>/selinux Redhat/CentOS特有目录，Selinux是安全机制，比较复杂，该目录用于存放selinux相关文件。</li>
<li>/src 存放一些服务启动后需要提取的数据</li>
<li>/sys 该目录下安装sysfs文件系统，sysfs文件系统集成了3中文件系统信息：针对进程信息的proc文件系统、针对设备的devfs文件系统、针对伪终端的devpts文件系统，该文件系统是内核设备的一个直观反映。当一个内核对象被创建的时候，对应的文件和目录也在内核对象子系统中被创建。</li>
<li>/var 包含系统定义表，以便在系统运行改变时只备份该目录</li>
<li>/tmp 用于临时性存储</li>
<li>/usr 用户的很多应用程序和文件放在该目录下</li>
<li>/usr/bin 系统用户使用的应用程序</li>
<li>/usr/sbin 超级用户使用的比较高级的管理程序和系统守护程序</li>
<li>/usr/src 内核源代码默认的放置目录</li>
<li>/usr/lib 库文件</li>
</ol>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>算法 图相关知识</title>
    <url>/2018/01/12/algorithm-chart/</url>
    <content><![CDATA[<h1 id="算法——图"><a href="#算法——图" class="headerlink" title="算法——图"></a>算法——图</h1><h2 id="图结构"><a href="#图结构" class="headerlink" title="图结构"></a>图结构</h2><h3 id="图的基本概念"><a href="#图的基本概念" class="headerlink" title="图的基本概念"></a>图的基本概念</h3><p>图是由顶点的非空集合V(有n&gt;0个顶点组成)与边的集合E(顶点之间的关系)构成,常用G表示,可形式化定义如下:G=(V,E)<br>如果图中的边集E中每一条边都没有方向性,则该图为无向图；如果E中的边具有方向性,则表示该图为有向图。无序图的边表示为无序偶对(Vi, Vj), 所以(Vi, Vj)和(Vj, Vi)是同一条边。<br>有向图的表示的是顶点的有序偶对,边$\langle$Vi, Vj$\rangle$和$\langle$Vj, Vi$\rangle$是两条不一样的边。</p>
<ol>
<li>度<br>一个顶点的度指依附于某顶点V的边的条数，通常记为TD(V)</li>
<li>路径<br>顶点的路径是指一个顶点Vi到另一个顶点Vj之间所经过的存在边的顶点的序列。<br>举例来说，如果存在顶点序列 V1, V2, V3, V4, …, Vm，使得顶点偶对(Vi, Vi+1) $\in$ (i=1, 2, 3, …, m–1),则称该顶点序列为顶点V1到Vm之间的一条路径。如果V1=Vm，则该路径成为回路或环。</li>
<li>子图<br>图G=(V, E)和G’=(V’, E’)，如果存在V’$\in$V 且 E’ $\in$ E，则称G’为G的一个子图</li>
<li>图的连通<br>在无向图中，如果顶点Vi到Vj（i!=j)存在路径，则称Vi和Vj是连通的。如果某无向图中任意两个顶点都是连通的，则称该无向图是连通图，否则为非连通图。无向图中的极大连通子图为该图的连通分量。<br>在有向图中，如果任意两个不同的顶点都是连通的，则称该有向图为强连通图，其极大连通子图为强连通分量。<br><img src="/Picture/无向图和有向图.png" alt><br>无向图和有向图</li>
</ol>
<h3 id="图的存储结构"><a href="#图的存储结构" class="headerlink" title="图的存储结构"></a>图的存储结构</h3><p>图主要有邻接表存储结构和邻接矩阵存储结构两种。</p>
<h4 id="邻接矩阵存储"><a href="#邻接矩阵存储" class="headerlink" title="邻接矩阵存储"></a>邻接矩阵存储</h4><p>邻接矩阵存储(数组存储法),核心思想是使用两个数组存储一个图。具体定义如下：一个具有n个顶点的图，将每个顶点存储在数组Vertex[0…n-1]中，另定义一个二维数组E[0…n-1][0…n-1]存储相邻顶点见的关系，该二维矩阵称为邻接矩阵。<br>在数组Vertex中的下标来表示一个顶点，则邻接数组元素E[i][j]就表示Vi和Vj之间的关系，如果存在边，则为1，如不存在则为0。<br>无向图的矩阵是一个对称矩阵，矩阵中的值表示两者之间有直接边可到达。如果是有权图则数组存储权值，无边的顶点之间权值为$\infty$.<br>邻接矩阵不适合存储稀疏图，会有很多存储空间是空值，浪费空间。</p>
<p>图a使用邻接矩阵表示:<br><img src="/Picture/图的邻接矩阵存储.png" alt><br>图的邻接矩阵存储</p>
<h4 id="邻接表存储"><a href="#邻接表存储" class="headerlink" title="邻接表存储"></a>邻接表存储</h4><p>邻接表存储利用链表的优势，解决了邻接矩阵不适合存储稀疏图的问题。<br>邻接表存储法为每个顶点建立一条线性链表，如果图中有n个顶点，则其邻接表结构有n个线性表组成，每个链表设置一个头结点，称为顶点结点。<br>每一个链表中的结点称为边结点。</p>
<p>图b使用邻接表表示:<br><img src="/Picture/图的邻接表存储.png" alt><br>图的邻接表存储</p>
<h2 id="图的遍历"><a href="#图的遍历" class="headerlink" title="图的遍历"></a>图的遍历</h2><h3 id="深度优先遍历"><a href="#深度优先遍历" class="headerlink" title="深度优先遍历"></a>深度优先遍历</h3><p>图的深度优先遍历（Deepth First Search，DFS），从顶点v出发，首先将顶点v自己标记为已到达顶点，然后选择一个和v邻近的顶点u，如果u不存在则停止遍历，如果顶点存在则将u顶点标记为已到达，选择一个顶点u的未到达顶点w开始新一轮DFS。</p>
<h3 id="广度优先遍历"><a href="#广度优先遍历" class="headerlink" title="广度优先遍历"></a>广度优先遍历</h3><p>图的广度优先遍历，从顶点v出发，访问v之后依次访问v的各个未被访问的邻接点，然后从这些邻接点出发访问其它未被访问过的点，直到所有点访问完成。</p>
<p><a href="https://github.com/CaseZheng/Study/tree/master/Algorithm/Chart" target="_blank" rel="noopener">示例代码 <strong>https://github.com/CaseZheng/Study/tree/master/Algorithm/Chart</strong></a></p>
<h1 id="图的高级算法"><a href="#图的高级算法" class="headerlink" title="图的高级算法"></a>图的高级算法</h1><h2 id="拓扑排序"><a href="#拓扑排序" class="headerlink" title="拓扑排序"></a>拓扑排序</h2><p>拓扑排序是有向无环图的重要应用，将单向连接的事件按照其关系方向排列成一个具有先后顺序的线性结构。</p>
<ol>
<li>偏序。偏序是一种<strong>非自反性</strong>的传递关系。用R表示元素间的关系，偏序的定义是非自反性，即不存在sRs的关系，如果sRt表示存在s到t的关系R，则必不存在tRs，说明<strong>偏序具有非对称性</strong>。如果存在关系sRt，tRu，则必存在sRu，说明<strong>偏序具有关系传递性</strong>。拓扑排序是在有向无环图这种偏序关系上的一种算法。</li>
<li>全序。全序关系T是一个偏序，并且对于集合中所有的元素s$\neq$t，sTt和tTs只能取其一。</li>
<li>有向无环图（DAG图）。一种特殊的有向图，从该图的任一结点出发，经过若干条边，无法回到该顶点。这样的图是无环的。</li>
</ol>
<p>拓扑排序是在有向无环图上进行的操作，对于一个有向无环图G，拓扑排序将图G的所有顶点排成一个线性序列，使图中任意一对顶点v和u，满足如果图中存在关系v-&gt;u，则排序后顶点v必在u的左边。<br><img src="/Picture/DAG.png" alt></p>
<p><a href="https://github.com/CaseZheng/Study/tree/master/Algorithm/Chart" target="_blank" rel="noopener">示例代码 <strong>https://github.com/CaseZheng/Study/tree/master/Algorithm/Chart</strong></a></p>
<h2 id="最小生成树"><a href="#最小生成树" class="headerlink" title="最小生成树"></a>最小生成树</h2><p>算法描述：最小生成树是指在一个具有N个顶点的带权连通图G中，如果存在某个子图G’,其包含图G的所有顶点和一部分边，且不形成回路，并且子图G’的个边权值最小，则称图G’是图G的最小生成树。</p>
<h3 id="最小生成树-1"><a href="#最小生成树-1" class="headerlink" title="最小生成树"></a>最小生成树</h3><ol>
<li>最小生成树不能有环</li>
<li>最小生成树不一定唯一，在一个图中最小生成树可以有一个或多个</li>
<li>最小生成树边的个数等于顶点数减一，即|E|=|V|-1</li>
<li>最小生成树的边的权值最小</li>
</ol>
<h3 id="Kruskal算法"><a href="#Kruskal算法" class="headerlink" title="Kruskal算法"></a>Kruskal算法</h3><p>核心思想：在带权连通图中，不断地在边集中找到最小的边，如果该边满足得到最小生成树的条件，就将其构造，直到最后得到一颗最小生成树。</p>
<h3 id="Prim算法"><a href="#Prim算法" class="headerlink" title="Prim算法"></a>Prim算法</h3><p>核心思想：在带权连通图中，图的顶点集合为V，从图中某个顶点v开始，得到集合U={v},重复执行下述操作：在所有u$\in$U,w$\in$V-E的边(u,w)$\in$E中找到最小的边，将(u,w)这条边加入到已找到的边集合，并将点w加入到集合U中，当U=C时，就找到了最小生成树。</p>
<h1 id="参考书籍"><a href="#参考书籍" class="headerlink" title="参考书籍"></a>参考书籍</h1><ol>
<li>妙趣横生的算法（C++语言实现）</li>
</ol>
]]></content>
      <categories>
        <category>基础</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>图</tag>
      </tags>
  </entry>
  <entry>
    <title>markdown小知识</title>
    <url>/2018/03/24/markdown/</url>
    <content><![CDATA[<h1 id="markdown表格中显示"><a href="#markdown表格中显示" class="headerlink" title="markdown表格中显示|"></a>markdown表格中显示|</h1><p>可以使用<code>&amp;#124;</code>代替，注意某些markdown渲染器可能不支持</p>
]]></content>
      <categories>
        <category>other</category>
      </categories>
      <tags>
        <tag>other</tag>
      </tags>
  </entry>
  <entry>
    <title>linux编译链接</title>
    <url>/2018/03/14/linux-2-gcc-make/</url>
    <content><![CDATA[<h1 id="GCC简介"><a href="#GCC简介" class="headerlink" title="GCC简介"></a>GCC简介</h1><p>GCC是Linux下的编译工具集，是GNU Compiler Collection的缩写，包括gcc、g++等编译器和其它工具集。<br>GCC的C编译器为gcc，命令格式为：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gcc [options] files ...</span><br></pre></td></tr></table></figure></p>
<p>文件扩展名含义</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">文件扩展名</th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">.c</td>
<td style="text-align:center">C语言的源文件</td>
</tr>
<tr>
<td style="text-align:center">.h</td>
<td style="text-align:center">C/C++语言的头文件</td>
</tr>
<tr>
<td style="text-align:center">.hpp</td>
<td style="text-align:center">C++语言的头文件</td>
</tr>
<tr>
<td style="text-align:center">.i</td>
<td style="text-align:center">预处理后的C文件</td>
</tr>
<tr>
<td style="text-align:center">.C .cc .cxx</td>
<td style="text-align:center">C++语言的源文件</td>
</tr>
<tr>
<td style="text-align:center">.s</td>
<td style="text-align:center">汇编语言的源文件</td>
</tr>
<tr>
<td style="text-align:center">.o</td>
<td style="text-align:center">会变后的目标文件</td>
</tr>
<tr>
<td style="text-align:center">.a</td>
<td style="text-align:center">静态库</td>
</tr>
<tr>
<td style="text-align:center">.so</td>
<td style="text-align:center">动态库</td>
</tr>
</tbody>
</table>
</div>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">GCC编译命令</th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">cpp</td>
<td style="text-align:center">预处理器编译器</td>
</tr>
<tr>
<td style="text-align:center">cc</td>
<td style="text-align:center">C语言编译器</td>
</tr>
<tr>
<td style="text-align:center">gcc</td>
<td style="text-align:center">C语言编译器</td>
</tr>
<tr>
<td style="text-align:center">cc1</td>
<td style="text-align:center">C语言编译器</td>
</tr>
<tr>
<td style="text-align:center">cc1plus</td>
<td style="text-align:center">C++语言编译器</td>
</tr>
<tr>
<td style="text-align:center">g++</td>
<td style="text-align:center">C++语言编译器</td>
</tr>
<tr>
<td style="text-align:center">as</td>
<td style="text-align:center">汇编器</td>
</tr>
<tr>
<td style="text-align:center">ld</td>
<td style="text-align:center">链接器</td>
</tr>
</tbody>
</table>
</div>
<p>默认搜索路径</p>
<ol>
<li>头文件 /usr/local/include  /usr/lib/gcc/  /usr/include</li>
<li>库文件 /usr/lib/gcc /lib/</li>
</ol>
<h1 id="编译程序基础"><a href="#编译程序基础" class="headerlink" title="编译程序基础"></a>编译程序基础</h1><p>GCC编译器对程序的编译分为<strong>4个阶段：预处理、编译和优化、汇编、链接</strong>。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">          预处理(cpp)        编译和优化(gcc/cc)            汇编(as)              链接(ld)</span><br><span class="line">*.c *.h ------------&gt; *.i -------------------------&gt; *.s -------------&gt; *.o -----------------&gt;  可执行文件</span><br></pre></td></tr></table></figure></p>
<h2 id="gcc选项"><a href="#gcc选项" class="headerlink" title="gcc选项"></a>gcc选项</h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">选项</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">-o</td>
<td style="text-align:center">指定生成文件名</td>
</tr>
<tr>
<td style="text-align:center">-c</td>
<td style="text-align:center">生成目标文件</td>
</tr>
<tr>
<td style="text-align:center">-E</td>
<td style="text-align:center">预编译操作</td>
</tr>
<tr>
<td style="text-align:center">-S</td>
<td style="text-align:center">生成汇编代码</td>
</tr>
<tr>
<td style="text-align:center">-g</td>
<td style="text-align:center">加上调试信息</td>
</tr>
</tbody>
</table>
</div>
<h2 id="预编译"><a href="#预编译" class="headerlink" title="预编译"></a>预编译</h2><p>主要处理源代码文件中以”#”开始的预编译指令。生成.i文件。编译后的.i文件不包含任何宏定义。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[CaseZheng@VM_187_252_centos Tmp]$ ls</span><br><span class="line">main.c</span><br><span class="line">[CaseZheng@VM_187_252_centos Tmp]$ gcc -E -o main.i main.c </span><br><span class="line">[CaseZheng@VM_187_252_centos Tmp]$ ls</span><br><span class="line">main.c  main.i</span><br></pre></td></tr></table></figure></p>
<h2 id="编译和优化"><a href="#编译和优化" class="headerlink" title="编译和优化"></a>编译和优化</h2><p>词法分析、语法分析、语义分析、优化、生成汇编代码文件。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[CaseZheng@VM_187_252_centos Tmp]$ ls</span><br><span class="line">main.c</span><br><span class="line">[CaseZheng@VM_187_252_centos Tmp]$ gcc -S main.c </span><br><span class="line">[CaseZheng@VM_187_252_centos Tmp]$ ls</span><br><span class="line">main.c  main.s</span><br></pre></td></tr></table></figure></p>
<h3 id="词法分析"><a href="#词法分析" class="headerlink" title="词法分析"></a>词法分析</h3><p>词法分析使用类似于有限状态机的算法，将源代码的字符序列分割成一系列的记号。<br>词法分析产生的记号一般可以分为：关键词、标识符、字面量、特殊符号等。<br>程序lex可以实现词法扫描，按用户定义的词法规则将字符串分割为一个个记号。</p>
<h3 id="语法分析"><a href="#语法分析" class="headerlink" title="语法分析"></a>语法分析</h3><p>语法分析将词法分析产生的记号进行语法分析，产生语法树。<br>程序yacc可以完成语法分析。</p>
<h3 id="语义分析"><a href="#语义分析" class="headerlink" title="语义分析"></a>语义分析</h3><p>语义分析是对表达式的含义进行分析，编译器所能分析的时静态语义（编译期可以确定的语义），动态语义是只在运行期才能确定的语义。<br>静态语义通常包括声明和类型的匹配，类型的转换。</p>
<h3 id="源码级优化及中间代码生成"><a href="#源码级优化及中间代码生成" class="headerlink" title="源码级优化及中间代码生成"></a>源码级优化及中间代码生成</h3><p>源代码级优化器会在源代码级别进行优化。优化器将整个语法树转换成中间代码（三地址码、P-代码）</p>
<h3 id="生成汇编代码及优化"><a href="#生成汇编代码及优化" class="headerlink" title="生成汇编代码及优化"></a>生成汇编代码及优化</h3><p>源代码级优化器产生中间代码后的过程属于编译器后端。编译器后端主要包括代码生成器和目标代码优化器。<br>代码生成器将中间代码转换成目标机器代码（汇编代码）。目标代码优化器对汇编代码进行优化。</p>
<p>预编译和编译可以合并成一个步骤，对C语言预编译和编译的程序是cc1，对C++是cc1plus。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[CaseZheng@VM_187_252_centos /]$ locate cc1</span><br><span class="line">/usr/libexec/gcc/x86_64-redhat-linux/4.8.2/cc1</span><br><span class="line">/usr/libexec/gcc/x86_64-redhat-linux/4.8.2/cc1plus</span><br></pre></td></tr></table></figure></p>
<h2 id="汇编"><a href="#汇编" class="headerlink" title="汇编"></a>汇编</h2><p>将汇编代码转变成机器可执行的指令，每一个汇编语句几乎对应一条机器指令。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[CaseZheng@VM_187_252_centos Tmp]$ ls</span><br><span class="line">main.c</span><br><span class="line">[CaseZheng@VM_187_252_centos Tmp]$ gcc -c main.c </span><br><span class="line">[CaseZheng@VM_187_252_centos Tmp]$ ls</span><br><span class="line">main.c  main.o</span><br></pre></td></tr></table></figure>
<h1 id="目标文件"><a href="#目标文件" class="headerlink" title="目标文件"></a>目标文件</h1><p>编译器编译源代码后的生成的文件叫做目标文件。目标文件从结构上讲，是已经编译后的可执行文件格式，只是还没经过链接的过程。</p>
<h2 id="目标文件格式"><a href="#目标文件格式" class="headerlink" title="目标文件格式"></a>目标文件格式</h2><p>PC平台流行的可执行文件格式主要是Windows下的PE和Linux下的ELF，都是COFF格式的变种。<br>目标文件、可执行文件、动态链接库、静态链接库都是按照可执行文件格式存储。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[CaseZheng@VM_187_252_centos Tmp]$ file hello.o</span><br><span class="line">hello.o: ELF 64-bit LSB relocatable, x86-64, version 1 (SYSV), not stripped</span><br><span class="line"></span><br><span class="line">[CaseZheng@VM_187_252_centos Tmp]$ gcc -o run main.c hello.c</span><br><span class="line">[CaseZheng@VM_187_252_centos Tmp]$ ls</span><br><span class="line">hello.c  hello.o  main.c  run</span><br><span class="line">[CaseZheng@VM_187_252_centos Tmp]$ file run</span><br><span class="line">run: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked (uses shared libs), for GNU/Linux 2.6.32, BuildID[sha1]=92d675d4aed8cea8d1aeee31f3d4e901f8c57022, not stripped</span><br><span class="line"></span><br><span class="line">[CaseZheng@VM_187_252_centos Tmp]$ file /lib/libc-2.17.so </span><br><span class="line">/lib/libc-2.17.so: ELF 32-bit LSB shared object, Intel 80386, version 1 (GNU/Linux), dynamically linked (uses shared libs), BuildID[sha1]=efcb4322c3353d41309c104563110b0c238bbc51, for GNU/Linux 2.6.32, not stripped</span><br></pre></td></tr></table></figure></p>
<h2 id="目标文件内容"><a href="#目标文件内容" class="headerlink" title="目标文件内容"></a>目标文件内容</h2><p>目标文件将指令代码、数据、链接所需信息以”节”(“段”)的形式存储。<br><strong>ELF文件开头是文件头，描述了整个文件的文件属性</strong>，包括文件是否可执行、是静态链接还是动态链接等信息，文件头还包括一个<strong>段表</strong>，段表时一个描述文件中各个段的数据。<strong>段表描述了文件中的偏移位置及段的属性等，从段表中可以得到段的所有信息</strong>。文件头后面就是各个段的内容。<br>程序源代码编译后的机器指令经常放在代码段(.code/.text)<br><strong>已初始化的全局变量和局部静态变量放在.data段</strong>。<br><strong>未初始化的全局变量和局部静态变量放在.bss段</strong>。因为未初始化的全局变量和局部静态变量默认值都是0，在.data段分配空间存储0是没有必要的。<strong>.bss段只是为未初始化的全局变量和局部静态变量预留位置而已</strong>，并没有内容，在文件中不占据空间。<br>.rodata段存放只读数据，一般是程序里面的只读变量和字符串常量。<br>.comment段存放编译器版本信息<br>.debug段调试信息<br>.hash段符号哈希表<br>.line段调试时的行号表，即源代码行号与编译后指令的对应表<br>.strtab段字符串表，存储ELF文件用到的各种字符串<br>.symtab段符号表<br>.shstrtab段段名表<br>.plt .got动态链接的跳转表和全局入口表<br>.init .fini程序初始化与终结代码段<br>总体来说，<strong>程序源代码被编译后主要分两种段：程序指令和程序数据。代码段属于程序指令，而数据段和.bss段属于程序数据</strong>。<br>程序指令和程序数据分开存储的好处：</p>
<ol>
<li>安全，程序加载后程序指令只读、程序数据读写</li>
<li>利于缓存，提高CPU的缓存命中率</li>
<li>共享指令，节省内存</li>
</ol>
<h2 id="目标文件结构"><a href="#目标文件结构" class="headerlink" title="目标文件结构"></a>目标文件结构</h2><ol>
<li>文件头定义了ELF魔数、文件机器字节长度、数据存储方式、版本、运行平台、ABI版本、ELF重定位类型、硬件平台、硬件平台版本、入口地址、程序头入口和长度、段表的位置和长度及段的数量等。</li>
<li>段表是保存各个段的基本属性的结构，描述各个段的信息。ELF文件的段结构由段表决定、编译器、连接器和装载器都是依靠段表来定位和访问各个段的属性的。</li>
<li>重定位表(.rel.text/.rel.data)链接器在处理目标文件时需要对某些部位进行重定位，这些重定位信息都记录在ELF文件的重定位表中。</li>
<li>字符串表.strtab保存普通字符串。</li>
<li>段名字符串表.shstrtab保存短表中用到的字符串。</li>
<li>符号表.symtab记录了目标文件中所用到的所有符号。每个定义的符号有一个对应的值，叫做符号值。对变量和函数，符号值就是它们的地址。</li>
<li>特殊符号<ul>
<li>__executable_start 程序起始地址，不是入口地址，是程序最开始的地址</li>
<li>__extext或_extext或extext代码段结束地址，即代码段最末尾的地址</li>
<li>_edata或edata数据段结束地址，即数据段最末尾的地址</li>
<li>_end或end程序结束地址</li>
</ul>
</li>
</ol>
<h2 id="符号修饰与函数签名"><a href="#符号修饰与函数签名" class="headerlink" title="符号修饰与函数签名"></a>符号修饰与函数签名</h2><p>函数签名包含了一个函数的信息，包括函数名、参数类型、所在类、所在名字空间等信息<br>编译器及链接器处理符号时，使用某种那个名称修饰方法，使每个函数签名对应一个修饰后的名称<br>C++编译器会将在extern “C”的大括号内部的代码当作C语言处理。</p>
<h2 id="静态链接"><a href="#静态链接" class="headerlink" title="静态链接"></a>静态链接</h2><p>链接的主要内容是将各个目标代码之间相互引用的部分都处理好，使各个模块之间能够正确的衔接。<br>链接过程包括地址和空间分配、符号决议、重定位等步骤。<br>运行时库是支持程序运行的基本函数的集合。库其实是一组目标文件的包。<br>各个目标文件独立编译，变量及函数地址不能独立确定，需要在链接过程中修正，使其指向正确的地址，这个过程叫重定位，每个要修正的地方叫重定位入口。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[CaseZheng@VM_187_252_centos Tmp]$ ls</span><br><span class="line">main.c</span><br><span class="line">[CaseZheng@VM_187_252_centos Tmp]$ gcc -o run main.c </span><br><span class="line">[CaseZheng@VM_187_252_centos Tmp]$ ls</span><br><span class="line">main.c  run</span><br></pre></td></tr></table></figure>
<h3 id="相似段合并"><a href="#相似段合并" class="headerlink" title="相似段合并"></a>相似段合并</h3><p>链接器为目标文件分配地址和空间，其中地址和空间有两个含义：1.输出的可执行文件中的空间；2.装载的虚拟地址中的虚拟地址空间。<br>虚拟地址空间分配关系到链接器关于地址的计算，而可执行文件本身的空间分配与链接过程关系并不大。</p>
<ol>
<li>空间与地址分配 扫描所有输入目标文件，获取各个段长度、属性、位置，将目标文件符号表中符号定义和符号引用收集起来，统一放在全局符号表。链接器根据收集的信息合并各个段，计算文件文件中各个段合并后的长度与位置，并建立映射关系。</li>
<li>符号解析与重定位 使用空间与地址分配收集的信息，读取文件中段的数据、重定位信息，并进行符号解析和重定位、调整代码中的地址。</li>
</ol>
<h1 id="动态链接"><a href="#动态链接" class="headerlink" title="动态链接"></a>动态链接</h1><p>静态链接缺点</p>
<ol>
<li>浪费内存和磁盘空间</li>
<li>模块更新困难</li>
</ol>
<p><strong>动态链接：不对组成程序的目标文件进行链接，等程序运行时才进行链接，即将链接过程推迟到运行时再进行</strong>。<br>Linux系统中，ELF动态连接文件被称为<strong>动态共享对象（共享对象）</strong>，一般都以”.so”为扩展名。Windos中称为动态链接库，一般以”.dll”为扩展名。<br><strong>共享对象在编译时不能假设自己在进程虚拟地址控件中的位置</strong>。</p>
<h2 id="装载时重定位"><a href="#装载时重定位" class="headerlink" title="装载时重定位"></a>装载时重定位</h2><p>Linux和GCC支持装载时重定位的方法，在产生共享对象是<strong>不使用’-fPIC’，只使用’-shared’参数，输出的共享对象就是使用装载时重定位的方法</strong>。</p>
<h2 id="地址无关代码"><a href="#地址无关代码" class="headerlink" title="地址无关代码"></a>地址无关代码</h2><p>装载时重定位是解决动态模块中的办法之一，但其指令部分不能在多个进程间共享，失去了动态连接节省内存的一大优势。</p>
<ol>
<li>模块内部调用或跳转 模块内相对位置固定，通过相对地址调用</li>
<li>模块内部数据访问 相对寻址</li>
<li>模块间数据访问 ELF在数据段建立一个指向其它模块变量的指针数组（全局偏移表GOT），当代码需要引用该全局变量时，通过GOT中的相对应的项间接引用。</li>
<li>模块间调用、跳转 建立全局偏移表GOT，保存目标函数的地址。</li>
</ol>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">指令跳转、调用</th>
<th style="text-align:center">数据访问</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">模块内部</td>
<td style="text-align:center">1.相对跳转和调用</td>
<td style="text-align:center">2.相对地址访问</td>
</tr>
<tr>
<td style="text-align:center">模块外部</td>
<td style="text-align:center">3.间接跳转和调用</td>
<td style="text-align:center">4.间接访问</td>
</tr>
</tbody>
</table>
</div>
<p>‘-fpic’和’-fPIC’功能相同都是生成地址无关代码，但’-fPIC’生成的代码要大一点，’-fpic’生成代码小，不过’-fpic’在某些平台上会有一些限制，而’-fPIC’则不存在。</p>
<h2 id="延迟绑定"><a href="#延迟绑定" class="headerlink" title="延迟绑定"></a>延迟绑定</h2><p>延迟绑定：函数第一次被使用时才进行绑定。</p>
<h2 id="“-interp”段"><a href="#“-interp”段" class="headerlink" title="“.interp”段"></a>“.interp”段</h2><p>动态链接器的位置不是由系统配置指定，也不是由环境参数决定，而是由ELF可执行文件决定。<strong>“.interp”段保存的一个字符串就是可执行文件所需要的动态链接器的路径</strong>。</p>
<h2 id="“-dynamic”段"><a href="#“-dynamic”段" class="headerlink" title="“.dynamic”段"></a>“.dynamic”段</h2><p>“.dynamic”段保存了动态链接器所需要的基本信息（依赖的共享库、动态链接符号表位置、动态连接重定向表的位置、共享对象初始化代码的地址等）。<br>ldd命令可以查看一个程序或共享库依赖哪些共享库。</p>
<h2 id="动态符号表"><a href="#动态符号表" class="headerlink" title="动态符号表"></a>动态符号表</h2><p>“.dynsym”</p>
<h2 id="动态链接重定向表"><a href="#动态链接重定向表" class="headerlink" title="动态链接重定向表"></a>动态链接重定向表</h2><p>静态链接中”.rel.text”代码段重定位表 “.rel.data”数据段重定位表<br>动态链接中”.rel.dyn”对数据引用的修正 “.rel.plt”对函数引用的修正，它所修正的位置位于”.got.plt”</p>
<h1 id="静态链接库"><a href="#静态链接库" class="headerlink" title="静态链接库"></a>静态链接库</h1><p>静态链接库通常以”.a”为后缀，由程序ar生成。<br>静态链接库优点</p>
<ol>
<li>不需要重新编译程序库代码，就可进行程序的重新链接，节省编译时间。</li>
<li>提供库文件给使用人员，不需要开放源代码。</li>
<li>静态库执行速度比共享库和动态库要快。</li>
</ol>
<h2 id="静态链接库生成"><a href="#静态链接库生成" class="headerlink" title="静态链接库生成"></a>静态链接库生成</h2><ol>
<li>生成目标文件</li>
<li>用ar工具对目标文件归档。</li>
</ol>
<p>ar的-r选项，可以创建库，并把目标文件插入指定库中。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[CaseZheng@VM_187_252_centos Tmp]$ ls</span><br><span class="line">hello.c</span><br><span class="line">[CaseZheng@VM_187_252_centos Tmp]$ gcc -c hello.c </span><br><span class="line">[CaseZheng@VM_187_252_centos Tmp]$ ls</span><br><span class="line">hello.c  hello.o</span><br><span class="line">[CaseZheng@VM_187_252_centos Tmp]$ ar -rcs libhello.a hello.o</span><br><span class="line">[CaseZheng@VM_187_252_centos Tmp]$ ls</span><br><span class="line">hello.c  hello.o  libhello.a</span><br></pre></td></tr></table></figure></p>
<h2 id="使用静态链接库"><a href="#使用静态链接库" class="headerlink" title="使用静态链接库"></a>使用静态链接库</h2><ol>
<li>和使用目标文件一致</li>
<li>使用”-l库名”使用，库名是不包含函数库和扩展名的字符串。</li>
</ol>
<p>使用”-L”显式指定搜索库的路径。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[CaseZheng@VM_187_252_centos Tmp]$ rm run </span><br><span class="line">[CaseZheng@VM_187_252_centos Tmp]$ ls</span><br><span class="line">hello.c  hello.o  libhello.a  main.c</span><br><span class="line">[CaseZheng@VM_187_252_centos Tmp]$ gcc -o run main.c libhello.a </span><br><span class="line">[CaseZheng@VM_187_252_centos Tmp]$ ls</span><br><span class="line">hello.c  hello.o  libhello.a  main.c  run</span><br><span class="line">[CaseZheng@VM_187_252_centos Tmp]$ ./run </span><br><span class="line">hello</span><br><span class="line"></span><br><span class="line">[CaseZheng@VM_187_252_centos Tmp]$ rm run </span><br><span class="line">[CaseZheng@VM_187_252_centos Tmp]$ ls</span><br><span class="line">hello.c  hello.o  libhello.a  main.c</span><br><span class="line">[CaseZheng@VM_187_252_centos Tmp]$ gcc -o run main.c -L./ -lhello</span><br><span class="line">[CaseZheng@VM_187_252_centos Tmp]$ ls</span><br><span class="line">hello.c  hello.o  libhello.a  main.c  run</span><br><span class="line">[CaseZheng@VM_187_252_centos Tmp]$ ./run </span><br><span class="line">hello</span><br></pre></td></tr></table></figure>
<h2 id="检查包的正确性"><a href="#检查包的正确性" class="headerlink" title="检查包的正确性"></a>检查包的正确性</h2><p>如果碰到<code>error adding symbols: Archive has no index; run ranlib to add one</code>可以使用<code>ar -t</code>检查打包的正确性<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[CaseZheng@VM_187_252_centos Tmp]$ ar -t libhello.a</span><br><span class="line">hello.o</span><br></pre></td></tr></table></figure></p>
<p>确认无误的话在使用file查看被打包文件类型<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[CaseZheng@VM_187_252_centos Tmp]$ file hello.o</span><br><span class="line">hello.o: ELF 64-bit LSB relocatable, x86-64, version 1 (SYSV), not stripped</span><br></pre></td></tr></table></figure></p>
<p>文件类型没问题再使用nm导出符号检查<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[CaseZheng@VM_187_252_centos Tmp]$ nm hello.o</span><br><span class="line">                 U puts</span><br><span class="line">0000000000000000 T _Z11print_hellov</span><br></pre></td></tr></table></figure></p>
<h1 id="动态链接库"><a href="#动态链接库" class="headerlink" title="动态链接库"></a>动态链接库</h1><h2 id="生成动态链接库"><a href="#生成动态链接库" class="headerlink" title="生成动态链接库"></a>生成动态链接库</h2><p>使用-fPIC或-fpic选项使gcc生成动态链接库。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[CaseZheng@VM_187_252_centos Tmp]$ cat hello.h</span><br><span class="line">#ifndef _HELLO_H_</span><br><span class="line">#define _HELLO_H_</span><br><span class="line"></span><br><span class="line">void print_hello();</span><br><span class="line"></span><br><span class="line">#endif</span><br><span class="line">[CaseZheng@VM_187_252_centos Tmp]$ cat hello.cpp </span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &quot;hello.h&quot;</span><br><span class="line"></span><br><span class="line">void print_hello()</span><br><span class="line">&#123;</span><br><span class="line">    printf(&quot;hello\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line">[CaseZheng@VM_187_252_centos Tmp]$ g++ -fPIC -shared -o libhello.so.1.0.0 hello.cpp hello.h</span><br><span class="line">[CaseZheng@VM_187_252_centos Tmp]$ ln -s libhello.so.1.0.0 libhello.so</span><br><span class="line">[CaseZheng@VM_187_252_centos Tmp]$ ls</span><br><span class="line">hello.cpp  hello.h  libhello.so  libhello.so.1.0.0  main.cpp</span><br><span class="line">[CaseZheng@VM_187_252_centos Tmp]$ g++ -o run main.cpp hello.h -L./ -lhello</span><br><span class="line">[CaseZheng@VM_187_252_centos Tmp]$ ./run </span><br><span class="line">./run: error while loading shared libraries: libhello.so: cannot open shared object file: No such file or directory</span><br><span class="line">[CaseZheng@VM_187_252_centos Tmp]$ ldd ./run </span><br><span class="line">	linux-vdso.so.1 =&gt;  (0x00007ffc6fb99000)</span><br><span class="line">	libhello.so =&gt; not found</span><br><span class="line">	libstdc++.so.6 =&gt; /lib64/libstdc++.so.6 (0x00007f35af31c000)</span><br><span class="line">	libm.so.6 =&gt; /lib64/libm.so.6 (0x00007f35af01a000)</span><br><span class="line">	libgcc_s.so.1 =&gt; /lib64/libgcc_s.so.1 (0x00007f35aee04000)</span><br><span class="line">	libc.so.6 =&gt; /lib64/libc.so.6 (0x00007f35aea37000)</span><br><span class="line">	/lib64/ld-linux-x86-64.so.2 (0x00007f35af623000)</span><br><span class="line">[CaseZheng@VM_187_252_centos Tmp]$ sudo vim /etc/ld.so.conf</span><br><span class="line">[CaseZheng@VM_187_252_centos Tmp]$ cat /etc/ld.so.conf</span><br><span class="line">include ld.so.conf.d/*.conf</span><br><span class="line">/usr/local/lib</span><br><span class="line">.</span><br><span class="line">[CaseZheng@VM_187_252_centos Tmp]$ sudo ldconfig</span><br><span class="line">[CaseZheng@VM_187_252_centos Tmp]$ ldd ./run </span><br><span class="line">	linux-vdso.so.1 =&gt;  (0x00007ffc251b6000)</span><br><span class="line">	libhello.so =&gt; ./libhello.so (0x00007fcc32399000)</span><br><span class="line">	libstdc++.so.6 =&gt; /lib64/libstdc++.so.6 (0x00007fcc32092000)</span><br><span class="line">	libm.so.6 =&gt; /lib64/libm.so.6 (0x00007fcc31d90000)</span><br><span class="line">	libgcc_s.so.1 =&gt; /lib64/libgcc_s.so.1 (0x00007fcc31b7a000)</span><br><span class="line">	libc.so.6 =&gt; /lib64/libc.so.6 (0x00007fcc317ad000)</span><br><span class="line">	/lib64/ld-linux-x86-64.so.2 (0x00007fcc3259b000)</span><br><span class="line">[CaseZheng@VM_187_252_centos Tmp]$ ./run </span><br><span class="line">hello</span><br></pre></td></tr></table></figure></p>
<h2 id="Wl-soname编译选项"><a href="#Wl-soname编译选项" class="headerlink" title="-Wl,-soname编译选项"></a>-Wl,-soname编译选项</h2><p>-Wl选项告知编译器将后面的参数传递给链接器.<br>-soname指定动态库的soname(简单共享名,Short for shared object name)</p>
<p>利用soname可以提供动态库的兼容性,当升级一个库时新库和旧库兼容,则可以直接使用相同的soname,如果不兼容换个新的soname则不会影响旧库链接生成的程序.使得升级动态库变的容易.</p>
<p>可以通过readelf -d查看动态库的soname<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[CaseZheng@VM_187_252_centos ~]$ readelf -d /usr/lib/libz.so.1.2.7 </span><br><span class="line">......</span><br><span class="line">  0x0000000e (SONAME)                     Library soname: [libz.so.1]</span><br><span class="line">......</span><br></pre></td></tr></table></figure></p>
<p>可以看到前面的动态库链接后libhello.so链接到libhello.so,当新的动态库不兼容旧的动态库时就会影响到旧库链接生成的程序,而指定soname后链接到libhello.so.1.0.0,动态库升级后不会影响到旧库链接生成的程序<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[CaseZheng@VM_187_252_centos Tmp]$ ldd ./run </span><br><span class="line">	linux-vdso.so.1 =&gt;  (0x00007ffee638a000)</span><br><span class="line">	libhello.so =&gt; ./libhello.so (0x00007fa8c214f000)</span><br><span class="line">	libstdc++.so.6 =&gt; /lib64/libstdc++.so.6 (0x00007fa8c1e48000)</span><br><span class="line">	libm.so.6 =&gt; /lib64/libm.so.6 (0x00007fa8c1b46000)</span><br><span class="line">	libgcc_s.so.1 =&gt; /lib64/libgcc_s.so.1 (0x00007fa8c1930000)</span><br><span class="line">	libc.so.6 =&gt; /lib64/libc.so.6 (0x00007fa8c1563000)</span><br><span class="line">	/lib64/ld-linux-x86-64.so.2 (0x00007fa8c2351000)</span><br><span class="line">[CaseZheng@VM_187_252_centos Tmp]$ g++ -fPIC -shared -Wl,-soname,libhello.so.1.0.0 -o libhello.so.1.0.0 hello.cpp hello.h</span><br><span class="line">[CaseZheng@VM_187_252_centos Tmp]$ g++ -o run main.cpp hello.h -L./ -lhello</span><br><span class="line">[CaseZheng@VM_187_252_centos Tmp]$ ./run </span><br><span class="line">hello</span><br><span class="line">[CaseZheng@VM_187_252_centos Tmp]$ ldd ./run </span><br><span class="line">	linux-vdso.so.1 =&gt;  (0x00007ffc921b7000)</span><br><span class="line">	libhello.so.1.0.0 =&gt; ./libhello.so.1.0.0 (0x00007fc55f726000)</span><br><span class="line">	libstdc++.so.6 =&gt; /lib64/libstdc++.so.6 (0x00007fc55f41f000)</span><br><span class="line">	libm.so.6 =&gt; /lib64/libm.so.6 (0x00007fc55f11d000)</span><br><span class="line">	libgcc_s.so.1 =&gt; /lib64/libgcc_s.so.1 (0x00007fc55ef07000)</span><br><span class="line">	libc.so.6 =&gt; /lib64/libc.so.6 (0x00007fc55eb3a000)</span><br><span class="line">	/lib64/ld-linux-x86-64.so.2 (0x00007fc55f928000)</span><br><span class="line">[CaseZheng@VM_187_252_centos Tmp]$ readelf -d libhello.so.1.0.0 </span><br><span class="line">......</span><br><span class="line">    0x000000000000000e (SONAME)             Library soname: [libhello.so.1.0.0]</span><br><span class="line">......</span><br><span class="line">[CaseZheng@VM_187_252_centos Tmp]$ readelf -d libhello.so</span><br><span class="line">......</span><br><span class="line">    0x000000000000000e (SONAME)             Library soname: [libhello.so.1.0.0]</span><br><span class="line">......</span><br></pre></td></tr></table></figure></p>
<p>还可以兼容版本使用同一个soname,当有新的不兼容版本时再更换soname</p>
<h2 id="优先使用静态链接的方法"><a href="#优先使用静态链接的方法" class="headerlink" title="优先使用静态链接的方法"></a>优先使用静态链接的方法</h2><p>使用动态库的不便之处在于服务部署环境必须安装了该动态库,且版本必须一致或兼容,否则程序无法运行,而静态库则不存在这个问题,当既有动态库,又有静态库时程序默认优先使用动态库,使用<code>-Wl,-Bstatic</code>可以指定优先使用静态库<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[CaseZheng@VM_187_252_centos Tmp]$ g++ -o run main.cpp hello.h -L./ -lhello</span><br><span class="line">[CaseZheng@VM_187_252_centos Tmp]$ ./run </span><br><span class="line">hello</span><br><span class="line">[CaseZheng@VM_187_252_centos Tmp]$ ls</span><br><span class="line">hello.cpp  hello.h  libhello.so  libhello.so.1.0.0  main.cpp  run</span><br><span class="line">[CaseZheng@VM_187_252_centos Tmp]$ ldd ./run </span><br><span class="line">	linux-vdso.so.1 =&gt;  (0x00007ffc20f4f000)</span><br><span class="line">	libhello.so.1.0.0 =&gt; ./libhello.so.1.0.0 (0x00007f9025501000)</span><br><span class="line">	libstdc++.so.6 =&gt; /lib64/libstdc++.so.6 (0x00007f90251fa000)</span><br><span class="line">	libm.so.6 =&gt; /lib64/libm.so.6 (0x00007f9024ef8000)</span><br><span class="line">	libgcc_s.so.1 =&gt; /lib64/libgcc_s.so.1 (0x00007f9024ce2000)</span><br><span class="line">	libc.so.6 =&gt; /lib64/libc.so.6 (0x00007f9024915000)</span><br><span class="line">	/lib64/ld-linux-x86-64.so.2 (0x00007f9025703000)</span><br><span class="line">[CaseZheng@VM_187_252_centos Tmp]$ g++ -c hello.cpp -o hello.o</span><br><span class="line">[CaseZheng@VM_187_252_centos Tmp]$ ar -rcs libhello.a hello.o</span><br><span class="line">[CaseZheng@VM_187_252_centos Tmp]$ g++ -o run main.cpp hello.h -Wl,-Bstatic -L./ -lhello</span><br><span class="line">/usr/bin/ld: cannot find -lstdc++</span><br><span class="line">/usr/bin/ld: cannot find -lgcc_s</span><br><span class="line">/usr/bin/ld: cannot find -lgcc_s</span><br><span class="line">collect2: error: ld returned 1 exit status</span><br><span class="line">[CaseZheng@VM_187_252_centos Tmp]$ g++ -o run main.cpp hello.h -L./ -Wl,-Bstatic -lhello</span><br><span class="line">/usr/bin/ld: cannot find -lstdc++</span><br><span class="line">/usr/bin/ld: cannot find -lgcc_s</span><br><span class="line">/usr/bin/ld: cannot find -lgcc_s</span><br><span class="line">collect2: error: ld returned 1 exit status</span><br></pre></td></tr></table></figure></p>
<p>找不到库是因为指定<code>-Wl,-Bstatic</code>后所有库都强制使用了静态库导致的,添加<code>-Wl,-Bdynamic</code>让别的库可以使用动态库<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[CaseZheng@VM_187_252_centos Tmp]$ g++ -o run main.cpp hello.h -L./ -Wl,-Bstatic -lhello -Wl,-Bdynamic</span><br><span class="line">[CaseZheng@VM_187_252_centos Tmp]$ ./run </span><br><span class="line">hello</span><br><span class="line">[CaseZheng@VM_187_252_centos Tmp]$ ldd ./run </span><br><span class="line">	linux-vdso.so.1 =&gt;  (0x00007ffcf61cf000)</span><br><span class="line">	libstdc++.so.6 =&gt; /lib64/libstdc++.so.6 (0x00007fa076f64000)</span><br><span class="line">	libm.so.6 =&gt; /lib64/libm.so.6 (0x00007fa076c62000)</span><br><span class="line">	libgcc_s.so.1 =&gt; /lib64/libgcc_s.so.1 (0x00007fa076a4c000)</span><br><span class="line">	libc.so.6 =&gt; /lib64/libc.so.6 (0x00007fa07667f000)</span><br><span class="line">	/lib64/ld-linux-x86-64.so.2 (0x00007fa07726b000)</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>基础</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>cpp</tag>
        <tag>gcc</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL 数据类型</title>
    <url>/2018/03/22/mysql-4/</url>
    <content><![CDATA[<h1 id="MySQL支持的数据类型"><a href="#MySQL支持的数据类型" class="headerlink" title="MySQL支持的数据类型"></a>MySQL支持的数据类型</h1><p>MySQL数据类型：数值型、字符串类型、日期和时间类型。</p>
<h2 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">整数类型</th>
<th style="text-align:center">字节</th>
<th style="text-align:center">最小值</th>
<th style="text-align:center">最大值</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">TINYINT</td>
<td style="text-align:center">1</td>
<td style="text-align:center">有符号 -128 &lt;/br&gt; 无符号 0</td>
<td style="text-align:center">有符号 127 &lt;/br&gt; 无符号 255</td>
</tr>
<tr>
<td style="text-align:center">SMALLINT</td>
<td style="text-align:center">2</td>
<td style="text-align:center">有符号 -32768 &lt;/br&gt; 无符号 0</td>
<td style="text-align:center">有符号 32767 &lt;/br&gt; 无符号 65535</td>
</tr>
<tr>
<td style="text-align:center">MEDIUMINT</td>
<td style="text-align:center">3</td>
<td style="text-align:center">有符号 -8388608 &lt;/br&gt; 无符号 0</td>
<td style="text-align:center">有符号 8388607 &lt;/br&gt; 无符号 1677215</td>
</tr>
<tr>
<td style="text-align:center">INT、INTEGER</td>
<td style="text-align:center">4</td>
<td style="text-align:center">有符号 -2147483648 &lt;/br&gt; 无符号 0</td>
<td style="text-align:center">有符号 2147483647 &lt;/br&gt; 无符号 4294967295</td>
</tr>
<tr>
<td style="text-align:center">BIGINT</td>
<td style="text-align:center">8</td>
<td style="text-align:center">有符号 -9223372036854775808 &lt;/br&gt; 无符号 0</td>
<td style="text-align:center">有符号 9223372036854775807 &lt;/br&gt; 无符号 18446744073709551615</td>
</tr>
</tbody>
</table>
</div>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">浮点数类型</th>
<th style="text-align:center">字节</th>
<th style="text-align:center">最小值</th>
<th style="text-align:center">最大值</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">FLOAT</td>
<td style="text-align:center">4</td>
<td style="text-align:center">±1.175494351E-38</td>
<td style="text-align:center">±3.402823466E+38</td>
</tr>
<tr>
<td style="text-align:center">DOUBLE</td>
<td style="text-align:center">8</td>
<td style="text-align:center">±2.2250738585072014E-308</td>
<td style="text-align:center">±1.7976931348623157E+308</td>
</tr>
</tbody>
</table>
</div>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">定点数类型</th>
<th style="text-align:center">字节</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">DEC(M,D) DECIMAL(M,D)</td>
<td style="text-align:center">M+2</td>
<td style="text-align:center">最大取值范围与 DOUBLE 相同，给定 DECIMAL 的有效取值范围由M和D决定</td>
</tr>
</tbody>
</table>
</div>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">位类型</th>
<th style="text-align:center">字节</th>
<th style="text-align:center">最小值</th>
<th style="text-align:center">最大值</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">BIT(M)</td>
<td style="text-align:center">1~8</td>
<td style="text-align:center">BIT(1)</td>
<td style="text-align:center">BIT(64)</td>
</tr>
</tbody>
</table>
</div>
<h3 id="整数"><a href="#整数" class="headerlink" title="整数"></a>整数</h3><p><strong>MySQL支持在类型后面的小括号内指定显示宽度,而不是占用的字节数。</strong><br>使用zerofill关键字在数字位数不够的控件用”0”填充。<br>所有整型类型有一个可选属性UNSIGNED(无符号),在字段中保存非负数或者较大上限值时可以使用此选项，其取值范围是正常值的下限取0，上限取原值的两倍。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MariaDB [test]&gt; create table test_int(a int(5), b int(11));</span><br><span class="line">Query OK, 0 rows affected (0.09 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [test]&gt; insert into test_int values(1,1), (567789, 134567897531);</span><br><span class="line">Query OK, 2 rows affected, 1 warning (0.01 sec)</span><br><span class="line">Records: 2  Duplicates: 0  Warnings: 1</span><br><span class="line"></span><br><span class="line">MariaDB [test]&gt; select * from test_int;</span><br><span class="line">+--------+------------+</span><br><span class="line">| a      | b          |</span><br><span class="line">+--------+------------+</span><br><span class="line">|      1 |          1 |</span><br><span class="line">| 567789 | 2147483647 |</span><br><span class="line">+--------+------------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [test]&gt; alter table test_int modify a int(5) zerofill;</span><br><span class="line">Query OK, 2 rows affected (0.18 sec)               </span><br><span class="line">Records: 2  Duplicates: 0  Warnings: 0</span><br><span class="line"></span><br><span class="line">MariaDB [test]&gt; alter table test_int modify b int zerofill;</span><br><span class="line">Query OK, 2 rows affected (0.08 sec)               </span><br><span class="line">Records: 2  Duplicates: 0  Warnings: 0</span><br><span class="line"></span><br><span class="line">MariaDB [test]&gt; select * from test_int;</span><br><span class="line">+----------+------------+</span><br><span class="line">| a        | b          |</span><br><span class="line">+----------+------------+</span><br><span class="line">|    00001 | 0000000001 |</span><br><span class="line">|   567789 | 2147483647 |</span><br><span class="line">+----------+------------+</span><br><span class="line">2 rows in set (0.01 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [test]&gt; alter table test_int modify a int(5) unsigned zerofill;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line">Records: 0  Duplicates: 0  Warnings: 0</span><br><span class="line"></span><br><span class="line">MariaDB [test]&gt; alter table test_int modify b int(11) unsigned zerofill;</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br><span class="line">Records: 0  Duplicates: 0  Warnings: 0</span><br><span class="line"></span><br><span class="line">MariaDB [test]&gt; insert into test_int values(1,1), (56457789, 1345678972531);</span><br><span class="line">Query OK, 2 rows affected, 1 warning (0.01 sec)</span><br><span class="line">Records: 2  Duplicates: 0  Warnings: 1</span><br><span class="line"></span><br><span class="line">MariaDB [test]&gt; select * from test_int;</span><br><span class="line">+----------+-------------+</span><br><span class="line">| a        | b           |</span><br><span class="line">+----------+-------------+</span><br><span class="line">|    00001 | 00000000001 |</span><br><span class="line">| 56457789 | 04294967295 |</span><br><span class="line">+----------+-------------+</span><br><span class="line">2 rows in set (0.01 sec)</span><br></pre></td></tr></table></figure></p>
<p><strong>AUTO_INCREMENT属性，可以产生唯一标识符或顺序值, 只能用于整数类型。AUTO_INCREMENT值一般从1开始，每行增加1。一个表中最多只能有一个AUTO_INCREMENT列。对于任何想要使用AUTO_INCREMENT的列，应该定义为NOT NULL，并定义为PRIMARY KEY或定义为UNIQUE键。</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE AI (ID INT AUTO_INCREMENT NOT NULL PRIMARY KEY);</span><br><span class="line">CREATE TABLE AI(ID INT AUTO_INCREMENT NOT NULL ,PRIMARY KEY(ID));</span><br><span class="line">CREATE TABLE AI (ID INT AUTO_INCREMENT NOT NULL ,UNIQUE(ID));</span><br></pre></td></tr></table></figure></p>
<h3 id="浮点数、定点数、BIT"><a href="#浮点数、定点数、BIT" class="headerlink" title="浮点数、定点数、BIT"></a>浮点数、定点数、BIT</h3><p><strong>小数的表示：浮点数和定点数。</strong>浮点数：float、double。定点数：decimal<br><strong>定点数在MySQL内部以字符串形式存放，比浮点数更精确，适合用来存放货比等精度高的数据。</strong><br>浮点数和定点数都可以用类型名称后加”(M,D)”的方式来进行表示，”(M,D)”表示该值一共显示M位数字(整数位+小数位)，其中D位位于小数点后面，M和D又称为精度和标度。浮点数后跟”(M,D)”的方法是非标准用法，如果要用于数据库的迁移，最好不要使用。float和double不指定精度按照实际精度(由实际的硬件和操作系统决定)来表示，而decimal在不指定精度时，默认整数位为10，默认小数位为0。</p>
<ol>
<li>浮点数存在误差</li>
<li>对货币等敏感数据应该采用定点数表示或存储。</li>
<li>编程中，如果用到浮点数，注意误差问题，避免浮点数做比较，浮点数的比较最好使用范围比较，而不使用”=”比较</li>
<li>注意浮点数中一些特殊值的处理</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MariaDB [test]&gt; show create table test_xiaoshu\G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">       Table: test_xiaoshu</span><br><span class="line">Create Table: CREATE TABLE `test_xiaoshu` (</span><br><span class="line">  `a` float(5,2) DEFAULT NULL,</span><br><span class="line">  `b` double(5,2) DEFAULT NULL,</span><br><span class="line">  `c` decimal(5,2) DEFAULT NULL,</span><br><span class="line">  `d` float DEFAULT NULL,</span><br><span class="line">  `e` double DEFAULT NULL,</span><br><span class="line">  `f` decimal(10,0) DEFAULT NULL</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=latin1</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [test]&gt; insert into test_xiaoshu value(1.23, 1.23, 1.23, 1.23, 1.23, 1.23);</span><br><span class="line">Query OK, 1 row affected, 1 warning (0.00 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [test]&gt; select * from test_xiaoshu;</span><br><span class="line">+------+------+------+------+------+------+</span><br><span class="line">| a    | b    | c    | d    | e    | f    |</span><br><span class="line">+------+------+------+------+------+------+</span><br><span class="line">| 1.23 | 1.23 | 1.23 | 1.23 | 1.23 |    1 |</span><br><span class="line">+------+------+------+------+------+------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [test]&gt; insert into test_xiaoshu value(1.234, 1.234, 1.234, 1.234, 1.234, 1.234);</span><br><span class="line">Query OK, 1 row affected, 2 warnings (0.00 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [test]&gt; select * from test_xiaoshu;</span><br><span class="line">+------+------+------+-------+-------+------+</span><br><span class="line">| a    | b    | c    | d     | e     | f    |</span><br><span class="line">+------+------+------+-------+-------+------+</span><br><span class="line">| 1.23 | 1.23 | 1.23 |  1.23 |  1.23 |    1 |</span><br><span class="line">| 1.23 | 1.23 | 1.23 | 1.234 | 1.234 |    1 |</span><br><span class="line">+------+------+------+-------+-------+------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>
<p>BIT(位类型)，用于存放位字段值，BIT(M)可以用来存放多位二进制数，M范围从1~64，如果不写默认1位。对于位类型，直接使用select命令无法看到结果，可以用bin()(二进制格式)或者hex()(十六进制格式)函数进行读取。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">MariaDB [test]&gt; desc test_bit;</span><br><span class="line">+-------+--------+------+-----+---------+-------+</span><br><span class="line">| Field | Type   | Null | Key | Default | Extra |</span><br><span class="line">+-------+--------+------+-----+---------+-------+</span><br><span class="line">| a     | bit(1) | YES  |     | NULL    |       |</span><br><span class="line">| b     | bit(2) | YES  |     | NULL    |       |</span><br><span class="line">| c     | bit(3) | YES  |     | NULL    |       |</span><br><span class="line">+-------+--------+------+-----+---------+-------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [test]&gt; insert into test_bit values(1, 1, 1), (2, 2, 2), (8, 8, 8);</span><br><span class="line">Query OK, 3 rows affected, 4 warnings (0.01 sec)</span><br><span class="line">Records: 3  Duplicates: 0  Warnings: 4</span><br><span class="line"></span><br><span class="line">MariaDB [test]&gt; select bin(a), bin(b), bin(c), hex(a), hex(b), hex(c) from test_bit;</span><br><span class="line">+--------+--------+--------+--------+--------+--------+</span><br><span class="line">| bin(a) | bin(b) | bin(c) | hex(a) | hex(b) | hex(c) |</span><br><span class="line">+--------+--------+--------+--------+--------+--------+</span><br><span class="line">| 1      | 1      | 1      | 1      | 1      | 1      |</span><br><span class="line">| 1      | 10     | 10     | 1      | 2      | 2      |</span><br><span class="line">| 1      | 11     | 111    | 1      | 3      | 7      |</span><br><span class="line">+--------+--------+--------+--------+--------+--------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></p>
<h2 id="日期时间类型"><a href="#日期时间类型" class="headerlink" title="日期时间类型"></a>日期时间类型</h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">日期和时间类型</th>
<th style="text-align:center">字节</th>
<th style="text-align:center">最小值</th>
<th style="text-align:center">最大值</th>
<th style="text-align:center">零值表示</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">DATE</td>
<td style="text-align:center">4</td>
<td style="text-align:center">1000-01-01</td>
<td style="text-align:center">9999-12-31</td>
<td style="text-align:center">0000-00-00</td>
</tr>
<tr>
<td style="text-align:center">DATETIME</td>
<td style="text-align:center">8</td>
<td style="text-align:center">1000-01-01 00:00:00</td>
<td style="text-align:center">9999-12-31 23:59:59</td>
<td style="text-align:center">0000-00-00 00:00:00</td>
</tr>
<tr>
<td style="text-align:center">TIMESTAMP</td>
<td style="text-align:center">4</td>
<td style="text-align:center">19700101080001</td>
<td style="text-align:center">2038年某个时刻</td>
<td style="text-align:center">00000000000000</td>
</tr>
<tr>
<td style="text-align:center">TIME</td>
<td style="text-align:center">3</td>
<td style="text-align:center">-838:59:59</td>
<td style="text-align:center">838:59:59</td>
<td style="text-align:center">00:00:00</td>
</tr>
<tr>
<td style="text-align:center">YEAR</td>
<td style="text-align:center">1</td>
<td style="text-align:center">1901</td>
<td style="text-align:center">2155</td>
<td style="text-align:center">0000</td>
</tr>
</tbody>
</table>
</div>
<ul>
<li>如果表示年月日，通常用DATE来表示</li>
<li>如果表示年月日时分秒，通常用DATETIME来表示</li>
<li>如果表示时分秒，通常用TIME来表示</li>
<li>如果需要经常插入或者更新日期位当前系统时间，则通常使用TIMESTAMP来表示</li>
<li>如果只表示年份，可以用YEAR来表示。</li>
</ul>
<h2 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">字符串类型</th>
<th style="text-align:center">字节</th>
<th style="text-align:center">描述及存储需求</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">CHAR（M）</td>
<td style="text-align:center">M</td>
<td style="text-align:center">M 为 0～255 之间的整数</td>
</tr>
<tr>
<td style="text-align:center">VARCHAR（M）</td>
<td style="text-align:center"></td>
<td style="text-align:center">M  为 0～65535 之间的整数，值的长度+1 个字节</td>
</tr>
<tr>
<td style="text-align:center">TINYBLOB</td>
<td style="text-align:center"></td>
<td style="text-align:center">允许长度 0～255 字节，值的长度+1 个字节</td>
</tr>
<tr>
<td style="text-align:center">BLOB</td>
<td style="text-align:center"></td>
<td style="text-align:center">允许长度 0～65535 字节，值的长度+2 个字节</td>
</tr>
<tr>
<td style="text-align:center">MEDIUMBLOB</td>
<td style="text-align:center"></td>
<td style="text-align:center">允许长度 0～167772150 字节，值的长度+3 个字节</td>
</tr>
<tr>
<td style="text-align:center">LONGBLOB</td>
<td style="text-align:center"></td>
<td style="text-align:center">允许长度 0～4294967295 字节，值的长度+4 个字节</td>
</tr>
<tr>
<td style="text-align:center">TINYTEXT</td>
<td style="text-align:center"></td>
<td style="text-align:center">允许长度 0～255 字节，值的长度+2 个字节</td>
</tr>
<tr>
<td style="text-align:center">TEXT</td>
<td style="text-align:center"></td>
<td style="text-align:center">允许长度 0～65535 字节，值的长度+2 个字节</td>
</tr>
<tr>
<td style="text-align:center">MEDIUMTEXT</td>
<td style="text-align:center"></td>
<td style="text-align:center">允许长度 0～167772150 字节，值的长度+3 个字节</td>
</tr>
<tr>
<td style="text-align:center">LONGTEXT</td>
<td style="text-align:center"></td>
<td style="text-align:center">允许长度 0～4294967295 字节，值的长度+4 个字节</td>
</tr>
<tr>
<td style="text-align:center">VARBINARY（M）</td>
<td style="text-align:center"></td>
<td style="text-align:center">允许长度 0～M 个字节的变长字节字符串，值的长度+1 个字节</td>
</tr>
<tr>
<td style="text-align:center">BINARY（M）</td>
<td style="text-align:center">M</td>
<td style="text-align:center">允许长度 0～M 个字节的定长字节字符串</td>
</tr>
</tbody>
</table>
</div>
<h3 id="char和varchar"><a href="#char和varchar" class="headerlink" title="char和varchar"></a>char和varchar</h3><p>char和varchar都用来存储较短的字符串。主要区别是存储方式的不同：char列的长度固定为创建表时声明的长度，长度可以为从0~255的任意值；varchar列中的值为可变长字符串。检索时char列删除末尾的空格，而varchar则保留空格。<br>对于长度变化不大并且对查询速度要求较高的数据可以考虑使用char类型存储。<br>不同存储引擎对char和varchar使用原则不同：</p>
<ol>
<li>MyISAM：建议使用固定长度的数据列代替可变长度的数据列</li>
<li>MEMORY：目前都使用固定长度的数据行处理，因为无论使用char或varchar列都没有关系，两者都是作为char类型处理</li>
<li>InnoDB：建议使用varchar。InnoDB内部的行存储格式没有区分固定长度和可变长度列（所有数据行都使用指向数据列值的头指针）。因此，使用cahr和varchar的性能差别不大，主要看空间占用大小。</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MariaDB [test]&gt; desc test_char;</span><br><span class="line">+-------+------------+------+-----+---------+-------+</span><br><span class="line">| Field | Type       | Null | Key | Default | Extra |</span><br><span class="line">+-------+------------+------+-----+---------+-------+</span><br><span class="line">| a     | varchar(4) | YES  |     | NULL    |       |</span><br><span class="line">| b     | char(4)    | YES  |     | NULL    |       |</span><br><span class="line">+-------+------------+------+-----+---------+-------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [test]&gt; insert into test_char values(&quot;nnnn&quot;, &quot;nnnn&quot;), (&quot;mm&quot;, &quot;mm&quot;), (&quot;kkkkkk&quot;, &quot;kkkkk&quot;), (&quot;ee &quot;,&quot;ee &quot;), (&quot; tt&quot;, &quot; tt&quot;);</span><br><span class="line">Query OK, 5 rows affected, 2 warnings (0.03 sec)</span><br><span class="line">Records: 5  Duplicates: 0  Warnings: 2</span><br><span class="line"></span><br><span class="line">MariaDB [test]&gt; select * from test_char;</span><br><span class="line">+------+------+</span><br><span class="line">| a    | b    |</span><br><span class="line">+------+------+</span><br><span class="line">| nnnn | nnnn |</span><br><span class="line">| mm   | mm   |</span><br><span class="line">| kkkk | kkkk |</span><br><span class="line">| ee   | ee   |</span><br><span class="line">|  tt  |  tt  |</span><br><span class="line">+------+------+</span><br><span class="line">5 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [test]&gt; select concat(a, &apos;+&apos;), concat(b, &apos;+&apos;), length(a), length(b) from test_char;</span><br><span class="line">+----------------+----------------+-----------+-----------+</span><br><span class="line">| concat(a, &apos;+&apos;) | concat(b, &apos;+&apos;) | length(a) | length(b) |</span><br><span class="line">+----------------+----------------+-----------+-----------+</span><br><span class="line">| nnnn+          | nnnn+          |         4 |         4 |</span><br><span class="line">| mm+            | mm+            |         2 |         2 |</span><br><span class="line">| kkkk+          | kkkk+          |         4 |         4 |</span><br><span class="line">| ee +           | ee+            |         3 |         2 |</span><br><span class="line">|  tt+           |  tt+           |         3 |         3 |</span><br><span class="line">+----------------+----------------+-----------+-----------+</span><br><span class="line">5 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>
<h3 id="binary和varbinary类型"><a href="#binary和varbinary类型" class="headerlink" title="binary和varbinary类型"></a>binary和varbinary类型</h3><p>binary和varbinary包含二进制字符串，而不包含非二进制字符串。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MariaDB [test]&gt; desc test_binary;</span><br><span class="line">+-------+--------------+------+-----+---------+-------+</span><br><span class="line">| Field | Type         | Null | Key | Default | Extra |</span><br><span class="line">+-------+--------------+------+-----+---------+-------+</span><br><span class="line">| a     | binary(4)    | YES  |     | NULL    |       |</span><br><span class="line">| b     | varbinary(4) | YES  |     | NULL    |       |</span><br><span class="line">+-------+--------------+------+-----+---------+-------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [test]&gt; insert into test_binary values(&quot;a&quot;, &quot;a&quot;), (&quot;bbbb&quot;, &quot;bbbb&quot;), (&quot;cc  &quot;, &quot;cc  &quot;), (&quot;dddddd&quot;, &quot;ddddd&quot;);</span><br><span class="line">Query OK, 4 rows affected, 2 warnings (0.02 sec)</span><br><span class="line">Records: 4  Duplicates: 0  Warnings: 2</span><br><span class="line"></span><br><span class="line">MariaDB [test]&gt; select *, hex(a), hex(b), concat(a, &quot;+&quot;), concat(b, &quot;+&quot;), length(a), length(b) from test_binary;</span><br><span class="line">+------+------+----------+----------+----------------+----------------+-----------+-----------+</span><br><span class="line">| a    | b    | hex(a)   | hex(b)   | concat(a, &quot;+&quot;) | concat(b, &quot;+&quot;) | length(a) | length(b) |</span><br><span class="line">+------+------+----------+----------+----------------+----------------+-----------+-----------+</span><br><span class="line">| a    | a    | 61000000 | 61       | a   +          | a+             |         4 |         1 |</span><br><span class="line">| bbbb | bbbb | 62626262 | 62626262 | bbbb+          | bbbb+          |         4 |         4 |</span><br><span class="line">| cc   | cc   | 63632020 | 63632020 | cc  +          | cc  +          |         4 |         4 |</span><br><span class="line">| dddd | dddd | 64646464 | 64646464 | dddd+          | dddd+          |         4 |         4 |</span><br><span class="line">+------+------+----------+----------+----------------+----------------+-----------+-----------+</span><br><span class="line">4 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></p>
<h3 id="text和blob"><a href="#text和blob" class="headerlink" title="text和blob"></a>text和blob</h3><p>保存较大文本时使用text或blob，blob能用来存储二进制数据，text只能保存字符数据。</p>
<ol>
<li>blob和text会引起性能问题，特别是执行大量的删除操作时。删除操作会在数据表中留下很大的”空洞”，后续插入数据插入”空洞”时，性能会有影响。可以定期使用OPTIMIZE和TABLE功能进行碎片整理，避免因为”空洞”导致性能问题。</li>
<li>可以使用合成(Synthetic)索引来提高大文本字段的查询性能。即生成散列值，然后保存在单独列中，在通过散列值查找数据(只能用于精确查找)。对大文本的模糊索引可以使用前缀索引来解决。</li>
<li>在不必要的情况下避免索引大型的blob或者text值。</li>
<li>把blob或text列分离到单独的表中。</li>
</ol>
<h3 id="ENUM类型"><a href="#ENUM类型" class="headerlink" title="ENUM类型"></a>ENUM类型</h3><p>emum枚举类型，取值范围在创建表是通过枚举方式显示指定，对1~255个成员的枚举需要1个字节存储，对于255~65535个成员需要2个字节存储。最多允许65535个成员。<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">MariaDB [test]&gt; desc test_enum;</span><br><span class="line">+<span class="comment">-------+---------------+------+-----+---------+-------+</span></span><br><span class="line">| Field | Type          | Null | Key | Default | Extra |</span><br><span class="line">+<span class="comment">-------+---------------+------+-----+---------+-------+</span></span><br><span class="line">| a     | enum('A','B') | YES  |     | NULL    |       |</span><br><span class="line">+<span class="comment">-------+---------------+------+-----+---------+-------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">MariaDB [<span class="keyword">test</span>]&gt; <span class="keyword">insert</span> <span class="keyword">into</span> test_enum <span class="keyword">values</span>(<span class="string">"A"</span>), (<span class="string">"b"</span>), (<span class="string">"W"</span>), (<span class="literal">NULL</span>);</span><br><span class="line">Query OK, 4 rows affected, 1 warning (0.00 sec)</span><br><span class="line">Records: 4  Duplicates: 0  Warnings: 1</span><br><span class="line"></span><br><span class="line">MariaDB [test]&gt; show warnings;</span><br><span class="line">+<span class="comment">---------+------+----------------------------------------+</span></span><br><span class="line">| Level   | Code | Message                                |</span><br><span class="line">+<span class="comment">---------+------+----------------------------------------+</span></span><br><span class="line">| Warning | 1265 | Data truncated for column 'a' at row 3 |</span><br><span class="line">+<span class="comment">---------+------+----------------------------------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">MariaDB [<span class="keyword">test</span>]&gt; <span class="keyword">select</span> * <span class="keyword">from</span> test_enum;</span><br><span class="line">+<span class="comment">------+</span></span><br><span class="line">| a    |</span><br><span class="line">+<span class="comment">------+</span></span><br><span class="line">| A    |</span><br><span class="line">| B    |</span><br><span class="line">|      |</span><br><span class="line">| NULL |</span><br><span class="line">+<span class="comment">------+</span></span><br><span class="line">4 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure></p>
<p><strong>枚举类型忽略大小写</strong>。</p>
<h3 id="SET类型"><a href="#SET类型" class="headerlink" title="SET类型"></a>SET类型</h3><p>set类型也是字符串对象，里面包含0~64个成员。根据成员不同，存储上也有所不同。<br>1~8个成员的集合，占1个字节<br>9~16个成员的集合，占2个字节<br>17~24成员的集合，占3个字节<br>25~32成员的集合，占4个字节<br>33~64成员的集合，占8个字节<br>set和enum，存储不同，而且set一次可以取多个成员，enum只能选一个。<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">MariaDB [test]&gt; desc test_set;</span><br><span class="line">+<span class="comment">-------+----------------------+------+-----+---------+-------+</span></span><br><span class="line">| Field | Type                 | Null | Key | Default | Extra |</span><br><span class="line">+<span class="comment">-------+----------------------+------+-----+---------+-------+</span></span><br><span class="line">| a     | <span class="keyword">set</span>(<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>) | YES  |     | <span class="literal">NULL</span>    |       |</span><br><span class="line">+<span class="comment">-------+----------------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="number">1</span> <span class="keyword">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">MariaDB [<span class="keyword">test</span>]&gt; <span class="keyword">insert</span> <span class="keyword">into</span> test_set <span class="keyword">values</span>(<span class="string">'a,b'</span>), (<span class="string">'a,b,a'</span>), (<span class="string">'a,c'</span>), (<span class="string">'a'</span>), (<span class="string">'f'</span>), (<span class="string">'a, b'</span>);</span><br><span class="line">Query OK, 6 rows affected, 2 warnings (0.03 sec)</span><br><span class="line">Records: 6  Duplicates: 0  Warnings: 2</span><br><span class="line"></span><br><span class="line">MariaDB [test]&gt; select * from test_set;</span><br><span class="line">+<span class="comment">------+</span></span><br><span class="line">| a    |</span><br><span class="line">+<span class="comment">------+</span></span><br><span class="line">| a,b  |</span><br><span class="line">| a,b  |</span><br><span class="line">| a,c  |</span><br><span class="line">| a    |</span><br><span class="line">|      |</span><br><span class="line">| a    |</span><br><span class="line">+<span class="comment">------+</span></span><br><span class="line">6 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure></p>
<p>set所取成员中间不能有空格<br>set取成员中不存在的值会自动过滤掉<br>set取重复的成员只取一个</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL 运算符 常用函数</title>
    <url>/2018/03/24/mysql-5/</url>
    <content><![CDATA[<h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><h2 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">运算符</th>
<th style="text-align:center">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">+</td>
<td style="text-align:center">加法</td>
</tr>
<tr>
<td style="text-align:center">-</td>
<td style="text-align:center">减法</td>
</tr>
<tr>
<td style="text-align:center">*</td>
<td style="text-align:center">乘法</td>
</tr>
<tr>
<td style="text-align:center">/，DIV</td>
<td style="text-align:center">除法，返回商</td>
</tr>
<tr>
<td style="text-align:center">%，MOD</td>
<td style="text-align:center">除法，返回余数</td>
</tr>
</tbody>
</table>
</div>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MariaDB [test]&gt; select 1/0, 100%0, 1 div 0, MOD(100, 0), 3/2, 3 DIV 2, 3%2, mod(3, 2), 5.3/2, 5.3 DIV 2, 5.3%2, mod(5.3, 2), 5.3 mod 2;</span><br><span class="line">+------+-------+---------+-------------+--------+---------+------+-----------+---------+-----------+-------+-------------+-----------+</span><br><span class="line">| 1/0  | 100%0 | 1 div 0 | MOD(100, 0) | 3/2    | 3 DIV 2 | 3%2  | mod(3, 2) | 5.3/2   | 5.3 DIV 2 | 5.3%2 | mod(5.3, 2) | 5.3 mod 2 |</span><br><span class="line">+------+-------+---------+-------------+--------+---------+------+-----------+---------+-----------+-------+-------------+-----------+</span><br><span class="line">| NULL |  NULL |    NULL |        NULL | 1.5000 |       1 |    1 |         1 | 2.65000 |         2 |   1.3 |         1.3 |       1.3 |</span><br><span class="line">+------+-------+---------+-------------+--------+---------+------+-----------+---------+-----------+-------+-------------+-----------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>
<h2 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">运算符</th>
<th style="text-align:center">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">=</td>
<td style="text-align:center">等于</td>
</tr>
<tr>
<td style="text-align:center"><code>&lt;&gt;</code>或!=</td>
<td style="text-align:center">不等于</td>
</tr>
<tr>
<td style="text-align:center"><code>&lt;=&gt;</code></td>
<td style="text-align:center">NULL 安全的等于(NULL-safe)</td>
</tr>
<tr>
<td style="text-align:center"><code>&lt;</code></td>
<td style="text-align:center">小于</td>
</tr>
<tr>
<td style="text-align:center"><code>&lt;=</code></td>
<td style="text-align:center">小于等于</td>
</tr>
<tr>
<td style="text-align:center">&gt;</td>
<td style="text-align:center">大于</td>
</tr>
<tr>
<td style="text-align:center">&gt;=</td>
<td style="text-align:center">大于等于</td>
</tr>
<tr>
<td style="text-align:center">BETWEEN</td>
<td style="text-align:center">存在与指定范围</td>
</tr>
<tr>
<td style="text-align:center">IN</td>
<td style="text-align:center">存在于指定集合</td>
</tr>
<tr>
<td style="text-align:center">IS NULL</td>
<td style="text-align:center">为 NULL</td>
</tr>
<tr>
<td style="text-align:center">IS NOT NULL</td>
<td style="text-align:center">不为 NULL</td>
</tr>
<tr>
<td style="text-align:center">LIKE</td>
<td style="text-align:center">通配符匹配</td>
</tr>
<tr>
<td style="text-align:center">REGEXP 或 RLIKE</td>
<td style="text-align:center">正则表达式</td>
</tr>
</tbody>
</table>
</div>
<ol>
<li>=、<code>&lt;&gt;</code>、!=不能用于NULL比较</li>
<li><code>&lt;=&gt;</code>安全的等于运算符，即使操作数为NULL也可以正确比较</li>
<li><code>BETWEEN</code>运算符的使用格式为”a BETWEEN min AND max”，当 a 大于等于 min 并且小于等于 max，则返回值为 1，否则返回 0;当操作数 a、min、max 类型相同时，此表达式等价于（<code>a&gt;=min and a&lt;=max</code>），当操作数类型不同时，比较时会遵循类型转换原则进行转换后，再进行比较运算。</li>
<li>“IN”运算符的使用格式为”a IN (value1, value2, … …)”,当 a 的值存在于列表中时，则整个比较表达式返回的值为 1，否则返回 0。</li>
<li>“IS NULL”运算符的使用格式为”a IS NULL”,当 a 的值为 NULL，则返回值为 1，否则返回 0。</li>
<li>“IS NOT NULL”运算符的使用格式为”a IS NOT NULL”。和”IS NULL”相反，当 a 的值不为 NULL，则返回值为 1，否则返回 0。 </li>
<li><strong>“LIKE”运算符的使用格式为”a LIKE %123%”,当 a 中含有字符串”123”时，则返回值为 1，否则返回 0。</strong> </li>
<li><strong>“REGEXP”运算符的使用格式为”str REGEXP str-pat”,当 str 字符串中含有 str-pat 相匹配的字符串时，则返回值为 1，否则返回 0。</strong></li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">MariaDB [test]&gt; select 1=0, 1=1, NULL=NULL, 1&lt;&gt;0, 1&lt;&gt;1, NULL&lt;&gt;NULL, 1&lt;=&gt;1, 2&lt;=&gt;0, NULL&lt;=&gt;NULL;</span><br><span class="line">+<span class="comment">-----+-----+-----------+------+------+------------+-------+-------+-------------+</span></span><br><span class="line">| 1=0 | 1=1 | NULL=NULL | 1&lt;&gt;0 | 1&lt;&gt;1 | NULL&lt;&gt;NULL | 1&lt;=&gt;1 | 2&lt;=&gt;0 | NULL&lt;=&gt;NULL |</span><br><span class="line">+<span class="comment">-----+-----+-----------+------+------+------------+-------+-------+-------------+</span></span><br><span class="line">|   0 |   1 |      NULL |    1 |    0 |       NULL |     1 |     0 |           1 |</span><br><span class="line">+<span class="comment">-----+-----+-----------+------+------+------------+-------+-------+-------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">MariaDB [<span class="keyword">test</span>]&gt; <span class="keyword">select</span> <span class="string">'123'</span> <span class="keyword">like</span> <span class="string">'%123%'</span>, <span class="string">'123456'</span> <span class="keyword">like</span> <span class="string">'%123%'</span>, <span class="string">'0123123'</span> <span class="keyword">like</span> <span class="string">'%123%'</span>, <span class="string">'01 23'</span> <span class="keyword">like</span> <span class="string">'%123%'</span>;</span><br><span class="line">+<span class="comment">--------------------+-----------------------+------------------------+----------------------+</span></span><br><span class="line">| '123' like '%123%' | '123456' like '%123%' | '0123123' like '%123%' | '01 23' like '%123%' |</span><br><span class="line">+<span class="comment">--------------------+-----------------------+------------------------+----------------------+</span></span><br><span class="line">|                  1 |                     1 |                      1 |                    0 |</span><br><span class="line">+<span class="comment">--------------------+-----------------------+------------------------+----------------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">MariaDB [<span class="keyword">test</span>]&gt; <span class="keyword">select</span> <span class="string">'abcdef'</span> regexp <span class="string">'ab'</span>, <span class="string">'abcdef'</span> regexp <span class="string">'k'</span>, <span class="string">'a bcdef'</span> regexp <span class="string">'ab'</span>;</span><br><span class="line">+<span class="comment">----------------------+---------------------+-----------------------+</span></span><br><span class="line">| 'abcdef' regexp 'ab' | 'abcdef' regexp 'k' | 'a bcdef' regexp 'ab' |</span><br><span class="line">+<span class="comment">----------------------+---------------------+-----------------------+</span></span><br><span class="line">|                    1 |                   0 |                     0 |</span><br><span class="line">+<span class="comment">----------------------+---------------------+-----------------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>
<h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">运算符</th>
<th style="text-align:center">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">NOT 或 !</td>
<td style="text-align:center">逻辑非</td>
</tr>
<tr>
<td style="text-align:center">AND 或 &amp;&amp;</td>
<td style="text-align:center">逻辑与</td>
</tr>
<tr>
<td style="text-align:center">OR 或  &#124;&#124;</td>
<td style="text-align:center">逻辑或</td>
</tr>
<tr>
<td style="text-align:center">XOR</td>
<td style="text-align:center">逻辑异或</td>
</tr>
</tbody>
</table>
</div>
<h2 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">运算符</th>
<th style="text-align:center">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">&amp;</td>
<td style="text-align:center">位与（位 AND）</td>
</tr>
<tr>
<td style="text-align:center">&#124;</td>
<td style="text-align:center">位或 （位 OR ）</td>
</tr>
<tr>
<td style="text-align:center">^</td>
<td style="text-align:center">位异或（位 XOR）</td>
</tr>
<tr>
<td style="text-align:center">~</td>
<td style="text-align:center">位取反</td>
</tr>
<tr>
<td style="text-align:center">&gt;&gt;</td>
<td style="text-align:center">位右移</td>
</tr>
<tr>
<td style="text-align:center">&lt;&lt;</td>
<td style="text-align:center">位左移</td>
</tr>
</tbody>
</table>
</div>
<h2 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">优先级顺序</th>
<th style="text-align:center">运算符</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">:=</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">&#124;&#124; , OR, XOR</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">&amp;&amp;, AND</td>
</tr>
<tr>
<td style="text-align:center">4</td>
<td style="text-align:center">NOT</td>
</tr>
<tr>
<td style="text-align:center">5</td>
<td style="text-align:center">BETWEEN, CASE, WHEN, THEN, ELSE</td>
</tr>
<tr>
<td style="text-align:center">6</td>
<td style="text-align:center">=, &lt;=&gt;, &gt;=, &gt;, &lt;=, &lt;, &lt;&gt;, !=, IS, LIKE, REGEXP, IN</td>
</tr>
<tr>
<td style="text-align:center">7</td>
<td style="text-align:center">&#124;</td>
</tr>
<tr>
<td style="text-align:center">8</td>
<td style="text-align:center">&amp;</td>
</tr>
<tr>
<td style="text-align:center">9</td>
<td style="text-align:center">&lt;&lt;, &gt;&gt;</td>
</tr>
<tr>
<td style="text-align:center">10</td>
<td style="text-align:center">-, +</td>
</tr>
<tr>
<td style="text-align:center">11</td>
<td style="text-align:center">*, /, DIV, %, MOD</td>
</tr>
<tr>
<td style="text-align:center">12</td>
<td style="text-align:center">^</td>
</tr>
<tr>
<td style="text-align:center">13</td>
<td style="text-align:center">- (一元减号), ~ (一元比特反转)</td>
</tr>
<tr>
<td style="text-align:center">14</td>
<td style="text-align:center">!</td>
</tr>
</tbody>
</table>
</div>
<h1 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h1><h2 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">函数</th>
<th style="text-align:center">功能</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">CONCAT(S1,S2,…Sn)</td>
<td style="text-align:center">连接S1,S2,…Sn为一个字符串</td>
</tr>
<tr>
<td style="text-align:center">INSERT(str,x,y,instr)</td>
<td style="text-align:center">将字符串str从第x位置开始，y个字符长的子串替换为字符串instr</td>
</tr>
<tr>
<td style="text-align:center">LOWER(str)</td>
<td style="text-align:center">将字符串str中所有字符变为小写</td>
</tr>
<tr>
<td style="text-align:center">UPPER(str)</td>
<td style="text-align:center">将字符串str中所有字符变为大写</td>
</tr>
<tr>
<td style="text-align:center">LEFT(str,x)</td>
<td style="text-align:center">返回字符串str最左边的x个字符</td>
</tr>
<tr>
<td style="text-align:center">RIGHT(str,x)</td>
<td style="text-align:center">返回字符串str最右边的x个字符</td>
</tr>
<tr>
<td style="text-align:center">LPAD(str,n,pad)</td>
<td style="text-align:center">用字符串pad对str最左边进行填充，直到长度为n个字符长度</td>
</tr>
<tr>
<td style="text-align:center">RPAD(str,n,pad)</td>
<td style="text-align:center">用字符串pad对str最右边进行填充，直到长度为n个字符长度</td>
</tr>
<tr>
<td style="text-align:center">LTRIM(str)</td>
<td style="text-align:center">去掉字符串str左侧的空格</td>
</tr>
<tr>
<td style="text-align:center">RTRIM(str)</td>
<td style="text-align:center">去掉字符串str行尾的空格</td>
</tr>
<tr>
<td style="text-align:center">REPEAT(str,x)</td>
<td style="text-align:center">返回str重复x次的结果</td>
</tr>
<tr>
<td style="text-align:center">REPLACE(str,a,b)</td>
<td style="text-align:center">用字符串b替换字符串str中所有出现的字符串a</td>
</tr>
<tr>
<td style="text-align:center">STRCMP(s1,s2)</td>
<td style="text-align:center">比较字符串s1和s2</td>
</tr>
<tr>
<td style="text-align:center">TRIM(str)</td>
<td style="text-align:center">去掉字符串行尾和行头的空格</td>
</tr>
<tr>
<td style="text-align:center">SUBSTRING(str,x,y)</td>
<td style="text-align:center">返回从字符串strx位置起y个字符长度的字串</td>
</tr>
</tbody>
</table>
</div>
<h2 id="数值函数"><a href="#数值函数" class="headerlink" title="数值函数"></a>数值函数</h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">函数</th>
<th style="text-align:center">功能</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">ABS(x)</td>
<td style="text-align:center">返回x的绝对值</td>
</tr>
<tr>
<td style="text-align:center">CEIL(x)</td>
<td style="text-align:center">返回大于x的最大整数值</td>
</tr>
<tr>
<td style="text-align:center">FLOOR(x)</td>
<td style="text-align:center">返回小于x的最大整数值</td>
</tr>
<tr>
<td style="text-align:center">MOD(x，y)</td>
<td style="text-align:center">返回x/y的模</td>
</tr>
<tr>
<td style="text-align:center">RAND()</td>
<td style="text-align:center">返回0到1内的随机值</td>
</tr>
<tr>
<td style="text-align:center">ROUND(x,y)</td>
<td style="text-align:center">返回参数x的四舍五入的有y位小数的值</td>
</tr>
<tr>
<td style="text-align:center">TRUNCATE(x,y)</td>
<td style="text-align:center">返回数字x截断为y位小数的结果</td>
</tr>
</tbody>
</table>
</div>
<h2 id="日期和时间函数"><a href="#日期和时间函数" class="headerlink" title="日期和时间函数"></a>日期和时间函数</h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">函数</th>
<th style="text-align:center">功能</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">CURDATE()</td>
<td style="text-align:center">返回当前日期</td>
</tr>
<tr>
<td style="text-align:center">CURTIME()</td>
<td style="text-align:center">返回当前时间</td>
</tr>
<tr>
<td style="text-align:center">NOW()</td>
<td style="text-align:center">返回当前的日期和时间</td>
</tr>
<tr>
<td style="text-align:center">UNIX_TIMESTAMP(date)</td>
<td style="text-align:center">返回日期date的UNIX时间戳</td>
</tr>
<tr>
<td style="text-align:center">FROM_UNIXTIME</td>
<td style="text-align:center">返回UNIX时间戳的日期值</td>
</tr>
<tr>
<td style="text-align:center">WEEK(date)</td>
<td style="text-align:center">返回日期date为一年中的第几周</td>
</tr>
<tr>
<td style="text-align:center">YEAR(date)</td>
<td style="text-align:center">返回日期date的年份</td>
</tr>
<tr>
<td style="text-align:center">HOUR(time)</td>
<td style="text-align:center">返回time的小时值</td>
</tr>
<tr>
<td style="text-align:center">MINUTE(time)</td>
<td style="text-align:center">返回time的分钟值</td>
</tr>
<tr>
<td style="text-align:center">MONTHNAME(date)</td>
<td style="text-align:center">返回date的月份名</td>
</tr>
<tr>
<td style="text-align:center">DATE_FORMAT(date,fmt)</td>
<td style="text-align:center">返回按字符串fmt格式化日期date值</td>
</tr>
<tr>
<td style="text-align:center">DATE_ADD(date,INTERVALexprtype)</td>
<td style="text-align:center">返回一个日期或时间值加上一个时间间隔的时间值</td>
</tr>
<tr>
<td style="text-align:center">DATEDIFF(expr,expr2)</td>
<td style="text-align:center">返回起始时间expr和结束时间expr2之间的天数</td>
</tr>
</tbody>
</table>
</div>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MariaDB [test]&gt; select CURDATE(), CURTIME(), NOW(), UNIX_TIMESTAMP(now()), FROM_UNIXTIME(1521907408),</span><br><span class="line">    -&gt; WEEK(now()), YEAR(now()), HOUR(CURTIME()), MINUTE(CURTIME()),  MONTHNAME(now())\G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">                CURDATE(): 2018-03-25</span><br><span class="line">                CURTIME(): 00:13:13</span><br><span class="line">                    NOW(): 2018-03-25 00:13:13</span><br><span class="line">    UNIX_TIMESTAMP(now()): 1521907993</span><br><span class="line">FROM_UNIXTIME(1521907408): 2018-03-25 00:03:28</span><br><span class="line">              WEEK(now()): 12</span><br><span class="line">              YEAR(now()): 2018</span><br><span class="line">          HOUR(CURTIME()): 0</span><br><span class="line">        MINUTE(CURTIME()): 13</span><br><span class="line">         MONTHNAME(now()): March</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [test]&gt; select DATE_FORMAT(now(),&apos;%M,%D,%Y&apos;),</span><br><span class="line">    -&gt; now() current,</span><br><span class="line">    -&gt; date_add(now(),INTERVAL 31 day) after31days,</span><br><span class="line">    -&gt; date_add(now(),INTERVAL &apos;1_2&apos; year_month) after_oneyear_twomonth,</span><br><span class="line">    -&gt; date_add(now(),INTERVAL -31 day) before31days,</span><br><span class="line">    -&gt; date_add(now(),INTERVAL &apos;-1_-2&apos; year_month) before_oneyear_twomonth\G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">DATE_FORMAT(now(),&apos;%M,%D,%Y&apos;): March,25th,2018</span><br><span class="line">                      current: 2018-03-25 00:36:15</span><br><span class="line">                  after31days: 2018-04-25 00:36:15</span><br><span class="line">       after_oneyear_twomonth: 2019-05-25 00:36:15</span><br><span class="line">                 before31days: 2018-02-22 00:36:15</span><br><span class="line">      before_oneyear_twomonth: 2017-01-25 00:36:15</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>
<h3 id="DATE-FORMAT"><a href="#DATE-FORMAT" class="headerlink" title="DATE_FORMAT"></a>DATE_FORMAT</h3><p>DATE_FORMAT(date,fmt)函数：按字符串fmt格式化日期date值，此函数能够按指定的格式显示日期</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">格式符</th>
<th style="text-align:center">格式说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">%S,%s</td>
<td style="text-align:center">两位数字形式的秒（00,01,…,59）</td>
</tr>
<tr>
<td style="text-align:center">%i</td>
<td style="text-align:center">两位数字形式的分（00,01,…,59）</td>
</tr>
<tr>
<td style="text-align:center">%H</td>
<td style="text-align:center">两位数字形式的小时，24 小时（00,01,…,23）</td>
</tr>
<tr>
<td style="text-align:center">%h,%I</td>
<td style="text-align:center">两位数字形式的小时，12 小时（01,02,…,12）</td>
</tr>
<tr>
<td style="text-align:center">%k</td>
<td style="text-align:center">数字形式的小时，24 小时（0,1,…,23）</td>
</tr>
<tr>
<td style="text-align:center">%l</td>
<td style="text-align:center">数字形式的小时，12 小时（1,2,…,12）</td>
</tr>
<tr>
<td style="text-align:center">%T</td>
<td style="text-align:center">24 小时的时间形式（hh:mm:ss）</td>
</tr>
<tr>
<td style="text-align:center">%r</td>
<td style="text-align:center">12 小时的时间形式（hh:mm:ssAM 或 hh:mm:ssPM）</td>
</tr>
<tr>
<td style="text-align:center">%p</td>
<td style="text-align:center">AM 或 PM</td>
</tr>
<tr>
<td style="text-align:center">%W</td>
<td style="text-align:center">一周中每一天的名称（Sunday,Monday,…,Saturday）</td>
</tr>
<tr>
<td style="text-align:center">%a</td>
<td style="text-align:center">一周中每一天名称的缩写（Sun,Mon,…,Sat）</td>
</tr>
<tr>
<td style="text-align:center">%d</td>
<td style="text-align:center">两位数字表示月中的天数（00,01,…,31）</td>
</tr>
<tr>
<td style="text-align:center">%e</td>
<td style="text-align:center">数字形式表示月中的天数（1,2，…,31）</td>
</tr>
<tr>
<td style="text-align:center">%D</td>
<td style="text-align:center">英文后缀表示月中的天数（1st,2nd,3rd,…）</td>
</tr>
<tr>
<td style="text-align:center">%w</td>
<td style="text-align:center">以数字形式表示周中的天数（0=Sunday,1=Monday,…,6=Saturday）</td>
</tr>
<tr>
<td style="text-align:center">%j</td>
<td style="text-align:center">以 3 位数字表示年中的天数（001,002,…,366）</td>
</tr>
<tr>
<td style="text-align:center">%U</td>
<td style="text-align:center">周（0,1,52），其中 Sunday 为周中的第一天</td>
</tr>
<tr>
<td style="text-align:center">%u</td>
<td style="text-align:center">周（0,1,52），其中 Monday 为周中的第一天</td>
</tr>
<tr>
<td style="text-align:center">%M</td>
<td style="text-align:center">月名（January,February,…,December）</td>
</tr>
<tr>
<td style="text-align:center">%b</td>
<td style="text-align:center">缩写的月名（January,February,…,December）</td>
</tr>
<tr>
<td style="text-align:center">%m</td>
<td style="text-align:center">两位数字表示的月份（01,02,…,12）</td>
</tr>
<tr>
<td style="text-align:center">%c</td>
<td style="text-align:center">数字表示的月份（1,2,…,12）</td>
</tr>
<tr>
<td style="text-align:center">%Y</td>
<td style="text-align:center">4 位数字表示的年份</td>
</tr>
<tr>
<td style="text-align:center">%y</td>
<td style="text-align:center">两位数字表示的年份</td>
</tr>
<tr>
<td style="text-align:center">%%</td>
<td style="text-align:center">直接值“%</td>
</tr>
</tbody>
</table>
</div>
<h3 id="DATE-ADD"><a href="#DATE-ADD" class="headerlink" title="DATE_ADD"></a>DATE_ADD</h3><p>DATE_ADD(date,INTERVAL expr type)函数：返回与所给日期date相差INTERVAL时间段的日期<br>其中INTERVAL是间隔类型关键字，expr是一个表达式，这个表达式对应后面的类型，type是间隔类型</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">表达式类型</th>
<th style="text-align:center">描述</th>
<th style="text-align:center">格式</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">HOUR</td>
<td style="text-align:center">小时</td>
<td style="text-align:center">hh</td>
</tr>
<tr>
<td style="text-align:center">MINUTE</td>
<td style="text-align:center">分</td>
<td style="text-align:center">mm</td>
</tr>
<tr>
<td style="text-align:center">SECOND</td>
<td style="text-align:center">秒</td>
<td style="text-align:center">ss</td>
</tr>
<tr>
<td style="text-align:center">YEAR</td>
<td style="text-align:center">年</td>
<td style="text-align:center">YY</td>
</tr>
<tr>
<td style="text-align:center">MONTH</td>
<td style="text-align:center">月</td>
<td style="text-align:center">MM</td>
</tr>
<tr>
<td style="text-align:center">DAY</td>
<td style="text-align:center">日</td>
<td style="text-align:center">DD</td>
</tr>
<tr>
<td style="text-align:center">YEAR_MONTH</td>
<td style="text-align:center">年和月</td>
<td style="text-align:center">YY-MM</td>
</tr>
<tr>
<td style="text-align:center">DAY_HOUR</td>
<td style="text-align:center">日和小时</td>
<td style="text-align:center">DD hh</td>
</tr>
<tr>
<td style="text-align:center">DAY_MINUTE</td>
<td style="text-align:center">日和分钟</td>
<td style="text-align:center">DD hh:mm</td>
</tr>
<tr>
<td style="text-align:center">DAY_SECOND</td>
<td style="text-align:center">日和秒</td>
<td style="text-align:center">DD hh:mm:ss</td>
</tr>
<tr>
<td style="text-align:center">HOUR_MINUTE</td>
<td style="text-align:center">小时和分</td>
<td style="text-align:center">hh:mm</td>
</tr>
<tr>
<td style="text-align:center">HOUR_SECOND</td>
<td style="text-align:center">小时和秒</td>
<td style="text-align:center">hh:ss</td>
</tr>
<tr>
<td style="text-align:center">MINUTE_SECOND</td>
<td style="text-align:center">分钟和秒</td>
<td style="text-align:center">mm:ss</td>
</tr>
</tbody>
</table>
</div>
<h2 id="流程函数"><a href="#流程函数" class="headerlink" title="流程函数"></a>流程函数</h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">函数</th>
<th style="text-align:center">功能</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">IF(value,t f)</td>
<td style="text-align:center">如果 value 是真，返回 t；否则返回 f</td>
</tr>
<tr>
<td style="text-align:center">IFNULL(value1,value2)</td>
<td style="text-align:center">如果 value1 不为空返回 value1，否则返回 value2</td>
</tr>
<tr>
<td style="text-align:center">CASE WHEN [value1] THEN[result1]…ELSE[default]END</td>
<td style="text-align:center">如果 value1 是真，返回 result1，否则返回 default</td>
</tr>
<tr>
<td style="text-align:center">CASE [expr] WHEN [value1] THEN[result1]…ELSE[default]END</td>
<td style="text-align:center">如果 expr 等于 value1，返回 result1，否则返回 default</td>
</tr>
</tbody>
</table>
</div>
<h2 id="其他常用函数"><a href="#其他常用函数" class="headerlink" title="其他常用函数"></a>其他常用函数</h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">函数</th>
<th style="text-align:center">功能</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">DATABASE()</td>
<td style="text-align:center">返回当前数据库名</td>
</tr>
<tr>
<td style="text-align:center">VERSION()</td>
<td style="text-align:center">返回当前数据库版本</td>
</tr>
<tr>
<td style="text-align:center">USER()</td>
<td style="text-align:center">返回当前登录用户名</td>
</tr>
<tr>
<td style="text-align:center">INET_ATON(IP)</td>
<td style="text-align:center">返回IP地址的数字表示</td>
</tr>
<tr>
<td style="text-align:center">INET_NTOA(num)</td>
<td style="text-align:center">返回数字代表的IP地址</td>
</tr>
<tr>
<td style="text-align:center">PASSWORD(str)</td>
<td style="text-align:center">返回字符串str的加密版本</td>
</tr>
<tr>
<td style="text-align:center">MD5()</td>
<td style="text-align:center">返回字符串str的MD5值</td>
</tr>
</tbody>
</table>
</div>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL 存储引擎</title>
    <url>/2018/03/26/mysql-6/</url>
    <content><![CDATA[<h1 id="MySQL存储引擎概述"><a href="#MySQL存储引擎概述" class="headerlink" title="MySQL存储引擎概述"></a>MySQL存储引擎概述</h1><p>插入式存储引擎是MySQL数据库最重要的特性之一，用户可根据应用的需要选择如何存储和索引数据、是否使用事物等。<br>MySQL支持的引擎包括：MyISAM、InnoDB、BDB、MEMORY、MERGE、EXAMPLE、NDB Cluster、ARCHIVE、CSV、BLACKHOLE、FEDERATED等。<br>InnoDB和BDB提供事物安全表，其它引擎都是非事物安全的。</p>
<h2 id="默认存储引擎"><a href="#默认存储引擎" class="headerlink" title="默认存储引擎"></a>默认存储引擎</h2><p>默认情况下创建新表不指定表的存储引擎，则新表是默认存储引擎，设置默认存储引擎在配置文件中设置default-storage-engine<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">default-storage-engine=INNODB</span><br></pre></td></tr></table></figure></p>
<p>查看当前默认存储引擎<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">MariaDB [test]&gt; show variables like '%storage_engine%';</span><br><span class="line">+<span class="comment">------------------------+--------+</span></span><br><span class="line">| Variable_name          | Value  |</span><br><span class="line">+<span class="comment">------------------------+--------+</span></span><br><span class="line">| default_storage_engine | InnoDB |</span><br><span class="line">| storage_engine         | InnoDB |</span><br><span class="line">+<span class="comment">------------------------+--------+</span></span><br><span class="line">2 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure></p>
<p>查看支持的存储引擎<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">ariaDB [test]&gt; show engines;</span><br><span class="line">+<span class="comment">--------------------+---------+----------------------------------------------------------------------------+--------------+------+------------+</span></span><br><span class="line">| Engine             | Support | <span class="keyword">Comment</span>                                                                    | Transactions | XA   | Savepoints |</span><br><span class="line">+<span class="comment">--------------------+---------+----------------------------------------------------------------------------+--------------+------+------------+</span></span><br><span class="line">| CSV                | YES     | CSV <span class="keyword">storage</span> <span class="keyword">engine</span>                                                         | <span class="keyword">NO</span>           | <span class="keyword">NO</span>   | <span class="keyword">NO</span>         |</span><br><span class="line">| MRG_MYISAM         | YES     | Collection <span class="keyword">of</span> identical MyISAM <span class="keyword">tables</span>                                      | <span class="keyword">NO</span>           | <span class="keyword">NO</span>   | <span class="keyword">NO</span>         |</span><br><span class="line">| <span class="keyword">MEMORY</span>             | YES     | <span class="keyword">Hash</span> based, <span class="keyword">stored</span> <span class="keyword">in</span> <span class="keyword">memory</span>, useful <span class="keyword">for</span> <span class="keyword">temporary</span> <span class="keyword">tables</span>                  | <span class="keyword">NO</span>           | <span class="keyword">NO</span>   | <span class="keyword">NO</span>         |</span><br><span class="line">| BLACKHOLE          | YES     | /dev/<span class="literal">null</span> <span class="keyword">storage</span> <span class="keyword">engine</span> (anything you write <span class="keyword">to</span> it disappears)             | <span class="keyword">NO</span>           | <span class="keyword">NO</span>   | <span class="keyword">NO</span>         |</span><br><span class="line">| MyISAM             | YES     | MyISAM <span class="keyword">storage</span> <span class="keyword">engine</span>                                                      | <span class="keyword">NO</span>           | <span class="keyword">NO</span>   | <span class="keyword">NO</span>         |</span><br><span class="line">| <span class="keyword">InnoDB</span>             | <span class="keyword">DEFAULT</span> | Percona-XtraDB, Supports transactions, <span class="keyword">row</span>-<span class="keyword">level</span> locking, <span class="keyword">and</span> <span class="keyword">foreign</span> <span class="keyword">keys</span> | YES          | YES  | YES        |</span><br><span class="line">| <span class="keyword">ARCHIVE</span>            | YES     | <span class="keyword">Archive</span> <span class="keyword">storage</span> <span class="keyword">engine</span>                                                     | <span class="keyword">NO</span>           | <span class="keyword">NO</span>   | <span class="keyword">NO</span>         |</span><br><span class="line">| FEDERATED          | YES     | FederatedX <span class="keyword">pluggable</span> <span class="keyword">storage</span> <span class="keyword">engine</span>                                        | YES          | <span class="keyword">NO</span>   | YES        |</span><br><span class="line">| PERFORMANCE_SCHEMA | YES     | <span class="keyword">Performance</span> <span class="keyword">Schema</span>                                                         | <span class="keyword">NO</span>           | <span class="keyword">NO</span>   | <span class="keyword">NO</span>         |</span><br><span class="line">| Aria               | YES     | Crash-<span class="keyword">safe</span> <span class="keyword">tables</span> <span class="keyword">with</span> MyISAM heritage                                     | <span class="keyword">NO</span>           | <span class="keyword">NO</span>   | <span class="keyword">NO</span>         |</span><br><span class="line">+<span class="comment">--------------------+---------+----------------------------------------------------------------------------+--------------+------+------------+</span></span><br><span class="line"><span class="number">10</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure></p>
<h2 id="指定存储引擎"><a href="#指定存储引擎" class="headerlink" title="指定存储引擎"></a>指定存储引擎</h2><p>创建表使用engine关键字设置新表存储引擎<br>使用alter table可以修改表的存储结构<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">MariaDB [test]&gt; create table test1(a int(10), b varchar(10));</span><br><span class="line">Query OK, 0 rows affected (0.05 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [test]&gt; show create table test1\G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">       Table: test1</span><br><span class="line"><span class="keyword">Create</span> <span class="keyword">Table</span>: <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`test1`</span> (</span><br><span class="line">  <span class="string">`a`</span> <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`b`</span> <span class="built_in">varchar</span>(<span class="number">10</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span></span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=latin1</span><br><span class="line"><span class="number">1</span> <span class="keyword">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">MariaDB [<span class="keyword">test</span>]&gt; <span class="keyword">drop</span> <span class="keyword">table</span> test1;</span><br><span class="line">Query OK, 0 rows affected (0.02 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [test]&gt; create table test1(a int(10), b varchar(10))engine=MyISAM;</span><br><span class="line">Query OK, 0 rows affected (0.02 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [test]&gt; show create table test1\G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">       Table: test1</span><br><span class="line"><span class="keyword">Create</span> <span class="keyword">Table</span>: <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`test1`</span> (</span><br><span class="line">  <span class="string">`a`</span> <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`b`</span> <span class="built_in">varchar</span>(<span class="number">10</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span></span><br><span class="line">) <span class="keyword">ENGINE</span>=MyISAM <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=latin1</span><br><span class="line"><span class="number">1</span> <span class="keyword">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">MariaDB [<span class="keyword">test</span>]&gt; <span class="keyword">alter</span> <span class="keyword">table</span> test1 <span class="keyword">engine</span>=<span class="keyword">innodb</span>;</span><br><span class="line">Query OK, 0 rows affected (0.06 sec)               </span><br><span class="line">Records: 0  Duplicates: 0  Warnings: 0</span><br><span class="line"></span><br><span class="line">MariaDB [test]&gt; show create table test1\G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">       Table: test1</span><br><span class="line"><span class="keyword">Create</span> <span class="keyword">Table</span>: <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`test1`</span> (</span><br><span class="line">  <span class="string">`a`</span> <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`b`</span> <span class="built_in">varchar</span>(<span class="number">10</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span></span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=latin1</span><br><span class="line"><span class="number">1</span> <span class="keyword">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure></p>
<h1 id="各种存储引擎特性"><a href="#各种存储引擎特性" class="headerlink" title="各种存储引擎特性"></a>各种存储引擎特性</h1><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">特点</th>
<th style="text-align:center">MyISAM</th>
<th style="text-align:center">InnoDB</th>
<th style="text-align:center">MEMORY</th>
<th style="text-align:center">MERGE</th>
<th style="text-align:center">NDB</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">存储限制</td>
<td style="text-align:center">有</td>
<td style="text-align:center">64TB</td>
<td style="text-align:center">有</td>
<td style="text-align:center">没有</td>
<td style="text-align:center">有</td>
</tr>
<tr>
<td style="text-align:center">事务安全</td>
<td style="text-align:center"></td>
<td style="text-align:center">支持</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">锁机制</td>
<td style="text-align:center">表锁</td>
<td style="text-align:center">行锁</td>
<td style="text-align:center">表锁</td>
<td style="text-align:center">表锁</td>
<td style="text-align:center">行锁</td>
</tr>
<tr>
<td style="text-align:center">B树索引</td>
<td style="text-align:center">支持</td>
<td style="text-align:center">支持</td>
<td style="text-align:center">支持</td>
<td style="text-align:center">支持</td>
<td style="text-align:center">支持</td>
</tr>
<tr>
<td style="text-align:center">哈希索引</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">支持</td>
<td style="text-align:center"></td>
<td style="text-align:center">支持</td>
</tr>
<tr>
<td style="text-align:center">全文索引</td>
<td style="text-align:center">支持</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">集群索引</td>
<td style="text-align:center"></td>
<td style="text-align:center">支持</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">数据缓存</td>
<td style="text-align:center"></td>
<td style="text-align:center">支持</td>
<td style="text-align:center">支持</td>
<td style="text-align:center"></td>
<td style="text-align:center">支持</td>
</tr>
<tr>
<td style="text-align:center">索引缓存</td>
<td style="text-align:center">支持</td>
<td style="text-align:center">支持</td>
<td style="text-align:center">支持</td>
<td style="text-align:center">支持</td>
<td style="text-align:center">支持</td>
</tr>
<tr>
<td style="text-align:center">数据可压缩</td>
<td style="text-align:center">支持</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">空间使用</td>
<td style="text-align:center">低</td>
<td style="text-align:center">高</td>
<td style="text-align:center">N/A</td>
<td style="text-align:center">低</td>
<td style="text-align:center">低</td>
</tr>
<tr>
<td style="text-align:center">内存使用</td>
<td style="text-align:center">低</td>
<td style="text-align:center">高</td>
<td style="text-align:center">中等</td>
<td style="text-align:center">低</td>
<td style="text-align:center">高</td>
</tr>
<tr>
<td style="text-align:center">批量插入的速度</td>
<td style="text-align:center">高</td>
<td style="text-align:center">低</td>
<td style="text-align:center">高</td>
<td style="text-align:center">高</td>
<td style="text-align:center">高</td>
</tr>
<tr>
<td style="text-align:center">支持外键</td>
<td style="text-align:center"></td>
<td style="text-align:center">支持</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
</tbody>
</table>
</div>
<h2 id="MyISAM"><a href="#MyISAM" class="headerlink" title="MyISAM"></a>MyISAM</h2><p><strong>不支持事物、不支持外键,访问速度快，对事物完整性没有要求或者以SELECT、INSERT为主的应用基本上都可以使用MyISAM引擎。</strong><br>每个MyISAM在磁盘上存储为3个文件，文件名与表名相同，扩展名不同：</p>
<ul>
<li>.frm(存储表定义)</li>
<li>.MYD(MyData,存储数据)</li>
<li>.MYI(MYIndex,存储索引)<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">[root@VM_187_252_centos test]<span class="comment"># cat /etc/my.cnf | grep datadir</span></span><br><span class="line">datadir=/var/lib/mysql</span><br><span class="line">[root@VM_187_252_centos test]<span class="comment"># ls /var/lib/mysql/test/ | grep test_myisam</span></span><br><span class="line">test_myisam.frm</span><br><span class="line">test_myisam.MYD</span><br><span class="line">test_myisam.MYI</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>数据文件和索引文件可以放置在不同目录，平均分布IO，获得更快速度。创建表时可通过DATA DIRECTORY和INDEX DIRECTORY指定数据文件路径和索引文件路径，文件路径使用绝对路径，且有访问权限。<br>MyISAM类型的表可能会损坏，损坏后的表可能不能访问，会提示修复或返回错误数据。<br>使用CHECK TABLE语句可以检查MyISAM表的健康，使用REPAIR TABLE可以修复损坏的MyISAM表。<br>MyISAM表支持三种不同存储格式：</p>
<ul>
<li>静态(固定长度)表 默认存储格式。静态表字段非变长字段，每个记录固定长度，<strong>存储迅速，容易缓存，出现故障容易恢复，占用空间比动态表多</strong>。静态表数据存储时按列宽补总空格，但应用访问时并不返回空格，会自动去掉。</li>
<li>动态表 包含变长字段，记录不是固定长度。占用空间少，频繁更新删除字段会产生碎片，需要定期执行OPTIMIZE TABLE或myisamchk -r命令改善性能，出现故障恢复比较困难。</li>
<li>压缩表 压缩表用myisampack工具创建，占用非常小的磁盘空间。每个记录都被单独压缩，只有非常小的访问开支。<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">MariaDB [test]&gt; create table test_myisam(a char(64), b varchar(64)) engine=myisam;</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [test]&gt; insert into test_myisam values(" abc", " abc"), ("abc ", "abc ");</span><br><span class="line">Query OK, 2 rows affected (0.00 sec)</span><br><span class="line">Records: 2  Duplicates: 0  Warnings: 0</span><br><span class="line"></span><br><span class="line">MariaDB [test]&gt; select concat(a, "+"), concat(b, "+") from test_myisam;</span><br><span class="line">+<span class="comment">----------------+----------------+</span></span><br><span class="line">| concat(a, "+") | concat(b, "+") |</span><br><span class="line">+<span class="comment">----------------+----------------+</span></span><br><span class="line">|  abc+          |  abc+          |</span><br><span class="line">| abc+           | abc +          |</span><br><span class="line">+<span class="comment">----------------+----------------+</span></span><br><span class="line">2 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="InnoDB"><a href="#InnoDB" class="headerlink" title="InnoDB"></a>InnoDB</h2><p>InnoDB存储引擎提供具有<strong>提交、回滚、崩溃恢复能力的事物安全</strong>。对比MyISAM，InnoDB写的<strong>处理效率差一点，并且会占用更多的磁盘控件保存数据和索引</strong>。</p>
<h3 id="自动增长列"><a href="#自动增长列" class="headerlink" title="自动增长列"></a>自动增长列</h3><ol>
<li>自动增长列不论插入0或NULL实际插入的都是自动增长的值。</li>
<li>可以使用ALTER TABLE ** AUTO_INCREMENT=n语句强制设置自动增长列的初始值（该强制值保存在内存中，若使用前数据库重启，该强制值会丢失，需重新设置）。</li>
<li>可使用LAST_INSERT_ID()查看当前线程最后插入记录使用的值，一次插入多条，返回第一条记录使用的自动增长列。</li>
<li>InnoDB自动增长列必须是索引。如果是组合索引，必须是组合索引第一列，对MyISAM，自动增长列可以是组合索引的其它列。</li>
</ol>
<h3 id="外键约束"><a href="#外键约束" class="headerlink" title="外键约束"></a>外键约束</h3><p>MySQL只有InnoDB支持外键约束，在创建外键时，要求父表必须有对应的索引，子表在创建外键时也会自动创建对应的索引。<br>在创建索引的时候，可以指定在删除、更新父表时，对子表进行的相应操作，包括 RESTRICT、 CASCADE、SET NULL 和 NO ACTION。<br>RESTRICT 和 NO ACTION 相同，是指限制在子表有关联记录的情况下父表不能更新；<br>CASCADE 表示父表在更新或者删除时，更新或者删除子表对应记录；<br>SET NULL 则表示父表在更新或者删除的时候，子表的对应字段被 SET NULL。<br>选择CASCADE和SET NULL两种方式的时候要谨慎，可能会因为错误的操作导致数据的丢失。<br>当某个表被其他表创建了外键参照，那么该表的对应索引或者主键禁止被删除。<br>在导入多个表的数据时，如果需要忽略表之前的导入顺序，可以暂时关闭外键的检查； 同样，在执行 LOAD DATA 和 ALTER TABLE 操作的时候，可以通过暂时关闭外键约束来加快处理的速度，关闭的命令是“SET FOREIGN_KEY_CHECKS = 0;”，执行完成之后，通过执行“SET FOREIGN_KEY_CHECKS = 1;”语句改回原状态。<br>对于 InnoDB 类型的表，外键的信息通过使用 show create table 或者 show table status 命令都可以显示。</p>
<h3 id="存储方式"><a href="#存储方式" class="headerlink" title="存储方式"></a>存储方式</h3><p>InnoDB 存储表和索引有以下两种方式。</p>
<ul>
<li>使用共享表空间存储，这种方式创建的表的表结构保存在.frm 文件中，数据和索引保存在 innodb_data_home_dir 和 innodb_data_file_path 定义的表空间中，可以是多个文件。</li>
<li>使用多表空间存储，这种方式创建的表的表结构仍然保存在.frm 文件中，但是每个表的数据和索引单独保存在.ibd 中。如果是个分区表，则每个分区对应单独的.ibd文件，文件名是“表名+分区名”，可以在创建分区的时候指定每个分区的数据文件的位置，以此来将表的 IO 均匀分布在多个磁盘上。</li>
</ul>
<p>多表空间的数据文件没有大小限制，不需要设置初始大小，也不需要设置文件的最大限制、扩展大小等参数。</p>
<h2 id="MEMORY"><a href="#MEMORY" class="headerlink" title="MEMORY"></a>MEMORY</h2><p>MEMORY 存储引擎使用存在内存中的内容来创建表。每个 MEMORY 表只实际对应一个磁盘文件，格式是.frm。MEMORY 类型的表访问非常得快，因为它的数据是放在内存中的，并且默认使用 HASH 索引，但是一旦服务关闭，表中的数据就会丢失掉。<br>给 MEMORY 表创建索引的时候，可以指定使用 HASH 索引还是 BTREE 索引。</p>
<h2 id="MERGE"><a href="#MERGE" class="headerlink" title="MERGE"></a>MERGE</h2><p>MERGE 存储引擎是一组 MyISAM 表的组合，这些 MyISAM 表必须结构完全相同，MERGE 表本身并没有数据，对 MERGE 类型的表可以进行查询、更新、删除的操作，这些操作实际上是对内部的实际的 MyISAM 表进行的。对于 MERGE 类型表的插入操作，是通过 INSERT_METHOD 子句定义插入的表，可以有 3 个不同的值，使用 FIRST 或 LAST 值使得插入操作被相应地作用在第一或最后一个表上，不定义这个子句或者定义为 NO，表示不能对这个 MERGE 表执行插入操作。<br>可以对 MERGE 表进行 DROP 操作，这个操作只是删除 MERGE 的定义，对内部的表没有任何的影响。<br>MERGE 表在磁盘上保留两个文件，文件名以表的名字开始，一个.frm 文件存储表定义，另一个.MRG 文件包含组合表的信息，包括 MERGE 表由哪些表组成、插入新的数据时的依据。<br>可以通过修改.MRG 文件来修改 MERGE 表，但是修改后要通过 FLUSH TABLES 刷新。</p>
<h1 id="合适存储引擎的选择"><a href="#合适存储引擎的选择" class="headerlink" title="合适存储引擎的选择"></a>合适存储引擎的选择</h1><ul>
<li>MyISAM：如果应用是以读操作和插入操作为主，只有很少的更新和删除操作，并且对事务的完整性、并发性要求不是很高，那么选择这个存储引擎是非常适合的。MyISAM 是在 Web、数据仓储和其他应用环境下最常使用的存储引擎<br>之一。</li>
<li>InnoDB：用于事务处理应用程序，支持外键。如果应用对事务的完整性有比较高的要求，在并发条件下要求数据的一致性，数据操作除了插入和查询以外，还包括很多的更新、删除操作，那么 InnoDB 存储引擎应该是比较合适的选择。InnoDB 存储引擎除了有效地降低由于删除和更新导致的锁定，还可以确保事务的完整提交（Commit）和回滚（Rollback），对于类似计费系统或者财务系统等对数据准确性要求比较高的系统，InnoDB 都是合适的选择。</li>
<li>MEMORY：将所有数据保存在 RAM 中，在需要快速定位记录和其他类似数据的环境下，可提供极快的访问。MEMORY 的缺陷是对表的大小有限制，太大的表无法 CACHE 在内存中，其次是要确保表的数据可以恢复，数据库异常终止后表中的数据是可以恢复的。MEMORY 表通常用于更新不太频繁的小表，用以快速得到访问结果。</li>
<li>MERGE：用于将一系列等同的 MyISAM 表以逻辑方式组合在一起，并作为一个对象引用它们。MERGE 表的优点在于可以突破对单个 MyISAM 表大小的限制，并且通过将不同的表分布在多个磁盘上，可以有效地改善MERGE表的访问效率。这对于诸如数据仓储等VLDB环境十分适合。</li>
</ul>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL 存储过程和函数 触发器</title>
    <url>/2018/03/30/mysql-8/</url>
    <content><![CDATA[<h1 id="存储过程和函数"><a href="#存储过程和函数" class="headerlink" title="存储过程和函数"></a>存储过程和函数</h1><p>存储过程和函数是事先经过编译并存储在数据库的一段SQL语句的集合，调用存储过程和函数可以简化应用开发人员的工作，减少数据在数据库和应用服务器之间的传输，对提高数据处理的效率有好处。<br>存储过程和函数的区别：</p>
<ol>
<li>函数必须有返回值，存储过程没有。</li>
<li>存储过程的参数使用IN、OUT、INOUT类型，而函数参数只能是IN类型。</li>
</ol>
<h1 id="存储过程和函数的相关操作"><a href="#存储过程和函数的相关操作" class="headerlink" title="存储过程和函数的相关操作"></a>存储过程和函数的相关操作</h1><h2 id="创建、修改存储过程或函数"><a href="#创建、修改存储过程或函数" class="headerlink" title="创建、修改存储过程或函数"></a>创建、修改存储过程或函数</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> sp_name ([proc_parameter[,...]])</span><br><span class="line">    [characteristic ...] routine_body</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> sp_name ([func_parameter[,...]])</span><br><span class="line">    <span class="keyword">RETURNS</span> <span class="keyword">type</span></span><br><span class="line">    [characteristic ...] routine_body</span><br><span class="line"></span><br><span class="line">    proc_parameter:</span><br><span class="line">    [ <span class="keyword">IN</span> | <span class="keyword">OUT</span> | INOUT ] param_name <span class="keyword">type</span></span><br><span class="line"></span><br><span class="line">    func_parameter:</span><br><span class="line">        param_name <span class="keyword">type</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span>:</span><br><span class="line">    <span class="keyword">Any</span> valid MySQL <span class="keyword">data</span> <span class="keyword">type</span></span><br><span class="line"></span><br><span class="line">characteristic:</span><br><span class="line">        <span class="keyword">LANGUAGE</span> <span class="keyword">SQL</span></span><br><span class="line">    | [<span class="keyword">NOT</span>] <span class="keyword">DETERMINISTIC</span></span><br><span class="line">    | &#123; CONTAINS <span class="keyword">SQL</span> | <span class="keyword">NO</span> <span class="keyword">SQL</span> | <span class="keyword">READS</span> <span class="keyword">SQL</span> <span class="keyword">DATA</span> | MODIFIES <span class="keyword">SQL</span> <span class="keyword">DATA</span> &#125;</span><br><span class="line">    | <span class="keyword">SQL</span> <span class="keyword">SECURITY</span> &#123; DEFINER | INVOKER &#125;</span><br><span class="line">    | <span class="keyword">COMMENT</span> <span class="string">'string'</span></span><br><span class="line"></span><br><span class="line">routine_body:</span><br><span class="line">    Valid <span class="keyword">SQL</span> <span class="keyword">procedure</span> <span class="keyword">statement</span> <span class="keyword">or</span> statements</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> &#123;<span class="keyword">PROCEDURE</span> | <span class="keyword">FUNCTION</span>&#125; sp_name [characteristic ...]</span><br><span class="line"></span><br><span class="line">characteristic:</span><br><span class="line">        &#123; CONTAINS <span class="keyword">SQL</span> | <span class="keyword">NO</span> <span class="keyword">SQL</span> | <span class="keyword">READS</span> <span class="keyword">SQL</span> <span class="keyword">DATA</span> | MODIFIES <span class="keyword">SQL</span> <span class="keyword">DATA</span> &#125;</span><br><span class="line">    | <span class="keyword">SQL</span> <span class="keyword">SECURITY</span> &#123; DEFINER | INVOKER &#125;</span><br><span class="line">    | <span class="keyword">COMMENT</span> <span class="string">'string</span></span><br></pre></td></tr></table></figure>
<p>调用过程：<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CALL</span> sp_name([parameter[,......]])</span><br></pre></td></tr></table></figure></p>
<p>MySQL存储过程和函数允许包含DDL语句，允许在存储过程中执行提交或回滚，但存储过程和函数中不允许执行LOAD DATA INFILE语句。存储过程和函数可以调用其他的过程或函数。<br>在执行创建过程和函数之前，通过DELIMITER语句将语句的结束符从”;”修改成其他符号。在创建过程和函数后通过”DELIMITER ;”语句再将结束符改回”;”<br>存储过程的好处在于处理逻辑封装在数据库端，调用者不需要了解中间的处理逻辑，一旦处理逻辑发生变化，只需要修改存储过程即可，而对调用者的程序完全没有影响。</p>
<p>存储过程和函数的 CREATE 语法不支持使用 CREATE OR REPLACE 对存储过程和函数进行修改，如果需要对已有的存储过程或者函数进行修改，需要执行 ALTER 语法。</p>
<p>characteristic特征值部分：</p>
<ol>
<li>LANGUAGE SQL：说明下面过程的 BODY 是使用 SQL 语言编写，这条是系统默认的，为今后 MySQL 会支持的除 SQL 外的其他语言支持的存储过程而准备。</li>
<li>[NOT] DETERMINISTIC：DETERMINISTIC 确定的，即每次输入一样输出也一样的程序，NOT DETERMINISTIC 非确定的，默认是非确定的。当前，这个特征值还没有被优化程序使用。</li>
<li>{ CONTAINS SQL | NO SQL | READS SQL DATA | MODIFIES SQL DATA }：这些特征值提供子程序使用数据的内在信息，这些特征值目前只是提供给服务器，并没有根据这些特征值来约束过程实际使用数据的情况。如果这些特征没有明确给定，默认使用的值是 CONTAINS SQL。<ol>
<li>CONTAINS SQL 表示子程序不包含读或写数据的语句。</li>
<li>NO SQL 表示子程序不包含 SQL 语句。</li>
<li>READS SQL DATA 表示子程序包含读数据的语句，但不包含写数据的语句。</li>
<li>MODIFIES SQL DATA 表示子程序包含写数据的语句。</li>
</ol>
</li>
<li>SQL SECURITY { DEFINER | INVOKER }：可以用来指定子程序该用创建子程序者的许可来执行，还是使用调用者的许可来执行。默认值是 DEFINER。</li>
<li>COMMENT ‘string’：存储过程或者函数的注释信息</li>
</ol>
<h2 id="删除存储过程或者函数"><a href="#删除存储过程或者函数" class="headerlink" title="删除存储过程或者函数"></a>删除存储过程或者函数</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> &#123;<span class="keyword">PROCEDURE</span> | <span class="keyword">FUNCTION</span>&#125; [<span class="keyword">IF</span> <span class="keyword">EXISTS</span>] sp_name</span><br></pre></td></tr></table></figure>
<h2 id="查看存储过程或函数"><a href="#查看存储过程或函数" class="headerlink" title="查看存储过程或函数"></a>查看存储过程或函数</h2><h3 id="查看存储过程或函数的状态"><a href="#查看存储过程或函数的状态" class="headerlink" title="查看存储过程或函数的状态"></a>查看存储过程或函数的状态</h3><p>SHOW {PROCEDURE|FUNCTION} STATUS [LIKE ‘pattern’];</p>
<h3 id="查看存储过程或函数的定义"><a href="#查看存储过程或函数的定义" class="headerlink" title="查看存储过程或函数的定义"></a>查看存储过程或函数的定义</h3><p>SHOW CREATE {PROCEDURE|FUNCTION} sp_name;</p>
<h3 id="通过系统表查看存储过程或函数信息"><a href="#通过系统表查看存储过程或函数信息" class="headerlink" title="通过系统表查看存储过程或函数信息"></a>通过系统表查看存储过程或函数信息</h3><p>查看information_schema.routines表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">MariaDB [test]&gt; DELIMITER $$</span><br><span class="line">MariaDB [test]&gt; CREATE PROCEDURE select_test_int (IN p_a INT, IN p_b INT)</span><br><span class="line">    -&gt; READS SQL DATA</span><br><span class="line">    -&gt; BEGIN</span><br><span class="line">    -&gt;     SELECT a, b from test_int</span><br><span class="line">    -&gt;         WHERE a&lt;p_a or b&gt;p_b;</span><br><span class="line">    -&gt; END $$</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [test]&gt; DELIMITER ;</span><br><span class="line">MariaDB [test]&gt; call select_test_int(1, 10);</span><br><span class="line">+<span class="comment">----------+-------------+</span></span><br><span class="line">| a        | b           |</span><br><span class="line">+<span class="comment">----------+-------------+</span></span><br><span class="line">| 56457789 | 04294967295 |</span><br><span class="line">| 56457789 | 04294967295 |</span><br><span class="line">+<span class="comment">----------+-------------+</span></span><br><span class="line">2 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line"><span class="keyword">Query</span> OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">MariaDB [<span class="keyword">test</span>]&gt; <span class="keyword">call</span> select_test_int(<span class="number">10</span>, <span class="number">10</span>);</span><br><span class="line">+<span class="comment">----------+-------------+</span></span><br><span class="line">| a        | b           |</span><br><span class="line">+<span class="comment">----------+-------------+</span></span><br><span class="line">|    00001 | 00000000001 |</span><br><span class="line">| 56457789 | 04294967295 |</span><br><span class="line">|    00001 | 00000000001 |</span><br><span class="line">| 56457789 | 04294967295 |</span><br><span class="line">+<span class="comment">----------+-------------+</span></span><br><span class="line">4 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line"><span class="keyword">Query</span> OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">MariaDB [<span class="keyword">test</span>]&gt; <span class="keyword">SHOW</span> <span class="keyword">PROCEDURE</span> <span class="keyword">STATUS</span>;</span><br><span class="line">+<span class="comment">------+-----------------+-----------+----------------+---------------------+---------------------+---------------+---------+----------------------+----------------------+--------------------+</span></span><br><span class="line">| Db   | Name            | Type      | Definer        | Modified            | Created             | Security_type | <span class="keyword">Comment</span> | character_set_client | collation_connection | <span class="keyword">Database</span> <span class="keyword">Collation</span> |</span><br><span class="line">+<span class="comment">------+-----------------+-----------+----------------+---------------------+---------------------+---------------+---------+----------------------+----------------------+--------------------+</span></span><br><span class="line">| <span class="keyword">test</span> | select_test_int | <span class="keyword">PROCEDURE</span> | root@localhost | <span class="number">2018</span><span class="number">-03</span><span class="number">-30</span> <span class="number">22</span>:<span class="number">58</span>:<span class="number">38</span> | <span class="number">2018</span><span class="number">-03</span><span class="number">-30</span> <span class="number">22</span>:<span class="number">58</span>:<span class="number">38</span> | DEFINER       |         | utf8                 | utf8_general_ci      | latin1_swedish_ci  |</span><br><span class="line">+<span class="comment">------+-----------------+-----------+----------------+---------------------+---------------------+---------------+---------+----------------------+----------------------+--------------------+</span></span><br><span class="line"></span><br><span class="line">MariaDB [<span class="keyword">test</span>]&gt; <span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> select_test_int\G</span><br><span class="line">*************************** <span class="number">1.</span> <span class="keyword">row</span> ***************************</span><br><span class="line">           <span class="keyword">Procedure</span>: select_test_int</span><br><span class="line">            sql_mode:</span><br><span class="line">    <span class="keyword">Create</span> <span class="keyword">Procedure</span>: <span class="keyword">CREATE</span> DEFINER=<span class="string">`root`</span>@<span class="string">`localhost`</span> <span class="keyword">PROCEDURE</span> <span class="string">`select_test_int`</span>(<span class="keyword">IN</span> p_a <span class="built_in">INT</span>, <span class="keyword">IN</span> p_b <span class="built_in">INT</span>)</span><br><span class="line">    <span class="keyword">READS</span> <span class="keyword">SQL</span> <span class="keyword">DATA</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">SELECT</span> a, b <span class="keyword">from</span> test_int</span><br><span class="line">        <span class="keyword">WHERE</span> a&lt;p_a <span class="keyword">or</span> b&gt;p_b;</span><br><span class="line"><span class="keyword">END</span></span><br><span class="line">character_set_client: utf8</span><br><span class="line">collation_connection: utf8_general_ci</span><br><span class="line">  <span class="keyword">Database</span> <span class="keyword">Collation</span>: latin1_swedish_ci</span><br><span class="line"><span class="number">1</span> <span class="keyword">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">MariaDB [<span class="keyword">test</span>]&gt; <span class="keyword">DROP</span> <span class="keyword">PROCEDURE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> select_test_int\G</span><br><span class="line"><span class="keyword">Query</span> OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">MariaDB [<span class="keyword">test</span>]&gt; DELIMITER $$</span><br><span class="line">MariaDB [<span class="keyword">test</span>]&gt; <span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> select_test_int_f (p_a <span class="built_in">INT</span>, p_b <span class="built_in">INT</span>)</span><br><span class="line">    -&gt; <span class="keyword">RETURNS</span> <span class="built_in">INT</span></span><br><span class="line">    -&gt; <span class="keyword">BEGIN</span></span><br><span class="line">    -&gt;     <span class="keyword">DECLARE</span> p_c <span class="built_in">INT</span>;</span><br><span class="line">    -&gt;     SELECT count(1) INTO p_c from test_int</span><br><span class="line">    -&gt;         WHERE a&lt;p_a or b&gt;p_b;</span><br><span class="line">    -&gt;     RETURN(p_c);</span><br><span class="line">    -&gt; END $$</span><br><span class="line">Query OK, 0 rows affected (0.05 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [test]&gt; DELIMITER ;</span><br><span class="line">MariaDB [test]&gt; select select_test_int_f(1, 2);</span><br><span class="line">+<span class="comment">-------------------------+</span></span><br><span class="line">| select_test_int_f(1, 2) |</span><br><span class="line">+<span class="comment">-------------------------+</span></span><br><span class="line">|                       2 |</span><br><span class="line">+<span class="comment">-------------------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">MariaDB [<span class="keyword">test</span>]&gt; <span class="keyword">SHOW</span> <span class="keyword">FUNCTION</span> <span class="keyword">STATUS</span>;</span><br><span class="line">+<span class="comment">------+-------------------+----------+----------------+---------------------+---------------------+---------------+---------+----------------------+----------------------+--------------------+</span></span><br><span class="line">| Db   | Name              | Type     | Definer        | Modified            | Created             | Security_type | <span class="keyword">Comment</span> | character_set_client | collation_connection | <span class="keyword">Database</span> <span class="keyword">Collation</span> |</span><br><span class="line">+<span class="comment">------+-------------------+----------+----------------+---------------------+---------------------+---------------+---------+----------------------+----------------------+--------------------+</span></span><br><span class="line">| <span class="keyword">test</span> | select_test_int_f | <span class="keyword">FUNCTION</span> | root@localhost | <span class="number">2018</span><span class="number">-03</span><span class="number">-30</span> <span class="number">23</span>:<span class="number">14</span>:<span class="number">19</span> | <span class="number">2018</span><span class="number">-03</span><span class="number">-30</span> <span class="number">23</span>:<span class="number">14</span>:<span class="number">19</span> | DEFINER       |         | utf8                 | utf8_general_ci      | latin1_swedish_ci  |</span><br><span class="line">+<span class="comment">------+-------------------+----------+----------------+---------------------+---------------------+---------------+---------+----------------------+----------------------+--------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="keyword">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">MariaDB [<span class="keyword">test</span>]&gt; <span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> select_test_int_f\G</span><br><span class="line">*************************** <span class="number">1.</span> <span class="keyword">row</span> ***************************</span><br><span class="line"><span class="keyword">Function</span>: select_test_int_f</span><br><span class="line">            sql_mode:</span><br><span class="line">     <span class="keyword">Create</span> <span class="keyword">Function</span>: <span class="keyword">CREATE</span> DEFINER=<span class="string">`root`</span>@<span class="string">`localhost`</span> <span class="keyword">FUNCTION</span> <span class="string">`select_test_int_f`</span>(p_a <span class="built_in">INT</span>, p_b <span class="built_in">INT</span>) <span class="keyword">RETURNS</span> <span class="built_in">int</span>(<span class="number">11</span>)</span><br><span class="line">        <span class="keyword">BEGIN</span></span><br><span class="line">        <span class="keyword">DECLARE</span> p_c <span class="built_in">INT</span>;</span><br><span class="line">            <span class="keyword">SELECT</span> <span class="keyword">count</span>(<span class="number">1</span>) <span class="keyword">INTO</span> p_c <span class="keyword">from</span> test_int</span><br><span class="line">                <span class="keyword">WHERE</span> a&lt;p_a <span class="keyword">or</span> b&gt;p_b;</span><br><span class="line">            RETURN(p_c);</span><br><span class="line">        <span class="keyword">END</span></span><br><span class="line">character_set_client: utf8</span><br><span class="line">collation_connection: utf8_general_ci</span><br><span class="line"><span class="keyword">Database</span> <span class="keyword">Collation</span>: latin1_swedish_ci</span><br><span class="line"><span class="number">1</span> <span class="keyword">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">MariaDB [<span class="keyword">test</span>]&gt; <span class="keyword">select</span> * <span class="keyword">from</span> information_schema.routines <span class="keyword">where</span> SPECIFIC_NAME=<span class="string">'select_test_int_f'</span>\G</span><br><span class="line">*************************** <span class="number">1.</span> <span class="keyword">row</span> ***************************</span><br><span class="line">           SPECIFIC_NAME: select_test_int_f</span><br><span class="line">         ROUTINE_CATALOG: <span class="keyword">def</span></span><br><span class="line">          ROUTINE_SCHEMA: <span class="keyword">test</span></span><br><span class="line">            ROUTINE_NAME: select_test_int_f</span><br><span class="line">            ROUTINE_TYPE: <span class="keyword">FUNCTION</span></span><br><span class="line">               DATA_TYPE: <span class="built_in">int</span></span><br><span class="line">CHARACTER_MAXIMUM_LENGTH: <span class="literal">NULL</span></span><br><span class="line">  CHARACTER_OCTET_LENGTH: <span class="literal">NULL</span></span><br><span class="line">       NUMERIC_PRECISION: <span class="number">10</span></span><br><span class="line">           NUMERIC_SCALE: <span class="number">0</span></span><br><span class="line">      DATETIME_PRECISION: <span class="literal">NULL</span></span><br><span class="line">      CHARACTER_SET_NAME: <span class="literal">NULL</span></span><br><span class="line">          COLLATION_NAME: <span class="literal">NULL</span></span><br><span class="line">          DTD_IDENTIFIER: <span class="built_in">int</span>(<span class="number">11</span>)</span><br><span class="line">            ROUTINE_BODY: <span class="keyword">SQL</span></span><br><span class="line">      ROUTINE_DEFINITION: <span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">DECLARE</span> p_c <span class="built_in">INT</span>;</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="keyword">count</span>(<span class="number">1</span>) <span class="keyword">INTO</span> p_c <span class="keyword">from</span> test_int</span><br><span class="line">        <span class="keyword">WHERE</span> a&lt;p_a <span class="keyword">or</span> b&gt;p_b;</span><br><span class="line">    RETURN(p_c);</span><br><span class="line"><span class="keyword">END</span></span><br><span class="line">           EXTERNAL_NAME: <span class="literal">NULL</span></span><br><span class="line">       EXTERNAL_LANGUAGE: <span class="literal">NULL</span></span><br><span class="line">         PARAMETER_STYLE: <span class="keyword">SQL</span></span><br><span class="line">        IS_DETERMINISTIC: <span class="keyword">NO</span></span><br><span class="line">         SQL_DATA_ACCESS: CONTAINS <span class="keyword">SQL</span></span><br><span class="line">                SQL_PATH: <span class="literal">NULL</span></span><br><span class="line">           SECURITY_TYPE: DEFINER</span><br><span class="line">                 CREATED: <span class="number">2018</span><span class="number">-03</span><span class="number">-30</span> <span class="number">23</span>:<span class="number">14</span>:<span class="number">19</span></span><br><span class="line">            LAST_ALTERED: <span class="number">2018</span><span class="number">-03</span><span class="number">-30</span> <span class="number">23</span>:<span class="number">14</span>:<span class="number">19</span></span><br><span class="line">                SQL_MODE:</span><br><span class="line">         ROUTINE_COMMENT:</span><br><span class="line">                 DEFINER: root@localhost</span><br><span class="line">    CHARACTER_SET_CLIENT: utf8</span><br><span class="line">    COLLATION_CONNECTION: utf8_general_ci</span><br><span class="line">      DATABASE_COLLATION: latin1_swedish_ci</span><br><span class="line"><span class="number">1</span> <span class="keyword">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">MariaDB [<span class="keyword">test</span>]&gt; <span class="keyword">drop</span> <span class="keyword">function</span> <span class="keyword">if</span> <span class="keyword">exists</span> select_test_int_f;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure>
<h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><p>存储过程和函数都可以使用变量，变量不区分大小写。</p>
<h2 id="变量定义"><a href="#变量定义" class="headerlink" title="变量定义"></a>变量定义</h2><p>通过 DECLARE 可以定义一个局部变量，该变量的作用范围只能在 BEGIN……END 块中，可以用在嵌套的块中。变量的定义必须写在复合语句的开头，并且在任何其他语句的前面。可以一次声明多个相同类型的变量。如果需要，可以使用 DEFAULT 赋默认值。<br>定义一个变量的语法如下：<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span> var_name[,...] <span class="keyword">type</span> [<span class="keyword">DEFAULT</span> <span class="keyword">value</span>]</span><br></pre></td></tr></table></figure></p>
<h2 id="变量赋值"><a href="#变量赋值" class="headerlink" title="变量赋值"></a>变量赋值</h2><p>变量可以直接赋值，或者通过查询赋值。<br>直接赋值使用 SET，可以赋常量或者赋表达式，具体语法如下：<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span> var_name = expr [, var_name = expr] ...</span><br></pre></td></tr></table></figure></p>
<p>通过查询赋值：<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> col_name[,...] <span class="keyword">INTO</span> var_name[,...] table_expr</span><br></pre></td></tr></table></figure></p>
<h1 id="定义条件和处理"><a href="#定义条件和处理" class="headerlink" title="定义条件和处理"></a>定义条件和处理</h1><h2 id="条件定义"><a href="#条件定义" class="headerlink" title="条件定义"></a>条件定义</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span> condition_name CONDITION <span class="keyword">FOR</span> condition_value</span><br><span class="line"></span><br><span class="line">condition_value:</span><br><span class="line">        <span class="keyword">SQLSTATE</span> [<span class="keyword">VALUE</span>] sqlstate_value</span><br><span class="line">    | mysql_error_code</span><br></pre></td></tr></table></figure>
<h2 id="条件处理"><a href="#条件处理" class="headerlink" title="条件处理"></a>条件处理</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span> handler_type <span class="keyword">HANDLER</span> <span class="keyword">FOR</span> condition_value[,...] sp_statement</span><br><span class="line"></span><br><span class="line">handler_type:</span><br><span class="line">        CONTINUE</span><br><span class="line">    | <span class="keyword">EXIT</span></span><br><span class="line">    | <span class="keyword">UNDO</span></span><br><span class="line"></span><br><span class="line">condition_value:</span><br><span class="line">        <span class="keyword">SQLSTATE</span> [<span class="keyword">VALUE</span>] sqlstate_value</span><br><span class="line">    | condition_name</span><br><span class="line">    | SQLWARNING</span><br><span class="line">    | <span class="keyword">NOT</span> <span class="keyword">FOUND</span></span><br><span class="line">    | SQLEXCEPTION</span><br><span class="line">    | mysql_error_code</span><br></pre></td></tr></table></figure>
<h1 id="光标的使用"><a href="#光标的使用" class="headerlink" title="光标的使用"></a>光标的使用</h1><p>在存储过程和函数中可以使用光标对结果集进行循环的处理。光标的使用包括光标的声明、<br>OPEN、FETCH 和 CLOSE，其语法分别如下。</p>
<p>声明光标：<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span> cursor_name <span class="keyword">CURSOR</span> <span class="keyword">FOR</span> select_statement</span><br></pre></td></tr></table></figure></p>
<p>OPEN 光标：<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">OPEN cursor_name</span><br></pre></td></tr></table></figure></p>
<p>FETCH 光标：<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">FETCH cursor_name INTO var_name [, var_name] ...</span><br></pre></td></tr></table></figure></p>
<p>CLOSE 光标：<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">CLOSE cursor_name</span><br></pre></td></tr></table></figure></p>
<p><strong>变量、条件、处理程序、光标都是通过 DECLARE 定义的，它们之间是有先后顺序的要求的。变量和条件必须在最前面声明，然后才能是光标的声明，最后才可以是处理程序的声明</strong></p>
<h1 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h1><h2 id="IF语句"><a href="#IF语句" class="headerlink" title="IF语句"></a>IF语句</h2><p>IF 实现条件判断，满足不同的条件执行不同的语句列表，具体语法如下：<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">IF search_condition THEN statement_list</span><br><span class="line">    [ELSEIF search_condition THEN statement_list] ...</span><br><span class="line">    [ELSE statement_list]</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">IF</span></span><br></pre></td></tr></table></figure></p>
<h2 id="CASE语句"><a href="#CASE语句" class="headerlink" title="CASE语句"></a>CASE语句</h2><p>CASE 实现比 IF 更复杂一些的条件构造，具体语法如下：<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">CASE case_value</span><br><span class="line">    WHEN when_value THEN statement_list</span><br><span class="line">    [WHEN when_value THEN statement_list] ...</span><br><span class="line">    [ELSE statement_list]</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">CASE</span></span><br><span class="line"><span class="keyword">Or</span>:</span><br><span class="line"><span class="keyword">CASE</span></span><br><span class="line">    <span class="keyword">WHEN</span> search_condition <span class="keyword">THEN</span> statement_list</span><br><span class="line">    [<span class="keyword">WHEN</span> search_condition <span class="keyword">THEN</span> statement_list] ...</span><br><span class="line">    [<span class="keyword">ELSE</span> statement_list]</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">CASE</span></span><br></pre></td></tr></table></figure></p>
<h2 id="LOOP语句"><a href="#LOOP语句" class="headerlink" title="LOOP语句"></a>LOOP语句</h2><p>LOOP 实现简单的循环，退出循环的条件需要使用其他的语句定义，通常可以使用 LEAVE 语句实现，具体语法如下：<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">[begin_label:] LOOP</span><br><span class="line">    statement_list</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">LOOP</span> [end_label]</span><br></pre></td></tr></table></figure></p>
<p>如果不在 statement_list 中增加退出循环的语句，那么 LOOP 语句可以用来实现简单的死循环</p>
<h2 id="LEAVE语句"><a href="#LEAVE语句" class="headerlink" title="LEAVE语句"></a>LEAVE语句</h2><p>用来从标注的流程构造中退出，通常和 BEGIN … END 或者循环一起使用。</p>
<h2 id="INTRATE语句"><a href="#INTRATE语句" class="headerlink" title="INTRATE语句"></a>INTRATE语句</h2><p>ITERATE 语句必须用在循环中，作用是跳过当前循环的剩下的语句，直接进入下一轮循环</p>
<h2 id="REPEAT语句"><a href="#REPEAT语句" class="headerlink" title="REPEAT语句"></a>REPEAT语句</h2><p>有条件的循环控制语句，当满足条件的时候退出循环，具体语法如下：<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">[begin_label:] REPEAT</span><br><span class="line">    statement_list</span><br><span class="line">UNTIL search_condition</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">REPEAT</span> [end_label]</span><br></pre></td></tr></table></figure></p>
<h2 id="WHERE-语句"><a href="#WHERE-语句" class="headerlink" title="WHERE 语句"></a>WHERE 语句</h2><p>WHILE 语句实现的也是有条件的循环控制语句，即当满足条件时执行循环的内容，具体语法如下：<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">[begin_label:] WHILE search_condition <span class="keyword">DO</span></span><br><span class="line">    statement_list</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">WHILE</span> [end_label]</span><br></pre></td></tr></table></figure></p>
<p>WHILE 循环和 REPEAT 循环的区别在于：WHILE 是满足条件才执行循环，REPEAT 是满足条件退出循环；WHILE 在首次循环执行之前就判断条件，所以循环最少执行 0 次，而 REPEAT 是在首次执行循环之后才判断条件，所以循环最少执行 1 次。</p>
<p>存储过程和函数的优势是可以将数据的处理放在数据库服务器上进行，避免将大量的结果集传输给客户端，减少数据的传输，但是在数据库服务器上进行大量的复杂运算也会占用服务器的 CPU，造成数据库服务器的压力，所以不要在存储过程和函数中进行大量的复杂运算，应尽量将这些运算操作分摊到应用服务器上执行</p>
<h1 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h1><h2 id="触发器创建"><a href="#触发器创建" class="headerlink" title="触发器创建"></a>触发器创建</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> trigger_name trigger_time trigger_event <span class="keyword">ON</span> tbl_name <span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="keyword">ROW</span> trigger_stmt</span><br></pre></td></tr></table></figure>
<p>触发器只能创建在永久表上，不能对临时表创建触发器。<br>trigger_time触发器的触发时间，可以是BEFORE或AFTER，BEFORE的含义指在检查约束前出发，而AFTER在检查约束后触发。<br>trigger_event触发器触发的事件，INSERT、UPDATE或者DELETE。<br>对同一个表相同触发时间的相同触发事件，只能定义一个触发器。<br>使用别名OLD和NEW来引用触发器中发生变化的记录内容。</p>
<h2 id="删除触发器"><a href="#删除触发器" class="headerlink" title="删除触发器"></a>删除触发器</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TRIGGER</span> [schema_name.]trigger_name;</span><br></pre></td></tr></table></figure>
<h2 id="查看触发器"><a href="#查看触发器" class="headerlink" title="查看触发器"></a>查看触发器</h2><h3 id="SHOW-TRIGGERS"><a href="#SHOW-TRIGGERS" class="headerlink" title="SHOW TRIGGERS"></a>SHOW TRIGGERS</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">TRIGGERS</span>;</span><br></pre></td></tr></table></figure>
<h3 id="系统triggers表"><a href="#系统triggers表" class="headerlink" title="系统triggers表"></a>系统triggers表</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> information_schema.triggers;</span><br></pre></td></tr></table></figure>
<h2 id="触发器使用"><a href="#触发器使用" class="headerlink" title="触发器使用"></a>触发器使用</h2><p>触发器执行的语句的限制：</p>
<ol>
<li>触发程序不能调用将数据返回客户端的存储程序，也不能使用采用 CALL 语句的动态 SQL 语句，但是允许存储程序通过参数将数据返回触发程序。也就是存储过程或者函数通过 OUT 或者 INOUT 类型的参数将数据返回触发器是可以的，但是不能调用直接返回数据的过程。</li>
<li>不能在触发器中使用以显式或隐式方式开始或结束事务的语句，如 START TRANSACTION、COMMIT 或 ROLLBACK。</li>
</ol>
<p>MySQL 的触发器是按照 BEFORE 触发器、行操作、AFTER 触发器的顺序执行的，其中任何一步操作发生错误都不会继续执行剩下的操作。如果是对事务表进行的操作，那么会整个作为一个事务被回滚（Rollback），但是如果是对非事务表进行的操作，那么已经更新的记录将无法回滚，这也是设计触发器的时候需要注意的问题.</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL 优化</title>
    <url>/2018/04/01/mysql-9/</url>
    <content><![CDATA[<h1 id="优化SQL步骤"><a href="#优化SQL步骤" class="headerlink" title="优化SQL步骤"></a>优化SQL步骤</h1><h2 id="了解SQL的执行频率"><a href="#了解SQL的执行频率" class="headerlink" title="了解SQL的执行频率"></a>了解SQL的执行频率</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> [<span class="keyword">session</span>|<span class="keyword">global</span>] <span class="keyword">status</span>;</span><br></pre></td></tr></table></figure>
<p>执行命令提供服务器状态信息，session表示显示session(当前连接)级别的统计结果，global表示显示global(从服务器启动至今)级别的统计结果，默认为session级别。<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">MariaDB [(none)]&gt; show global status like 'Com_%';</span><br><span class="line">+<span class="comment">----------------------------+-------+</span></span><br><span class="line">| Variable_name              | Value |</span><br><span class="line">+<span class="comment">----------------------------+-------+</span></span><br><span class="line">| Com_admin_commands         | 1     |</span><br><span class="line">| Com_alter_db               | 0     |</span><br><span class="line">| Com_alter_db_upgrade       | 0     |</span><br><span class="line">| Com_alter_event            | 0     |</span><br><span class="line">| Com_alter_function         | 0     |</span><br><span class="line">| Com_alter_procedure        | 0     |</span><br><span class="line">... ...</span><br></pre></td></tr></table></figure></p>
<p>Com_xxx表示每个xxx语句执行的次数：</p>
<ul>
<li>Com_select:执行select操作的次数，一次查询只累加1</li>
<li>Com_insert:执行insert操作的次数，对于批量插入的insert操作，只累计一次</li>
<li>Com_update:执行update操作的次数</li>
<li>Com_delete:执行delete操作的次数</li>
</ul>
<p>Com_select、Com_insert、Com_update、Com_delete对所有存储引擎都进行累计。</p>
<p>只准对InnoDB存储引擎：</p>
<ul>
<li>Innodb_rows_read:select查询返回的行数</li>
<li>Innodb_rows_inserted:执行insert操作插入的行数</li>
<li>Innodb_rows_updated:执行update操作插入的行数</li>
<li>Innodb_rows_deleted:执行delete操作删除的行数</li>
</ul>
<p>对于更新操作的计数，是对执行次数的计数，不论提交还是回滚都会进行累计</p>
<p>Com_commit和Com_rollback可以了解事物提交和回滚的情况，对于回滚操作非常频繁的数据库，意味着程序编写存在问题。</p>
<p>了解数据库基本情况:</p>
<ul>
<li>Connections:试图连接MySQL服务器的次数</li>
<li>Uptime:服务器工作时间</li>
<li>Slow_queries:慢查询的次数</li>
</ul>
<h2 id="定位执行效率较低的SQL语句"><a href="#定位执行效率较低的SQL语句" class="headerlink" title="定位执行效率较低的SQL语句"></a>定位执行效率较低的SQL语句</h2><ol>
<li>通过慢查询日志定位</li>
<li>show processlist命令查看当前MySQL在进行的线程,包括线程的状态、是否锁表等,可以实时地查看SQL的执行情况,通过对一些锁表操作优化</li>
</ol>
<h2 id="通过EXPLAIN分析低效SQL的执行计划"><a href="#通过EXPLAIN分析低效SQL的执行计划" class="headerlink" title="通过EXPLAIN分析低效SQL的执行计划"></a>通过EXPLAIN分析低效SQL的执行计划</h2><p>查询到低效的SQL语句后,通过EXPLAIN或者DESC命令获取MySQL如何执行SELECT语句的信息,包括在SELECT语句执行过程中表如何连接和连接的顺序.<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">MariaDB [test]&gt; desc select * from test_int;</span><br><span class="line">+<span class="comment">------+-------------+----------+------+---------------+------+---------+------+------+-------+</span></span><br><span class="line">| id   | select_type | table    | type | possible_keys | key  | key_len | ref  | rows | Extra |</span><br><span class="line">+<span class="comment">------+-------------+----------+------+---------------+------+---------+------+------+-------+</span></span><br><span class="line">|    1 | SIMPLE      | test_int | ALL  | NULL          | NULL | NULL    | NULL |    4 |       |</span><br><span class="line">+<span class="comment">------+-------------+----------+------+---------------+------+---------+------+------+-------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">MariaDB [<span class="keyword">test</span>]&gt; <span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> test_int;</span><br><span class="line">+<span class="comment">------+-------------+----------+------+---------------+------+---------+------+------+-------+</span></span><br><span class="line">| id   | select_type | table    | type | possible_keys | key  | key_len | ref  | rows | Extra |</span><br><span class="line">+<span class="comment">------+-------------+----------+------+---------------+------+---------+------+------+-------+</span></span><br><span class="line">|    1 | SIMPLE      | test_int | ALL  | NULL          | NULL | NULL    | NULL |    4 |       |</span><br><span class="line">+<span class="comment">------+-------------+----------+------+---------------+------+---------+------+------+-------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure></p>
<ul>
<li>select_type:表示select查询的类型,常见的取值有SIMPLE(简单表,即不使用表连接或子查询)、PRIMARY(主查询,即外层的查询)、UNION(UNION中的第二个或后面的查询语句)、SUBQUERY(子查询中的第一个SELECT)等</li>
<li>table:数据结果集的表</li>
<li>type:表示MySQL在表中找到所需行的方式,或者叫访问类型.</li>
<li>possible_keys:表示查询时可能使用的索引</li>
<li>key:表示实际使用的索引</li>
<li>key_len:使用到索引字段的长度</li>
<li>rows:扫描行的数量</li>
<li>Extra:执行情况的说明和描述,包括不适合在其他列中显示但是对执行计划非常重要的额外信息</li>
</ul>
<p>type类型,从左至右,性能由最差到最好<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">+<span class="comment">-----+-------+-------+-----+--------+--------------+------+</span></span><br><span class="line">| ALL | index | range | ref | eq_ref | const,system | NULL |</span><br><span class="line">+<span class="comment">-----+-------+-------+-----+--------+--------------+------+</span></span><br></pre></td></tr></table></figure></p>
<ol>
<li>ALL 全表扫描,MySQL遍历全表来找到匹配的行</li>
<li>index 索引全扫描,MySQL遍历整个索引来查询匹配的行</li>
<li>range 索引范围扫描,常见于\&lt;、\&lt;=、&gt;、&gt;=、between等操作符</li>
<li>ref 使用非唯一索引扫描或唯一索引的前缀扫描,返回匹配某个单独值的记录行</li>
<li>eq_ref 类似ref,区别就在使用的索引是唯一索引,对于每个索引键值,表中只有一条记录记录匹配;简单说,多表连接中使用primary key或者unique index作为关联条件</li>
<li>const/system 单表中最多有一个匹配行,查询起来非常迅速,所以这个匹配行中的其他列的值可以被优化器在当前查询中当错常量来处理</li>
<li>NULL MySQL不用访问表或索引,直接就能够得到结果</li>
</ol>
<p>通过explain extended命令和show warnings可以看到SQL真正被执行之前优化器做了哪些SQL改写.<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">MariaDB [test]&gt; explain extended select * from test_int;</span><br><span class="line">+<span class="comment">------+-------------+----------+------+---------------+------+---------+------+------+----------+-------+</span></span><br><span class="line">| id   | select_type | table    | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra |</span><br><span class="line">+<span class="comment">------+-------------+----------+------+---------------+------+---------+------+------+----------+-------+</span></span><br><span class="line">|    1 | SIMPLE      | test_int | ALL  | NULL          | NULL | NULL    | NULL |    4 |   100.00 |       |</span><br><span class="line">+<span class="comment">------+-------------+----------+------+---------------+------+---------+------+------+----------+-------+</span></span><br><span class="line">1 row in <span class="keyword">set</span>, <span class="number">1</span> <span class="keyword">warning</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">MariaDB [<span class="keyword">test</span>]&gt; <span class="keyword">show</span> <span class="keyword">warnings</span>;</span><br><span class="line">+<span class="comment">-------+------+-----------------------------------------------------------------------------------------+</span></span><br><span class="line">| Level | Code | Message                                                                                 |</span><br><span class="line">+<span class="comment">-------+------+-----------------------------------------------------------------------------------------+</span></span><br><span class="line">| Note  | 1003 | <span class="keyword">select</span> <span class="string">`test`</span>.<span class="string">`test_int`</span>.<span class="string">`a`</span> <span class="keyword">AS</span> <span class="string">`a`</span>,<span class="string">`test`</span>.<span class="string">`test_int`</span>.<span class="string">`b`</span> <span class="keyword">AS</span> <span class="string">`b`</span> <span class="keyword">from</span> <span class="string">`test`</span>.<span class="string">`test_int`</span> |</span><br><span class="line">+<span class="comment">-------+------+-----------------------------------------------------------------------------------------+</span></span><br></pre></td></tr></table></figure></p>
<p>filtered<br>通过warning的message字段可以看到优化器优化后的SQL. 碰到复杂SQL时,可以利用explain extended的结果迅速获取更清晰易读的SQL</p>
<h2 id="通过show-profile分析SQL"><a href="#通过show-profile分析SQL" class="headerlink" title="通过show profile分析SQL"></a>通过show profile分析SQL</h2><p>通过have_profiling参数可以看到当前MySQL是否支持profile:<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">MariaDB [(none)]&gt; select @@have_profiling;</span><br><span class="line">+<span class="comment">------------------+</span></span><br><span class="line">| @@have_profiling |</span><br><span class="line">+<span class="comment">------------------+</span></span><br><span class="line">| YES              |</span><br><span class="line">+<span class="comment">------------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure></p>
<p>通过profiling参数可以看到当前profiling是否打开<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">MariaDB [(none)]&gt; select @@profiling;</span><br><span class="line">+<span class="comment">-------------+</span></span><br><span class="line">| @@profiling |</span><br><span class="line">+<span class="comment">-------------+</span></span><br><span class="line">|           0 |</span><br><span class="line">+<span class="comment">-------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure></p>
<p>通过set语句在session级别开启profiling<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">MariaDB [(none)]&gt; set profiling=1;</span><br><span class="line">Query OK, 0 rows affected (0.04 sec)</span><br></pre></td></tr></table></figure></p>
<p>通过profile可以清楚地了解SQL执行的过程.<br>在执行完SQL后,使用show profiles.查看执行SQL的Query_ID,再使用show profile for query查看执行过程中线程的每个状态和消耗时间.<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">MariaDB [test]&gt; show profiles;</span><br><span class="line">+<span class="comment">----------+------------+------------------------+</span></span><br><span class="line">| Query_ID | Duration   | Query                  |</span><br><span class="line">+<span class="comment">----------+------------+------------------------+</span></span><br><span class="line">|        1 | 0.00007221 | <span class="keyword">select</span> * <span class="keyword">from</span> test_int |</span><br><span class="line">|        <span class="number">2</span> | <span class="number">0.00012501</span> | <span class="keyword">SELECT</span> <span class="keyword">DATABASE</span>()      |</span><br><span class="line">|        <span class="number">3</span> | <span class="number">0.00029614</span> | <span class="keyword">show</span> <span class="keyword">databases</span>         |</span><br><span class="line">|        <span class="number">4</span> | <span class="number">0.00014315</span> | <span class="keyword">show</span> <span class="keyword">tables</span>            |</span><br><span class="line">|        <span class="number">5</span> | <span class="number">0.00038331</span> | <span class="keyword">select</span> * <span class="keyword">from</span> test_int |</span><br><span class="line">+<span class="comment">----------+------------+------------------------+</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">MariaDB [<span class="keyword">test</span>]&gt; <span class="keyword">show</span> profile <span class="keyword">for</span> <span class="keyword">query</span> <span class="number">5</span>;</span><br><span class="line">+<span class="comment">----------------------+----------+</span></span><br><span class="line">| Status               | Duration |</span><br><span class="line">+<span class="comment">----------------------+----------+</span></span><br><span class="line">| starting             | 0.000058 |</span><br><span class="line">| checking permissions | 0.000011 |</span><br><span class="line">| Opening tables       | 0.000026 |</span><br><span class="line">| After opening tables | 0.000023 |</span><br><span class="line">| System <span class="keyword">lock</span>          | <span class="number">0.000006</span> |</span><br><span class="line">| <span class="keyword">Table</span> <span class="keyword">lock</span>           | <span class="number">0.000043</span> |</span><br><span class="line">| <span class="keyword">After</span> <span class="keyword">table</span> <span class="keyword">lock</span>     | <span class="number">0.000009</span> |</span><br><span class="line">| init                 | <span class="number">0.000021</span> |</span><br><span class="line">| optimizing           | <span class="number">0.000011</span> |</span><br><span class="line">| <span class="keyword">statistics</span>           | <span class="number">0.000025</span> |</span><br><span class="line">| preparing            | <span class="number">0.000015</span> |</span><br><span class="line">| executing            | <span class="number">0.000005</span> |</span><br><span class="line">| Sending <span class="keyword">data</span>         | <span class="number">0.000083</span> |</span><br><span class="line">| <span class="keyword">end</span>                  | <span class="number">0.000006</span> |</span><br><span class="line">| <span class="keyword">query</span> <span class="keyword">end</span>            | <span class="number">0.000007</span> |</span><br><span class="line">| closing <span class="keyword">tables</span>       | <span class="number">0.000010</span> |</span><br><span class="line">| freeing items        | <span class="number">0.000012</span> |</span><br><span class="line">| updating <span class="keyword">status</span>      | <span class="number">0.000010</span> |</span><br><span class="line">| cleaning up          | <span class="number">0.000005</span> |</span><br><span class="line">+<span class="comment">----------------------+----------+</span></span><br><span class="line"><span class="number">19</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure></p>
<p>Sending data状态表示MySQL线程开始访问数据行并把结果返回给客户端,而不仅仅是返回结果给客户端.在Sending data状态下,MySQL线程往往需要做大量的磁盘读取操作,所以经常是整个查询中耗时最长的状态.<br>可以使用show profile查看更加详细的资源消耗情况,可选择all、cpu、block io、context switch、page faults等<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">MariaDB [test]&gt; show profile all for query 5;</span><br><span class="line">+<span class="comment">----------------------+----------+----------+------------+-------------------+---------------------+--------------+---------------+---------------+-------------------+-------------------+-------------------+-------+-----------------------+---------------+-------------+</span></span><br><span class="line">| Status               | Duration | CPU_user | CPU_system | Context_voluntary | Context_involuntary | Block_ops_in | Block_ops_out | Messages_sent | Messages_received | Page_faults_major | Page_faults_minor | Swaps | Source_function       | Source_file   | Source_line |</span><br><span class="line">+<span class="comment">----------------------+----------+----------+------------+-------------------+---------------------+--------------+---------------+---------------+-------------------+-------------------+-------------------+-------+-----------------------+---------------+-------------+</span></span><br><span class="line">| starting             | 0.000058 | 0.000034 |   0.000018 |                 0 |                   0 |            0 |             0 |             0 |                 0 |                 0 |                 0 |     0 | NULL                  | NULL          |        NULL |</span><br><span class="line">| checking permissions | 0.000011 | 0.000006 |   0.000003 |                 0 |                   0 |            0 |             0 |             0 |                 0 |                 0 |                 0 |     0 | check_access          | sql_parse.cc  |        4911 |</span><br><span class="line">| Opening tables       | 0.000026 | 0.000017 |   0.000009 |                 0 |                   0 |            0 |             0 |             0 |                 0 |                 0 |                 0 |     0 | open_tables           | sql_base.cc   |        5048 |</span><br><span class="line">| After opening tables | 0.000023 | 0.000015 |   0.000008 |                 0 |                   0 |            0 |             0 |             0 |                 0 |                 0 |                 0 |     0 | open_tables           | sql_base.cc   |        5240 |</span><br><span class="line">| System <span class="keyword">lock</span>          | <span class="number">0.000006</span> | <span class="number">0.000004</span> |   <span class="number">0.000002</span> |                 <span class="number">0</span> |                   <span class="number">0</span> |            <span class="number">0</span> |             <span class="number">0</span> |             <span class="number">0</span> |                 <span class="number">0</span> |                 <span class="number">0</span> |                 <span class="number">0</span> |     <span class="number">0</span> | mysql_lock_tables     | lock.cc       |         <span class="number">307</span> |</span><br><span class="line">| <span class="keyword">Table</span> <span class="keyword">lock</span>           | <span class="number">0.000043</span> | <span class="number">0.000028</span> |   <span class="number">0.000015</span> |                 <span class="number">0</span> |                   <span class="number">0</span> |            <span class="number">0</span> |             <span class="number">0</span> |             <span class="number">0</span> |                 <span class="number">0</span> |                 <span class="number">0</span> |                 <span class="number">0</span> |     <span class="number">0</span> | mysql_lock_tables     | lock.cc       |         <span class="number">312</span> |</span><br><span class="line">| <span class="keyword">After</span> <span class="keyword">table</span> <span class="keyword">lock</span>     | <span class="number">0.000009</span> | <span class="number">0.000006</span> |   <span class="number">0.000003</span> |                 <span class="number">0</span> |                   <span class="number">0</span> |            <span class="number">0</span> |             <span class="number">0</span> |             <span class="number">0</span> |                 <span class="number">0</span> |                 <span class="number">0</span> |                 <span class="number">0</span> |     <span class="number">0</span> | mysql_lock_tables     | lock.cc       |         <span class="number">326</span> |</span><br><span class="line">| init                 | <span class="number">0.000021</span> | <span class="number">0.000014</span> |   <span class="number">0.000007</span> |                 <span class="number">0</span> |                   <span class="number">0</span> |            <span class="number">0</span> |             <span class="number">0</span> |             <span class="number">0</span> |                 <span class="number">0</span> |                 <span class="number">0</span> |                 <span class="number">0</span> |     <span class="number">0</span> | mysql_select          | sql_select.cc |        <span class="number">3075</span> |</span><br><span class="line">| optimizing           | <span class="number">0.000011</span> | <span class="number">0.000007</span> |   <span class="number">0.000004</span> |                 <span class="number">0</span> |                   <span class="number">0</span> |            <span class="number">0</span> |             <span class="number">0</span> |             <span class="number">0</span> |                 <span class="number">0</span> |                 <span class="number">0</span> |                 <span class="number">0</span> |     <span class="number">0</span> | <span class="keyword">optimize</span>              | sql_select.cc |         <span class="number">990</span> |</span><br><span class="line">| <span class="keyword">statistics</span>           | <span class="number">0.000025</span> | <span class="number">0.000016</span> |   <span class="number">0.000008</span> |                 <span class="number">0</span> |                   <span class="number">0</span> |            <span class="number">0</span> |             <span class="number">0</span> |             <span class="number">0</span> |                 <span class="number">0</span> |                 <span class="number">0</span> |                 <span class="number">0</span> |     <span class="number">0</span> | <span class="keyword">optimize</span>              | sql_select.cc |        <span class="number">1233</span> |</span><br><span class="line">| preparing            | <span class="number">0.000015</span> | <span class="number">0.000010</span> |   <span class="number">0.000005</span> |                 <span class="number">0</span> |                   <span class="number">0</span> |            <span class="number">0</span> |             <span class="number">0</span> |             <span class="number">0</span> |                 <span class="number">0</span> |                 <span class="number">0</span> |                 <span class="number">0</span> |     <span class="number">0</span> | <span class="keyword">optimize</span>              | sql_select.cc |        <span class="number">1258</span> |</span><br><span class="line">| executing            | <span class="number">0.000005</span> | <span class="number">0.000003</span> |   <span class="number">0.000002</span> |                 <span class="number">0</span> |                   <span class="number">0</span> |            <span class="number">0</span> |             <span class="number">0</span> |             <span class="number">0</span> |                 <span class="number">0</span> |                 <span class="number">0</span> |                 <span class="number">0</span> |     <span class="number">0</span> | exec                  | sql_select.cc |        <span class="number">2242</span> |</span><br><span class="line">| Sending <span class="keyword">data</span>         | <span class="number">0.000083</span> | <span class="number">0.000054</span> |   <span class="number">0.000029</span> |                 <span class="number">0</span> |                   <span class="number">0</span> |            <span class="number">0</span> |             <span class="number">0</span> |             <span class="number">0</span> |                 <span class="number">0</span> |                 <span class="number">0</span> |                 <span class="number">0</span> |     <span class="number">0</span> | exec                  | sql_select.cc |        <span class="number">2873</span> |</span><br><span class="line">| <span class="keyword">end</span>                  | <span class="number">0.000006</span> | <span class="number">0.000004</span> |   <span class="number">0.000002</span> |                 <span class="number">0</span> |                   <span class="number">0</span> |            <span class="number">0</span> |             <span class="number">0</span> |             <span class="number">0</span> |                 <span class="number">0</span> |                 <span class="number">0</span> |                 <span class="number">0</span> |     <span class="number">0</span> | mysql_select          | sql_select.cc |        <span class="number">3110</span> |</span><br><span class="line">| <span class="keyword">query</span> <span class="keyword">end</span>            | <span class="number">0.000007</span> | <span class="number">0.000004</span> |   <span class="number">0.000002</span> |                 <span class="number">0</span> |                   <span class="number">0</span> |            <span class="number">0</span> |             <span class="number">0</span> |             <span class="number">0</span> |                 <span class="number">0</span> |                 <span class="number">0</span> |                 <span class="number">0</span> |     <span class="number">0</span> | mysql_execute_command | sql_parse.cc  |        <span class="number">4520</span> |</span><br><span class="line">| closing <span class="keyword">tables</span>       | <span class="number">0.000010</span> | <span class="number">0.000007</span> |   <span class="number">0.000003</span> |                 <span class="number">0</span> |                   <span class="number">0</span> |            <span class="number">0</span> |             <span class="number">0</span> |             <span class="number">0</span> |                 <span class="number">0</span> |                 <span class="number">0</span> |                 <span class="number">0</span> |     <span class="number">0</span> | close_thread_tables   | sql_base.cc   |        <span class="number">1466</span> |</span><br><span class="line">| freeing items        | <span class="number">0.000012</span> | <span class="number">0.000008</span> |   <span class="number">0.000004</span> |                 <span class="number">0</span> |                   <span class="number">0</span> |            <span class="number">0</span> |             <span class="number">0</span> |             <span class="number">0</span> |                 <span class="number">0</span> |                 <span class="number">0</span> |                 <span class="number">0</span> |     <span class="number">0</span> | mysql_parse           | sql_parse.cc  |        <span class="number">5944</span> |</span><br><span class="line">| updating <span class="keyword">status</span>      | <span class="number">0.000010</span> | <span class="number">0.000006</span> |   <span class="number">0.000004</span> |                 <span class="number">0</span> |                   <span class="number">0</span> |            <span class="number">0</span> |             <span class="number">0</span> |             <span class="number">0</span> |                 <span class="number">0</span> |                 <span class="number">0</span> |                 <span class="number">0</span> |     <span class="number">0</span> | dispatch_command      | sql_parse.cc  |        <span class="number">1469</span> |</span><br><span class="line">| cleaning up          | <span class="number">0.000005</span> | <span class="number">0.000003</span> |   <span class="number">0.000001</span> |                 <span class="number">0</span> |                   <span class="number">0</span> |            <span class="number">0</span> |             <span class="number">0</span> |             <span class="number">0</span> |                 <span class="number">0</span> |                 <span class="number">0</span> |                 <span class="number">0</span> |     <span class="number">0</span> | dispatch_command      | sql_parse.cc  |        <span class="number">1486</span> |</span><br><span class="line">+<span class="comment">----------------------+----------+----------+------------+-------------------+---------------------+--------------+---------------+---------------+-------------------+-------------------+-------------------+-------+-----------------------+---------------+-------------+</span></span><br><span class="line"><span class="number">19</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">MariaDB [<span class="keyword">test</span>]&gt; <span class="keyword">show</span> profile cpu <span class="keyword">for</span> <span class="keyword">query</span> <span class="number">5</span>;</span><br><span class="line">+<span class="comment">----------------------+----------+----------+------------+</span></span><br><span class="line">| Status               | Duration | CPU_user | CPU_system |</span><br><span class="line">+<span class="comment">----------------------+----------+----------+------------+</span></span><br><span class="line">| starting             | 0.000058 | 0.000034 |   0.000018 |</span><br><span class="line">| checking permissions | 0.000011 | 0.000006 |   0.000003 |</span><br><span class="line">| Opening tables       | 0.000026 | 0.000017 |   0.000009 |</span><br><span class="line">| After opening tables | 0.000023 | 0.000015 |   0.000008 |</span><br><span class="line">| System <span class="keyword">lock</span>          | <span class="number">0.000006</span> | <span class="number">0.000004</span> |   <span class="number">0.000002</span> |</span><br><span class="line">| <span class="keyword">Table</span> <span class="keyword">lock</span>           | <span class="number">0.000043</span> | <span class="number">0.000028</span> |   <span class="number">0.000015</span> |</span><br><span class="line">| <span class="keyword">After</span> <span class="keyword">table</span> <span class="keyword">lock</span>     | <span class="number">0.000009</span> | <span class="number">0.000006</span> |   <span class="number">0.000003</span> |</span><br><span class="line">| init                 | <span class="number">0.000021</span> | <span class="number">0.000014</span> |   <span class="number">0.000007</span> |</span><br><span class="line">| optimizing           | <span class="number">0.000011</span> | <span class="number">0.000007</span> |   <span class="number">0.000004</span> |</span><br><span class="line">| <span class="keyword">statistics</span>           | <span class="number">0.000025</span> | <span class="number">0.000016</span> |   <span class="number">0.000008</span> |</span><br><span class="line">| preparing            | <span class="number">0.000015</span> | <span class="number">0.000010</span> |   <span class="number">0.000005</span> |</span><br><span class="line">| executing            | <span class="number">0.000005</span> | <span class="number">0.000003</span> |   <span class="number">0.000002</span> |</span><br><span class="line">| Sending <span class="keyword">data</span>         | <span class="number">0.000083</span> | <span class="number">0.000054</span> |   <span class="number">0.000029</span> |</span><br><span class="line">| <span class="keyword">end</span>                  | <span class="number">0.000006</span> | <span class="number">0.000004</span> |   <span class="number">0.000002</span> |</span><br><span class="line">| <span class="keyword">query</span> <span class="keyword">end</span>            | <span class="number">0.000007</span> | <span class="number">0.000004</span> |   <span class="number">0.000002</span> |</span><br><span class="line">| closing <span class="keyword">tables</span>       | <span class="number">0.000010</span> | <span class="number">0.000007</span> |   <span class="number">0.000003</span> |</span><br><span class="line">| freeing items        | <span class="number">0.000012</span> | <span class="number">0.000008</span> |   <span class="number">0.000004</span> |</span><br><span class="line">| updating <span class="keyword">status</span>      | <span class="number">0.000010</span> | <span class="number">0.000006</span> |   <span class="number">0.000004</span> |</span><br><span class="line">| cleaning up          | <span class="number">0.000005</span> | <span class="number">0.000003</span> |   <span class="number">0.000001</span> |</span><br><span class="line">+<span class="comment">----------------------+----------+----------+------------+</span></span><br><span class="line"><span class="number">19</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure></p>
<h2 id="通过trace分析优化器如何选择执行计划"><a href="#通过trace分析优化器如何选择执行计划" class="headerlink" title="通过trace分析优化器如何选择执行计划"></a>通过trace分析优化器如何选择执行计划</h2><ol>
<li>打开trace,设置格式为JSON,设置trace最大能够使用的内存大小,避免解析过程中因为默认内存过小而不能完整显示.</li>
<li>执行想要trace的SQL语句</li>
<li>检查INFORMATION_SCHEMA.OPTIMIZER_TRACE<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SET OPTIMIZER_TRACE=&quot;enabled=on&quot;,END_MARKERS_IN_JSON=on;</span><br><span class="line">SET OPTIMIZER_TRACE_MAX_MEM_SIZE=1000000;</span><br><span class="line">SELECT * FROM INFORMATION_SCHEMA.OPTIMIZER_TRACE\G</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="确认问题并采取相应的优化措施"><a href="#确认问题并采取相应的优化措施" class="headerlink" title="确认问题并采取相应的优化措施"></a>确认问题并采取相应的优化措施</h2><h1 id="简单使用的优化方法"><a href="#简单使用的优化方法" class="headerlink" title="简单使用的优化方法"></a>简单使用的优化方法</h1><h2 id="定期分析表和检查表"><a href="#定期分析表和检查表" class="headerlink" title="定期分析表和检查表"></a>定期分析表和检查表</h2><p>分析表<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ANALYZE</span> [<span class="keyword">LOCAL</span>|<span class="keyword">NO_WRITE_TO_BINLOG</span>] <span class="keyword">TABLE</span> tbl_name[, tbl_name]...</span><br></pre></td></tr></table></figure></p>
<p>本语句用于分析和存储表的关键字分布,分析的结果将可以使得系统得到准确的统计信息,使得SQL能够生成正确的执行计划</p>
<p>检查表<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CHECK</span> <span class="keyword">TABLE</span> tbl_name[, tbl_name]...[<span class="keyword">option</span>]...option=&#123;<span class="keyword">QUICK</span>|<span class="keyword">FAST</span>|<span class="keyword">MEDIUM</span>|<span class="keyword">EXTENDED</span>|<span class="keyword">CHANGED</span>&#125;</span><br></pre></td></tr></table></figure></p>
<p>检查表的作用是检查一个或多个表是否有错误.<br>CHECK TABLE也可以检查是否是否有错误.</p>
<h2 id="定期优化表"><a href="#定期优化表" class="headerlink" title="定期优化表"></a>定期优化表</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">OPTIONMIZE [LOCAL|NO_WRITE_TO_BINLOG] TABLE tbl_name [,tbl_name]...</span><br></pre></td></tr></table></figure>
<p>优化表可以对表中的空间碎片进行合并.<br>InnoDB引擎的表可以设置innodb_file_per_table参数,设置InnoDB为独立表空间模式,每个数据库的每个表都会生成单独的ibd文件,用于存储表的数据和索引,减轻InnoDB表的控件回收问题.<br>删除大量数据后,InnoDB表可以通过alter table但不修改引擎的方式回收不用的空间<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> tbl_name <span class="keyword">engine</span>=<span class="keyword">innodb</span>;</span><br></pre></td></tr></table></figure></p>
<p><strong>ANLYZE、CHECK、OPTIMIZE、ALTER TABLE执行期间将对表进行锁定,因此一定注意在数据库不繁忙时执行相关操作</strong></p>
<h1 id="常用SQL的优化"><a href="#常用SQL的优化" class="headerlink" title="常用SQL的优化"></a>常用SQL的优化</h1><h2 id="大批量插入数据"><a href="#大批量插入数据" class="headerlink" title="大批量插入数据"></a>大批量插入数据</h2><p>使用load命令导入数据,可以通过适当的设置提高导入速度.<br>对于MyISAM存储引擎的表,可以使用DISABLE KEYS关闭MyISAM表非唯一索引的更新,读入完成后,使用ENABLE KEYS打开MyISAM表非唯一索引的更新.<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> tbl_name <span class="keyword">disable</span> <span class="keyword">keys</span>;</span><br><span class="line"><span class="keyword">load</span> <span class="keyword">data</span> infole <span class="string">'/filepath'</span>;</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> tbl_name <span class="keyword">enable</span> <span class="keyword">keys</span>;</span><br></pre></td></tr></table></figure></p>
<p>对于InnoDB存储引擎的表:</p>
<ol>
<li>将导入的数据按照主键的顺序排序</li>
<li>导入数据前执行SET UNIQUE_CHECKS=0关闭唯一性校验,导入结束再执行SET UNIQUE_CHECKS=1,恢复唯一性校验</li>
<li>关闭自动提交,等导入完成再打开(SET AUTOCOMMINT=0)</li>
</ol>
<h2 id="优化INSERT语句"><a href="#优化INSERT语句" class="headerlink" title="优化INSERT语句"></a>优化INSERT语句</h2><ol>
<li>同一客户端同时插入很多行,应尽量使用一条语句,减少客户端与数据库之间的连接、关闭等消耗</li>
<li>不同客户端插入很多行,使用INSERT DELAYED语句让INSERT语句马上执行,实际数据都被放在内存队列中,并没有真正写入磁盘</li>
<li>将索引文件和数据文件分在不同的磁盘上存放</li>
<li>批量插入可以通过增加bulk_insert_buffer_size变量值的方法提高速度,只对MyISAM表有用</li>
<li>当从文本文件装载一个表时,使用LOAD DATA INFILE,比使用INSERT语句快</li>
</ol>
<h2 id="优化ORDER-BY语句"><a href="#优化ORDER-BY语句" class="headerlink" title="优化ORDER BY语句"></a>优化ORDER BY语句</h2><h3 id="MySQL两种排序方式"><a href="#MySQL两种排序方式" class="headerlink" title="MySQL两种排序方式"></a>MySQL两种排序方式</h3><ol>
<li>通过使用有序索引顺序扫描直接返回有序数据,在使用explain分析查询语句时显示为Using Index,不需要额外排序操作效率较高</li>
<li>通过对返回数据进行排序(Filesort排序),所有不是通过索引直接返回排序结果的排序都叫Filesort排序.</li>
</ol>
<p>ORDER BY语句优化目标:尽量减少额外的排序,通过索引直接返回有序数据.</p>
<h3 id="Filesort优化"><a href="#Filesort优化" class="headerlink" title="Filesort优化"></a>Filesort优化</h3><p>通过建立合适的索引能减少Filesort的出现.如果条件限制导致Filesort不能消失,则需要加快Filesort的操作<br>对Filesort,MySQL的两种排序算法:</p>
<ol>
<li>两次扫描算法:根据条件取出排序字段和行指针信息,然后在排序区sort buffer中排序,如果sort buffer不足,则在临时表Temporary Table中存储排序结果.完成排序后再根据行指针回表读取记录.优点是排序的时候内存开销少,缺点是第二次读取记录会有大量随机I/O操作,MySQL4.1以前使用此方法</li>
<li>一次扫描算法:一次性取出所有满足条件行的所有字段,然后排序,优点是速度快,缺点是内存开销大</li>
</ol>
<p>MySQL通过比较系统变量max_length_for_sort_data的大小和Query语句取出的字段总大小判断使用那种排序算法.如果max_length_for_sort_data更大,则使用一次扫描算法,否则使用二次扫描算法<br>适当加大max_length_for_sort_data可以让MySQL选择一次扫描算法,提高效率,设置max_length_for_sort_data过大,会造成CPU利用率过低和磁盘I/O过高,CPU和I/O利用平衡即可.<br>尽量使用必要的字段,SELECT具体的字段名称,减少排序区的使用,提高SQL性能.</p>
<h2 id="优化GROUP-BY语句"><a href="#优化GROUP-BY语句" class="headerlink" title="优化GROUP BY语句"></a>优化GROUP BY语句</h2><p>如果查询包括GROUP BY但用户想避免排序结果的消耗,则可以指定ORDER BY NULL禁止排序.</p>
<h2 id="优化嵌套查询"><a href="#优化嵌套查询" class="headerlink" title="优化嵌套查询"></a>优化嵌套查询</h2><p>使用连接JOIN替代子查询,因为JOIN不需要在内存中创建临时表</p>
<h2 id="MySQL优化OR条件"><a href="#MySQL优化OR条件" class="headerlink" title="MySQL优化OR条件"></a>MySQL优化OR条件</h2><p>对于含有OR条件的查询子句,如果想利用索引,则OR之间的每个条件列都必须使用索引,如果没有索引则应该考虑增加索引.</p>
<h2 id="分页查询优化"><a href="#分页查询优化" class="headerlink" title="分页查询优化"></a>分页查询优化</h2><ol>
<li>在索引上完成排序分页操作,最后根据主键关联回原表查询所需额其他列内容</li>
<li>将LIMIT查询转化为某个位置的查询(将LIMIT m,n转化为LIMIT n的查询)</li>
</ol>
<h2 id="使用SQL提示"><a href="#使用SQL提示" class="headerlink" title="使用SQL提示"></a>使用SQL提示</h2><h3 id="USE-INDEX"><a href="#USE-INDEX" class="headerlink" title="USE INDEX"></a>USE INDEX</h3><p>在查询语句中表名的后面,添加USE INDEX来提供希望MySQL去参考的索引列表,让MySQL不再考虑其它可以索引</p>
<h3 id="IGNORE-INDEX"><a href="#IGNORE-INDEX" class="headerlink" title="IGNORE INDEX"></a>IGNORE INDEX</h3><p>让MySQL忽略一个或多个索引</p>
<h3 id="FORCE-INDEX"><a href="#FORCE-INDEX" class="headerlink" title="FORCE INDEX"></a>FORCE INDEX</h3><p>强制MySQL使用一个特定的索引</p>
<h1 id="常用SQL技巧"><a href="#常用SQL技巧" class="headerlink" title="常用SQL技巧"></a>常用SQL技巧</h1><h2 id="正则表达式的使用"><a href="#正则表达式的使用" class="headerlink" title="正则表达式的使用"></a>正则表达式的使用</h2><p>MySQL利用REGEXP命令提供给用户扩展的正则表达式功能.REGEXP在进行模式匹配时区分大小写.</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">序列</th>
<th style="text-align:center">序列说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">^</td>
<td style="text-align:center">在字符串的开始处进行匹配</td>
</tr>
<tr>
<td style="text-align:center">$</td>
<td style="text-align:center">在字符串的末尾处进行匹配</td>
</tr>
<tr>
<td style="text-align:center">.</td>
<td style="text-align:center">匹配任意单个字符，包括换行符</td>
</tr>
<tr>
<td style="text-align:center">[…]</td>
<td style="text-align:center">匹配出括号内的任意字符</td>
</tr>
<tr>
<td style="text-align:center"><sup><a href="#fn_..." id="reffn_...">...</a></sup></td>
<td style="text-align:center">匹配不出括号内的任意字符</td>
</tr>
<tr>
<td style="text-align:center">a*</td>
<td style="text-align:center">匹配零个或多个a（包括空串）</td>
</tr>
<tr>
<td style="text-align:center">a+</td>
<td style="text-align:center">匹配1个或多个a（不包括空串）</td>
</tr>
<tr>
<td style="text-align:center">a？</td>
<td style="text-align:center">匹配1个或零个a</td>
</tr>
<tr>
<td style="text-align:center">a1 &#124; a2</td>
<td style="text-align:center">匹配a1或a2</td>
</tr>
<tr>
<td style="text-align:center">a(m)</td>
<td style="text-align:center">匹配m个a</td>
</tr>
<tr>
<td style="text-align:center">a(m,)</td>
<td style="text-align:center">匹配m个或更多个a</td>
</tr>
<tr>
<td style="text-align:center">a(m,n)</td>
<td style="text-align:center">匹配m到n个a</td>
</tr>
<tr>
<td style="text-align:center">a(,n)</td>
<td style="text-align:center">匹配0到n个a</td>
</tr>
<tr>
<td style="text-align:center">(…)</td>
<td style="text-align:center">将模式元素组成单一元素</td>
</tr>
</tbody>
</table>
</div>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>排序算法</title>
    <url>/2018/02/08/algorithm-sorting/</url>
    <content><![CDATA[<h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><p>插入排序是对少量元素进行排序的有效算法。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">初始状态: 4,| 9, 7, 20, 3, 16, 18</span><br><span class="line">第一趟:   4, 9,| 7, 20, 3, 16, 18</span><br><span class="line">第二趟:   4, 7, 9,| 20, 3, 16, 18</span><br><span class="line">第三趟:   3, 4, 7, 9,| 20, 16, 18</span><br><span class="line">第四趟:   3, 4, 7, 9, 16,| 20, 18</span><br><span class="line">第五趟:   3, 4, 7, 9, 16, 18,| 20</span><br></pre></td></tr></table></figure></p>
<p>插入排序n个元素的排序需要进行n-1趟插入排序将所有元素完成排序。<br>插入排序是<strong>稳定排序</strong>算法。在数据及规模不大时，插入排序具有较好的效率。最好情况下每个元素都在其正确的位置上，进行排序所需事件为对每个元素与其前一个元素对比的时间，约等于一次遍历所花时间，所以<strong>最好情况下时间复杂度为$O(n)$</strong>，在普通情况和最坏情况下，n个元素每个元素都需要被移动一个线性的距离，所以<strong>平均和最坏情况下，插入排序的时间复杂度为$O(n^2)$</strong>。</p>
<h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><p>冒泡排序（气泡排序）是交换排序的一种。分为下沉排序和上浮排序。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">下沉排序</span><br><span class="line">初始状态: 4, 9, 7, 20, 3, 16, 18</span><br><span class="line">第一趟:   4, 7, 9, 3, 16, 18, 20</span><br><span class="line">第二趟:   4, 7, 3, 9, 16, 18, 20</span><br><span class="line">第三趟:   4, 3, 7, 9, 16, 18, 20</span><br><span class="line">第四趟:   3, 4, 7, 9, 16, 18, 20</span><br><span class="line"></span><br><span class="line">上浮排序</span><br><span class="line">初始状态: 4, 9, 7, 20, 3, 16, 18</span><br><span class="line">第一趟:   3, 4, 9, 7, 20, 16, 18</span><br><span class="line">第二趟:   3, 4, 7, 9, 16, 20, 18</span><br><span class="line">第三趟:   3, 4, 7, 9, 16, 18, 20</span><br></pre></td></tr></table></figure></p>
<p>冒泡排序主要步骤是相邻元素的比较和交换，终止的标志为在某一趟排序过程中值有对比动作而没有交换动作。<br>冒泡排序在最好情况下，初始状态就已经是升序排序，则只需要经过一趟n-1次元素之间比较，且不用进行元素移动，就结束排序，<strong>最好时间复杂度为$O(n)$</strong>。最坏情况下，参加排序的数据元素为逆序排序，或最小值在序列最后时，需要进行n-1趟排序，<strong>平均和最坏时间复杂度都是$O(n^2)$</strong>。<br>冒泡排序的元素交换发生在相邻元素之间，不会改变值相同元素的相对位置，因此，<strong>冒泡排序是稳定排序</strong>。</p>
<h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><p>选择排序重复地从待排序的元素中选出最大的或最小的元素进行排序。<br>选择排序的时间复杂度为$O(n^2)$<br>选择排序是非稳定排序<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">选最小值排序</span><br><span class="line">初始状态: 4, 9, 7, 20, 3, 16, 18</span><br><span class="line">第一趟:   3, 9, 7, 20, 4, 16, 18</span><br><span class="line">第二趟:   3, 4, 7, 20, 9, 16, 18</span><br><span class="line">第三趟:   3, 4, 7, 20, 9, 16, 18</span><br><span class="line">第四趟:   3, 4, 7,  9,20, 16, 18</span><br><span class="line">第五趟:   3, 4, 7,  9,16, 20, 18</span><br><span class="line">第六趟:   3, 4, 7,  9,16, 18, 20</span><br><span class="line"></span><br><span class="line">选最大值排序</span><br><span class="line">初始状态: 4, 9, 7, 20, 3, 16, 18</span><br><span class="line">第一趟:   4, 9, 7, 18, 3, 16, 20</span><br><span class="line">第二趟:   4, 9, 7, 16, 3, 18, 20</span><br><span class="line">第三趟:   4, 9, 7,  3,16, 18, 20</span><br><span class="line">第四趟:   4, 3, 7,  9,16, 18, 20</span><br><span class="line">第五趟:   4, 3, 7,  9,16, 18, 20</span><br><span class="line">第六趟:   3, 4, 7,  9,16, 18, 20</span><br></pre></td></tr></table></figure></p>
<h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><p>快速排序是运用分治思想的算法。主要思想：有待排序数组S={d1, d2, d3, …, dn}，从中找出元素划界元素v，将剩下元素中小于或等于v的元素移动到v的前面，将大于或等于v的元素i移动到v的后面，v就找到了它的最终位置，并将S划分为两个不相交的子数组S1和S2。其中S1中的元素均小于或等于v，S2中的元素均大于或等于v，这个过程称为一次排序。然后快速排序递归地对子序列S1和S2进行上述排序过程。直至所有的子序列都只包含0或1个元素时停止，整个数组完成排序。<br>划界元素一般取第一个元素、中间元素或最后一个元素。<br>快速排序是不稳定排序，主要是因为最后异步划界元素与S[i+1]交换的时候有可能打破前面元素的稳定性。<br>快速排序的最坏时间复杂度为$O(n^2)$，最坏情况为参与排序的元素原本有序，平均时间复杂度为$O(nlog_2n)$。</p>
<h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><p>归并排序是运用分治思想的算法。归并将两个或多个已排序序列合并成为一个按值排序的序列。<br>归并排序的平均时间复杂度为$O(nlog_2n)$<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">9, 4, | 7, 20, | 16,  3, | 18</span><br><span class="line">4, 9,   7, 20,    3, 16,   18</span><br><span class="line">4, 9,   7, 20, |  3, 16,   18</span><br><span class="line">3, 4,   7,  9,   16, 18,   20</span><br></pre></td></tr></table></figure></p>
<h2 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h2><h3 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h3><p>堆数据结构是一种数组对象，可以将其看成一颗完全二叉树。堆分为最大堆和最小堆，最小堆的最小元素是根结点，最大堆的最大元素是其根结点。</p>
<h3 id="堆排序算法"><a href="#堆排序算法" class="headerlink" title="堆排序算法"></a>堆排序算法</h3><p>最大堆的根结点是最大值，堆排序的核心思想也是利用了堆结构的这一特性。对待排序数组进行建堆操作，使其数组中元素排列复合最大堆特性。每次取堆的最大值，再调整堆结构，直至堆的大小为2结束。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4 9 7 20 3 16 18</span><br><span class="line">20 9 18 4 3 16 7</span><br><span class="line">18 9 16 4 3 7 20</span><br><span class="line">16 9 7 4 3 18 20</span><br><span class="line">9 4 7 3 16 18 20</span><br><span class="line">7 4 3 9 16 18 20</span><br><span class="line">4 3 7 9 16 18 20</span><br><span class="line">3 4 7 9 16 18 20</span><br></pre></td></tr></table></figure></p>
<p>堆排序的时间复杂度为$O(nlog_2n)$<br>堆排序是非稳定排序</p>
<h2 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h2><p>希尔排序是一种非稳定排序，希尔排序不适合链表结构。<br>希尔排序的主要思想：确定一个元素间隔数gap，将参与排序的元素从第一个元素开始按照间隔一次分成多个子序列，分别将所有位置相隔gap的元素看成一个子序列。对各个子序列排序，再缩小gap的值，重新按照新的gap划分数组，再对每个子序列排序，直到gap递减为1。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">        3, 7, 5, 1, 12, 10, 8, 9</span><br><span class="line">gap=4   3, 7, 5, 1, 12, 10, 8, 9</span><br><span class="line">gap=2   3, 1, 5, 7,  8,  9,12,10</span><br><span class="line">gap=1   1, 3, 5, 7,  8,  9,10,12</span><br></pre></td></tr></table></figure></p>
<h2 id="计数排序"><a href="#计数排序" class="headerlink" title="计数排序"></a>计数排序</h2><p>计数排序是一种稳定排序，当待排序数组中有大量重复的数值并且这些数值较为集中时，使用计数排序算法较有优势。</p>
<h2 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h2><p>基数排序的主要思想：如果参加排序的元素具有d位，将元素先按最低位的值进行派位，如后按最次低位的值进行排序……最后进行最高位的排序。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">初始   个位   十位   百位</span><br><span class="line">329    463    329    329</span><br><span class="line">568    564    839    463</span><br><span class="line">839 -&gt; 568 -&gt; 463 -&gt; 564 </span><br><span class="line">463    329    564    568</span><br><span class="line">564    839    568    839</span><br></pre></td></tr></table></figure></p>
<h2 id="桶排序"><a href="#桶排序" class="headerlink" title="桶排序"></a>桶排序</h2><p>桶排序将数组中的数据分组，将分好的组分别放在一个个的”桶”中，然后对每个桶中的数据再进行排序。对”桶”内部的排序，可以使用插入排序、冒泡排序或快速排序等排序方法。<br>桶排序数组中的数据满足以下两点：</p>
<ol>
<li>均匀分布。输入数据需要均匀分布再一个给定的范围内。基于这种分配，算法创建n个桶来平分输入数据。</li>
<li>有序散列函数。桶必须是有序的。即，排在前面的桶中的所有数据必须小于后面桶的中的所有数据。</li>
</ol>
<h2 id="排序算法对比和选择"><a href="#排序算法对比和选择" class="headerlink" title="排序算法对比和选择"></a>排序算法对比和选择</h2><h3 id="排序算法时间复杂度、空间复杂度、算法稳定性"><a href="#排序算法时间复杂度、空间复杂度、算法稳定性" class="headerlink" title="排序算法时间复杂度、空间复杂度、算法稳定性"></a>排序算法时间复杂度、空间复杂度、算法稳定性</h3><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">算法名称</th>
<th style="text-align:center">最好时间复杂度</th>
<th style="text-align:center">平均时间复杂度</th>
<th style="text-align:center">最坏时间复杂度</th>
<th style="text-align:center">空间复杂度</th>
<th style="text-align:center">算法稳定性</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">插入排序</td>
<td style="text-align:center">$O(n)$</td>
<td style="text-align:center">$O(n^2)$</td>
<td style="text-align:center">$O(n^2)$</td>
<td style="text-align:center">$O(1)$</td>
<td style="text-align:center">稳定</td>
</tr>
<tr>
<td style="text-align:center">冒泡排序</td>
<td style="text-align:center">$O(n)$</td>
<td style="text-align:center">$O(n^2)$</td>
<td style="text-align:center">$O(n^2)$</td>
<td style="text-align:center">$O(1)$</td>
<td style="text-align:center">稳定</td>
</tr>
<tr>
<td style="text-align:center">选择排序</td>
<td style="text-align:center">$O(n^2)$</td>
<td style="text-align:center">$O(n^2)$</td>
<td style="text-align:center">$O(n^2)$</td>
<td style="text-align:center">$O(1)$</td>
<td style="text-align:center">不稳定</td>
</tr>
<tr>
<td style="text-align:center">快速排序</td>
<td style="text-align:center">$O(nlog_2n)$</td>
<td style="text-align:center">$O(nlog_2n)$</td>
<td style="text-align:center">$O(n^2)$</td>
<td style="text-align:center">$O(log_2n)$</td>
<td style="text-align:center">不稳定</td>
</tr>
<tr>
<td style="text-align:center">归并排序</td>
<td style="text-align:center">$O(nlog_2n)$</td>
<td style="text-align:center">$O(nlog_2n)$</td>
<td style="text-align:center">$O(nlog_2n)$</td>
<td style="text-align:center">$O(n)$</td>
<td style="text-align:center">稳定</td>
</tr>
<tr>
<td style="text-align:center">堆排序</td>
<td style="text-align:center">$O(nlog_2n)$</td>
<td style="text-align:center">$O(nlog_2n)$</td>
<td style="text-align:center">$O(nlog_2n)$</td>
<td style="text-align:center">$O(1)$</td>
<td style="text-align:center">不稳定</td>
</tr>
<tr>
<td style="text-align:center">希尔排序</td>
<td style="text-align:center">O(n^1.3)</td>
<td style="text-align:center">$O(nlog_2n)$</td>
<td style="text-align:center">$O(n^2)$</td>
<td style="text-align:center">$O(1)$</td>
<td style="text-align:center">不稳定</td>
</tr>
<tr>
<td style="text-align:center">计数排序</td>
<td style="text-align:center">$O(n)$</td>
<td style="text-align:center">$O(n)$</td>
<td style="text-align:center">$O(n)$</td>
<td style="text-align:center">$O(n)$</td>
<td style="text-align:center">稳定</td>
</tr>
<tr>
<td style="text-align:center">基数排序</td>
<td style="text-align:center">$O(d(n+w))$</td>
<td style="text-align:center">$O(d(n+w))$</td>
<td style="text-align:center">$O(d(n+w))$</td>
<td style="text-align:center">$O(n+w)$</td>
<td style="text-align:center">稳定</td>
</tr>
<tr>
<td style="text-align:center">桶排序</td>
<td style="text-align:center">$O(n)$</td>
<td style="text-align:center">$O(n)$</td>
<td style="text-align:center">$O(n)$</td>
<td style="text-align:center">$O(n)$</td>
<td style="text-align:center">稳定</td>
</tr>
</tbody>
</table>
</div>
<h3 id="排序算法选择标准"><a href="#排序算法选择标准" class="headerlink" title="排序算法选择标准"></a>排序算法选择标准</h3><ol>
<li>通常情况下，输入数据是随机的，快速排序、归并排序、希尔排序和堆排序的运行速度较快。其中堆排序是原地排序最节省空间，快速排序的速度是最快的。在内存空间不紧张的情况下，一般采用快速排序，如需节省空间则采用堆排序，希尔排序不适合用在链表数据结构上。</li>
<li>待排序数据规模不大而且一开始就局部有序，插入排序和冒泡排序的运行时间最快，为$O(n)$，一般采用这两种排序算法。</li>
<li>从待排序数据规模考虑：规模小，采用简单排序算法合适，整体性能高；规模大，采用改进型的算法比较合适。因为规模小时$n^2$和$log_2n$差异小，而简单算法实现比较容易。</li>
</ol>
<h2 id="C-代码实现"><a href="#C-代码实现" class="headerlink" title="C++代码实现"></a>C++代码实现</h2><p><a href="https://github.com/CaseZheng/Study/blob/master/Algorithm/Sort/main.cpp" target="_blank" rel="noopener">github代码 https://github.com/CaseZheng</a><br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt; </span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintVec</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;vec)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> x : vec)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;x&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(vec.size()&gt;<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InsertSort</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;vec)</span>   <span class="comment">//插入排序</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(vec.size() &lt;= <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;vec.size(); ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> tmpIndex = i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;i; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(vec[j] &gt; vec[i])</span><br><span class="line">            &#123;</span><br><span class="line">                tmpIndex = j;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> tmpValue = vec[i];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i; j&gt;tmpIndex; --j)</span><br><span class="line">        &#123;</span><br><span class="line">            vec[j] = vec[j<span class="number">-1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        vec[tmpIndex] = tmpValue;</span><br><span class="line">        <span class="comment">//PrintVec(vec);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Swap</span><span class="params">(<span class="keyword">int</span> &amp;a, <span class="keyword">int</span> &amp;b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> tmp = a;</span><br><span class="line">    a = b;</span><br><span class="line">    b = tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BubbleSinkSort</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;vec)</span>   <span class="comment">//冒泡排序（下沉）</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(vec.size() &lt;= <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=vec.size()<span class="number">-1</span>; i&gt;<span class="number">0</span>; --i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">int</span> end = vec.size()<span class="number">-1</span>-i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=vec.size()<span class="number">-1</span>; j&gt;end; --j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(vec[j] &lt; vec[j<span class="number">-1</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                Swap(vec[j], vec[j<span class="number">-1</span>]);</span><br><span class="line">                flag = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!flag)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//PrintVec(vec);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BubbleFloatSort</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;vec)</span>   <span class="comment">//冒泡排序（上浮）</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(vec.size() &lt;= <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;vec.size(); ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">int</span> end = vec.size()<span class="number">-1</span>-i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;end; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(vec[j] &gt; vec[j+<span class="number">1</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                Swap(vec[j], vec[j+<span class="number">1</span>]);</span><br><span class="line">                flag = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!flag)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//PrintVec(vec);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SelectionSort</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;vec)</span>        <span class="comment">//选择排序</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(vec.size() &lt;= <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;vec.size(); ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> minValue = vec[i];</span><br><span class="line">        <span class="keyword">int</span> minIndex = i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>; j&lt;vec.size(); ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(vec[j] &lt; minValue)</span><br><span class="line">            &#123;</span><br><span class="line">                minValue = vec[j];</span><br><span class="line">                minIndex = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Swap(vec[i], vec[minIndex]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Partition</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;vec, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&gt;r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> l;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> position;</span><br><span class="line">    <span class="keyword">int</span> index = r;</span><br><span class="line">    <span class="keyword">int</span> tmpValue = vec[index];</span><br><span class="line">    <span class="keyword">while</span>(l&lt;r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;r &amp;&amp; vec[l]&lt;tmpValue) ++l;   <span class="comment">//从左边向右找一个大于tmpValue的下标l</span></span><br><span class="line">        <span class="keyword">while</span>(l&lt;r &amp;&amp; vec[r]&gt;=tmpValue) --r;  <span class="comment">//从右边向左找一个小于tmpValue的下标r</span></span><br><span class="line">        <span class="keyword">if</span>(l&lt;r)</span><br><span class="line">        &#123;</span><br><span class="line">            Swap(vec[l], vec[r]);           <span class="comment">//交换两个值</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Swap(vec[l], vec[index]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//PrintVec(vec);</span></span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QuickSort_Recursion</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;vec, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> position = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;r)</span><br><span class="line">    &#123;</span><br><span class="line">        position = Partition(vec, l, r);</span><br><span class="line">        QuickSort_Recursion(vec, l, position<span class="number">-1</span>);</span><br><span class="line">        QuickSort_Recursion(vec, position+<span class="number">1</span>, r);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QuickSort_Recursion</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;vec)</span>    <span class="comment">//快速排序（递归）</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(vec.size() &lt;= <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    QuickSort_Recursion(vec, <span class="number">0</span>, vec.size()<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QuickSort</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;vec)</span>            <span class="comment">//快速排序（迭代）</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(vec.size() &lt;= <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> r = vec.size()<span class="number">-1</span>;</span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; st;</span><br><span class="line">    st.push(l);</span><br><span class="line">    st.push(r);</span><br><span class="line">    <span class="keyword">while</span>(!st.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        r = st.top(); st.pop();</span><br><span class="line">        l = st.top(); st.pop();</span><br><span class="line">        <span class="keyword">if</span>(l &gt;= r)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> position = Partition(vec, l, r);</span><br><span class="line">        st.push(l); </span><br><span class="line">        st.push(position<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line">        st.push(position+<span class="number">1</span>);</span><br><span class="line">        st.push(r);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Merge</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;va, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;vb, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;vec)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vec.clear();</span><br><span class="line">    <span class="keyword">if</span>(va.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        vec = vb;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(vb.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        vec = va;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> b = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(a &lt; va.size() &amp;&amp; b &lt; vb.size())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(va[a] &lt; vb[b])</span><br><span class="line">            &#123;</span><br><span class="line">                vec.push_back(va[a++]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> </span><br><span class="line">            &#123;</span><br><span class="line">                vec.push_back(vb[b++]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(a &lt; va.size())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(; a&lt;va.size(); ++a)</span><br><span class="line">            &#123;</span><br><span class="line">                vec.push_back(va[a]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(b &lt; vb.size())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(; b&lt;vb.size(); ++b)</span><br><span class="line">            &#123;</span><br><span class="line">                vec.push_back(vb[b]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MergeSort_Recursion</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;vec)</span>  <span class="comment">//归并排序（递归）</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(vec.size() &lt;= <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; va;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vb;</span><br><span class="line">    <span class="keyword">int</span> mod = vec.size()/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;vec.size(); ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(i&lt;mod)</span><br><span class="line">        &#123;</span><br><span class="line">            va.push_back(vec[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">        &#123;</span><br><span class="line">            vb.push_back(vec[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    MergeSort_Recursion(va);</span><br><span class="line">    MergeSort_Recursion(vb);</span><br><span class="line">    Merge(va, vb, vec);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Merge</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;vec, <span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; va;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vb;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=x; i&lt;y; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        va.push_back(vec[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=y; i&lt;z; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        vb.push_back(vec[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vc;</span><br><span class="line">    <span class="keyword">if</span>(va.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        vc = vb;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(vb.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        vc = va;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> b = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(a &lt; va.size() &amp;&amp; b &lt; vb.size())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(va[a] &lt; vb[b])</span><br><span class="line">            &#123;</span><br><span class="line">                vc.push_back(va[a++]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> </span><br><span class="line">            &#123;</span><br><span class="line">                vc.push_back(vb[b++]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(a &lt; va.size())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(; a&lt;va.size(); ++a)</span><br><span class="line">            &#123;</span><br><span class="line">                vc.push_back(va[a]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(b &lt; vb.size())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(; b&lt;vb.size(); ++b)</span><br><span class="line">            &#123;</span><br><span class="line">                vc.push_back(vb[b]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=x; i&lt;z; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        vec[i] = vc[i-x];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">min</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (a&lt;b ? a : b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MergeSort</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;vec)</span>            <span class="comment">//归并排序（迭代）</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(vec.size() &lt;= <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;vec.size(); i*=<span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> offset = i+i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;vec.size(); j+=offset)</span><br><span class="line">        &#123;</span><br><span class="line">            Merge(vec, j, min(j+i, vec.size()), min(j+offset, vec.size())); </span><br><span class="line">            <span class="comment">//cout&lt;&lt;j&lt;&lt;" "&lt;&lt;min(j+i, vec.size())&lt;&lt;" "&lt;&lt;min(j+offset, vec.size())&lt;&lt;endl;</span></span><br><span class="line">            <span class="comment">//PrintVec(vec);</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">KeepHead</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;vec, <span class="keyword">int</span> len, <span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">2</span>*i+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> right = <span class="number">2</span>*i+<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> largest = i;</span><br><span class="line">    <span class="keyword">if</span>(left&lt;len &amp;&amp; vec[left]&gt;vec[i])</span><br><span class="line">    &#123;</span><br><span class="line">        largest = left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(right&lt;len &amp;&amp; vec[right]&gt;vec[largest])</span><br><span class="line">    &#123;</span><br><span class="line">        largest = right;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(largest != i)</span><br><span class="line">    &#123;</span><br><span class="line">        Swap(vec[i], vec[largest]);</span><br><span class="line">        KeepHead(vec, len, largest);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BuildHeap</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;vec)</span>                <span class="comment">//建堆</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(vec.size() &lt; <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> i = vec.size()/<span class="number">2</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&gt;=<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        KeepHead(vec, vec.size(), i);</span><br><span class="line">        --i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">HeapSort</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;vec)</span>                 <span class="comment">//堆排序</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    BuildHeap(vec);</span><br><span class="line">    <span class="keyword">int</span> heap_size = vec.size();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=vec.size()<span class="number">-1</span>; i&gt;<span class="number">0</span>; --i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//PrintVec(vec);</span></span><br><span class="line">        Swap(vec[<span class="number">0</span>], vec[i]);</span><br><span class="line">        --heap_size;</span><br><span class="line">        KeepHead(vec, heap_size, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CountingSort</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;vec)</span>             <span class="comment">//计数排序</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(vec.size() &lt; <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> maxValue = vec[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">int</span> minValue = vec[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> x : vec)</span><br><span class="line">    &#123;</span><br><span class="line">        maxValue = x&gt;maxValue ? x : maxValue;</span><br><span class="line">        minValue = x&lt;minValue ? x : minValue;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">c</span><span class="params">(maxValue-minValue+<span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> x : vec)</span><br><span class="line">    &#123;</span><br><span class="line">        ++c[x-minValue];        <span class="comment">//统计vec各元素出现的次数</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=maxValue-minValue; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        c[i] += c[i<span class="number">-1</span>];         <span class="comment">//分布值计算</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">s</span><span class="params">(vec.size(), <span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=vec.size()<span class="number">-1</span>; i&gt;=<span class="number">0</span>; --i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> j = vec[i] - minValue;</span><br><span class="line">        s[c[j]<span class="number">-1</span>] = vec[i];</span><br><span class="line">        --c[j];</span><br><span class="line">    &#125;</span><br><span class="line">    vec = s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ShellSort</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;vec)</span>                <span class="comment">//希尔排序 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(vec.size() &lt; <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> i, j, flag, counter=<span class="number">1</span>, gap=vec.size();</span><br><span class="line">    <span class="keyword">int</span> temp;</span><br><span class="line">    <span class="keyword">while</span>(gap &gt; <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        gap = gap/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">do</span> </span><br><span class="line">        &#123;</span><br><span class="line">            flag = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=vec.size()-gap-counter; ++i)</span><br><span class="line">            &#123;</span><br><span class="line">                j=i+gap;</span><br><span class="line">                <span class="keyword">if</span>(vec[i] &gt; vec[j])</span><br><span class="line">                &#123;</span><br><span class="line">                    Swap(vec[i], vec[j]);</span><br><span class="line">                    flag = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(counter &lt; vec.size() &amp;&amp; flag == <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vecTest = &#123;<span class="number">4</span>, <span class="number">9</span>, <span class="number">7</span>, <span class="number">20</span>, <span class="number">3</span>, <span class="number">16</span>, <span class="number">18</span>&#125;;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//cout&lt;&lt;"插入排序"&lt;&lt;endl         ; vec = vecTest ; PrintVec(vec) ; InsertSort(vec)          ; PrintVec(vec) ;</span></span><br><span class="line">    <span class="comment">//cout&lt;&lt;"冒泡排序（下沉）"&lt;&lt;endl ; vec = vecTest ; PrintVec(vec) ; BubbleSinkSort(vec)      ; PrintVec(vec) ;</span></span><br><span class="line">    <span class="comment">//cout&lt;&lt;"冒泡排序（上浮）"&lt;&lt;endl ; vec = vecTest ; PrintVec(vec) ; BubbleFloatSort(vec)     ; PrintVec(vec) ;</span></span><br><span class="line">    <span class="comment">//cout&lt;&lt;"选择排序"&lt;&lt;endl         ; vec = vecTest ; PrintVec(vec) ; SelectionSort(vec)       ; PrintVec(vec) ;</span></span><br><span class="line">    <span class="comment">//cout&lt;&lt;"快速排序（递归）"&lt;&lt;endl ; vec = vecTest ; PrintVec(vec) ; QuickSort_Recursion(vec) ; PrintVec(vec) ;</span></span><br><span class="line">    <span class="comment">//cout&lt;&lt;"快速排序（迭代）"&lt;&lt;endl ; vec = vecTest ; PrintVec(vec) ; QuickSort(vec)           ; PrintVec(vec) ;</span></span><br><span class="line">    <span class="comment">//cout&lt;&lt;"归并排序（递归）"&lt;&lt;endl ; vec = vecTest ; PrintVec(vec) ; MergeSort_Recursion(vec) ; PrintVec(vec) ;</span></span><br><span class="line">    <span class="comment">//cout&lt;&lt;"归并排序（迭代）"&lt;&lt;endl ; vec = vecTest ; PrintVec(vec) ; MergeSort(vec)           ; PrintVec(vec) ;</span></span><br><span class="line">    <span class="comment">//cout&lt;&lt;"计数排序"&lt;&lt;endl         ; vec = vecTest ; PrintVec(vec) ; CountingSort(vec)        ; PrintVec(vec) ;</span></span><br><span class="line">    <span class="comment">//cout&lt;&lt;"堆排序"&lt;&lt;endl           ; vec = vecTest ; PrintVec(vec) ; HeapSort(vec)            ; PrintVec(vec) ;</span></span><br><span class="line">    <span class="comment">//cout&lt;&lt;"希尔排序"&lt;&lt;endl         ; vec = vecTest ; PrintVec(vec) ; ShellSort(vec)           ; PrintVec(vec) ;</span></span><br><span class="line"></span><br><span class="line">    vecTest = &#123;<span class="number">49</span>, <span class="number">55</span>, <span class="number">25</span>, <span class="number">97</span>, <span class="number">60</span>, <span class="number">27</span>, <span class="number">49</span>, <span class="number">50</span>&#125; ;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//cout&lt;&lt;"快速排序（递归）"&lt;&lt;endl ; vec = vecTest ; PrintVec(vec) ; QuickSort_Recursion(vec) ; PrintVec(vec) ;</span></span><br><span class="line">    <span class="comment">//cout&lt;&lt;"快速排序（迭代）"&lt;&lt;endl ; vec = vecTest ; PrintVec(vec) ; QuickSort(vec)           ; PrintVec(vec) ;</span></span><br><span class="line">    <span class="comment">//cout&lt;&lt;"归并排序（递归）"&lt;&lt;endl ; vec = vecTest ; PrintVec(vec) ; MergeSort_Recursion(vec) ; PrintVec(vec) ;</span></span><br><span class="line">    <span class="comment">//cout&lt;&lt;"归并排序（迭代）"&lt;&lt;endl ; vec = vecTest ; PrintVec(vec) ; MergeSort(vec)           ; PrintVec(vec) ;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>基础</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>排序</tag>
      </tags>
  </entry>
  <entry>
    <title>boost-log日志组件</title>
    <url>/2018/04/27/boost-log/</url>
    <content><![CDATA[<h1 id="boost-log"><a href="#boost-log" class="headerlink" title="boost-log"></a>boost-log</h1><h2 id="常用简写"><a href="#常用简写" class="headerlink" title="常用简写"></a>常用简写</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> logging  = boost::<span class="built_in">log</span>;</span><br><span class="line"><span class="keyword">namespace</span> src      = boost::<span class="built_in">log</span>::sources;</span><br><span class="line"><span class="keyword">namespace</span> expr     = boost::<span class="built_in">log</span>::expressions;</span><br><span class="line"><span class="keyword">namespace</span> sinks    = boost::<span class="built_in">log</span>::sinks;</span><br><span class="line"><span class="keyword">namespace</span> attrs    = boost::<span class="built_in">log</span>::attributes;</span><br><span class="line"><span class="keyword">namespace</span> keywords = boost::<span class="built_in">log</span>::keywords;</span><br></pre></td></tr></table></figure>
<h2 id="boost-log的结构图"><a href="#boost-log的结构图" class="headerlink" title="boost-log的结构图"></a>boost-log的结构图</h2><p><img src="/Picture/boost-log.png" alt><br>boost::log 的设计主要有日志器(Logger)、日志核心(Logging core)、Sink 前后端(frontend, backend)组成.日志文本以及日志环境由日志器(Logger)负责搜集，日志核心负责处理日志数据(例如全局过滤、将日志记录传递给 Sink ),Sink前端分为同步、异步以及不考虑线程同步问题的版本,它们负责将日志记录传递给 Sink 后端处理.Sink后端负责把日志记录格式化并输出到不同的介质中(例如日志文件、报警以及统计源中).</p>
<h2 id="Logging-core的获取"><a href="#Logging-core的获取" class="headerlink" title="Logging core的获取"></a>Logging core的获取</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;boost/log/core.hpp&gt;</span></span></span><br><span class="line">boost::<span class="built_in">shared_ptr</span>&lt;logging::core&gt; core = logging::core::get();</span><br></pre></td></tr></table></figure>
<h2 id="sink对象创建"><a href="#sink对象创建" class="headerlink" title="sink对象创建"></a>sink对象创建</h2><p>需要先创建一个backend对象，然后在创建sink对象的时候，将backend对象传递给它<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> sinks::synchronous_sink&lt;sinks::text_file_backend&gt; TextSink;</span><br><span class="line"><span class="comment">// init sink</span></span><br><span class="line">boost::<span class="built_in">shared_ptr</span>&lt;sinks::text_file_backend&gt; backend = boost::make_shared&lt;sinks::text_file_backend&gt;(</span><br><span class="line">    keywords::file_name = <span class="string">"sign_%Y-%m-%d_%H-%M-%S.%N.log"</span>,</span><br><span class="line">    keywords::rotation_size = <span class="number">10</span> * <span class="number">1024</span> * <span class="number">1024</span>,</span><br><span class="line">    keywords::time_based_rotation = sinks::file::rotation_at_time_point(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>),</span><br><span class="line">    keywords::min_free_space = <span class="number">30</span> * <span class="number">1024</span> * <span class="number">1024</span>);</span><br><span class="line"><span class="function">boost::<span class="built_in">shared_ptr</span>&lt;TextSink&gt; <span class="title">sink</span><span class="params">(<span class="keyword">new</span> TextSink(backend))</span></span>;</span><br></pre></td></tr></table></figure></p>
<h2 id="backend创建"><a href="#backend创建" class="headerlink" title="backend创建"></a>backend创建</h2><h3 id="指定frontend类型"><a href="#指定frontend类型" class="headerlink" title="指定frontend类型"></a>指定frontend类型</h3><p>backend的类型需要一个frontend类型作为其模版类,当创建一个backend对象时,已经确定了frontend.<br>frontend模版可以使用synchronous_sink类或者asynchronous_sink类,后者不会阻塞调用程序,会创建额外线程处理log,不过会慢点,内存消耗大点.一般推荐使用后者.</p>
<h3 id="用keywords构造参数"><a href="#用keywords构造参数" class="headerlink" title="用keywords构造参数"></a>用keywords构造参数</h3><p>boost/log/keywords目录下hpp文件<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[CaseZheng@VM_187_252_centos keywords]$ ls</span><br><span class="line">auto_flush.hpp  channel.hpp    empty_marker.hpp           file_name.hpp  ident.hpp              iteration.hpp   max_files.hpp     min_free_space.hpp  order.hpp            permissions.hpp    scan_method.hpp   target.hpp</span><br><span class="line">block_size.hpp  delimiter.hpp  enable_final_rotation.hpp  filter.hpp     incomplete_marker.hpp  log_name.hpp    max_size.hpp      name.hpp            ordering_window.hpp  registration.hpp   severity.hpp      time_based_rotation.hpp</span><br><span class="line">capacity.hpp    depth.hpp      facility.hpp               format.hpp     ip_version.hpp         log_source.hpp  message_file.hpp  open_mode.hpp       overflow_policy.hpp  rotation_size.hpp  start_thread.hpp  use_impl.hpp</span><br></pre></td></tr></table></figure></p>
<p>keywords是boost库的基本概念，设计到一个宏BOOST_PARAMETER_KEYWORD，定义在boost/parameter/keywords.hpp文件中， 主要作用就是在指定的namespace中创建一个singleton的对象。<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">keywords::file_name = <span class="string">"sign_%Y-%m-%d_%H-%M-%S.%N.log"</span>,</span><br></pre></td></tr></table></figure></p>
<p>上述代码:给keywords namespace下的singleton对象file_name赋值.<br>text_file_backend的构造函数语法上支持变参，但是语义上只支持有限的keywords</p>
<h2 id="sink指定格式"><a href="#sink指定格式" class="headerlink" title="sink指定格式"></a>sink指定格式</h2><p>指定日志格式,在sink中指定<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">sink-&gt;set_formatter (</span><br><span class="line">    expr::format(<span class="string">"[%1%]&lt;%2%&gt;(%3%): %4%"</span>)</span><br><span class="line">    % expr::format_date_time&lt; boost::posix_time::ptime&gt;(<span class="string">"TimeStamp"</span>, <span class="string">"%Y-%m-%d %H:%M:%S"</span>)</span><br><span class="line">    % expr::attr&lt;sign_severity_level&gt;(<span class="string">"Severity"</span>)</span><br><span class="line">    % expr::attr&lt;attrs::current_thread_id::value_type&gt;(<span class="string">"ThreadID"</span>)</span><br><span class="line">    % expr::smessage</span><br><span class="line">    );</span><br></pre></td></tr></table></figure></p>
<h2 id="Boost-Format风格"><a href="#Boost-Format风格" class="headerlink" title="Boost::Format风格"></a>Boost::Format风格</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">logging::formatter fmt = expr::stream</span><br><span class="line">    &lt;&lt; <span class="built_in">std</span>::setw(<span class="number">6</span>) &lt;&lt; <span class="built_in">std</span>::setfill(<span class="string">'0'</span>) &lt;&lt; line_id &lt;&lt; <span class="built_in">std</span>::setfill(<span class="string">' '</span>)</span><br><span class="line">    &lt;&lt; <span class="string">": &lt;"</span> &lt;&lt; severity &lt;&lt; <span class="string">"&gt;\t"</span></span><br><span class="line">    &lt;&lt; expr::if_(expr::has_attr(tag_attr))</span><br><span class="line">        [</span><br><span class="line">            expr::stream &lt;&lt; <span class="string">"["</span> &lt;&lt; tag_attr &lt;&lt; <span class="string">"] "</span></span><br><span class="line">        ]</span><br><span class="line">    &lt;&lt; expr::smessage;</span><br></pre></td></tr></table></figure>
<h2 id="sink对象安装"><a href="#sink对象安装" class="headerlink" title="sink对象安装"></a>sink对象安装</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">core-&gt;add_sink(sink);</span><br></pre></td></tr></table></figure>
<h2 id="attributes"><a href="#attributes" class="headerlink" title="attributes"></a>attributes</h2><p>根据设计，日志记录是由attributes组成的，所以打印内容必须以attribute的方式传给sink对象<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">sink-&gt;set_formatter (</span><br><span class="line">    expr::format(<span class="string">"[%1%]&lt;%2%&gt;(%3%)(%4%): %5%"</span>)</span><br><span class="line">    % expr::attr&lt;<span class="keyword">unsigned</span> <span class="keyword">int</span>&gt;(<span class="string">"LineID"</span>)</span><br><span class="line">    % expr::format_date_time&lt; boost::posix_time::ptime &gt;(<span class="string">"TimeStamp"</span>, <span class="string">"%Y-%m-%d %H:%M:%S"</span>)</span><br><span class="line">    % expr::attr&lt;sign_severity_level&gt;(<span class="string">"Severity"</span>)</span><br><span class="line">    % expr::attr&lt;attrs::current_thread_id::value_type &gt;(<span class="string">"ThreadID"</span>)</span><br><span class="line">    % expr::smessage</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p>
<p>不要忘记添加commont attributes<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">logging::add_common_attributes();</span><br></pre></td></tr></table></figure></p>
<h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><p><a href="https://github.com/CaseZheng/SimpleServerFramework/blob/master/comm/log.cpp" target="_blank" rel="noopener">boost log封装示例代码 log.cpp</a><br><a href="https://github.com/CaseZheng/SimpleServerFramework/blob/master/comm/log.h" target="_blank" rel="noopener">boost log封装示例代码 log.h</a></p>
]]></content>
      <categories>
        <category>cpp</category>
      </categories>
      <tags>
        <tag>cpp</tag>
        <tag>boost</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL数据导出、导入</title>
    <url>/2018/04/09/mysql-10/</url>
    <content><![CDATA[<h1 id="MySQL数据导出工具mysqldump"><a href="#MySQL数据导出工具mysqldump" class="headerlink" title="MySQL数据导出工具mysqldump"></a>MySQL数据导出工具mysqldump</h1><p>mysqldump客户端工具是MySQL最常用的备份工具.<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysqldump [option] db_name [tables]         # 备份单个数据库或者库中部分数据表</span><br><span class="line">mysqldump [option] --database DB1 [DB2 DB3] # 备份指定的一个或者多个数据库</span><br><span class="line">mysqldump [option] --all --database         # 备份所有数据库</span><br></pre></td></tr></table></figure></p>
<h2 id="连接选项"><a href="#连接选项" class="headerlink" title="连接选项"></a>连接选项</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-u, --user=name 指定用户名</span><br><span class="line">-p, --password[=name] 指定密码</span><br><span class="line">-h, --host=name 指定服务器IP或者域名</span><br><span class="line">-p, --port=# 指定连接端口</span><br></pre></td></tr></table></figure>
<h2 id="数据内容选项"><a href="#数据内容选项" class="headerlink" title="数据内容选项"></a>数据内容选项</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">--add-drop-database 每个数据库创建语句前加上DROP DATABASE语句</span><br><span class="line">--add-drop-table 在每个表创建语句前加上DROP TABLE语句</span><br></pre></td></tr></table></figure>
<p>默认情况下这两个选项自动添加</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-n, --no-create-db 不包含数据库的创建语句</span><br><span class="line">-t, --no-create-info 不包含数据表的创建语句</span><br><span class="line">-d, --no-data 不包含数据</span><br></pre></td></tr></table></figure>
<h2 id="输出格式选项"><a href="#输出格式选项" class="headerlink" title="输出格式选项"></a>输出格式选项</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">--compact 选项使数据结果更简洁,不包括默认选项中的各种注释</span><br><span class="line">-c, --complete-insert 使输出文件的insert语句包括字段名称</span><br><span class="line">-T 将指定数据表中的数据备份为单纯的数据文本和建表SQL两个文件</span><br></pre></td></tr></table></figure>
<h2 id="字符集选项"><a href="#字符集选项" class="headerlink" title="字符集选项"></a>字符集选项</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">--default-character-set=name 选型设置导出的客户端字符集</span><br></pre></td></tr></table></figure>
<h2 id="其它常用选项"><a href="#其它常用选项" class="headerlink" title="其它常用选项"></a>其它常用选项</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-F, --flush-logs 备份前刷新日志</span><br><span class="line">-l, --lock-tables 给所有表加读锁 默认开启</span><br><span class="line">--where=condition 导出数据的条件</span><br><span class="line">--skip-lock-table 导出数据时不锁表</span><br></pre></td></tr></table></figure>
<h1 id="MySQL数据导入工具mysqlimport"><a href="#MySQL数据导入工具mysqlimport" class="headerlink" title="MySQL数据导入工具mysqlimport"></a>MySQL数据导入工具mysqlimport</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysqlimport [options] db_name textfile1 [textfile2...]</span><br></pre></td></tr></table></figure>
<p>也可以进入数据库使用sourece命令直接执行sql文件</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>服务器框架设计与编码</title>
    <url>/2018/07/12/simple-server-framework/</url>
    <content><![CDATA[<p>一个libevent和boost库写的轻量级服务器框架</p>
<h1 id="总体服务器框架"><a href="#总体服务器框架" class="headerlink" title="总体服务器框架"></a>总体服务器框架</h1><p>先看下总体的服务器框架设计图<br><img src="https://www.plantuml.com/plantuml/svg/ZPDVIiD04CRVznG31QbemUT4Ip5KB8X8zJrijgjTI3PXTn84zG2Un4Fuu6tq6axM_Aj9IVCIldpV_2OpcomiSeDv4ZCHSsjXTMLu8k650LqdXIAFnn2bQGmhhN0gKcqHB1gbd-28xlVI5DBSKj4fzCmWrOzt7BV75sV-076Tw-aUQ_bCpPpdp4a5JSATbdxVh5lwx8rLCmNrJEsJ6nN9GchiJZkXnXOzpswvaPimGtDEl5mWk6WOSIldr2HRblAIb3z0l4RCHgX1cVaRml5QEGHSPsACHv4Ehb53j0Sn-dOKwT0QDKXJYJIZl3BK9RRQCQlZcUNPx7LUVu0U_7n-VBz_iNz7LQM2VQbs_NLojxvVqUptq89cXGSNj5iQALb8lQ5_yHS0"><br>服务器启动,根据不同服务实例化出对应的CLibeventFrame实例,例如Http服务器实例化CLibeventHttpFrame,Rpc服务实例化CLibeventRpcFrame,Tcp服务实例化CLibeventTcpFrame,Timer定时器服务实例化CLibeventTimerFrame.然后运行初始化函数Init(初始化日志,拉取配置文件等操作),然后运行Run函数启动反应堆.</p>
<h1 id="Http服务器"><a href="#Http服务器" class="headerlink" title="Http服务器"></a>Http服务器</h1><p><a href="https://github.com/CaseZheng/SimpleServerFramework/tree/master/libevent_http_frame" target="_blank" rel="noopener">Http服务器代码</a></p>
<p>Http服务器类图如下:<br><img src="https://www.plantuml.com/plantuml/svg/XLLTRzem57rkVeMbIGXeG7kc3BLDgShKQOW2UuoSv1Oo4YUp7RIfst_VTUo4VBWgBzZtt8_ZUu-TMo4fbqMQE652XI3USnp06PXyaZ9_v3G5ykOG_7qAiap8sKmSAOV8poMVUyhd1VWP-8AaVdxPtZZ_d2hXnOgPhgunJK9MB9R3qKsrlOkY7O-7OSQ494Boc1t80F_Hw9Bb_ccxNVlUFGa3bvopE2BZCA3yeE8dVLOOLuIIb8Vm0ogWvBPKstlSVH1qHBOcG16tUtjh6fv0bdvwgVpE4CgCpv7qYhrc2aIBsJKReYDCMw-n_p8EzRbKHIyOQXO-Xry5O4F6-jHZF6yPSOvnO3GXPUiUW2OwuN3qvRFnA16Tx4MDTpZg0qiMLUO9i28rP_V3DFBbdnoGFYZFBQwDcvbCwkDYnIp67KSkylWUWceI5cm38lUoo5RbUo6j0LHaLVrki-hHRRIbt_blM2lfjB-IuOf9uAyqX9OO1wGIOq-YTO1BF3KBdNoSr-iFfuRurSJGI6a-rydTrjeYmRh0Oa6KrWebDCEbnbJjKi09yOuGdkvOj6Cv5gv7NzDfMzPDd_RSJGqBjerJR3XDSs4DF6SdM4KMQ0zSn9bDK1vD4k3wzR26Ri0k4FcEe13Hrx54lgACPhCzJGebzvyjXNQm1off2q4HHlYa8QHNBV2H2lc3nr8xN7PDCLxKKagnBH3CcPHJCOfhiXaOecvJXtYmxbwre6jJXtSxsTJHohVZmctv6wUOm7DsG56-zO7w2KF4yiMOJdbyEChfeldwEwthDodooTz5TIMTvbUY4LsXpSZfL25rzvmssIfl7pUSEuMTMs0HVlx-0m00"><br>在调用CLibeventHttpFrame的Init函数时,除了初始化框架的日志,配置等模块外,还会生成CHttpServer实例,并运行HttpServer的初始化Init函数,给evhttp设置相应uri对应的回调函数,最后返回.等框架启动反应堆后,当有请求到来,会调用CPacket的DealPacket函数,解析请求,并通过uri分发请求,如果为默认的请求则分发到CPacketModel,并根据Interface分发到不同的CDealModel,自定义URI则分发到别的具体的CPacket实例,例如示例CExamplePacket.</p>
<h1 id="Timer服务器"><a href="#Timer服务器" class="headerlink" title="Timer服务器"></a>Timer服务器</h1><p><a href="https://github.com/CaseZheng/SimpleServerFramework/tree/master/libevent_timer_frame" target="_blank" rel="noopener">Timer服务器代码</a></p>
<p>Timer服务器类图如下:<br><img src="https://www.plantuml.com/plantuml/svg/ZLHDJyCm33sllo8I4ke-nNcCQQmhg19SjebhbRPcYqZRAV4Y9E2_aoKjJLc7wCtni_tyR7SXaGeyvjppKawb9C4JIq11WLkMWtWGD0VouH7zNILbAN4wbNig88iFA6Q10Mr0A11paiS7nxxrldvoEiywMM-eCt4I5Gpz_gt9FTGqaAMaSaWGjhuVkQ43Dx-Dx8tFMKaKnnI9wI9Eg0H3BJoPIstPYkEgee8KIp4xp-9Mdl_HNDHkpkr6bImZnXqaFgWZCXxBCdq3Z96yPYCYzwMeYCgHXGy85RjQ5VEo1WcL6bR80R5KQfGHRNEQeqF5xrjv5DFZfTmgMt4ns5hwJaHOPDt-Hqj5KUvNCgCroJMgFhaZDnUpha07kP1B-zI8VRP3Lk1gWUwppCgIbeL4qi775MW5tABhliANRVGShkDWgUkbIStR326FzHGkqdGNhDcjVy4xzx5fCdod-O53tQjsTDtZP2BORe-JUUkolDQPDHXtGRse6sD3lNRzyVZpL_G2Yap_Axu1"><br>在调用CLibeventTimerFrame的Init函数时,除了初始化框架的日志,配置等模块外,还会生成CTimerServer实例,并运行CTimerServer的初始化Init函数,生成定时器,最后启动定时器,当定时器激活后根据注册的ItimerServer执行相应的应用代码</p>
<h1 id="Tcp服务器"><a href="#Tcp服务器" class="headerlink" title="Tcp服务器"></a>Tcp服务器</h1><p><a href="https://github.com/CaseZheng/SimpleServerFramework/tree/master/libevent_tcp_frame" target="_blank" rel="noopener">Tcp服务器代码</a></p>
<p>Tcp服务器类图如下:<br><img src="https://www.plantuml.com/plantuml/svg/hLPRRvim57xdLrYQLD6Ce3sdNLGrRRT8dLgjc_Q833YfLR2HRPYcRlzznnYC3QHff_MXujo-Sp_nXLHOgBeiWgp0KgBDBKr9GvZwbbKt0fS4FGS8_jwbd4krMib7B4YUL4gSRq3bWOY6Y3KgayfIPy6Ve4Upp0xcFS0KQCke2a_F3AVXD4VN0alomBCdeZvZbXVayfUXGieKal3PgsUSIOMcqMpl1LSyuyKQdNmYofBXKSChWeilF2UzfQLxqoNKID4CcKYR3MVibaf5616RD9HAr9b2f047hEZuQ87CHmI2Mj4YaMqwYKacGfsL9d2UYmNI_oEaioq8Yuol1O80vu8mjVbAS0u1Q9jT3f2FNEWue7co1y1YVzZ-Xw2Al0MWInJaIGhzMY0erxKcBu6orPgP5BUpQstbj_ecxsBe8LhVMoQ9y3JjC4Jeg9EJogKFnpRRldQW_KuV1-ZBqXbtPR75orUh4bVdaCBnw3L4wN8EUdV67hpsn65rPzX1trBEpbh4VcKR2WS25wXTtU-imjaJPVlmXKgazMwdYtYYFo90n3gJrX5QL2rnYZwY3sSp3eok_3_mGr8sqzcijDIWX6ySh6Zs50q1QVqjSnZZo3nq6roxf6R3sqaANvuxxQNLyuxgGxVY_uvmBGGNTs9JS4bWIJsPZkqAA-npMuTJjbRk2ZnLFrZvSI7lQkLMifjoVHJAX9ewtkJ3jO8f1G5yR0eAcMshL-rmknYsyAyt6KfztAQVu39fjAVBbdoJMUjDp1d-9FZfjR_FtkeyEqDvdpfNm6LxipoI-UrnXVSfd4AQQIdUav6Pkvh0dxv0ubZG_QEAryvx8d2U5d5SLo2qXsjEPftuGWliRc7WxsGS5sGtzZxIw08OiW-6Cnh74zcGybGOkCLVBdzxYOqRiAmhe-40J3jnG6i4fLNyHir1pMiD2Pc8Xt875uJbyBxy2m00"><br>在调用CLibeventTcpFrame的Init函数时,除了初始化框架的日志,配置等模块外,还会生成CTcpServer实例,并运行CTcpServer的初始化Init函数,生成具体的IDealModel实例化对象和IProtocol实例化对象,返回后框架启动反应堆,当有请求到来时生成一个CSocketHandle对象,并记录到CTcpServer中,对发过来的信息,通过IProtocol实例解析报文,并将解析后的信息存放在生成的IPacketModel实例中,将IPacketModel实例传递给IDealModel实例进行业务逻辑的处理.</p>
<h1 id="Rpc服务器"><a href="#Rpc服务器" class="headerlink" title="Rpc服务器"></a>Rpc服务器</h1><p><a href="https://github.com/CaseZheng/SimpleServerFramework/tree/master/libevent_rpc_frame" target="_blank" rel="noopener">Rpc服务器代码</a></p>
<p>Rpc服务器类图如下:</p>
<p><img src="https://www.plantuml.com/plantuml/svg/XLHDRzim3BtxLmWeK2HP4-oST4KTrscxsLdchjlHK6pMyIPBggIa0xRzzz7oHvGbG7mI-SX7Ye_MhJPKcMt5l8nHhKaGbMlO0JU9p1QALa1-UmI_YxKGsaodUaCLvAaqwZh0a2TGEr0tf4fbRysylrxBziWDg1UQmID_4ItJknDCaIZApBBOqwm9r4QLl40l7fROoemq_i2FedJk1v_gX80oDgVPpmvCmY_fClnkEuBN9Rnrm4wKEHdj_Rugt9n54eOjk500iptol8pzvEd1ZrhucLTKOVUiYrb5VKN9wef71QtRBOWfVK79t8A819_ZLHH-xT10L9A1SIFSXYIBktRwkU-bSOREK8xI38ODp_XO1XppDZF4of-kgGQhI5YRSxJEvssCaMtE0nxF9oYPkOMmQwVG3Z8ZrFN13jM1w3_mkVUswzFT6LVRe6Lrk0FAOf436nmKL_2Q5i11OToe5lU-CQwQh954qOQTdYN-A9GHEye4-MhEGIQuDkIZ5dmw_KRP5iZbZnN5F-VgF-STDNJuuNrxkIQjtV1BSWyc0HDWWxq-nn6XKkSZObrq0HVk3zJIdq1QsjC8qjdv7hyBauagYusPt3ZRvZcBjySFrF8EtmI7nMhd1U4lMkzxe-Gu5szy_AT7lLlWERvM_m00"><br>在调用CLibevenRpcFrame的Init函数时,除了初始化框架的日志,配置等模块外,还会生成CRpcServer实例,并运行CTcpServer的初始化Init函数,将InterfaceInfo信息通过evrpc_register_generic注册到libevent中,然后返回,框架启动反应堆,如果收到rpc请求则会调用注册的各个回调函数,包括生成请求参数结构体,将请求信息解码到请求信息结构体中,生成返回信息结构体,业务处理回调函数,将返回信息结构体重新编码为字节流的回调函数等.<br>libevent的rpc框架中存在一个问题,如果请求参数为空会core掉,经查是libevent的一个bug.已经提了<a href="https://github.com/libevent/libevent/issues/660" target="_blank" rel="noopener">Issues</a>.</p>
]]></content>
      <categories>
        <category>cpp</category>
      </categories>
      <tags>
        <tag>cpp</tag>
        <tag>boost</tag>
        <tag>libevent</tag>
      </tags>
  </entry>
  <entry>
    <title>linux信号</title>
    <url>/2018/06/03/linux-signal/</url>
    <content><![CDATA[<h2 id="不可忽略或捕获的信号SIGSTOP和SIGKILL"><a href="#不可忽略或捕获的信号SIGSTOP和SIGKILL" class="headerlink" title="不可忽略或捕获的信号SIGSTOP和SIGKILL"></a>不可忽略或捕获的信号SIGSTOP和SIGKILL</h2><p>一般的信号可以使用signal函数忽略或捕获做进一步处理,而SIGSTOP和SIGKILL信号不可捕获,自然也没有办法忽略了.</p>
<h2 id="在命令行使用kill-l命令可以列出所有linux信号"><a href="#在命令行使用kill-l命令可以列出所有linux信号" class="headerlink" title="在命令行使用kill -l命令可以列出所有linux信号"></a>在命令行使用kill -l命令可以列出所有linux信号</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[CaseZheng@VM_187_252_centos example]$ kill -l</span><br><span class="line"> 1) SIGHUP       2) SIGINT	 	 3) SIGQUIT	 	 4) SIGILL	 	 5) SIGTRAP</span><br><span class="line"> 6) SIGABRT      7) SIGBUS	 	 8) SIGFPE	 	 9) SIGKILL		10) SIGUSR1</span><br><span class="line">11) SIGSEGV	    12) SIGUSR2		13) SIGPIPE		14) SIGALRM		15) SIGTERM</span><br><span class="line">16) SIGSTKFLT	17) SIGCHLD		18) SIGCONT	 	19) SIGSTOP		20) SIGTSTP</span><br><span class="line">21) SIGTTIN	    22) SIGTTOU		23) SIGURG		24) SIGXCPU		25) SIGXFSZ</span><br><span class="line">26) SIGVTALRM	27) SIGPROF		28) SIGWINCH	29) SIGIO		30) SIGPWR</span><br><span class="line">31) SIGSYS	    34) SIGRTMIN	35) SIGRTMIN+1	36) SIGRTMIN+2	37) SIGRTMIN+3</span><br><span class="line">38) SIGRTMIN+4	39) SIGRTMIN+5	40) SIGRTMIN+6	41) SIGRTMIN+7	42) SIGRTMIN+8</span><br><span class="line">43) SIGRTMIN+9	44) SIGRTMIN+10	45) SIGRTMIN+11	46) SIGRTMIN+12	47) SIGRTMIN+13</span><br><span class="line">48) SIGRTMIN+14	49) SIGRTMIN+15	50) SIGRTMAX-14	51) SIGRTMAX-13	52) SIGRTMAX-12</span><br><span class="line">53) SIGRTMAX-11	54) SIGRTMAX-10	55) SIGRTMAX-9	56) SIGRTMAX-8	57) SIGRTMAX-7</span><br><span class="line">58) SIGRTMAX-6	59) SIGRTMAX-5	60) SIGRTMAX-4	61) SIGRTMAX-3	62) SIGRTMAX-2</span><br><span class="line">63) SIGRTMAX-1	64) SIGRTMAX</span><br></pre></td></tr></table></figure>
<h2 id="Linux信号的捕获"><a href="#Linux信号的捕获" class="headerlink" title="Linux信号的捕获"></a>Linux信号的捕获</h2><h3 id="signal"><a href="#signal" class="headerlink" title="signal"></a>signal</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">void</span> <span class="params">(*<span class="keyword">sighandler_t</span>)</span><span class="params">(<span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">sighandler_t</span> <span class="title">signal</span><span class="params">(<span class="keyword">int</span> signum, <span class="keyword">sighandler_t</span> handler)</span></span>;</span><br></pre></td></tr></table></figure>
<p>signum信号值<br>handler信号处理函数,有两个特殊值</p>
<ol>
<li>SIG_IGN屏蔽该函数</li>
<li>SIG_DFL恢复默认行为<br>返回值为之前的信号处理函数</li>
</ol>
<h3 id="sigaction"><a href="#sigaction" class="headerlink" title="sigaction"></a>sigaction</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sigaction</span><span class="params">(<span class="keyword">int</span> signum, <span class="keyword">const</span> struct sigaction *act, struct sigaction *oldact)</span></span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sigaction</span> &#123;</span></span><br><span class="line">    <span class="keyword">void</span>     (*sa_handler)(<span class="keyword">int</span>);                    <span class="comment">//信号处理函数</span></span><br><span class="line">    <span class="keyword">void</span>     (*sa_sigaction)(<span class="keyword">int</span>, <span class="keyword">siginfo_t</span> *, <span class="keyword">void</span> *); <span class="comment">//信号处理函数 第二个参数可指向一个siginfo_t结构体</span></span><br><span class="line">    <span class="keyword">sigset_t</span>   sa_mask;                             <span class="comment">//屏蔽信号集</span></span><br><span class="line">    <span class="keyword">int</span>        sa_flags;                            <span class="comment">//</span></span><br><span class="line">    <span class="keyword">void</span>     (*sa_restorer)(<span class="keyword">void</span>);                  <span class="comment">//</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>用于改变进程接收到特定信号后的行为<br>signum信号值<br>act指向sigaction的一个实例指针,在sigaction中制定了对特定信号的处理方式,为空表示使用默认方式对信号进行处理<br>oldact保存原来对信号的处理方式,可以为NULL<br>成功返回0,失败返回-1</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL单机多实例</title>
    <url>/2018/09/17/mysqld-multi/</url>
    <content><![CDATA[<p>这里演示在单台机器上利用mysqld_multi运行两个MySQL实例,MySQL版本5.1.73</p>
<h1 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h1><h2 id="创建mysql-multi所需的配置文件"><a href="#创建mysql-multi所需的配置文件" class="headerlink" title="创建mysql_multi所需的配置文件"></a>创建mysql_multi所需的配置文件</h2><p>touch /etc/mysql_multi.cnf</p>
<h2 id="编辑配置文件如下"><a href="#编辑配置文件如下" class="headerlink" title="编辑配置文件如下"></a>编辑配置文件如下</h2><p>vim /etc/mysql_multi.cnf<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[mysqld_multi]</span><br><span class="line">mysqld = /usr/bin/mysqld_safe</span><br><span class="line">mysqladmin = /usr/bin/mysqladmin</span><br><span class="line">log = /data/mysql/log/mysqld_multi.log</span><br><span class="line"></span><br><span class="line">[mysqld3306]</span><br><span class="line">user = mysql</span><br><span class="line">port = 3306</span><br><span class="line">socket = /data/mysql/3306/mysql.sock</span><br><span class="line">pid-file = /data/mysql/3306/mysqld.pid</span><br><span class="line">log-error = /data/mysql/3306/mysqld.log</span><br><span class="line">datadir = /data/mysql/3306/data</span><br><span class="line">max_connections = 200</span><br><span class="line">default-storage-engine = innodb</span><br><span class="line">character_set_server = utf8</span><br><span class="line"></span><br><span class="line">[mysqld3307]</span><br><span class="line">user = mysql</span><br><span class="line">port = 3307</span><br><span class="line">socket = /data/mysql/3307/mysql.sock</span><br><span class="line">pid-file = /data/mysql/3307/mysqld.pid</span><br><span class="line">log-error = /data/mysql/3307/mysqld.log</span><br><span class="line">datadir = /data/mysql/3307/data</span><br><span class="line">max_connections = 200</span><br><span class="line">default-storage-engine = innodb</span><br><span class="line">character_set_server = utf8</span><br></pre></td></tr></table></figure></p>
<h1 id="初始化DB"><a href="#初始化DB" class="headerlink" title="初始化DB"></a>初始化DB</h1><p>mysql_install_db —datadir=/data/mysql/3306/data —user=mysql<br>mysql_install_db —datadir=/data/mysql/3307/data —user=mysql</p>
<h1 id="查看mysql用户组-不存在则创建一个"><a href="#查看mysql用户组-不存在则创建一个" class="headerlink" title="查看mysql用户组 不存在则创建一个"></a>查看mysql用户组 不存在则创建一个</h1><h2 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h2><p><code>grep mysql /etc/group</code></p>
<h2 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h2><p><code>groupadd mysql</code></p>
<h1 id="查看mysql用户-不存在则创建一个"><a href="#查看mysql用户-不存在则创建一个" class="headerlink" title="查看mysql用户 不存在则创建一个"></a>查看mysql用户 不存在则创建一个</h1><h2 id="查看-1"><a href="#查看-1" class="headerlink" title="查看"></a>查看</h2><p><code>grep mysql /etc/passwd</code></p>
<h2 id="创建-1"><a href="#创建-1" class="headerlink" title="创建"></a>创建</h2><p><code>useradd mysql -g mysql -M -s /sbin/nologin</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">增加一个名为CentOS Mysql的用户。</span><br><span class="line">-g：指定新用户所属的用户组(group)</span><br><span class="line">-M：不建立根目录</span><br><span class="line">-s：定义其使用的shell，/sbin/nologin代表用户不能登录系统。</span><br></pre></td></tr></table></figure>
<h1 id="给mysql用户添加权限"><a href="#给mysql用户添加权限" class="headerlink" title="给mysql用户添加权限"></a>给mysql用户添加权限</h1><p><code>chown -R mysql.mysql /data/mysql</code></p>
<h1 id="启用MySQL实例"><a href="#启用MySQL实例" class="headerlink" title="启用MySQL实例"></a>启用MySQL实例</h1><p><code>mysqld_multi --defaults-extra-file=/etc/mysql_multi.cnf start</code></p>
<h1 id="查看启用的MySQL实例状态"><a href="#查看启用的MySQL实例状态" class="headerlink" title="查看启用的MySQL实例状态"></a>查看启用的MySQL实例状态</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@HSB-DEV-001 log]mysqld_multi --defaults-extra-file=/etc/mysql_multi.cnf report</span><br><span class="line">Reporting MySQL servers</span><br><span class="line">MySQL server from group: mysqld3306 is running</span><br><span class="line">MySQL server from group: mysqld3307 is running</span><br><span class="line"></span><br><span class="line">[root@HSB-DEV-001 mysql]ps -aef | grep mysql</span><br><span class="line">root     28064     1  0 19:08 pts/7    00:00:00 /bin/sh /usr/bin/mysqld_safe --user=mysql --port=3306 --socket=/data/mysql/3306/mysql.sock --pid-file=/data/mysql/3306/mysqld.pid --log-error=/data/mysql/3306/mysqld.log --datadir=/data/mysql/3306/data --max_connections=200 --default-storage-engine=innodb --character_set_server=utf8</span><br><span class="line">root     28072     1  0 19:08 pts/7    00:00:00 /bin/sh /usr/bin/mysqld_safe --user=mysql --port=3307 --socket=/data/mysql/3307/mysql.sock --pid-file=/data/mysql/3307/mysqld.pid --log-error=/data/mysql/3307/mysqld.log --datadir=/data/mysql/3307/data --max_connections=200 --default-storage-engine=innodb --character_set_server=utf8</span><br><span class="line">mysql    28304 28064  0 19:08 pts/7    00:00:00 /usr/libexec/mysqld --basedir=/usr --datadir=/data/mysql/3306/data --user=mysql --max_connections=200 --default-storage-engine=innodb --character_set_server=utf8 --log-error=/data/mysql/3306/mysqld.log --pid-file=/data/mysql/3306/mysqld.pid --socket=/data/mysql/3306/mysql.sock --port=3306</span><br><span class="line">mysql    28308 28072  0 19:08 pts/7    00:00:00 /usr/libexec/mysqld --basedir=/usr --datadir=/data/mysql/3307/data --user=mysql --max_connections=200 --default-storage-engine=innodb --character_set_server=utf8 --log-error=/data/mysql/3307/mysqld.log --pid-file=/data/mysql/3307/mysqld.pid --socket=/data/mysql/3307/mysql.sock --port=3307</span><br></pre></td></tr></table></figure>
<h1 id="设置密码和权限"><a href="#设置密码和权限" class="headerlink" title="设置密码和权限"></a>设置密码和权限</h1><h2 id="登录MySQL"><a href="#登录MySQL" class="headerlink" title="登录MySQL"></a>登录MySQL</h2><p><code>mysql -h 127.0.0.1 -P3306 -uroot -p</code></p>
<h2 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h2><p><code>SET PASSWORD=password(&#39;123456&#39;);</code></p>
<h1 id="设置权限"><a href="#设置权限" class="headerlink" title="设置权限"></a>设置权限</h1><p><code>GRANT ALL PRIVILEGES ON *.* TO &#39;root&#39;@&#39;%&#39; IDENTIFIED BY &#39;123456&#39; WITH GRANT OPTION;</code></p>
<h1 id="查看权限"><a href="#查看权限" class="headerlink" title="查看权限"></a>查看权限</h1><p><code>SHOW GRANTS FOR &#39;root&#39;@&#39;%&#39;;</code></p>
<h1 id="设置mysqld-multi为开机自启动"><a href="#设置mysqld-multi为开机自启动" class="headerlink" title="设置mysqld_multi为开机自启动"></a>设置mysqld_multi为开机自启动</h1><ol>
<li><p><code>sudo vim /etc/rc.d/rc.local</code></p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">mysqld_multi --defaults-extra-file=/etc/mysql_multi.cnf start</span><br></pre></td></tr></table></figure>
</li>
<li><p>赋予<code>rc.local</code>可执行权限<code>chmod +x  /etc/rc.d/rc.local</code></p>
</li>
<li><p><code>sudo vim /usr/lib/systemd/system/rc-local.service</code></p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>
</li>
<li><p>设置<code>rc-local.service</code>服务开机运行<code>systemctl enable rc-local.service</code></p>
</li>
</ol>
<h1 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h1><h2 id="Warning-World-writable-config-file-‘-etc-mysql-multi-cnf’-is-ignored"><a href="#Warning-World-writable-config-file-‘-etc-mysql-multi-cnf’-is-ignored" class="headerlink" title="Warning: World-writable config file ‘/etc/mysql_multi.cnf’ is ignored"></a>Warning: World-writable config file ‘/etc/mysql_multi.cnf’ is ignored</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@HSB-DEV-001 ~]# /usr/local/mysql/bin/mysqld_multi --defaults-extra-file=/etc/mysql_multi.cnf report</span><br><span class="line">Warning: World-writable config file &apos;/etc/mysql_multi.cnf&apos; is ignored</span><br><span class="line">Warning: World-writable config file &apos;/etc/mysql_multi.cnf&apos; is ignored</span><br><span class="line">Reporting MySQL servers</span><br><span class="line">Warning: World-writable config file &apos;/etc/mysql_multi.cnf&apos; is ignored</span><br><span class="line">MySQL server from group: mysqld3307 is running</span><br></pre></td></tr></table></figure>
<p>当配置文件的权限为任何人都可访问时,MySQL任务不安全会忽略配置文件,改为644即可<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@HSB-DEV-001 ~]# chmod 644 /etc/mysql_multi.cnf</span><br></pre></td></tr></table></figure></p>
<h2 id="doesn’t-have-a-default-value"><a href="#doesn’t-have-a-default-value" class="headerlink" title="doesn’t have a default value"></a>doesn’t have a default value</h2><p>重启MySQL实例后执行SQL命令报如下错误,经查是开启了MySQL严格模式导致的,使用select @@sql_mode;语句查看MySQL实例的模式,发现确实是开启了严格模式,查看MySQL配置配置,发现已经设置不使用严格模式,最后发现是MySQL读取了多个配置文件导致的,MySQL在读取了首选配置文件后又读取了别的配置文件导致设置的默认被覆盖.</p>
<h3 id="查看MySQL模式"><a href="#查看MySQL模式" class="headerlink" title="查看MySQL模式"></a>查看MySQL模式</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MariaDB [(none)]&gt; select @@sql_mode;</span><br><span class="line">+--------------------------------------------+</span><br><span class="line">| @@sql_mode                                 |</span><br><span class="line">+--------------------------------------------+</span><br><span class="line">| STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION |</span><br><span class="line">+--------------------------------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>
<p>在sql_mode中有STRICT_TRANS_TABLES则表示开启严格模式, 使用mysql严格模式可以使数据更加安全严格，缺点是减少了对空数据入库的兼容性, 严格模式功能说明:</p>
<ol>
<li>不支持对not null字段插入null值</li>
<li>不支持对自增长字段插入值</li>
<li>不支持text字段有默认值</li>
</ol>
<h3 id="查看MySQL默认配置文件和优先顺序"><a href="#查看MySQL默认配置文件和优先顺序" class="headerlink" title="查看MySQL默认配置文件和优先顺序"></a>查看MySQL默认配置文件和优先顺序</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[CaseZheng@VM_187_252_centos ~]$ mysql --help|grep &apos;my.cnf&apos;</span><br><span class="line">/etc/mysql/my.cnf /etc/my.cnf ~/.my.cnf</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL主从复制与异地容灾</title>
    <url>/2018/09/18/mysql-slave/</url>
    <content><![CDATA[<h1 id="MySQL主从复制用途、条件和问题"><a href="#MySQL主从复制用途、条件和问题" class="headerlink" title="MySQL主从复制用途、条件和问题"></a>MySQL主从复制用途、条件和问题</h1><h2 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h2><ol>
<li>实时灾备，用于故障切换</li>
<li>读写分离，提供查询服务</li>
</ol>
<h2 id="主从复制的必要条件"><a href="#主从复制的必要条件" class="headerlink" title="主从复制的必要条件"></a>主从复制的必要条件</h2><ol>
<li>主库开启binlog日志(设置<code>log-bin</code>参数)</li>
<li>主库和从库的<code>server-id</code>不同</li>
<li>从库能连接到主库，并且有权限</li>
</ol>
<h2 id="主从复制原理"><a href="#主从复制原理" class="headerlink" title="主从复制原理"></a>主从复制原理</h2><p>MySQL最基本的主从复制是<strong>异步复制（Asynchronous replication）</strong><br>Master事务的提交不需要经过Slave的确认，Master对Slave接收Master binlog成功与否并不关心。Slave接收到Master的binlog后先写relay log，然后异步执行relay log的SQL。<br>从库有两个线程</p>
<ol>
<li>I/O线程，请求主库的binlog，并将得到的binlog日志写入到relay log(中继日志)文件中。</li>
<li>SQL线程，读取中继日志，并解析成具体的操作执行，保证主从一致<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Slave1  --------------------------------&gt; relay log ---&gt; apply ---&gt; binlog ---&gt; commit -------------&gt;</span><br><span class="line">                                   /|\</span><br><span class="line">        Commit                      |                         End</span><br><span class="line">     ------                         |                         -----&gt;        </span><br><span class="line">         \|/                        |                         |  不用等待直接返回成功</span><br><span class="line">Master  -----&gt; execute ---&gt; binlog -----&gt; commit ---------------------------------------------------&gt;</span><br><span class="line">                                    |</span><br><span class="line">                                    |</span><br><span class="line">                                   \|/</span><br><span class="line">Slave2  --------------------------------&gt; relay log ---&gt; apply ---&gt; binlog ---&gt; commit -------------&gt;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>主库生成log dump线程，给从库的I/O线程传递binlog</p>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><ol>
<li>主库和从库的同步会出现延时，主库宕机可能导致数据丢失</li>
<li>主库和从库的同步因为网络延迟等各种问题，导致主库和从库的差距过大</li>
<li>主库和从库的由于配置问题、权限问题等，导致主从同步失败</li>
<li>主库只负责把binlog日志发送到从库，当从库故障时，导致主从数据库数据不一致</li>
</ol>
<p><strong>单一的主从复制并不能保证数据的安全可靠，也不能做到异地容灾</strong></p>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><ol>
<li>基于GTID的<strong>半同步复制</strong><ol>
<li>解决数据丢失问题(GTID)</li>
<li>解决从库故障时主库无感知的问题(半同步)</li>
</ol>
</li>
<li><strong>并行复制</strong>，解决从库复制延迟的问题</li>
</ol>
<h1 id="MySQL基于GTID的半同步复制"><a href="#MySQL基于GTID的半同步复制" class="headerlink" title="MySQL基于GTID的半同步复制"></a>MySQL基于GTID的半同步复制</h1><h2 id="GTID"><a href="#GTID" class="headerlink" title="GTID"></a>GTID</h2><p>GTID(Global Transaction ID 全局事物标记)是对于一个已提交事务的编号，并且是一个全局唯一的编号.GTID实际上是由UUID+TID组成的.其中UUID是一个MySQL实例的唯一标识.<code>server_uuid</code>在MySQl启动时，使用当前时间，随机数等拼接成一个128bit位的uuid.然后该<code>server_uuid</code>被写入到<code>auto.conf</code>文件，当MySQL再次重启时不再随即生成，直接使用保存的这个<code>server_uuid</code>.<br>TID代表了该实例上已经提交的事务数量，并且随着事务提交单调递增.<br>MySQL数据库从5.6.5开始新增一种基于GDIT的复制方式.通过GDIT保证每个主库上提交的事务在集群中有一个唯一的ID.这种方式强化了数据库的主备一致性，故障恢复以及容错能力.</p>
<h2 id="全同步复制（Fully-synchronous-replication）"><a href="#全同步复制（Fully-synchronous-replication）" class="headerlink" title="全同步复制（Fully synchronous replication）"></a>全同步复制（Fully synchronous replication）</h2><p>主库完成一个事务，所有从库都需要返回事务执行成功才返回给客户端。由于要所有从库都返回Ack成功才能返回，所有全同步复制的性能会受到严重影响</p>
<h2 id="半同步复制（Semisynchronous-replication）"><a href="#半同步复制（Semisynchronous-replication）" class="headerlink" title="半同步复制（Semisynchronous replication）"></a>半同步复制（Semisynchronous replication）</h2><p>半同步复制的效率介于异步复制和半同步复制之间，主库完成一个事务不直接返回给客户端，而是等待至少一个从库接收到并写到relay log中然后给主库返回Ack，才返回客户端。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Slave1  ------------------------------&gt; relay log ----------&gt; apply ---&gt; binlog ---&gt; commit -------------&gt;</span><br><span class="line">                                   /|\                   |</span><br><span class="line">                                    |                   Ack 至少等待一个从库的Ack才给客户端返回成功</span><br><span class="line">                                    |                    | </span><br><span class="line">        Commit                      |                    |                 Commit End</span><br><span class="line">     ------                         |                    |                 -----&gt;        </span><br><span class="line">         \|/                        |                   \|/                |</span><br><span class="line">Master  -----&gt; execute ---&gt; binlog -----&gt; engine commit -------------------------------------------------&gt;</span><br><span class="line">                                    |                   /|\</span><br><span class="line">                                    |                   Ack</span><br><span class="line">                                   \|/                   |</span><br><span class="line">Slave2  ------------------------------&gt; relay log ----------&gt; apply ---&gt; binlog ---&gt; commit -------------&gt;</span><br></pre></td></tr></table></figure></p>
<p><strong>半同步复制Slave对relay log的应用仍然是异步的</strong></p>
<p>开启基于GTID的主从复制，在从库和主库都需要在配置文件加入如下配置:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gtid-mode=ON</span><br><span class="line">enforce-gtid-consistency=ON</span><br><span class="line">log-slave-updates=ON</span><br></pre></td></tr></table></figure></p>
<h2 id="半同步复制的增强"><a href="#半同步复制的增强" class="headerlink" title="半同步复制的增强"></a>半同步复制的增强</h2><p>MySQL5.7增强半同步复制，两种方式：<code>AFTER SYNC</code>和<code>AFTER COMMIT</code></p>
<h3 id="AFTER-COMMIT"><a href="#AFTER-COMMIT" class="headerlink" title="AFTER COMMIT"></a>AFTER COMMIT</h3><p>5.6版本MySQL半同步的方式，现在引擎层做提交后再等待Ack确认。<br>如果一个事务在该模式下，如果在接收Ack的阶段Master实例故障，数据库切到从库,有两种请求：</p>
<ol>
<li>binlog未发送到从库，但主库已经提交了，主从数据不同步</li>
<li>binlog已发送到从库，但Client未收到提交成功的消息，但该事务实际已执行成功，如果业务不判断则会将该事务执行两次</li>
</ol>
<h3 id="AFTER-SYNC"><a href="#AFTER-SYNC" class="headerlink" title="AFTER SYNC"></a>AFTER SYNC</h3><p>官方推荐方式，客户端发出Commit请求后，在主库上写入binlog并推送给Slave，Slave接收到binlog并写入relay log，再发送Ack到Master，Master收到Ack后再在引擎层提交。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Slave1  ------------------------------&gt; relay log ---&gt; apply ---&gt; binlog ---&gt; commit -------------&gt;</span><br><span class="line">                                   /|\             |</span><br><span class="line">                                    |             Ack 至少等待一个从库的Ack才给客户端返回成功</span><br><span class="line">                                    |              | </span><br><span class="line">        Commit                      |              |                 End</span><br><span class="line">     ------                         |              |                 -----&gt;        </span><br><span class="line">         \|/                        |             \|/                |</span><br><span class="line">Master  -----&gt; execute ---&gt; binlog ------------------&gt;----engine commit --------------------------&gt;</span><br><span class="line">                                    |             /|\</span><br><span class="line">                                    |             Ack</span><br><span class="line">                                   \|/             |</span><br><span class="line">Slave2  ------------------------------&gt; relay log ---&gt; apply ---&gt; binlog ---&gt; commit -------------&gt;</span><br></pre></td></tr></table></figure></p>
<p>该模式下，现将binlog发送到从库，然后再在引擎层提交</p>
<h1 id="基于GTID的主从复制实例"><a href="#基于GTID的主从复制实例" class="headerlink" title="基于GTID的主从复制实例"></a>基于GTID的主从复制实例</h1><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>单机启动3306和3307两个MySQL实例，配置以3306作为主库，3307为从库 同步主库的<code>test.t_test1</code>和<code>test.t_test2</code><br>两个实例的server-id不能相同<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[mysqld3306]</span><br><span class="line">user = mysql</span><br><span class="line">port = 3306</span><br><span class="line">socket = /data/mysql/3306/mysql.sock</span><br><span class="line">pid-file = /data/mysql/3306/mysqld.pid</span><br><span class="line">log-error = /data/mysql/3306/mysqld.log</span><br><span class="line">datadir = /data/mysql/3306/data</span><br><span class="line">max_connections = 200</span><br><span class="line">default-storage-engine = innodb</span><br><span class="line">character_set_server = utf8</span><br><span class="line"></span><br><span class="line">log-bin=mysql-bin               #开启二进制日志</span><br><span class="line">server-id=1                     #服务器ID</span><br><span class="line">binlog-do-db=test               #需要同步的数据库名</span><br><span class="line">binlog-ignore-db=mysql          #禁止同步的数据库名</span><br><span class="line"></span><br><span class="line">gtid-mode=ON</span><br><span class="line">enforce-gtid-consistency=ON</span><br><span class="line">log-slave-updates=ON</span><br><span class="line"></span><br><span class="line">[mysqld3307]</span><br><span class="line">user = mysql</span><br><span class="line">port = 3307</span><br><span class="line">socket = /data/mysql/3307/mysql.sock</span><br><span class="line">pid-file = /data/mysql/3307/mysqld.pid</span><br><span class="line">log-error = /data/mysql/3307/mysqld.log</span><br><span class="line">datadir = /data/mysql/3307/data</span><br><span class="line">max_connections = 200</span><br><span class="line">default-storage-engine = innodb</span><br><span class="line">character_set_server = utf8</span><br><span class="line"></span><br><span class="line">log-bin=mysql-bin</span><br><span class="line">server-id=2</span><br><span class="line"></span><br><span class="line">relay_log=relay-bin</span><br><span class="line">replicate-wild-do-table=test.t_test1</span><br><span class="line">replicate-wild-do-table=test.t_test2</span><br><span class="line">slave-skip-errors=all</span><br><span class="line"></span><br><span class="line">gtid-mode=ON</span><br><span class="line">enforce-gtid-consistency=ON</span><br><span class="line">log-slave-updates=ON</span><br></pre></td></tr></table></figure></p>
<h2 id="3307同步3306的test-t-test1和test-t-test2"><a href="#3307同步3306的test-t-test1和test-t-test2" class="headerlink" title="3307同步3306的test.t_test1和test.t_test2"></a>3307同步3306的test.t_test1和test.t_test2</h2><ol>
<li>在3306上创建同步所用的帐号 <code>grant replication slave on *.* to rep@&#39;%&#39; identified by &#39;123456&#39;;</code></li>
<li>在3307上设置同步配置 <code>change master to master_host=&#39;127.0.0.1&#39;,master_user=&#39;rep&#39;,master_password=&#39;123456&#39;,master_port=3306;</code></li>
<li>开启同步 <code>start slave;</code></li>
<li>关闭同步 <code>stop slave;</code></li>
<li>查看同步状态 <code>show slave status\G</code><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">MariaDB [(none)]&gt; show slave status\G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">                Slave_IO_State: Waiting for master to send event</span><br><span class="line">                   Master_Host: 127.0.0.1</span><br><span class="line">                   Master_User: root</span><br><span class="line">                   Master_Port: 3306</span><br><span class="line">                 Connect_Retry: 60</span><br><span class="line">               Master_Log_File: mysql-bin.000001</span><br><span class="line">           Read_Master_Log_Pos: 502</span><br><span class="line">                Relay_Log_File: relay-bin.000002</span><br><span class="line">                 Relay_Log_Pos: 801</span><br><span class="line">         Relay_Master_Log_File: mysql-bin.000001</span><br><span class="line">              Slave_IO_Running: Yes</span><br><span class="line">             Slave_SQL_Running: Yes</span><br><span class="line">               Replicate_Do_DB:</span><br><span class="line">           Replicate_Ignore_DB:</span><br><span class="line">            Replicate_Do_Table:</span><br><span class="line">        Replicate_Ignore_Table:</span><br><span class="line">       Replicate_Wild_Do_Table: test.t_test1,test.t_test2</span><br><span class="line">   Replicate_Wild_Ignore_Table:</span><br><span class="line">                    Last_Errno: 0</span><br><span class="line">                    Last_Error:</span><br><span class="line">                  Skip_Counter: 0</span><br><span class="line">           Exec_Master_Log_Pos: 502</span><br><span class="line">               Relay_Log_Space: 1104</span><br><span class="line">               Until_Condition: None</span><br><span class="line">                Until_Log_File:</span><br><span class="line">                 Until_Log_Pos: 0</span><br><span class="line">            Master_SSL_Allowed: No</span><br><span class="line">            Master_SSL_CA_File:</span><br><span class="line">            Master_SSL_CA_Path:</span><br><span class="line">               Master_SSL_Cert:</span><br><span class="line">             Master_SSL_Cipher:</span><br><span class="line">                Master_SSL_Key:</span><br><span class="line">         Seconds_Behind_Master: 0</span><br><span class="line"> Master_SSL_Verify_Server_Cert: No</span><br><span class="line">                 Last_IO_Errno: 0</span><br><span class="line">                 Last_IO_Error:</span><br><span class="line">                Last_SQL_Errno: 0</span><br><span class="line">                Last_SQL_Error:</span><br><span class="line">   Replicate_Ignore_Server_Ids:</span><br><span class="line">              Master_Server_Id: 1</span><br><span class="line">                Master_SSL_Crl:</span><br><span class="line">            Master_SSL_Crlpath:</span><br><span class="line">                    Using_Gtid: No</span><br><span class="line">                   Gtid_IO_Pos:</span><br><span class="line">       Replicate_Do_Domain_Ids:</span><br><span class="line">   Replicate_Ignore_Domain_Ids:</span><br><span class="line">                 Parallel_Mode: conservative</span><br><span class="line">                     SQL_Delay: 0</span><br><span class="line">           SQL_Remaining_Delay: NULL</span><br><span class="line">       Slave_SQL_Running_State: Slave has read all relay log; waiting for the slave I/O thread to <span class="keyword">update</span> it</span><br><span class="line">              Slave_DDL_Groups: <span class="number">0</span></span><br><span class="line">Slave_Non_Transactional_Groups: <span class="number">0</span></span><br><span class="line">    Slave_Transactional_Groups: <span class="number">1</span></span><br><span class="line"><span class="number">1</span> <span class="keyword">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.000</span> sec)</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="MySQL组复制（MySQL-Group-Replication，简称MGR）"><a href="#MySQL组复制（MySQL-Group-Replication，简称MGR）" class="headerlink" title="MySQL组复制（MySQL Group Replication，简称MGR）"></a>MySQL组复制（MySQL Group Replication，简称MGR）</h1><p>传统异步复制和半同步复制的缺陷（数据的一致性问题无法保证）<br>由若干个节点共同组成一个复制组，一个事物的提交，必须经过组内大多数节点（N/2+1）决议并通过才能进行提交。<br>组复制主要是解决传统异步复制和半同步复制可能产生的数据不一致的问题。组复制依靠分布式一致性协议（Paxos协议的变体），实现分布式下数据的一致性。</p>
<h2 id="MGR原理"><a href="#MGR原理" class="headerlink" title="MGR原理"></a>MGR原理</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">                      --------------------</span><br><span class="line">                      |                  |</span><br><span class="line">Slave1  --------------|---------&gt;------&gt; certify ---&gt; relay log ---&gt; apply ---&gt; binlog ---&gt; commit -------------&gt;</span><br><span class="line">                      |      /|\         |</span><br><span class="line">        Commit        |       |          |                                     End</span><br><span class="line">     ------           |       |          |                                     -----&gt;        </span><br><span class="line">         \|/          |       |          |                                     |</span><br><span class="line">Master  -----&gt; execute|----------------&gt; certify ---&gt; binlog ------------------&gt;-----------&gt; commit ------------&gt;</span><br><span class="line">                      |       |          |</span><br><span class="line">                      |      \|/         |</span><br><span class="line">Slave2  --------------|---------&gt;------&gt; certify ---&gt; relay log ---&gt; apply ---&gt; binlog ---&gt; commit -------------&gt;</span><br><span class="line">                      |                  |</span><br><span class="line">                      |     Consensus    |</span><br><span class="line">                      --------------------</span><br></pre></td></tr></table></figure>
<p>一个复制组由若干个节点（数据库实例）组成，组内各个节点维护各自的数据副本，通过一致性协议实现原子消息和全局有序消息，来实现组内实例数据的一致。</p>
<h2 id="MGR特性"><a href="#MGR特性" class="headerlink" title="MGR特性"></a>MGR特性</h2><ul>
<li>数据一致性保障：确保集群中大部分节点收到日志</li>
<li>多节点写入支持：多写模式下支持集群中的所有节点都可以写入</li>
<li>容错：确保系统发生故障（包括脑裂）依然可用</li>
<li>MGR的性能比Semi-sync（半同步复制）好</li>
<li>MGR能极大的简化业务逻辑架构</li>
</ul>
<h1 id="碰到问题"><a href="#碰到问题" class="headerlink" title="碰到问题"></a>碰到问题</h1><h2 id="mysqld-multi启动实例会默认读取mysql默认配置"><a href="#mysqld-multi启动实例会默认读取mysql默认配置" class="headerlink" title="mysqld_multi启动实例会默认读取mysql默认配置"></a>mysqld_multi启动实例会默认读取mysql默认配置</h2><p>mysqld_multi启动实例会读取默认mysql配置，导致配置有问题，尝试给mysqld_multi使用<code>--defaults-file</code>设置默认配置，但仍未解决，最后解决方法先移除mysql默认配置，启动mysqld_multi实例后再恢复回去</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="https://blog.csdn.net/a939029674/article/details/81632565" target="_blank" rel="noopener">mysql的主从复制和半同步复制</a></li>
<li><a href="https://www.cnblogs.com/zero-gg/p/9057092.html" target="_blank" rel="noopener">MySQL 5.7半同步复制技术</a></li>
<li><a href="https://www.cnblogs.com/luoahong/articles/8043035.html" target="_blank" rel="noopener">MySQL5.7新特性—官方高可用方案MGR介绍</a></li>
<li><a href="https://www.jianshu.com/p/3bfb0bfb8b34" target="_blank" rel="noopener">【MySQL】5.7增强半同步AFTER SYNC&amp;AFTER COMMIT</a></li>
<li><a href="http://blog.itpub.net/15498/viewspace-2143986/" target="_blank" rel="noopener">MySQL5.7新特性半同步复制之AFTER_SYNC/AFTER_COMMIT的过程分析和总结 </a></li>
</ul>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Kafka介绍与实践</title>
    <url>/2018/10/26/kafka/</url>
    <content><![CDATA[<h1 id="kafka安装"><a href="#kafka安装" class="headerlink" title="kafka安装"></a>kafka安装</h1><h2 id="安装java"><a href="#安装java" class="headerlink" title="安装java"></a>安装java</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install java-1.8.0-openjdk</span><br><span class="line">java -version</span><br></pre></td></tr></table></figure>
<h2 id="安装zookeeper"><a href="#安装zookeeper" class="headerlink" title="安装zookeeper"></a>安装zookeeper</h2><ol>
<li>获取zookeeper<code>wget http://mirror.bit.edu.cn/apache/zookeeper/current/zookeeper-3.4.12.tar.gz</code></li>
<li>解压<code>tar zxvf zookeeper-3.4.12.tar.gz</code></li>
<li><p>移动解压文件到安装路径下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir /data/zookeeper -p</span><br><span class="line">mv zookeeper-3.4.12 /data/zookeeper/</span><br><span class="line">cd /date/zookeeper/zookeeper-3.4.12</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建配置文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@VM_187_252_centos zookeeper-3.4.12]# vim conf/zoo.cfg</span><br><span class="line">[root@VM_187_252_centos zookeeper-3.4.12]# cat conf/zoo.cfg</span><br><span class="line">tickTime = 2000</span><br><span class="line">dataDir = /data/zookeeper/data</span><br><span class="line">clientPort = 2181</span><br><span class="line">initLimit = 5</span><br><span class="line">syncLimit = 2</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动zookeeper服务</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@VM_187_252_centos zookeeper-3.4.12]# bin/zkServer.sh start</span><br><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line">Using config: /data/zookeeper/zookeeper-3.4.12/bin/../conf/zoo.cfg</span><br><span class="line">Starting zookeeper ... STARTED</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用客户端连接</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@VM_187_252_centos zookeeper-3.4.12]# bin/zkCli.sh</span><br><span class="line">... ...</span><br><span class="line">[zk: localhost:2181(CONNECTED) 0]</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="安装kafka"><a href="#安装kafka" class="headerlink" title="安装kafka"></a>安装kafka</h2><ol>
<li>获取kafka<code>wget http://mirrors.hust.edu.cn/apache/kafka/2.0.0/kafka_2.12-2.0.0.tgz</code></li>
<li>解压<code>tar zxf kafka_2.12-2.0.0.tgz</code></li>
<li><p>移动解压文件到安装路径下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir /data/kafka -p</span><br><span class="line">mv kafka_2.12-2.0.0 /data/kafka/</span><br><span class="line">cd /data/kafka/kafka_2.12-2.0.0/</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动kafka</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@VM_187_252_centos kafka_2.12-2.0.0]# nohup bin/kafka-server-start.sh config/server.properties 1&gt;/dev/null 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="kafka-manager安装"><a href="#kafka-manager安装" class="headerlink" title="kafka manager安装"></a>kafka manager安装</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd ~</span><br><span class="line">mkdir .sbt</span><br><span class="line">cd .sbt</span><br><span class="line">vim repositories</span><br></pre></td></tr></table></figure>
<p>在repositories中加入如下内容,使用国内阿里云资源加快下载速度<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[repositories]</span><br><span class="line">local</span><br><span class="line">aliyun: http://maven.aliyun.com/nexus/content/groups/public</span><br><span class="line">typesafe: http://repo.typesafe.com/typesafe/ivy-releases/, [organization]/[module]/(scala_[scalaVersion]/)(sbt_[sbtVersion]/)[revision]/[type]s/[artifact](-[classifier]).[ext], bootOnly</span><br></pre></td></tr></table></figure></p>
<p>返回安装目录<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/yahoo/kafka-manager.git</span><br><span class="line">cd kafka-manager</span><br><span class="line">./sbt clean dist</span><br></pre></td></tr></table></figure></p>
<p>这个过程比较慢,需要耐心等待,完成之后在<code>target/universal</code>目录下会生产一个zip压缩包<code>kafka-manager-*.zip</code>,将其拷贝到要部署的目录下解压。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd target/universal</span><br><span class="line">cp kafka-manager-1.3.3.21.zip /data/kafka/</span><br><span class="line">cd /data/kafka/</span><br><span class="line">unzip kafka-manager-1.3.3.21.zip</span><br><span class="line">cd kafka-manager-1.3.3.21/</span><br></pre></td></tr></table></figure></p>
<p>修改 <code>conf/application.conf</code> 中<code>kafka-manager.zkhosts</code>为正确的zookeeper地址<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bin/kafka-manager -Dconfig.file=./conf/application.conf -Dhttp.port=9000</span><br></pre></td></tr></table></figure></p>
<p>正常启动后即可登陆进行相关操作</p>
<h1 id="kafka概述"><a href="#kafka概述" class="headerlink" title="kafka概述"></a>kafka概述</h1><p>kafka专为<strong>分布式高吞吐量</strong>系统而设计,kafka相比其它消息传递系统具有更好的吞吐量,内置分区,复制和固有的容错能力,非常<strong>适合大规模消息处理应用程序</strong>.<br>kafka是一个<strong>分布式发布-订阅消息系统</strong>和一个<strong>强大的队列</strong>,可以处理大量的数据,并使您能够将消息从一个端点传递到另一个端点.<br>kafka适合离线和在线消息消费.<br>Kafka消息保留在磁盘上,并在群集内复制以防止数据丢失.<br>Kafka构建在ZooKeeper同步服务之上.它与Apache Storm和Spark非常好地集成,用于实时流式数据分析.</p>
<h2 id="kafka的好处"><a href="#kafka的好处" class="headerlink" title="kafka的好处"></a>kafka的好处</h2><ol>
<li>可靠性 kafka是分布式,分区,复制和容错的</li>
<li>可扩展性 kafka消息传递系统轻松缩放,无需停机</li>
<li>耐用性 kafka使用分布式提交日志,消息尽可能快的保存在磁盘上</li>
<li>性能 kafka对于发布和订阅都具有高吞吐量</li>
</ol>
<p>kafka非常快,并保证零停机和零数据丢失</p>
<h2 id="kafka的用例"><a href="#kafka的用例" class="headerlink" title="kafka的用例"></a>kafka的用例</h2><ol>
<li>指标 kafka通常用来操作监控数据,涉及聚合来自分布式应用程序的统计信息,以产生操作数据和集中馈送</li>
<li>日志聚合解决方案 kafka用于跨组织来从多个服务收集日志,并提供标准格式给多个服务器</li>
<li>流处理 流行的框架从主题中读取数据,对其处理,并将处理后的数据写入新主题,供用户和应用程序使用.kafka的强耐久性在流处理的上下文中非常有用</li>
</ol>
<p><img src="/Picture/KafkaFrame.png" alt="Kafka框架图"></p>
<h1 id="kafka基础"><a href="#kafka基础" class="headerlink" title="kafka基础"></a>kafka基础</h1><ol>
<li>Topics 主题<br> 属于特定类别的消息流称为主题.数据存储在主题中.主题被拆分成分区.对于每个主题,Kafka保存一个分区的数据.每个这样的分区包含不可变有序序列的消息.分区被实现为具有相等大小的一组分段文件</li>
<li>Partition分区<br> 主题可能有许多分区,因此它可以处理任意数量的数据.</li>
<li>Partition offset 分区偏移<br> 每个分区消息具有称为offset的唯一序列标识.</li>
<li>Replicas of partition 分区备份<br> 副本只是一个分区的备份.副本从不读取或写入数据.它们用于防止数据丢失.</li>
<li>Brokers 经纪人<ul>
<li>代理是负责维护发布数据的简单系统.每个代理中的每个主题可以具有零个或多个分区 假设,如果在一个主题和N个代理中有N个分区，每个代理将有一个分区.</li>
<li>假设在一个主题中有N个分区并且多于N个代理(n+m)，则第一个N代理将具有一个分区，并且下一个M代理将不具有用于该特定主题的任何分区。</li>
<li>假设在一个主题中有N个分区并且小于N个代理(n-m)，每个代理将在它们之间具有一个或多个分区共享。 由于代理之间的负载分布不相等，不推荐使用此方案。</li>
</ul>
</li>
<li>Kafka Cluster Kafka集群<br> Kafka有多个代理被称为Kafka集群.可以扩展Kafka集群,无需停机.集群用于管理消息数据的持久性和复制.</li>
<li>Producers 生产者<br> 生产者是发送给一个或多个Kafka主题的消息的发布者.生产者向Kafka经纪人发送数据.每当生产者将消息发布给代理时,代理只需将消息附加到最后一个段文件.实际上,该消息将被附加到分区.生产者还可以向他们选择的分区发送消息.</li>
<li>Consumers 消费者<br> Consumers从经纪人处读取数据.消费者订阅一个或多个主题,并通过从代理中提取数据来使用已发布的消息.</li>
<li>Leader 领导者<br> Leader是负责给定分区的所有读取和写入的节点. 每个分区都有一个服务器充当Leader</li>
<li>Follower 追随者<br>跟随领导者指令的节点被称为Follower.如果领导失败,一个追随者将自动成为新的领导者.跟随者作为正常消费者,拉取消息并更新其自己的数据存储.</li>
</ol>
<h1 id="kafka集群架构"><a href="#kafka集群架构" class="headerlink" title="kafka集群架构"></a>kafka集群架构</h1><ol>
<li>Broker代理<br> Kafka集群通常由多个代理组成以保持负载平衡.Kafka代理是无状态的,使用ZooKeeper来维护它们的集群状态.一个Kafka代理实例可以每秒处理数十万次读取和写入,每个Broker可以处理TB的消息,而没有性能影响.Kafka经纪人领导选举可以由ZooKeeper完成.</li>
<li>ZooKeeper<br> ZooKeeper用于管理和协调Kafka代理.ZooKeeper服务主要用于通知生产者和消费者Kafka系统中存在任何新代理或Kafka系统中代理失败.根据Zookeeper接收到关于代理的存在或失败的通知,然后产品和消费者采取决定并开始与某些其他代理协调他们的任务.</li>
<li>Producers 生产者<br> 生产者将数据推送给经纪人.当新代理启动时,所有生产者搜索它并自动向该新代理发送消息.Kafka生产者不等待来自代理的确认,并且发送消息的速度与代理可以处理的一样快.</li>
<li>Consumers 消费者<br> 因为Kafka代理是无状态的,这意味着消费者必须通过使用分区偏移来维护已经消耗了多少消息.如果消费者确认特定的消息偏移,则意味着消费者已经消费了所有先前的消息.消费者向代理发出异步拉取请求,以具有准备好消耗的字节缓冲区.消费者可以简单地通过提供偏移值来快退或跳到分区中的任何点.消费者偏移值由ZooKeeper通知.</li>
</ol>
<h1 id="Kafka工作流程"><a href="#Kafka工作流程" class="headerlink" title="Kafka工作流程"></a>Kafka工作流程</h1><p>Kafka只是分为一个或多个分区的主题的集合.<br>Kafka分区是消息的线性有序序列,其中每个消息由它们的偏移来标识.Kafka集群中的所有数据都是不相连的分区联合.传入消息写在分区的末尾,消息由消费者顺序读取.通过将消息复制到不同的代理提供持久性.<br>Kafka以快速,可靠,持久,容错和零停机的方式提供基于pub-sub和队列的消息系统.<br>生产者只需将消息发送到主题，消费者可以根据自己的需要选择任何一种类型的消息传递系统</p>
<h2 id="发布订阅工作流程"><a href="#发布订阅工作流程" class="headerlink" title="发布订阅工作流程"></a>发布订阅工作流程</h2><ol>
<li>生产者向主题发送消息。</li>
<li>Kafka代理存储为该特定主题配置的分区中的所有消息.它确保消息在分区之间平等共享.如果生产者发送两个消息并且有两个分区,Kafka将在第一分区中存储一个消息,在第二分区中存储第二消息.</li>
<li>消费者订阅特定主题.</li>
<li>一旦消费者订阅主题,Kafka将向消费者提供主题的当前偏移,并且还将偏移保存在Zookeeper中.</li>
<li>消费者将定期请求Kafka新消息.</li>
<li>一旦Kafka收到来自生产者的消息,它将这些消息转发给消费者.</li>
<li>消费者将收到消息并进行处理.</li>
<li>一旦消息被处理,消费者将向Kafka代理发送确认.</li>
<li>一旦Kafka收到确认,它将偏移更改为新值,并在Zookeeper中更新它.由于偏移在Zookeeper中维护,消费者可以正确地读取下一封邮件,即使在服务器暴力期间.</li>
<li>以上流程将重复,直到消费者停止请求.</li>
</ol>
<p>消费者可以随时回退/跳到所需的主题偏移量,并阅读所有后续消息.</p>
<h2 id="队列消息-用户组的工作流"><a href="#队列消息-用户组的工作流" class="headerlink" title="队列消息/用户组的工作流"></a>队列消息/用户组的工作流</h2><p>在队列消息传递系统而不是单个消费者中，具有相同”组ID “的一组消费者将订阅主题。 简单来说，订阅具有相同” Group ID “的主题的消费者被认为是单个组，并且消息在它们之间共享。 让我们检查这个系统的实际工作流程。</p>
<ol>
<li>生产者以固定间隔向某个主题发送消息.</li>
<li>Kafka存储在为该特定主题配置的分区中的所有消息.</li>
<li>单个消费者订阅特定主题，假设Topic-01的Group ID为Group-1。</li>
<li>Kafka以与发布-订阅消息相同的方式与消费者交互,直到新消费者以相同的组ID订阅相同主题Topic-01</li>
<li>一旦新消费者到达,Kafka将其操作切换到共享模式,并在两个消费者之间共享数据.此共享将继续,直到用户数达到为该特定主题配置的分区数。</li>
<li>一旦消费者的数量超过分区的数量,新消费者将不会接收任何进一步的消息,直到现有消费者取消订阅任何一个消费者.出现这种情况是因为Kafka中的每个消费者将被分配至少一个分区,并且一旦所有分区被分配给现有消费者,新消费者将必须等待</li>
</ol>
<p>此功能也称为”使用者组”。 同样，Kafka将以非常简单和高效的方式提供两个系统中最好的</p>
<h2 id="ZooKeeper的作用"><a href="#ZooKeeper的作用" class="headerlink" title="ZooKeeper的作用"></a>ZooKeeper的作用</h2><p>Apache Kafka的一个关键依赖是Apache Zookeeper, Zookeeper是一个分布式配置和同步服务.<br>Zookeeper是Kafka代理和消费者之间的协调接口.<br>Kafka服务器通过Zookeeper集群共享信息.<br>Kafka在Zookeeper中存储基本元数据,例如关于主题,代理,消费者偏移(队列读取器)等的信息.</p>
<p>由于所有关键信息存储在Zookeeper中,并且它通常在其整体上复制此数据,因此Kafka代理/Zookeeper的故障不会影响Kafka集群的状态.Kafka将恢复状态,一旦Zookeeper重新启动.这为Kafka带来了零停机时间.Kafka代理之间的领导者选举也通过使用Zookeeper在领导者失败的情况下完成.</p>
<h1 id="Kafka-Leader的选举"><a href="#Kafka-Leader的选举" class="headerlink" title="Kafka Leader的选举"></a>Kafka Leader的选举</h1><p>Kafka Partition的Leader选举是在所有Broker中选出一个Controller(管理员),所有Partition的Leader选举都由Controller决定,Controller会将Leader的改变直接通过RPC的方式(比Zookeeper Queue的方式更高效)通知需要为此做出响应的Broker.<br>Kafka Controller的选举过程:</p>
<ol>
<li>每个Broker都会在Zookeeper中Controller Path上注册一个<strong>Watch</strong>(监听者)</li>
<li>当前Controller由于某些原因和Zookeeper断开时,对应的Controller Path会自动消失,此时会触发Watch,所有活着的Broker都回去竞争成为新的Controller(创建新的Controller Path),但只有一个会竞争成功(Zookeeper保证).</li>
<li>竞争成功的Broker会成功新的Controller,竞争失败的Broker会重新在新的Controller Path上注册Watch.</li>
</ol>
<p><strong>Kafka Partition Leader的选举由Controller执行</strong>:</p>
<ol>
<li>从Zookeeper中读取当前分区的所有ISR集合</li>
<li>调用配置的分区选择算法选择分区的Leader</li>
</ol>
<h1 id="Kafka-C-实践"><a href="#Kafka-C-实践" class="headerlink" title="Kafka C++实践"></a>Kafka C++实践</h1><h2 id="librdkafka安装"><a href="#librdkafka安装" class="headerlink" title="librdkafka安装"></a>librdkafka安装</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget https://github.com/edenhill/librdkafka/archive/v0.11.6.tar.gz</span><br><span class="line">tar zxvf v0.11.6.tar.gz</span><br><span class="line">cd librdkafka-0.11.6</span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure>
<h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ul>
<li><a href="http://kafka.apachecn.org/documentation.html#introduction" target="_blank" rel="noopener">Kafka中文文档</a></li>
<li><a href="https://www.w3cschool.cn/apache_kafka/" target="_blank" rel="noopener">Apache Kafka 教程</a></li>
<li>Kafka权威指南</li>
<li><a href="https://github.com/edenhill/librdkafka" target="_blank" rel="noopener">librdkafka github</a></li>
</ul>
]]></content>
      <categories>
        <category>高性能服务器</category>
      </categories>
      <tags>
        <tag>kafka</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式探秘-23-状态模式</title>
    <url>/2017/09/07/design-pattern-23-state/</url>
    <content><![CDATA[<p>状态模式的学习与实践</p>
<h1 id="模式定义"><a href="#模式定义" class="headerlink" title="模式定义"></a>模式定义</h1><p>当一个对象内在状态改变时允许其改变行为，该对象看起来像改变了其类。状态模式的核心是封装，状态的变化引起了行为的变更，从外部看起来好像这个对象对应的类改变了一样。</p>
<h2 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h2><p><img src="https://www.plantuml.com/plantuml/svg/SoWkIImgAStDuKhEIImkLd3Epoj9hIXHgEPI00BjeDJ2qjJY4WrDhbekg8hWaiIIL9YyHs9UIaugiZJGWEIYr99Kc3AW1AgGRcc1ReqTn1Wkc7MwHPdf6IMw-L3JhHIqYy7o3gbvAK370G00"></p>
<ol>
<li>State 抽象状态角色 接口或抽象类，负责对象状态定义，并且封装环境角色已实现状态切换。</li>
<li>ConcreteState 具体状态角色 每一个具体状态必须完成两个职责：本状态的行为管理以及趋向状态处理，即本状态要做什么，以及本状态如何过渡到其他状态。</li>
<li>Context 环境角色 定义客户端需要的接口，并且负责具体状态的切换。</li>
</ol>
<p>环境角色的约定：</p>
<ol>
<li>状态对象声明为静态常量。</li>
<li>环境角色具有状态抽象角色定义的所有行为。</li>
</ol>
<h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ol>
<li>结构清晰</li>
<li>遵循设计原则 很好的体现了开闭原则和单一职责原则</li>
<li>封装性好</li>
</ol>
<h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><p>子类会有太多。</p>
<h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ol>
<li>行为随状态而改变的场景</li>
<li>条件、分支判断语句的替代者</li>
</ol>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>状态模式适用于当某个对象在它的状态发生改变时，行为随着发生比较大的变化，即行为受状态约束的情况下可以使用状态模式。使用是对象的状态最好不要超过5个。</p>
<h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><h2 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h2><h2 id="简单实现"><a href="#简单实现" class="headerlink" title="简单实现"></a>简单实现</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//状态模式</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">State</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Context</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteStateA</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteStateB</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">State</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    State()</span><br><span class="line">    &#123;</span><br><span class="line">        ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">virtual</span> ~State()</span><br><span class="line">    &#123;</span><br><span class="line">        ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">OperationInterface</span><span class="params">(Context *)</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">OperationChangeState</span><span class="params">(Context *)</span> </span>= <span class="number">0</span>;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">ChangeState</span><span class="params">(Context *con, State *st)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">State::OperationInterface</span><span class="params">(Context *con)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"State::.."</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteStateA</span> :</span> <span class="keyword">public</span> State</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ConcreteStateA()</span><br><span class="line">    &#123;</span><br><span class="line">        ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">virtual</span> ~ConcreteStateA()</span><br><span class="line">    &#123;</span><br><span class="line">        ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">OperationInterface</span><span class="params">(Context *con)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"ConcreteStateA::OperationInterface..."</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">OperationChangeState</span><span class="params">(Context *con)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteStateB</span> :</span> <span class="keyword">public</span> State</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ConcreteStateB()</span><br><span class="line">    &#123;</span><br><span class="line">        ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">virtual</span> ~ConcreteStateB()</span><br><span class="line">    &#123;</span><br><span class="line">        ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">OperationInterface</span><span class="params">(Context *con)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"ConcreteStateB::OperationInterface..."</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">OperationChangeState</span><span class="params">(Context *con)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        OperationInterface(con);</span><br><span class="line">        ChangeState(con, <span class="keyword">new</span> ConcreteStateA());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Context</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Context()</span><br><span class="line">    &#123;</span><br><span class="line">        ;</span><br><span class="line">    &#125;</span><br><span class="line">    Context(State *state)</span><br><span class="line">    &#123;</span><br><span class="line">        m_State = state;</span><br><span class="line">    &#125;</span><br><span class="line">    ~Context()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">delete</span> m_State;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">OperationInterface</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        m_State-&gt;OperationInterface(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">OperationChangeState</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        m_State-&gt;OperationChangeState(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">ChangeState</span><span class="params">(State *state)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        m_State = state;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    State *m_State;</span><br><span class="line"></span><br><span class="line"><span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">State</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">State::ChangeState</span><span class="params">(Context *con, State *st)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    con-&gt;ChangeState(st);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ConcreteStateA::OperationChangeState</span><span class="params">(Context *con)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    OperationInterface(con);</span><br><span class="line">    ChangeState(con, <span class="keyword">new</span> ConcreteStateB());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    State *st = <span class="keyword">new</span> ConcreteStateA();</span><br><span class="line">    Context *con = <span class="keyword">new</span> Context(st);</span><br><span class="line">    con-&gt;OperationChangeState();</span><br><span class="line">    con-&gt;OperationChangeState();</span><br><span class="line">    con-&gt;OperationChangeState();</span><br><span class="line">    con-&gt;OperationChangeState();</span><br><span class="line">    con-&gt;OperationChangeState();</span><br><span class="line">    con-&gt;OperationChangeState();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ol>
<li>设计模式之禅</li>
<li>GoF+23种设计模式解析</li>
</ol>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ boost库源码编译安装</title>
    <url>/2018/09/28/boost-install/</url>
    <content><![CDATA[<h1 id="boost库的安装"><a href="#boost库的安装" class="headerlink" title="boost库的安装"></a>boost库的安装</h1><h2 id="获取boost源码"><a href="#获取boost源码" class="headerlink" title="获取boost源码"></a>获取boost源码</h2><p><a href="https://www.boost.org/" target="_blank" rel="noopener">boost官网</a>获取最新版本<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget https://dl.bintray.com/boostorg/release/1.68.0/source/boost_1_68_0.tar.gz</span><br><span class="line">tar zxvf boost_1_68_0.tar.gz</span><br><span class="line">cd boost_1_68_0</span><br></pre></td></tr></table></figure></p>
<h2 id="booststrap-sh"><a href="#booststrap-sh" class="headerlink" title="booststrap.sh"></a>booststrap.sh</h2><p>boost库有两种类型 1.需要编译才可使用 2.直接包含文件即可使用<br>booststrap.sh设置编译参数 如下设置库的安装目录为/usr/lib/boost 编译thread date_time 如果安装全部组件则不需要指定—with-libraries<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">./bootstrap.sh  --prefix=/usr/lib/boost --with-libraries=thread,date_time</span><br></pre></td></tr></table></figure></p>
<p>再运行b2编译安装<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">./b2</span><br><span class="line">./b2 install</span><br></pre></td></tr></table></figure></p>
<h2 id="boost库瘦身"><a href="#boost库瘦身" class="headerlink" title="boost库瘦身"></a>boost库瘦身</h2><p>boost库很是庞大,只需要部分功能的话可以使用bcp工具瘦身</p>
<h3 id="编译bcp工具"><a href="#编译bcp工具" class="headerlink" title="编译bcp工具"></a>编译bcp工具</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">./b2 tools/bcp</span><br></pre></td></tr></table></figure>
<h3 id="使用bcp工具"><a href="#使用bcp工具" class="headerlink" title="使用bcp工具"></a>使用bcp工具</h3><p>如下创建boost_lib目录 提取smart_ptr thread组件到boost_lib目录<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir boost_lib</span><br><span class="line">./dist/bin/bcp smart_ptr thread ./boost_lib</span><br></pre></td></tr></table></figure></p>
<p>注意此处提取只是头文件</p>
]]></content>
      <categories>
        <category>other</category>
      </categories>
      <tags>
        <tag>cpp</tag>
        <tag>boost</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL 字符集、索引、视图</title>
    <url>/2018/03/27/mysql-7/</url>
    <content><![CDATA[<h1 id="字符集"><a href="#字符集" class="headerlink" title="字符集"></a>字符集</h1><h2 id="查看MySQL支持的字符集"><a href="#查看MySQL支持的字符集" class="headerlink" title="查看MySQL支持的字符集"></a>查看MySQL支持的字符集</h2><ol>
<li>show character set;</li>
<li>查看information_schema.character_set</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">MariaDB [information_schema]&gt; show character set;</span><br><span class="line">+<span class="comment">----------+-----------------------------+---------------------+--------+</span></span><br><span class="line">| Charset  | Description                 | Default collation   | Maxlen |</span><br><span class="line">+<span class="comment">----------+-----------------------------+---------------------+--------+</span></span><br><span class="line">| big5     | Big5 Traditional Chinese    | big5_chinese_ci     |      2 |</span><br><span class="line">| dec8     | DEC West European           | dec8_swedish_ci     |      1 |</span><br><span class="line">| cp850    | DOS West European           | cp850_general_ci    |      1 |</span><br><span class="line">| hp8      | HP West European            | hp8_english_ci      |      1 |</span><br><span class="line">| koi8r    | KOI8-R Relcom Russian       | koi8r_general_ci    |      1 |</span><br><span class="line">... ...</span><br><span class="line"></span><br><span class="line">MariaDB [information_schema]&gt; select * from information_schema.character_sets;</span><br><span class="line">+<span class="comment">--------------------+----------------------+-----------------------------+--------+</span></span><br><span class="line">| CHARACTER_SET_NAME | DEFAULT_COLLATE_NAME | DESCRIPTION                 | MAXLEN |</span><br><span class="line">+<span class="comment">--------------------+----------------------+-----------------------------+--------+</span></span><br><span class="line">| big5               | big5_chinese_ci      | Big5 Traditional Chinese    |      2 |</span><br><span class="line">| dec8               | dec8_swedish_ci      | DEC West European           |      1 |</span><br><span class="line">| cp850              | cp850_general_ci     | DOS West European           |      1 |</span><br><span class="line">| hp8                | hp8_english_ci       | HP West European            |      1 |</span><br><span class="line">| koi8r              | koi8r_general_ci     | KOI8-R Relcom Russian       |      1 |</span><br><span class="line">... ...</span><br></pre></td></tr></table></figure>
<p>MySQL字符集包括字符集(CHARACTER)和校对规则(COLLATION)两个概念。 字符集定义MySQL存储字符串的方式。 校对规则定义比较字符串的方式。字符串和校对规则一对多，每个字符集至少对应一个校对规则。<br>使用SHOW COLLATION; 或查看那information_schema.COLLATIONS表查看所有校对规则<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">MariaDB [information_schema]&gt; show COLLATION;</span><br><span class="line">+<span class="comment">--------------------------+----------+-----+---------+----------+---------+</span></span><br><span class="line">| Collation                | Charset  | Id  | Default | Compiled | Sortlen |</span><br><span class="line">+<span class="comment">--------------------------+----------+-----+---------+----------+---------+</span></span><br><span class="line">| big5_chinese_ci          | big5     |   1 | Yes     | Yes      |       1 |</span><br><span class="line">| big5_bin                 | big5     |  84 |         | Yes      |       1 |</span><br><span class="line">| dec8_swedish_ci          | dec8     |   3 | Yes     | Yes      |       1 |</span><br><span class="line">| dec8_bin                 | dec8     |  69 |         | Yes      |       1 |</span><br><span class="line">... ...</span><br><span class="line"></span><br><span class="line">MariaDB [information_schema]&gt; select * from information_schema.COLLATIONS;</span><br><span class="line">+<span class="comment">--------------------------+--------------------+-----+------------+-------------+---------+</span></span><br><span class="line">| COLLATION_NAME           | CHARACTER_SET_NAME | ID  | IS_DEFAULT | IS_COMPILED | SORTLEN |</span><br><span class="line">+<span class="comment">--------------------------+--------------------+-----+------------+-------------+---------+</span></span><br><span class="line">| big5_chinese_ci          | big5               |   1 | Yes        | Yes         |       1 |</span><br><span class="line">| big5_bin                 | big5               |  84 |            | Yes         |       1 |</span><br><span class="line">| dec8_swedish_ci          | dec8               |   3 | Yes        | Yes         |       1 |</span><br><span class="line">| dec8_bin                 | dec8               |  69 |            | Yes         |       1 |</span><br><span class="line">| cp850_general_ci         | cp850              |   4 | Yes        | Yes         |       1 |</span><br><span class="line">| cp850_bin                | cp850              |  80 |            | Yes         |       1 |</span><br><span class="line">... ...</span><br></pre></td></tr></table></figure></p>
<p>校对规则命名约定:以与其相关的字符集名开始，包含语言名，并且以_ci(大小写不敏感)、_cs(大小写敏感)或_bin(二元，即比较基于字符编码的值而与language无关)结束。</p>
<h2 id="字符集设置"><a href="#字符集设置" class="headerlink" title="字符集设置"></a>字符集设置</h2><p>MySQL的字符集和校对规则有4个默认级别：服务器级、数据库级、表级、字段级。</p>
<h3 id="服务器字符集和校对规则"><a href="#服务器字符集和校对规则" class="headerlink" title="服务器字符集和校对规则"></a>服务器字符集和校对规则</h3><p>服务器字符集和校对规则在MySQL服务启动的时候确定。</p>
<ol>
<li><p>my.cnf中设置</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">default-character-<span class="keyword">set</span>=gbk</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动选项中指定</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysqld <span class="comment">--default-character_set=gdk</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>编译时指定</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">./configure --with-charset=gbk</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>如果没有特别指定服务器字符集，默认使用latin1作为服务器字符集。如未指定校对规则，则使用字符集默认的校对规则。<br>使用show variables like ‘character_set_server’查看服务器字符集<br>使用show variables like ‘collation_server’查看服务器校对规则<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">MariaDB [(none)]&gt; show variables like 'character_set_server';</span><br><span class="line">+<span class="comment">----------------------+--------+</span></span><br><span class="line">| Variable_name        | Value  |</span><br><span class="line">+<span class="comment">----------------------+--------+</span></span><br><span class="line">| character_set_server | latin1 |</span><br><span class="line">+<span class="comment">----------------------+--------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">MariaDB [(<span class="keyword">none</span>)]&gt; <span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">'collation_server'</span>;</span><br><span class="line">+<span class="comment">------------------+-------------------+</span></span><br><span class="line">| Variable_name    | Value             |</span><br><span class="line">+<span class="comment">------------------+-------------------+</span></span><br><span class="line">| collation_server | latin1_swedish_ci |</span><br><span class="line">+<span class="comment">------------------+-------------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure></p>
<h3 id="数据库字符集和校对规则"><a href="#数据库字符集和校对规则" class="headerlink" title="数据库字符集和校对规则"></a>数据库字符集和校对规则</h3><p>数据库字符集和校对规则在创建数据库时指定，也可通过alter database命令修改。如果数据库中已存在数据，修改字符集并不能将已有数据按照新的字符集存储<br>设置数据库字符集的规则：</p>
<ul>
<li>如果指定了字符集和校对规则，则使用指定的字符集和校对规则；</li>
<li>如果指定了字符集没有指定校对规则，则使用指定字符集的默认校对规则；</li>
<li>如果没有指定字符集和校对规则，则使用服务器字符集和校对规则作为数据库的字符集和校对规则<br>使用show variables like ‘character_set_database’查看数据库字符集<br>使用show variables like ‘collation_database’查看数据库校对规则<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">MariaDB [test]&gt; show variables like 'character_set_database';</span><br><span class="line">+<span class="comment">------------------------+--------+</span></span><br><span class="line">| Variable_name          | Value  |</span><br><span class="line">+<span class="comment">------------------------+--------+</span></span><br><span class="line">| character_set_database | latin1 |</span><br><span class="line">+<span class="comment">------------------------+--------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">MariaDB [<span class="keyword">test</span>]&gt; <span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">'collation_database'</span>;</span><br><span class="line">+<span class="comment">--------------------+-------------------+</span></span><br><span class="line">| Variable_name      | Value             |</span><br><span class="line">+<span class="comment">--------------------+-------------------+</span></span><br><span class="line">| collation_database | latin1_swedish_ci |</span><br><span class="line">+<span class="comment">--------------------+-------------------+</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="表字符集和校对规则"><a href="#表字符集和校对规则" class="headerlink" title="表字符集和校对规则"></a>表字符集和校对规则</h3><p>表的字符集和校对规则在创建表的时候指定，可以通过 alter table 命令进行修改。如果表中已有记录，修改字符集对原有的记录并没有影响，不会按照新的字符集进行存放。表的字段仍然使用原来的字符集。<br>设置表字符集的规则：</p>
<ol>
<li>如果指定了字符集和校对规则，使用指定的字符集和校对规则；</li>
<li>如果指定了字符集没有指定校对规则，使用指定字符集的默认校对规则；</li>
<li>如果没有指定字符集和校对规则，使用数据库字符集和校对规则作为表的字符集和校对规则。<br>推荐在创建表的时候明确指定字符集和校对规则，避免受到默认值的影响。要显示表的字符集和校对规则，可以使用 show create table 命令查看</li>
</ol>
<h3 id="列字符集和校对规则"><a href="#列字符集和校对规则" class="headerlink" title="列字符集和校对规则"></a>列字符集和校对规则</h3><p>列字符集和校对规则的定义可以在创建表时指定，或者在修改表时调整，如果在创建表的时候没有特别指定字符集和校对规则，则默认使用表的字符集和校对规则。</p>
<h2 id="连接字符集和校对规则"><a href="#连接字符集和校对规则" class="headerlink" title="连接字符集和校对规则"></a>连接字符集和校对规则</h2><p>MySQL提供三个参数：character_set_client、character_set_connection 和 character_set_results，分别代表客户端、连接和返回结果的字符集。通常3个字符集都是相同的，保证用户写入数据正确读出。</p>
<h2 id="字符集修改步骤"><a href="#字符集修改步骤" class="headerlink" title="字符集修改步骤"></a>字符集修改步骤</h2><ol>
<li>导出表结构。mysqldump</li>
<li>修改表结构中字符集。</li>
<li>确保数据不再更新，导出所有记录。mysqlduump</li>
<li>修改导入SQL文件中的字符集。SET NAMES。</li>
<li>使用新字符集创建数据库。</li>
<li>创建表。</li>
<li>导入数据。</li>
</ol>
<h1 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h1><p>索引是数据库中用来提高性能的最常用工具。</p>
<h2 id="索引概述"><a href="#索引概述" class="headerlink" title="索引概述"></a>索引概述</h2><p>所用MySQL列类型都可以被索引, 对相关列使用索引是提高select操作性能的最佳途径。</p>
<h3 id="索引创建"><a href="#索引创建" class="headerlink" title="索引创建"></a>索引创建</h3><ol>
<li><p>直接创建索引</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> [<span class="keyword">ONLINE</span>|<span class="keyword">OFFLINE</span>] [<span class="keyword">UNIQUE</span>|FULLTEXT|SPATIAL] <span class="keyword">INDEX</span> index_name</span><br><span class="line">    [index_type]</span><br><span class="line">    <span class="keyword">ON</span> tbl_name (index_col_name,...)</span><br><span class="line">    [index_option] ...</span><br><span class="line"></span><br><span class="line">index_col_name:</span><br><span class="line">    col_name [(<span class="keyword">length</span>)] [<span class="keyword">ASC</span> | <span class="keyword">DESC</span>]</span><br><span class="line"></span><br><span class="line">index_option:</span><br><span class="line">    KEY_BLOCK_SIZE [=] <span class="keyword">value</span></span><br><span class="line">    | index_type</span><br><span class="line">    | <span class="keyword">WITH</span> PARSER parser_name</span><br><span class="line">    | <span class="keyword">COMMENT</span> <span class="string">'string'</span></span><br><span class="line"></span><br><span class="line">index_type:</span><br><span class="line">    <span class="keyword">USING</span> &#123;BTREE | <span class="keyword">HASH</span>&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建/修改表创建索引</p>
</li>
</ol>
<h3 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h3><p>DROP INDEX index_name on tbl_name;</p>
<h3 id="显示索引"><a href="#显示索引" class="headerlink" title="显示索引"></a>显示索引</h3><ol>
<li>show create table tbl_name查看表结构，查看概况</li>
<li>show index from tbl_name只查看索引，查看详情</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">MariaDB [test]&gt; show create table student\G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">       Table: student</span><br><span class="line"><span class="keyword">Create</span> <span class="keyword">Table</span>: <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`student`</span> (</span><br><span class="line">    <span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">    <span class="string">`age`</span> <span class="built_in">int</span>(<span class="number">4</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span></span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=latin1</span><br><span class="line"><span class="number">1</span> <span class="keyword">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">MariaDB [<span class="keyword">test</span>]&gt; <span class="keyword">create</span> <span class="keyword">index</span> name_index <span class="keyword">on</span> student (<span class="keyword">name</span>(<span class="number">20</span>)) <span class="keyword">comment</span> <span class="string">"名称索引"</span>;</span><br><span class="line">Query OK, 0 rows affected (0.11 sec)</span><br><span class="line">Records: 0  Duplicates: 0  Warnings: 0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">MariaDB [test]&gt; show create table student\G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">       Table: student</span><br><span class="line"><span class="keyword">Create</span> <span class="keyword">Table</span>: <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`student`</span> (</span><br><span class="line">    <span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">    <span class="string">`age`</span> <span class="built_in">int</span>(<span class="number">4</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">     <span class="keyword">KEY</span> <span class="string">`name_index`</span> (<span class="string">`name`</span>(<span class="number">20</span>)) <span class="keyword">COMMENT</span> <span class="string">'名称索引'</span></span><br><span class="line"> ) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=latin1</span><br><span class="line"> <span class="number">1</span> <span class="keyword">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">MariaDB [<span class="keyword">test</span>]&gt; <span class="keyword">show</span> <span class="keyword">index</span> <span class="keyword">from</span> student;</span><br><span class="line">+<span class="comment">---------+------------+------------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+</span></span><br><span class="line">| Table   | Non_unique | Key_name   | Seq_in_index | Column_name | Collation | Cardinality | Sub_part | Packed | Null | Index_type | <span class="keyword">Comment</span> | Index_comment |</span><br><span class="line">+<span class="comment">---------+------------+------------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+</span></span><br><span class="line">| student |          <span class="number">1</span> | name_index |            <span class="number">1</span> | <span class="keyword">name</span>        | A         |           <span class="number">7</span> |       <span class="number">20</span> | <span class="literal">NULL</span>   | YES  | BTREE      |         | 名称索引      |</span><br><span class="line">+<span class="comment">---------+------------+------------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+</span></span><br><span class="line"><span class="number">1</span> <span class="keyword">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>
<h2 id="设计索引原则"><a href="#设计索引原则" class="headerlink" title="设计索引原则"></a>设计索引原则</h2><ol>
<li>搜索的列不一定是所要选择的列。(对where子语句或连接子句中指定的列添加索引，而不是select关键字后的列添加索引)</li>
<li>使用唯一索引。(考虑某列中值的分布。索引的列的基数越大，索引的效果越好。)</li>
<li>使用短索引。对字符串索引，应指定前缀长度。</li>
<li>利用最左前缀。</li>
<li>不要过度使用索引。(索引占用额外空间、降低写操作性能)</li>
<li>对于InnoDB存储引擎的表，系统会按照一定顺序保存，如果有明确定义的主键，则按照主键顺序保存。如果没有主键，但是有唯一索引，那么就是按照唯一索引的顺序保存。如果既没有主键又没有唯一索引，那么表中会自动生成一个内部列，按照这个列的顺序保存。按照主键或者内部列进行的访问是最快的，所以 InnoDB 表尽量自己指定主键，当表中同时有几个列都是唯一的，都可以作为主键的时候，要选择最常作为访问条件的列作为主键，提高查询的效率。另外，还需要注意，InnoDB 表的普通索引都会保存主键的键值，所以主键要尽可能选择较短的数据类型，可以有效地减少索引的磁盘占用，提高索引的缓存效果。</li>
</ol>
<h2 id="索引存储分类"><a href="#索引存储分类" class="headerlink" title="索引存储分类"></a>索引存储分类</h2><p>索引在MySQL的存储引擎层实现,而不是在服务器层实现,所以每种存储引擎的索引不一定完全相同,也不是所有的存储引擎支持所有的索引类型.<br>MySQL支持的索引:</p>
<ol>
<li>B-Tree索引:最常见的索引类型,大部分引擎都支持B数索引</li>
<li>HASH索引:只有Memory/Heap引擎支持,使用场景简单</li>
<li>R-Tree索引(空间索引):空间索引是MyISAM的一个特殊索引类型,主要用于地理空间数据类型,通常使用较少</li>
<li>Full-text(全文索引):全文索引也是MyISAM的一个特殊索引类型,主要用于全文索引,InnoDB从MySQL5.6版本开始提供对全文索引的支持</li>
</ol>
<p>MySQL目前不支持函数索引,但能对列的前面某一部分进行索引,可以大大缩小索引文件的大小,但在排序和分组操作的时候无法使用</p>
<p>HASH 索引有一些重要的特征需要在使用的时候特别注意:</p>
<ol>
<li>只用于使用=或&lt;=&gt;操作符的等式比较。</li>
<li>优化器不能使用 HASH 索引来加速 ORDER BY 操作。</li>
<li>MySQL 不能确定在两个值之间大约有多少行。如果将一个 MyISAM 表改为 HASH 索引的 MEMORY 表，会影响一些查询的执行效率。</li>
<li>只能使用整个关键字来搜索一行。</li>
</ol>
<p>对于 BTREE 索引，当使用&gt;、&lt;、>=、&lt;=、BETWEEN、!=或者&lt;>，或者 LIKE ‘pattern’(其中’pattern’不以通配符开始)操作符时，都可以使用相关列上的索引<br><strong>当对索引字段进行范围查询的时候，只有BTREE索引可以通过索引访问，而HASH索引实际上是全表扫描的</strong>。</p>
<h2 id="MySQL如何使用索引"><a href="#MySQL如何使用索引" class="headerlink" title="MySQL如何使用索引"></a>MySQL如何使用索引</h2><h3 id="MySQL中能够使用索引的经典场景"><a href="#MySQL中能够使用索引的经典场景" class="headerlink" title="MySQL中能够使用索引的经典场景"></a>MySQL中能够使用索引的经典场景</h3><ol>
<li>匹配全值,对索引中所有列都指定具体值,即是对索引中的所有列都有等值匹配的条件</li>
<li>匹配值的范围查询,对索引的值能够进行范围查找</li>
<li>匹配最左前缀,仅仅使用索引中的最左边列进行查找</li>
<li>仅仅对索引进行查询,当查询的列都在索引的字段中时,查询的效率更高</li>
<li>匹配列前缀,仅仅使用索引中的第一列,并且只包含索引第一列的开头一部分进行查询</li>
<li>能够实现索引匹配部分精确而其他部分进行范围索引</li>
<li>如果列名是索引,使用column_name is null就会使用索引</li>
<li>MySQL5.6引入Index Condition Pushdown(ICP)特性,进一步优化查询,Pushdown表示操作下放,某些情况下的条件过滤操作下放到存储引擎</li>
</ol>
<h3 id="MySQL存在索引但不能使用索引的经典场景"><a href="#MySQL存在索引但不能使用索引的经典场景" class="headerlink" title="MySQL存在索引但不能使用索引的经典场景"></a>MySQL存在索引但不能使用索引的经典场景</h3><ol>
<li>以%开头的LIKE查询不能够利用B-Tree索引,执行计划中key的值为NULL表示没有使用索引</li>
<li>数据类型中出现隐式转换的时候也不能使用索引,特别是当列类型是字符串</li>
<li>复合索引的情况下,假如查询条件不包含索引列最左部分,即不满足最左原则Leftmost,是不会使用复合索引的</li>
<li>如果MySQL估计使用索引比全表扫描慢,则不使用索引</li>
<li>用or分割的条件,如果or前面的条件中的列有索引,而后面的列中没有索引,则涉及的列都不会被使用(因为or后面的条件列中没有索引,那么后面的查询走全表扫描,在存在全表扫描的情况下,没必要多一次索引扫描增加I/O访问,一次全表扫描过滤条件就足够了)</li>
</ol>
<h2 id="查看索引使用情况"><a href="#查看索引使用情况" class="headerlink" title="查看索引使用情况"></a>查看索引使用情况</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">MariaDB [(none)]&gt; show status like 'Handler_read%';</span><br><span class="line">+<span class="comment">--------------------------+-------+</span></span><br><span class="line">| Variable_name            | Value |</span><br><span class="line">+<span class="comment">--------------------------+-------+</span></span><br><span class="line">| Handler_read_first       | 0     |</span><br><span class="line">| Handler_read_key         | 0     |</span><br><span class="line">| Handler_read_last        | 0     |</span><br><span class="line">| Handler_read_next        | 0     |</span><br><span class="line">| Handler_read_prev        | 0     |</span><br><span class="line">| Handler_read_rnd         | 0     |</span><br><span class="line">| Handler_read_rnd_deleted | 0     |</span><br><span class="line">| Handler_read_rnd_next    | 0     |</span><br><span class="line">+<span class="comment">--------------------------+-------+</span></span><br><span class="line">8 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>
<p>索引正在工作则Handler_read_key的值将很高,该值表示一个行被索引值读的次数,值很低表明增加索引得到的性能改善不高,因为索引并不经常使用.<br>Handler_read_rnd_next的值很高则意味着查询运行进行低效,并且应该建立索引补救.</p>
<h1 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h1><h2 id="视图简介"><a href="#视图简介" class="headerlink" title="视图简介"></a>视图简介</h2><p>视图是虚拟存在的表，对于使用视图的用户来说基本上是透明的。视图并不在数据库中实际存在，行和列数据来自定义视图的查询中使用的表，并且是在使用视图时动态生成的。<br>视图相对普通表优势：</p>
<ol>
<li>简单，使用视图的用户完全不用关心后面对应的表的结构、关联条件和筛选条件，对用户来说是已经是过滤好的符合条件的结果集。</li>
<li>安全，使用视图的用户只能访问被允许查询的结果集，对表的权限管理并不能限制到某个行某个列，但是通过视图就可以简单地实现。</li>
<li>数据独立，视图的结构确定了，可以屏蔽表结构变化对用户的影响，源表增加列对视图无影响；源表修改列名，则可以通过修改视图来解决，不会造成对访问者的影响。</li>
</ol>
<h2 id="视图操作"><a href="#视图操作" class="headerlink" title="视图操作"></a>视图操作</h2><h3 id="创建、修改视图"><a href="#创建、修改视图" class="headerlink" title="创建、修改视图"></a>创建、修改视图</h3><p>创建视图需要有CREATE VIEW的权限，对查询涉及的列有SELECT权限。<br>使用CREATE OR REPLACE 或 ALTER修改视图，需要该视图的DROP权限。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span></span><br><span class="line">    [<span class="keyword">OR</span> <span class="keyword">REPLACE</span>]</span><br><span class="line">    [ALGORITHM = &#123;UNDEFINED | <span class="keyword">MERGE</span> | TEMPTABLE&#125;]</span><br><span class="line">    [DEFINER = &#123; <span class="keyword">user</span> | <span class="keyword">CURRENT_USER</span> &#125;]</span><br><span class="line">    [<span class="keyword">SQL</span> <span class="keyword">SECURITY</span> &#123; DEFINER | INVOKER &#125;]</span><br><span class="line">    <span class="keyword">VIEW</span> view_name [(column_list)]</span><br><span class="line">    <span class="keyword">AS</span> select_statement</span><br><span class="line">    [<span class="keyword">WITH</span> [<span class="keyword">CASCADED</span> | <span class="keyword">LOCAL</span>] <span class="keyword">CHECK</span> <span class="keyword">OPTION</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span></span><br><span class="line">    [ALGORITHM = &#123;UNDEFINED | <span class="keyword">MERGE</span> | TEMPTABLE&#125;]</span><br><span class="line">    [DEFINER = &#123; <span class="keyword">user</span> | <span class="keyword">CURRENT_USER</span> &#125;]</span><br><span class="line">    [<span class="keyword">SQL</span> <span class="keyword">SECURITY</span> &#123; DEFINER | INVOKER &#125;]</span><br><span class="line">    <span class="keyword">VIEW</span> view_name [(column_list)]</span><br><span class="line">    <span class="keyword">AS</span> select_statement</span><br><span class="line">    [<span class="keyword">WITH</span> [<span class="keyword">CASCADED</span> | <span class="keyword">LOCAL</span>] <span class="keyword">CHECK</span> <span class="keyword">OPTION</span>]</span><br></pre></td></tr></table></figure>
<p>视图的可更新性和视图的定义有关系，以下类型视图是不可更新的：</p>
<ol>
<li>包含一下关键字的SQL语句：聚合函数(SUM、MIN、MAX、COUNT等)、DISTINCT、GROUP BY、HAVING、UNION或者UNION NULL</li>
<li>常量视图</li>
<li>SELECT中包含子查询</li>
<li>JION</li>
<li>FROM一个不能更新的视图</li>
<li>WHERE子句的子查询引用了FROM子句中的表</li>
</ol>
<p>[WITH [CASCADED | LOCAL] CHECK OPTION] 决定是否允许更新数据使记录不再满足视图的条件。<br>LOCAL只要满足本视图的条件就可更新。<br>CASCADED必须满足所有针对该视图的所有视图的条件才尅更新。<br>如果没有明确指定LOCAL或者CASCADED则默认为CASCADED</p>
<h3 id="删除视图"><a href="#删除视图" class="headerlink" title="删除视图"></a>删除视图</h3><p>有视图的DROP权限可一次删除一个或多个视图<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">VIEW</span> [<span class="keyword">IF</span> <span class="keyword">EXISTS</span>] view_name [, view_name] ... [RESTRICT|<span class="keyword">CASCADE</span>];</span><br></pre></td></tr></table></figure></p>
<h3 id="查看视图定义"><a href="#查看视图定义" class="headerlink" title="查看视图定义"></a>查看视图定义</h3><ol>
<li>show tables; 查看表名也会展示视图名</li>
<li>show table status [from db_name][like ‘pattern’]; 查看表状态也会展示视图状态</li>
<li>show create iew view_name; 查看视图定义</li>
<li>select * from information_schema.views where table_name=view_name; 通过系统表information_schema.views查看视图相关信息</li>
</ol>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>RabbitMQ</title>
    <url>/2018/07/13/rabbitmq/</url>
    <content><![CDATA[<h1 id="RabbitMQ的安装"><a href="#RabbitMQ的安装" class="headerlink" title="RabbitMQ的安装"></a>RabbitMQ的安装</h1><p><a href="http://www.rabbitmq.com/" target="_blank" rel="noopener">RabbitMQ官网</a><br>系统版本<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CaseZheng@VM_187_252_centos ~]$ uname -a</span><br><span class="line">Linux VM_187_252_centos 3.10.0-693.17.1.el7.x86_64 #1 SMP Thu Jan 25 20:13:58 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux</span><br><span class="line"></span><br><span class="line">[CaseZheng@VM_187_252_centos ~]$ cat /etc/redhat-release</span><br><span class="line">CentOS Linux release 7.4.1708 (Core)</span><br></pre></td></tr></table></figure></p>
<p>RabbitMQ基于Erlang,需要先安装Erlang环境</p>
<h2 id="Erlang安装"><a href="#Erlang安装" class="headerlink" title="Erlang安装"></a>Erlang安装</h2><p>Erlang的版本需要看下<a href="http://www.rabbitmq.com/which-erlang.html" target="_blank" rel="noopener">RabbitMQ的对应版本的要求</a><br>Erlang的<a href="https://www.erlang.org/downloads" target="_blank" rel="noopener">下载页面</a></p>
<p>下载Erlang到本地<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget http://erlang.org/download/otp_src_21.0.tar.gz</span><br></pre></td></tr></table></figure></p>
<p>解压并安装<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tar zxvf otp_src_21.0.tar.gz</span><br><span class="line">cd otp_src_21.0/</span><br><span class="line">./configure</span><br><span class="line">make &amp;&amp; sudo make install</span><br></pre></td></tr></table></figure></p>
<p>默认使用默认路径 如需更改需要在 ./configure 时指定 如:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">./configure --prefix=/opt/erlang</span><br></pre></td></tr></table></figure></p>
<p>输入erl有以下提示则为安装成功<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[CaseZheng@VM_187_252_centos ~]$ erl</span><br><span class="line">Erlang/OTP 21 [erts-10.0] [source] [64-bit] [smp:1:1] [ds:1:1:10] [async-threads:1] [hipe]</span><br><span class="line">Eshell V10.0  (abort with ^G)</span><br><span class="line">1&gt;</span><br></pre></td></tr></table></figure></p>
<h2 id="RabbitMQ安装"><a href="#RabbitMQ安装" class="headerlink" title="RabbitMQ安装"></a>RabbitMQ安装</h2><p>下载RabbitMQ 这里安装rabbitmq的generic版本<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget https://github.com/rabbitmq/rabbitmq-server/releases/download/v3.7.7/rabbitmq-server-generic-unix-3.7.7.tar.xz</span><br></pre></td></tr></table></figure></p>
<p>解压<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tar xvJf rabbitmq-server-generic-unix-3.7.7.tar.xz</span><br></pre></td></tr></table></figure></p>
<p>移动 rabbitmq_server-3.7.7 到 /usr/local/ 并重命名为rabbitmq<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo mv rabbitmq_server-3.7.7 /usr/local/rabbitmq</span><br></pre></td></tr></table></figure></p>
<p>给/etc/profile加入环境变量如下:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export PATH=$PATH:/usr/local/rabbitmq/sbin</span><br></pre></td></tr></table></figure></p>
<p>使环境变量生效<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure></p>
<p>启用rabbitmq网页管理插件(该插件实际已随rabbitmq安装,启用即可)<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rabbitmq-plugins enable rabbitmq_management</span><br></pre></td></tr></table></figure></p>
<p>启动rabbitmq<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rabbitmq-server -detached</span><br><span class="line">ERROR: epmd error for host bogon: timeout (timed out)</span><br></pre></td></tr></table></figure></p>
<p>出现此报错信息是因为解析不了主机名 修改hosts 将主机名解析到127.0.0.1或者当前机器的内网地址</p>
<p>查看启动成功<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[CaseZheng@VM_187_252_centos ~]$ netstat -tunlp | grep beam</span><br><span class="line"> tcp        0      0 0.0.0.0:15672           0.0.0.0:*               LISTEN      31942/beam.smp</span><br><span class="line"> tcp        0      0 0.0.0.0:25672           0.0.0.0:*               LISTEN      31942/beam.smp</span><br><span class="line"> tcp6       0      0 :::5672                 :::*                    LISTEN      31942/beam.smp</span><br><span class="line"> udp        0      0 0.0.0.0:46173           0.0.0.0:*                           31942/beam.smp</span><br></pre></td></tr></table></figure></p>
<p>添加用户 设置用户组 授权<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rabbitmqctl add_user root 123456</span><br><span class="line">rabbitmqctl set_user_tags root administrator</span><br><span class="line">rabbitmqctl set_permissions -p / root &quot;.*&quot; &quot;.*&quot; &quot;.*&quot;</span><br></pre></td></tr></table></figure></p>
<p>可通过外网地址+15672端口号的形式访问web管理界面,需要开放15672端口</p>
<h1 id="RabbitMQ介绍"><a href="#RabbitMQ介绍" class="headerlink" title="RabbitMQ介绍"></a>RabbitMQ介绍</h1><p>RabbitMQ是由Erlang语言开发的AMQP的开源实现<br>AMQP(Advanced Message Queuing Protocol 高级消息队列协议)是一个开放的应用层协议,为面对消息的中间件而设计,基于此协议的客户端和消息中间件可传递消息.</p>
<p><img src="/Picture/RabbitMq.png" alt="RabbitMQ结构图"></p>
<h2 id="AMQP模型简介"><a href="#AMQP模型简介" class="headerlink" title="AMQP模型简介"></a>AMQP模型简介</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">                   |---------------------------------|</span><br><span class="line">                   |                                 |</span><br><span class="line">生产者 ---publish--|-&gt; Exchange ---Routes---&gt; Queue -|--consumes---&gt; 消费者</span><br><span class="line">                   |                                 |</span><br><span class="line">                   |-------- Brokers(消息代理) ------|</span><br></pre></td></tr></table></figure>
<p>生产者发布消息到交换机,交换机根据路由规则将消息转发到消息队列,消息队列从消息队列取数据消费.<br>生产者可以在发布消息时给消息指定各种消息属性.消息的属性有的会被消息代理(brokers)使用,有的则完全不透明,只能由被接收消息的应用所使用.<br>由于网络是不可靠的,而且消费者处理消息也可能失败,为了保证消息可靠的被处理掉,AMQP包含了消息确认机制,当消息从队列投递到消费者后,消费者需通知消息代理,进行确认,这个确认操作可以是自动的,也可以由处理消息的消费者执行.当消息确认机制启用时,消息代理不会完全将消息从队列中删除,直到它收到来自消费者的确认信息.</p>
<h3 id="交换机和交换机类型"><a href="#交换机和交换机类型" class="headerlink" title="交换机和交换机类型"></a>交换机和交换机类型</h3><p>交换机负责消息的路由,使用的路由算法由交换机和绑定规则决定.</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">交换机类型(Exchange Type)</th>
<th style="text-align:center">预声明的默认名称</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Direct exchange</td>
<td style="text-align:center">(Empty string) 或 amq.direct</td>
</tr>
<tr>
<td style="text-align:center">Fanout exchange</td>
<td style="text-align:center">amq.fanout</td>
</tr>
<tr>
<td style="text-align:center">Topic exchange</td>
<td style="text-align:center">amq.topic</td>
</tr>
<tr>
<td style="text-align:center">Headers exchange</td>
<td style="text-align:center">amq.match</td>
</tr>
</tbody>
</table>
</div>
<p>交换机除类型外,在申明交换机时还有许多其它属性,主要的有:</p>
<ul>
<li>Name</li>
<li>Durability 消息代理重启后,交换机是否存在</li>
<li>Auto-delete 在所有与之绑定的消息队列都完成对此交换机的使用后,删除它</li>
</ul>
<p>交换机有两个状态:持久(durable)和暂存(transient),持久化的交换机在消息代理重启后依然存在,而暂存的交换机则不会.</p>
<h4 id="默认交换机"><a href="#默认交换机" class="headerlink" title="默认交换机"></a>默认交换机</h4><p>默认交换机是一个由消息代理预先声明的名字为空字符串的amq.direct交换机</p>
<h4 id="Direct-exchange-直连交换器-路由键完全匹配"><a href="#Direct-exchange-直连交换器-路由键完全匹配" class="headerlink" title="Direct exchange(直连交换器 路由键完全匹配)"></a>Direct exchange(直连交换器 路由键完全匹配)</h4><p>direct exchange是根据消息携带的路由键将消息投递给对应队列的.direct exchange用来处理消息的单播路由</p>
<ol>
<li>将一个队列绑定在某个交换机上,同时绑定一个路由键</li>
<li>当一个携带路由键R的消息被发送到直连交换机时,交换机会将该消息路由给绑定值同样为R的队列<br>direct交换器当路由键完全匹配队列绑定键才路由消息到绑定的队列</li>
</ol>
<h4 id="Fanout-exchange-扇形交换器-不理会路由键"><a href="#Fanout-exchange-扇形交换器-不理会路由键" class="headerlink" title="Fanout exchange(扇形交换器 不理会路由键)"></a>Fanout exchange(扇形交换器 不理会路由键)</h4><p>fanout exchange将消息路由给绑定在它身上的所有队列,不理会绑定的路由键.如果N个队列绑定在某个扇形交换机上,当有消息发送到此扇形交换机时,交换机将消息的拷贝发送给所有的N个队列.funout exchange用来处理消息的广播路由.</p>
<h4 id="Topic-exchange-路由键部分匹配"><a href="#Topic-exchange-路由键部分匹配" class="headerlink" title="Topic exchange(路由键部分匹配)"></a>Topic exchange(路由键部分匹配)</h4><p>topic exchange通过对消息的路由键和队列到交换机的绑定模式之间的匹配,将消息路由给一个或多个队列.topic exchange经常用来实现各种分发/订阅模式及其变种.topic exchange用来实现消息的多播路由.<br>路由键部分匹配,路由键的约定如下:</p>
<ol>
<li>路由键为一个句点号”.”分隔的字符串(被”.”分割的每一段独立的字符串称为一个单词),例如:”product.conf.del”, “price.conf.add”</li>
<li>绑定键和路由键都是”.”分隔的字符串</li>
<li>绑定键可以存在两种特殊字符”<em>“和”#”,用于模糊匹配,”</em>“用于匹配一个单词,”#”用于匹配多个单词(可以匹配零个)</li>
</ol>
<h4 id="Headers-exchange"><a href="#Headers-exchange" class="headerlink" title="Headers exchange"></a>Headers exchange</h4><p>消息的路由操作如果涉及到多个属性,使用消息头比用路由键更容易表达,headers exchange使用多个消息属性代替路由键建立路由规则.通过判断消息头的值能否与指定的绑定相匹配来确定路由规则.</p>
<h3 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h3><p>队列(queue)存储着即将被应用消费掉的消息.<br>队列属性:</p>
<ol>
<li>Name</li>
<li>Durable(消息代理重启后,队列依旧存在)</li>
<li>Exclusive(只被一个连接使用,当连接关闭后队列即被删除)</li>
<li>Auto-delete(当最后一个消费者退订后即被删除)</li>
<li>Arguments</li>
</ol>
<p>队列在声明(declare)后才能被使用.如果一个队列尚不存在,声明一个队列会创建它.如果声明的队列已经存在,并且属性完全相同.那么此次声明不会对原有队列产生任何影响.如果声明中的属性与已存在队列的属性有差异,那么一个错误代码为406的通道级异常就会被抛出</p>
<h4 id="队列名称"><a href="#队列名称" class="headerlink" title="队列名称"></a>队列名称</h4><p>队列名称可以指定,也可以由消息代理生成,队列名称是最多255字节的一个utf-8字符串.如果想让消息代理生成队列名,需要给消息队列的name参数赋值一个空字符串(在统一个通道的后续方法中可以使用空字符串表示之前生成的队列名称,因为通道可以默默记住消息代理最后一次生成的队列名称).<br>以”amq.”开始的队列名称被预留给消息代理内部使用.</p>
<h4 id="队列持久化"><a href="#队列持久化" class="headerlink" title="队列持久化"></a>队列持久化</h4><p>持久化队列(Durable queues)会被存储在磁盘上,当消息代理重启时它依然存在,没有被持久话的队列被称为暂存队列(Transient queues).<br><strong>持久化队列并不会使得路由到它的消息也持久化,只有持久化的消息才能在消息代理重启后重新恢复.</strong></p>
<h4 id="绑定"><a href="#绑定" class="headerlink" title="绑定"></a>绑定</h4><p>绑定是交换机将消息路由给队列所需遵循的规则.<br>AMQP的消息无法路由到队列,消息会被就地销毁或者返还给发布者.如何处理取决于发布者设置的消息属性</p>
<h4 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h4><p>消费者有两种方式消费数据:</p>
<ol>
<li>消息代理主动将消息投递给消费者(push API)</li>
<li>消费者根据需要主动获取消息(pull API)</li>
</ol>
<h4 id="消息确认"><a href="#消息确认" class="headerlink" title="消息确认"></a>消息确认</h4><p>消息代理删除消息的时机:</p>
<ol>
<li>当消息代理将消息发送给应用后立即删除(自动确认)</li>
<li>待应用发送一个确认回执后再删除(显式确认)</li>
</ol>
<h4 id="拒绝消息"><a href="#拒绝消息" class="headerlink" title="拒绝消息"></a>拒绝消息</h4><p>消费者可以在处理某条消息后向消息代理表明如何处理该消息,销毁它或者重新放入队列.</p>
<h3 id="消息属性"><a href="#消息属性" class="headerlink" title="消息属性"></a>消息属性</h3><ol>
<li>Content type(内容类型)</li>
<li>Content encoding(内容编码)</li>
<li>Routing key(路由键)</li>
<li>Delivery mode(persistent or not)投递模式(持久化或非持久化)</li>
<li>Message priority(消息优先权)</li>
<li>Message publishing timestamp(消息发布的时间戳)</li>
<li>Expiration period(消息有效期)</li>
<li>Publisher application id(发布应用ID)</li>
</ol>
<h3 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h3><p>AMQP连接通常为长连接,AMQP是一个使用TCP提供可靠投递的应用层协议.AMQP使用认证机制并且提供TLS(SSL)保护.当一个应用不再需要连接到AMQP代理时,需要优雅的释放AMQP连接,而不是直接关闭TCP连接.</p>
<h3 id="通道"><a href="#通道" class="headerlink" title="通道"></a>通道</h3><p>一个应用可能会和AMQP代理建立多个连接,此时同时开启多个TCP连接不合适,会消耗过多的系统资源,AMQP提供通道来处理多连接,可以将通道理解为共享一个TCP的多个轻量化连接.在多线程/多进程应用中可为每个线程/进程开启一个通道,这些通道不能被线程/进程共享.<br>一个特定通道上的通讯和其它通道上的通信是完全隔离的,因此每个AMQP方法都需要携带一个通道号.</p>
<h3 id="虚拟主机"><a href="#虚拟主机" class="headerlink" title="虚拟主机"></a>虚拟主机</h3><p>为了在一个单独的AMQP代理上实现多个隔离环境(用户、用户组、交换机、队列等),AMPQ提供虚拟主机概念(vhosts),为AMQP实体提供完全隔离的环境.当连接建立时,AMQP客户端指定使用的虚拟主机.</p>
<h3 id="AMQP可扩展"><a href="#AMQP可扩展" class="headerlink" title="AMQP可扩展"></a>AMQP可扩展</h3><h1 id="RabbitMQ-c客户端的使用"><a href="#RabbitMQ-c客户端的使用" class="headerlink" title="RabbitMQ c客户端的使用"></a>RabbitMQ c客户端的使用</h1><h2 id="c客户端编译安装"><a href="#c客户端编译安装" class="headerlink" title="c客户端编译安装"></a>c客户端编译安装</h2><p>编译安装看git说明即可<a href="https://github.com/alanxz/rabbitmq-c" target="_blank" rel="noopener">rabbitmq-c git网址</a></p>
<h2 id="api说明"><a href="#api说明" class="headerlink" title="api说明"></a>api说明</h2><p>api可查看官方文档或头文件注释<a href="http://alanxz.github.io/rabbitmq-c/docs/0.8.0/" target="_blank" rel="noopener">rabbitmq-c 官方文档</a></p>
<h2 id="原始c接口的封装"><a href="#原始c接口的封装" class="headerlink" title="原始c接口的封装"></a>原始c接口的封装</h2><p><a href="https://github.com/CaseZheng/SimpleServerFramework/tree/master/comm/rabbitmq" target="_blank" rel="noopener">rabbitmq-c 原始c接口的简单封装</a></p>
<h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><ul>
<li><a href="https://www.cnblogs.com/dwlsxj/p/RabbitMQ.html" target="_blank" rel="noopener">RabbitMQ基础知识</a></li>
</ul>
]]></content>
      <categories>
        <category>高性能服务器</category>
      </categories>
      <tags>
        <tag>rabbitmq</tag>
      </tags>
  </entry>
  <entry>
    <title>centos安装多个gcc版本</title>
    <url>/2018/11/16/centos-multiple-gcc-version/</url>
    <content><![CDATA[<h1 id="centos下多个gcc版本的安装方法和切换"><a href="#centos下多个gcc版本的安装方法和切换" class="headerlink" title="centos下多个gcc版本的安装方法和切换"></a>centos下多个gcc版本的安装方法和切换</h1><h2 id="安装scl发布源"><a href="#安装scl发布源" class="headerlink" title="安装scl发布源"></a>安装scl发布源</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo yum install centos-release-scl-rh</span><br></pre></td></tr></table></figure>
<h2 id="安装gcc和gcc-c"><a href="#安装gcc和gcc-c" class="headerlink" title="安装gcc和gcc-c++"></a>安装gcc和gcc-c++</h2><p>devtoolset中有多个gcc版本<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[CaseZheng@Test ~]$ yum search devtoolset- | grep gcc-c++</span><br><span class="line">devtoolset-6-gcc-c++.x86_64 : C++ support for GCC version 6</span><br><span class="line">devtoolset-7-gcc-c++.x86_64 : C++ support for GCC version 7</span><br></pre></td></tr></table></figure></p>
<p>安装devtoolset-6-*如下<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo yum install devtoolset-6-gcc devtoolset-6-gcc-c++ devtoolset-6-gdb devtoolset-6-libstdc++-devel</span><br></pre></td></tr></table></figure></p>
<p>devtoolset-*中还有别的工具,可以根据需要安装</p>
<h2 id="启用安装的gcc版本"><a href="#启用安装的gcc版本" class="headerlink" title="启用安装的gcc版本"></a>启用安装的gcc版本</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[CaseZheng@Test ~]$ gcc --version | grep GCC</span><br><span class="line">gcc (GCC) 4.4.7 20120313 (Red Hat 4.4.7-23)</span><br></pre></td></tr></table></figure>
<p>使用<code>source /opt/rh/devtoolset-6/enable</code>启用, 如果安装的devtoolset-7-*则使用<code>source /opt/rh/devtoolset-7/enable</code>,依次类推<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[CaseZheng@Test ~]$ gcc --version | grep GCC</span><br><span class="line">gcc (GCC) 6.3.1 20170216 (Red Hat 6.3.1-3)</span><br></pre></td></tr></table></figure></p>
<p>使用这种方法只对当前会话有效,如果想每次新开会话都生效可以将<code>source /opt/rh/devtoolset-6/enable</code>加入到<code>~/.bashrc</code>,加入后<code>source ~/.bashrc</code>生效<br>如果想全局生效可以将<code>source /opt/rh/devtoolset-6/enable</code>加入到<code>/etc/bashrc</code>,加入后执行下<code>source /etc/bashrc</code>生效</p>
<h1 id="Software-Collections介绍"><a href="#Software-Collections介绍" class="headerlink" title="Software Collections介绍"></a>Software Collections介绍</h1><p>Software Collections 是 Red Hat 唯一支持的新软件包源. Software Collections 为 CentOS 设立了专门的仓库,安装和管理都和其它第三方仓库一样. centos-release-scl 里有一些由社区维护的额外的软件包</p>
<p>安装 Software Collections<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo yum install centos-release-scl centos-release-scl-rh</span><br></pre></td></tr></table></figure></p>
<p>SCL的默认关闭,启用使用<code>source /opt/rh/devtoolset-7/enable</code>,参考启用安装的gcc版本</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="https://www.centoschina.cn/course/install/10408.html" target="_blank" rel="noopener">CentOS 6&amp;7 安装使用多个GCC版本（GCC4.9，GCC5.3，GCC6.2） </a></li>
</ul>
]]></content>
      <categories>
        <category>other</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>gcc</tag>
      </tags>
  </entry>
  <entry>
    <title>数据仓库</title>
    <url>/2019/01/21/data-warehouse/</url>
    <content><![CDATA[<h1 id="数据仓库"><a href="#数据仓库" class="headerlink" title="数据仓库"></a>数据仓库</h1><p>数据仓库(Data Warehouse)是一个面向主题的、集成的、随时间变化的、但信息本身相对稳定的数据存储集合，用于对企业管理决策过程的支持。</p>
<ol>
<li>面向主题:数据仓库针对某个主题来进行组织</li>
<li>集成:需要整合多个数据源的数据</li>
<li>稳定:数据一般只进行查询操作</li>
<li>随时间变化:定期接收新的集成数据,反应最新的数据变化</li>
</ol>
<p><strong>面向分析的存储系统</strong></p>
<a id="more"></a>
<h2 id="数据仓库和操作型数据库区别"><a href="#数据仓库和操作型数据库区别" class="headerlink" title="数据仓库和操作型数据库区别"></a>数据仓库和操作型数据库区别</h2><p><strong>面向主题</strong>是数据仓库和操作型数据库的<strong>根本区别</strong>,操作型数据库是为了支持各个业务而建立,分析型数据为了从各种繁杂业务中抽象出来的分析主题进行分析而建立</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">差异项</th>
<th style="text-align:center">数据库</th>
<th style="text-align:center">数据仓库</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">特征</td>
<td style="text-align:center">操作处理</td>
<td style="text-align:center">信息处理</td>
</tr>
<tr>
<td style="text-align:center">面向</td>
<td style="text-align:center">事务</td>
<td style="text-align:center">分析</td>
</tr>
<tr>
<td style="text-align:center">用户</td>
<td style="text-align:center">DBA、开发</td>
<td style="text-align:center">经理、主管、分析人员</td>
</tr>
<tr>
<td style="text-align:center">功能</td>
<td style="text-align:center">日常操作</td>
<td style="text-align:center">长期信息需求、决策支持</td>
</tr>
<tr>
<td style="text-align:center">DB设计</td>
<td style="text-align:center">基于ER模型，面向应用</td>
<td style="text-align:center">星形/雪花模型，面向主题</td>
</tr>
<tr>
<td style="text-align:center">数据</td>
<td style="text-align:center">当前的、最新的</td>
<td style="text-align:center">历史的、跨时间维护</td>
</tr>
<tr>
<td style="text-align:center">汇总</td>
<td style="text-align:center">原始的、高度详细</td>
<td style="text-align:center">汇总的、统一的</td>
</tr>
<tr>
<td style="text-align:center">视图</td>
<td style="text-align:center">详细、一般关系</td>
<td style="text-align:center">汇总的、多维的</td>
</tr>
<tr>
<td style="text-align:center">工作单元</td>
<td style="text-align:center">短的、简单事务</td>
<td style="text-align:center">复杂查询</td>
</tr>
<tr>
<td style="text-align:center">访问</td>
<td style="text-align:center">读/写</td>
<td style="text-align:center">大多为读</td>
</tr>
<tr>
<td style="text-align:center">关注</td>
<td style="text-align:center">数据进入</td>
<td style="text-align:center">信息输出</td>
</tr>
<tr>
<td style="text-align:center">操作</td>
<td style="text-align:center">主键索引操作</td>
<td style="text-align:center">大量的磁盘扫描</td>
</tr>
<tr>
<td style="text-align:center">用户数</td>
<td style="text-align:center">数百到数亿</td>
<td style="text-align:center">数百</td>
</tr>
<tr>
<td style="text-align:center">DB规模</td>
<td style="text-align:center">GB到TB</td>
<td style="text-align:center">&gt;=TB</td>
</tr>
<tr>
<td style="text-align:center">优先</td>
<td style="text-align:center">高性能、高可用性</td>
<td style="text-align:center">高灵活性</td>
</tr>
<tr>
<td style="text-align:center">度量</td>
<td style="text-align:center">事务吞吐量</td>
<td style="text-align:center">查询吞吐量、响应时间</td>
</tr>
</tbody>
</table>
</div>
<h2 id="数据仓库组件"><a href="#数据仓库组件" class="headerlink" title="数据仓库组件"></a>数据仓库组件</h2><p>数据仓库核心组件有4个:源数据库,ETL,数据仓库,前端应用</p>
<ol>
<li>源数据库:业务系统数据,外部数据</li>
<li>ETL:提取extraction、转换transformation、加载load。提取过程表示操作型数据库搜集指定数据，转换过程表示将数据转化为指定格式并进行数据清洗保证数据质量，加载过程表示将转换过后满足指定格式的数据加载进数据仓库。数据仓库会周期不断地从源数据库提取清洗好了的数据</li>
<li>前端应用:数据查询,展示</li>
</ol>
<h2 id="数据集市"><a href="#数据集市" class="headerlink" title="数据集市"></a>数据集市</h2><p>包含单个主题的小型数据仓库,关注范围小(不关注全局)</p>
<ol>
<li>独立数据集市:有自己的源数据库和ETL架构</li>
<li>非独立数据集市:没有自己的源数据库,数据来自数据仓库(是数据仓库的一个子集)</li>
</ol>
<h1 id="数据仓库建模"><a href="#数据仓库建模" class="headerlink" title="数据仓库建模"></a>数据仓库建模</h1><p>纬度建模是专门用于分析型数据库,数据仓库,数据集市建模的方法,属于关系建模方法,比操作型数据库的建模方法多了两个概念(维度表和事实表)</p>
<ul>
<li>维度表:表示对分析主题所属类型的描述,通常维度表比较固定且数据量小</li>
<li>事实表:表示对主题分析的量度,事实表通常是数值类型,且记录数会不断增加,表规模迅速增长</li>
</ul>
<h2 id="纬度建模三种模式"><a href="#纬度建模三种模式" class="headerlink" title="纬度建模三种模式"></a>纬度建模三种模式</h2><ol>
<li>星形模式(一个事实表和多个维度表)</li>
<li>雪花模式(对星形模式的扩展,每个维度表可向外连接多个子维度表)</li>
<li>星座模式(对星形模式的扩展,每个多个事实表)</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">        星形模式</span><br><span class="line">           |</span><br><span class="line">    ---------------</span><br><span class="line">    |             |</span><br><span class="line">规范化设计    多个事实表</span><br><span class="line">    |             |</span><br><span class="line">    |             |</span><br><span class="line">雪花模式       星座模式</span><br></pre></td></tr></table></figure>
<h2 id="数据仓库建模体系"><a href="#数据仓库建模体系" class="headerlink" title="数据仓库建模体系"></a>数据仓库建模体系</h2><ol>
<li>规范化数据仓库<br><img src="/Picture/data_warehouse1.jpg" alt="规范化数据仓库"></li>
<li>维度建模数据仓库<br><img src="/Picture/data_warehouse2.jpg" alt="维度建模数据仓库"></li>
<li>独立数据集市<br><img src="/Picture/data_warehouse3.jpg" alt="独立数据集市"></li>
</ol>
<p>数据仓库建模体系对比<br><img src="/Picture/data_warehouse4.jpg" alt="独立数据集市"></p>
<h1 id="数据仓库系统实现与使用"><a href="#数据仓库系统实现与使用" class="headerlink" title="数据仓库系统实现与使用"></a>数据仓库系统实现与使用</h1><h2 id="ETL-抽取-转换-加载"><a href="#ETL-抽取-转换-加载" class="headerlink" title="ETL(抽取,转换,加载)"></a>ETL(抽取,转换,加载)</h2><p>ETL工作本质:从各个工作源抽取数据,对数据进行转化,并最终加载到数据仓库维度建模后的表中</p>
<ol>
<li>抽取(Extract) 根据数据仓库主题从应用数据库抽取数据</li>
<li>转换(Transform) 对抽取的数据的结构进行转换,满足目标数据仓库模型的过程(数据清洗)</li>
<li>加载(Load) 将提前好的数据在确保数据质量后加载到目标数据仓库(首次加载和刷新加载)</li>
</ol>
<h2 id="OLAP-BI工具"><a href="#OLAP-BI工具" class="headerlink" title="OLAP/BI工具"></a>OLAP/BI工具</h2><p>OLAP:在线分析处理(On-line Analytical Processing)<br>OLAP专门用于纬度建模数据分析<br>BI工具将OLAP的结果以图表的方式展现出来</p>
<h2 id="数据立方体"><a href="#数据立方体" class="headerlink" title="数据立方体"></a>数据立方体</h2><p>数据立方体是N维的<br>数据立方体五大操作:切片,切块,旋转,上卷,下钻</p>
<h2 id="OLAP架构模式"><a href="#OLAP架构模式" class="headerlink" title="OLAP架构模式"></a>OLAP架构模式</h2><h3 id="ROLAP-Relational-Online-Analytical-Processing-关系式OLAP"><a href="#ROLAP-Relational-Online-Analytical-Processing-关系式OLAP" class="headerlink" title="ROLAP(Relational Online Analytical Processing)关系式OLAP"></a>ROLAP(Relational Online Analytical Processing)关系式OLAP</h3><p>使用星形模式以及多个关系表对数据立方体进行模拟,所有查询都被转化为SQL语句执行,SQL语句涉及多个表之间的JOIN操作,速度慢<br><img src="/Picture/rolap.jpg" alt="ROLAP"><br>基于RDBMS技术,通过并行化/内存加速计算 Hive/Presto/Spark SQL/Dirll<br><img src="/Picture/rolap2.png" alt="ROLAP"><br>优点:</p>
<pre><code>1. 支持任意的SQL表达式
2. 无数据冗余和预处理
</code></pre><p>不足:</p>
<pre><code>1. 大量数据/复杂查询下分钟/小时级响应
2. 低并发
3. 不支持实时数据
</code></pre><p>适用场景: <strong>对灵活性要求不高的即席查询场景</strong></p>
<h3 id="MOLAP-Multidimensional-Online-Analytical-Processing-多维度OLAP"><a href="#MOLAP-Multidimensional-Online-Analytical-Processing-多维度OLAP" class="headerlink" title="MOLAP(Multidimensional Online Analytical Processing)多维度OLAP"></a>MOLAP(Multidimensional Online Analytical Processing)多维度OLAP</h3><p>生成一个多维数据集,构建一个实际数据立方体,常用查询被预先计算,每次查询都非常快速,但立方体更新比较慢<br><img src="/Picture/molap.jpg" alt="MOALP"><br>预先聚合明细数据,系统中存储汇总数据 Kylin/Druid<br><img src="/Picture/molap2.png" alt="MOALP"><br>优势:</p>
<pre><code>1. 支持超大原始数据集
2. 高性能高并发
</code></pre><p>不足:</p>
<pre><code>1. 不支持明细数据查询
2. 需要预先定义维度和指标(度量)
</code></pre><p>适用场景:</p>
<pre><code>1. 对性能要求非常高的OLAP场景
2. 交互式分析
</code></pre><h3 id="搜索引擎Search-Engines"><a href="#搜索引擎Search-Engines" class="headerlink" title="搜索引擎Search Engines"></a>搜索引擎Search Engines</h3><p>基于搜索引擎技术,通过索引加速计算(Elasticsearch / Solr)<br><img src="/Picture/se.png" alt="Search Engines"><br>优势:</p>
<pre><code>1. 强大的明细检索功能
2. 同时支持实时与离线数据
</code></pre><p>不足:</p>
<pre><code>1. 大量数据/复杂查询下分钟/小时级响应
2. 复杂聚合计算下低并发
3. 不支持JOIN/子查询
</code></pre><p>适合场景:中小数据规模(~亿级)的简单OLAP分析</p>
<h3 id="HOLAP-Hybrid-Online-Analytical-Processing"><a href="#HOLAP-Hybrid-Online-Analytical-Processing" class="headerlink" title="HOLAP(Hybrid Online Analytical Processing)"></a>HOLAP(Hybrid Online Analytical Processing)</h3><p>参考MOLAP和ROLAP的混合解决方案,将需要特别提速的查询放在MOLAP引擎,其他查询则调用ROLAP引擎</p>
<p>ROLAP MOALP HOLAP的对比<br>| 名称                         | 描述                       | 细节数据存储位置 | 聚合后的数据存储位置 |<br>| :—:                         | :—:                       | :—:             | :—:                 |<br>| ROLAP(Relational OLAP)       | 基于关系数据库的OLAP实现   | 关系型数据库     | 关系型数据库         |<br>| MOLAP(Multidimensional OLAP) | 基于多维数据组织的OLAP实现 | 数据立方体       | 数据立方体           |<br>| HOLAP(Hybrid OLAP)           | 基于混合数据组织的OLAP实现 | 关系型数据库     | 数据立方体           |</p>
<h3 id="OLAP引擎比较"><a href="#OLAP引擎比较" class="headerlink" title="OLAP引擎比较"></a>OLAP引擎比较</h3><p><img src="/Picture/olap.png" alt="OLAP引擎比较"></p>
<h1 id="OLAP引擎简介"><a href="#OLAP引擎简介" class="headerlink" title="OLAP引擎简介"></a>OLAP引擎简介</h1><h2 id="Hive"><a href="#Hive" class="headerlink" title="Hive"></a>Hive</h2><h2 id="ElasticSearch"><a href="#ElasticSearch" class="headerlink" title="ElasticSearch"></a>ElasticSearch</h2><h2 id="Kylin"><a href="#Kylin" class="headerlink" title="Kylin"></a>Kylin</h2><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="https://www.cnblogs.com/muchen/p/5305658.html#_label3" target="_blank" rel="noopener">数据仓库概述</a></li>
<li><a href="https://www.cnblogs.com/muchen/p/5310732.html" target="_blank" rel="noopener">数据仓库与数据集市建模</a></li>
<li><a href="https://www.cnblogs.com/muchen/p/5318808.html" target="_blank" rel="noopener">数据仓库系统的实现与使用(含OLAP重点讲解)</a></li>
<li><a href="https://www.aliyun.com/jiaocheng/1128326.html" target="_blank" rel="noopener">数据仓库(Data Warehouse)介绍及设计原则</a></li>
<li><a href="https://blog.csdn.net/trigl/article/details/68944434" target="_blank" rel="noopener">数据仓库的架构与设计</a></li>
<li><a href="http://www.cnblogs.com/muchen/p/5258197.html" target="_blank" rel="noopener">数据库需求与ER建模</a></li>
<li><a href="http://www.ouyangchen.com/wp-content/uploads/2017/03/Meetup-Druid%E5%92%8CKylin%E5%9C%A8%E7%BE%8E%E5%9B%A2%E7%82%B9%E8%AF%84%E7%9A%84%E9%80%89%E5%9E%8B%E4%B8%8E%E5%AE%9E%E8%B7%B5.pdf" target="_blank" rel="noopener">Meetup-Druid和Kylin在美团点评的选型与实践</a></li>
<li><a href="https://blog.csdn.net/huanruiqi/article/details/51272789" target="_blank" rel="noopener">浅谈ROLAP、MOLAP和HOLAP区别</a></li>
</ul>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>firefox配置</title>
    <url>/2019/02/18/firefox-addons/</url>
    <content><![CDATA[<ol>
<li>AutoCopy</li>
<li>LastPass</li>
<li>New Tab Override</li>
<li>uBlock Origin</li>
<li>Hoxx VPN Proxy</li>
<li>Saka Key</li>
<li>网页截图</li>
</ol>
<h1 id="HTTPS证书检查禁用"><a href="#HTTPS证书检查禁用" class="headerlink" title="HTTPS证书检查禁用"></a>HTTPS证书检查禁用</h1><p>进入 <code>about:config</code><br>更改<code>security.enterprise_roots.enabled</code>的值为true</p>
]]></content>
      <categories>
        <category>other</category>
      </categories>
      <tags>
        <tag>other</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux常用命令</title>
    <url>/2018/10/15/linux-common-commands/</url>
    <content><![CDATA[<h1 id="Linux常用命令"><a href="#Linux常用命令" class="headerlink" title="Linux常用命令"></a>Linux常用命令</h1><h2 id="Linux批量查找和替换"><a href="#Linux批量查找和替换" class="headerlink" title="Linux批量查找和替换"></a>Linux批量查找和替换</h2><h3 id="语法格式"><a href="#语法格式" class="headerlink" title="语法格式"></a>语法格式</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sed -i &quot;s/原字符串/新字符串/g&quot; `grep 原字符串 -rl 所在目录`</span><br></pre></td></tr></table></figure>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>查找./post/目录下包含c++字符串的文档,并将文档中c++字符串替换为c<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sed -i "s/c++/c/g" `grep c++ -rl ./post/`</span><br></pre></td></tr></table></figure></p>
<h1 id="yum"><a href="#yum" class="headerlink" title="yum"></a>yum</h1><p>yum在误操作后的回滚,通过<code>yum history</code>查看yum的历史操作记录,然后通过<code>yum history undo ID</code>的方式回滚<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> yum <span class="built_in">history</span></span></span><br><span class="line">ID     | 命令行                   | 日期和时间       | 操作           | 更改</span><br><span class="line">-------------------------------------------------------------------------------</span><br><span class="line">    41 | autoremove               | 2019-05-04 02:26 | Removed        |    4</span><br><span class="line">    40 | install ibus-libpinyin   | 2019-05-04 02:15 | Install        |    1</span><br><span class="line">    39 | remove ibus-libpinyin    | 2019-05-04 02:12 | Removed        |    1</span><br><span class="line">... ...</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> yum <span class="built_in">history</span> undo 41</span></span><br></pre></td></tr></table></figure></p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul>
<li><a href="http://www.runoob.com/linux/linux-command-manual.html" target="_blank" rel="noopener">Linux命令大全</a></li>
</ul>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux进程/线程间同步与通信</title>
    <url>/2019/02/27/process-thread-communication-synchronize/</url>
    <content><![CDATA[<h1 id="进程-线程间通信方式"><a href="#进程-线程间通信方式" class="headerlink" title="进程/线程间通信方式"></a>进程/线程间通信方式</h1><ol>
<li><p>管道 (进程和线程) 基于流,半双工,数据只能向一个方向流动,双方通信时需要建立两个管道,管道缓存区有限</p>
<ol>
<li><p>无名管道 可用于具有亲缘关系的进程间通信</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pipe</span><span class="params">(<span class="keyword">int</span> fildes[<span class="number">2</span>])</span></span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>有名管道 可用于无血缘关系的进程间通信</p>
</li>
</ol>
</li>
<li><p>信号 (进程) </p>
 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="keyword">void</span> (*signal(<span class="keyword">int</span> sig, <span class="keyword">void</span> (*func)(<span class="keyword">int</span>)))(<span class="keyword">int</span>);</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sigaction</span><span class="params">(<span class="keyword">int</span> signum,<span class="keyword">const</span> struct sigaction *act,struct sigaction *oldact)</span></span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>消息队列 (进程和线程) 消息的链表,存放在内核,有消息队列标识符标识.不需要同步机制.</p>
 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/msg.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">msgget</span><span class="params">(<span class="keyword">key_t</span> key, <span class="keyword">int</span> msgflg)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">msgsnd</span><span class="params">(<span class="keyword">int</span> msqid, <span class="keyword">const</span> <span class="keyword">void</span> *msgp, <span class="keyword">size_t</span> msgsz, <span class="keyword">int</span> msgflg)</span></span>; </span><br><span class="line"><span class="function"><span class="keyword">ssize_t</span> <span class="title">msgrcv</span><span class="params">(<span class="keyword">int</span> msqid, <span class="keyword">void</span> *msgp, <span class="keyword">size_t</span> msgsz, <span class="keyword">long</span> msgtyp, <span class="keyword">int</span> msgflg)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">msgctl</span><span class="params">(<span class="keyword">int</span> msqid, <span class="keyword">int</span> cmd, struct msqid_ds *buf)</span></span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>共享内存 (进程和线程) 多个进程可以访问同一块内存空间,和其它通信机制结合使用,达到进程间的同步和互斥 速度快</p>
 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/ipc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/shm.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">shmget</span><span class="params">(<span class="keyword">key_t</span> key, <span class="keyword">size_t</span> size, <span class="keyword">int</span> shmflg)</span></span>; <span class="comment">//用来创建共享内存</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">shmat</span><span class="params">(<span class="keyword">int</span> shmid, <span class="keyword">const</span> <span class="keyword">void</span> *shmaddr, <span class="keyword">int</span> shmflg)</span></span>;    <span class="comment">//将共享内存段连接到进程地址空间</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">shmdt</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span> *shmaddr)</span></span>; <span class="comment">//将共享内存段与当前进程脱离</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">shmctl</span><span class="params">(<span class="keyword">int</span> shmid, <span class="keyword">int</span> cmd, struct shmid_ds *buf)</span></span>;   <span class="comment">//用于控制共享内存</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>信号量 (进程和线程) 进程间或线程间同步 一个计数器,每次调用wait将使信号量值减一,如果信号量值为0,则wait将阻塞.每次调用post操作将使信号量值加1</p>
 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;semaphore.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">sem_t</span> *<span class="title">sem_open</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *name, <span class="keyword">int</span> oflag, ...)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sem_init</span><span class="params">(<span class="keyword">sem_t</span> *sem, <span class="keyword">int</span> pshared, <span class="keyword">unsigned</span> value)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sem_close</span><span class="params">(<span class="keyword">sem_t</span> *sem)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sem_destroy</span><span class="params">(<span class="keyword">sem_t</span> *sem)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sem_wait</span><span class="params">(<span class="keyword">sem_t</span> *sem)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sem_trywait</span><span class="params">(<span class="keyword">sem_t</span> *sem)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">semctl</span><span class="params">(<span class="keyword">int</span> semid, <span class="keyword">int</span> semnum, <span class="keyword">int</span> cmd, ...)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">semget</span><span class="params">(<span class="keyword">key_t</span> key, <span class="keyword">int</span> nsems, <span class="keyword">int</span> semflg)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">semop</span><span class="params">(<span class="keyword">int</span> semid, struct sembuf *sops, <span class="keyword">size_t</span> nsops)</span></span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>socket套接字 (进程和线程) 基于流 跨服务器</p>
 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">socket</span><span class="params">(<span class="keyword">int</span> family, <span class="keyword">int</span> type, <span class="keyword">int</span> protocol)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bind</span><span class="params">(<span class="keyword">int</span> sockfd, <span class="keyword">const</span> struct sockaddr *myaddr, <span class="keyword">socklen_t</span> addrlen)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">listen</span><span class="params">(<span class="keyword">int</span> sockfd, <span class="keyword">int</span> backlog)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">accept</span><span class="params">(<span class="keyword">int</span> sockfd, struct sockaddr *client_addr, <span class="keyword">socklen_t</span> *len)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">connect</span><span class="params">(<span class="keyword">int</span> sock_fd, struct sockaddr *serv_addr,<span class="keyword">int</span> addrlen)</span></span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>互斥量 (线程) 线程同步方式 互斥锁,访问共享资源前加锁,访问完后释放互斥量,一次只能由一个线程运行 需要注意死锁</p>
 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_mutex_init</span><span class="params">(<span class="keyword">pthread_mutex_t</span> *<span class="keyword">restrict</span> mutex, <span class="keyword">const</span> <span class="keyword">pthread_mutexattr_t</span> *<span class="keyword">restrict</span> attr)</span></span>;  <span class="comment">//互斥量初始化</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_mutex_destroy</span><span class="params">(<span class="keyword">pthread_mutex_t</span> *<span class="keyword">restrict</span> mutex)</span></span>; <span class="comment">//互斥量销毁</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_mutex_lock</span><span class="params">(<span class="keyword">pthread_mutex_t</span> *mutex)</span></span>; <span class="comment">//加锁</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_mutex_trylock</span><span class="params">(<span class="keyword">pthread_mutex_t</span> *mutex)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_mutex_unlock</span><span class="params">(<span class="keyword">pthread_mutex_t</span> *mutex)</span></span>; <span class="comment">//解锁</span></span><br><span class="line">PTHREAD_MUTEX_NORMAL		一种标准互斥量类型，不做任何特殊的错误检查或死锁检测。</span><br><span class="line">PTHREAD_MUTEX_ERRORCHECK	此互斥量类型提供错误检查。</span><br><span class="line">PTHREAD_MUTEX_RECURSIVE		此互斥量类型允许同一线程在互斥量解锁之前对该互斥量进行多次加锁。递归互斥量维护锁的计数，在解锁次数和加锁次数不相同的情况下，不会释放锁。</span><br><span class="line">PTHREAD_MUTEX_DEFAULT		此互斥量类型可以提供默认特性和行为。</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_mutexattr_gettype</span><span class="params">(<span class="keyword">const</span> <span class="keyword">pthread_mutexattr_t</span> *<span class="keyword">restrict</span> attr, <span class="keyword">int</span> *<span class="keyword">restrict</span> type)</span></span>;    <span class="comment">//得到互斥量类型属性</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_mutexattr_settype</span><span class="params">(<span class="keyword">const</span> <span class="keyword">pthread_mutexattr_t</span> *attr, <span class="keyword">int</span> type)</span></span>;   <span class="comment">//设置互斥量类型属性</span></span><br></pre></td></tr></table></figure>
<ol>
<li>预防死锁:破环死锁产生的四个必要条件:互斥条件,不可剥夺条件,请求和保持条件,循环等待条件</li>
<li>避免死锁:每次资源分配前,应该计算此次分配资源的安全性,如果此次资源分配不会导致系统进入不安全状态,则分配资源,否则等待.算法:<strong>银行家算法</strong></li>
<li>检查死锁:检测到死锁后通过资源剥夺,撤销进程,进程回退等方法解除死锁.</li>
</ol>
</li>
<li><p>自旋锁 (线程) 线程同步方式 自旋锁不是通过休眠使进程阻塞,而是在获取锁之前一直处于忙等待阻塞状态(占用CPU),用于锁持有时间短,并且线程不希望在重新调度上花费大量成本的情况下</p>
 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_spin_init</span><span class="params">(<span class="keyword">pthread_spinlock_t</span> *lock, <span class="keyword">int</span> pshared)</span></span>;   <span class="comment">//初始化锁</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_spin_destroy</span><span class="params">(<span class="keyword">pthread_spinlock_t</span> *lock)</span></span>; <span class="comment">//销毁锁</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_spin_unlock</span><span class="params">(<span class="keyword">pthread_spinlock_t</span> *lock)</span></span>;  <span class="comment">//解锁</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_spin_lock</span><span class="params">(<span class="keyword">pthread_spinlock_t</span> *lock)</span></span>;  <span class="comment">//加锁</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_spin_trylock</span><span class="params">(<span class="keyword">pthread_spinlock_t</span> *lock)</span></span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>条件变量 (线程) 常和互斥锁一起使用,使用时,条件变量被用来阻塞一个线程,当条件不满足时,线程解开相应的互斥锁并等待条件发生变化,一旦其它线程改变了条件变量,条件变量将唤醒一个或多个被此条件变量阻塞的线程,这些线程重新锁定互斥锁并重新测试条件是否满足.</p>
 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_cond_init</span><span class="params">(<span class="keyword">pthread_cond_t</span> *cv,<span class="keyword">const</span> <span class="keyword">pthread_condattr_t</span> *cattr)</span></span>;  <span class="comment">//初始化条件变量</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_cond_wait</span><span class="params">(<span class="keyword">pthread_cond_t</span> *cv,<span class="keyword">pthread_mutex_t</span> *mutex)</span></span>; <span class="comment">//等待条件变量</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_cond_timedwait</span><span class="params">(<span class="keyword">pthread_cond_t</span> *cv, <span class="keyword">pthread_mutex_t</span> *mp, <span class="keyword">const</span> structtimespec * abstime)</span></span>; <span class="comment">//等待条件变量到某个时间</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_cond_signal</span><span class="params">(<span class="keyword">pthread_cond_t</span> *cv)</span></span>; <span class="comment">//通知条件变量的单个线程</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_cond_broadcast</span><span class="params">(<span class="keyword">pthread_cond_t</span> *cv)</span></span>; <span class="comment">//通知条件变量的多个线程</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_cond_destroy</span><span class="params">(<span class="keyword">pthread_cond_t</span> *cv)</span></span>; <span class="comment">//销毁条件变量</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>读写锁 (线程) 线程同步方式 三种状态 1.读模式加锁 2.写模式加锁 3.不加锁 一次只能有一个线程占用写模式的读写锁 但可以有多个线程同时占有读模式的读写锁</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_rwlock_destroy</span><span class="params">(<span class="keyword">pthread_rwlock_t</span> *rwlock)</span></span>;   <span class="comment">//销毁锁</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_rwlock_init</span><span class="params">(<span class="keyword">pthread_rwlock_t</span> *<span class="keyword">restrict</span> rwlock, <span class="keyword">const</span> <span class="keyword">pthread_rwlockattr_t</span> *<span class="keyword">restrict</span> attr)</span></span>; <span class="comment">//初始化锁</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_rwlock_unlock</span><span class="params">(<span class="keyword">pthread_rwlock_t</span> *rwlock)</span></span>;    <span class="comment">//解锁</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_rwlock_rdlock</span><span class="params">(<span class="keyword">pthread_rwlock_t</span> *rwlock)</span></span>;    <span class="comment">//读加锁</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_rwlock_tryrdlock</span><span class="params">(<span class="keyword">pthread_rwlock_t</span> *rwlock)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_rwlock_wrlock</span><span class="params">(<span class="keyword">pthread_rwlock_t</span> *rwlock)</span></span>;    <span class="comment">//写加锁</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_rwlock_trywrlock</span><span class="params">(<span class="keyword">pthread_rwlock_t</span> *rwlock)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_rwlock_timedrdlock</span><span class="params">(<span class="keyword">pthread_rwlock_t</span> *<span class="keyword">restrict</span> rwlock, <span class="keyword">const</span> struct timespec *<span class="keyword">restrict</span> abstime)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_rwlock_timedwrlock</span><span class="params">(<span class="keyword">pthread_rwlock_t</span> *<span class="keyword">restrict</span> rwlock, <span class="keyword">const</span> struct timespec *<span class="keyword">restrict</span> abstime)</span></span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>线程信号量 (线程) </p>
</li>
<li>全局变量 (线程)</li>
</ol>
<h1 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h1><p><img src="/Picture/pipe.png" alt="管道"></p>
<h1 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h1><p><img src="/Picture/消息队列msg.png" alt="消息队列"></p>
<h1 id="信号量"><a href="#信号量" class="headerlink" title="信号量"></a>信号量</h1><p><img src="/Picture/信号量sem.png" alt="信号量"></p>
<h1 id="共享内存"><a href="#共享内存" class="headerlink" title="共享内存"></a>共享内存</h1><p><img src="/Picture/共享内存shm.png" alt="共享内存"></p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>linux性能优化</title>
    <url>/2018/12/08/linux-performance-optimization/</url>
    <content><![CDATA[<p>linux性能优化学习</p>
<h1 id="性能指标"><a href="#性能指标" class="headerlink" title="性能指标"></a>性能指标</h1><p><strong>高并发和响应快</strong> 两个核心指标:<strong>吞吐和延时</strong>,从<strong>应用负载视角</strong>考察性能,直接影响产品终端的用户体验,相对应的从<strong>系统资源</strong>出发的指标(资源使用率,饱和度等)<br><img src="/Picture/linux-performance-optimization_1.png" alt="性能指标两个角度"><br>性能问题的本质:系统资源到达瓶颈,请求处理不够快,无法支撑更多请求<br>性能分析:找出应用或系统的瓶颈,并设法避免或缓解,更高效的利用系统资源处理更多请求<br><img src="/Picture/linux-performance-optimization_2.png" alt="Linux性能工具图谱"><br><img src="/Picture/linux-performance-optimization_3.png" alt="Linux性能优化思维导图"></p>
<h1 id="平均负载"><a href="#平均负载" class="headerlink" title="平均负载"></a>平均负载</h1><p>使用<code>uptime</code>可以查看系统负载<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ uptime</span><br><span class="line"> 00:38:27 up 62 days, 14 min,  2 users,  load average: 0.00, 0.04, 0.07</span><br></pre></td></tr></table></figure></p>
<p>显示内容说明:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">00:38:27                           系统当前时间</span><br><span class="line">up 62 days, 14 min                 主机已运行时间</span><br><span class="line">2 users                            用户连接数</span><br><span class="line">load average: 0.00, 0.04, 0.07     系统平均负载,统计最近1,5,15分钟的系统平均负载</span><br></pre></td></tr></table></figure></p>
<p>系统平均负载:指单位时间内，系统处于<strong>可运行状态</strong>和<strong>不可中断状态</strong>的平均进程数, 即<strong>平均活跃进程数</strong><br>可运行状态:正在使用CPU和正在等待CPU的进程(使用ps命令看到的处于R状态的进程)<br>不可中断状态:正处于内核态不可被打断的关键流程中的进程(不可中断状态是系统对进程和硬件设备的一种保护机制)<br>平均活跃进程不仅包括正在使用CPU的进程也包括等待CPU和等待I/O的进程,因此平均负载高不一定是CPU使用率高,也可能是I/O更繁忙了</p>
<p>系统逻辑CPU核心数可以使用<a href="http://man.linuxde.net/top" target="_blank" rel="noopener">top</a>命令或者从文件/proc/cpuinfo中读取<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ grep &apos;model name&apos; /proc/cpuinfo | wc -l</span><br><span class="line">1</span><br></pre></td></tr></table></figure></p>
<p>uptime命令会显示1分钟,5分钟,15分钟的平均负载,可以用来分析<strong>系统负载趋势</strong><br>系统负载异常需要结合历史数据,判断负载的变化趋势,当负载有明显升高趋势时再分析调查</p>
<ol>
<li><p>stress命令是Linux系统压力测试工具 —cpu cpu压测选项，-i io压测选项，-c 进程数压测选项，—timeout 执行时间</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">stress --cpu 1 --timeout 600  CPU密集型进程 模拟一个CPU使用率100%的场景 持续600s</span><br><span class="line">stress -i 1 --timeout 600 I/O密集型进程 模拟I/O压力 持续600s</span><br><span class="line">stress -c 8 --timeout 600 大量进程的场景 模拟8个进程 持续600s</span><br></pre></td></tr></table></figure>
</li>
<li><p>sysstat包,包含了常用的Linux性能工具,用来监控和分析系统性能</p>
<ol>
<li><p><a href="http://man.linuxde.net/mpstat" target="_blank" rel="noopener">mpstat</a>多核CPU性能分析工具,用来实时查看每个CPU的性能指标和所有CPU的平均指标</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ mpstat -P ALL 5 3 显示所有CPU的指标,并每间隔5s输出一组数据,一共输出3组</span><br><span class="line">Linux 3.10.0-862.14.4.el7.x86_64 (VM_187_252_centos)    01/03/2019  _x86_64_    (1 CPU)</span><br><span class="line"></span><br><span class="line">01:41:06 PM  CPU    %usr   %nice    %sys %iowait    %irq   %soft  %steal  %guest  %gnice   %idle</span><br><span class="line">01:41:11 PM  all    0.20    0.00    0.20    0.20    0.00    0.00    0.00    0.00    0.00   99.40</span><br><span class="line">01:41:11 PM    0    0.20    0.00    0.20    0.20    0.00    0.00    0.00    0.00    0.00   99.40</span><br><span class="line"></span><br><span class="line">01:41:11 PM  CPU    %usr   %nice    %sys %iowait    %irq   %soft  %steal  %guest  %gnice   %idle</span><br><span class="line">01:41:16 PM  all    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00  100.00</span><br><span class="line">01:41:16 PM    0    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00  100.00</span><br><span class="line"></span><br><span class="line">01:41:16 PM  CPU    %usr   %nice    %sys %iowait    %irq   %soft  %steal  %guest  %gnice   %idle</span><br><span class="line">01:41:21 PM  all    0.20    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00   99.80</span><br><span class="line">01:41:21 PM    0    0.20    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00   99.80</span><br><span class="line"></span><br><span class="line">Average:     CPU    %usr   %nice    %sys %iowait    %irq   %soft  %steal  %guest  %gnice   %idle</span><br><span class="line">Average:     all    0.13    0.00    0.07    0.07    0.00    0.00    0.00    0.00    0.00   99.73</span><br><span class="line">Average:       0    0.13    0.00    0.07    0.07    0.00    0.00    0.00    0.00    0.00   99.73</span><br></pre></td></tr></table></figure>
</li>
<li><p><a href="http://linux.51yip.com/search/pidstat" target="_blank" rel="noopener">pidstat</a>进程性能分析工具,用来实时查看进程的 CPU、内存、I/O 以及上下文切换等性能指标</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ pidstat -u 5 1 每5s输出一组数据</span><br><span class="line">Linux 3.10.0-862.14.4.el7.x86_64 (VM_187_252_centos)    01/03/2019  _x86_64_    (1 CPU)</span><br><span class="line"></span><br><span class="line">01:46:19 PM   UID       PID    %usr %system  %guest    %CPU   CPU  Command</span><br><span class="line">01:46:24 PM  1000     21765    0.20    0.00    0.00    0.20     0  vim</span><br><span class="line">01:46:24 PM  1000     22625    0.00    0.20    0.00    0.20     0  pidstat</span><br><span class="line">01:46:24 PM   994     28861    0.00    0.20    0.00    0.20     0  redis-server</span><br><span class="line"></span><br><span class="line">Average:      UID       PID    %usr %system  %guest    %CPU   CPU  Command</span><br><span class="line">Average:     1000     21765    0.20    0.00    0.00    0.20     -  vim</span><br><span class="line">Average:     1000     22625    0.00    0.20    0.00    0.20     -  pidstat</span><br><span class="line">Average:      994     28861    0.00    0.20    0.00    0.20     -  redis-server</span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><p><a href="http://man.linuxde.net/watch" target="_blank" rel="noopener">watch</a>以周期性的方式执行给定的指令，指令输出以全屏方式显示</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">watch -d uptime</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="CPU上下文切换"><a href="#CPU上下文切换" class="headerlink" title="CPU上下文切换"></a>CPU上下文切换</h1><h2 id="CPU上下文切换的工作原理"><a href="#CPU上下文切换的工作原理" class="headerlink" title="CPU上下文切换的工作原理"></a>CPU上下文切换的工作原理</h2><p>CPU寄存器是CPU内置的容量小,但速度极快的内存. 程序计数器(PC)是用来存储CPU正在执行的指令位置,或者即将执行的下一条指令位置. CPU寄存器和程序计数器都是CPU在运行任何任务之前,必须的依赖环境.CPU寄存器和程序计数器被称为CPU上下文.<br><img src="/Picture/cpu_1.png" alt="CPU上下文切换"><br>CPU上下文切换:把前一个任务的CPU上下文保存起来,然后加载新任务的上下文到CPU寄存器和程序计数器中,最后再跳转到程序计数器所指的新位置,运行新任务.保存下来的上下文,存储在系统内核中,在系统再次调度执行时再次加载进来,保证任务原先的状态不受影响,让任务看起来还是连续运行的.</p>
<p>CPU上下文切换根据任务不同,分为3个不同场景:进程上下文切换,线程上下文切换,中断上下文切换</p>
<h3 id="进程上下文切换"><a href="#进程上下文切换" class="headerlink" title="进程上下文切换"></a>进程上下文切换</h3><p>Linux按照特权等级把进程的运行空间分为内核空间和用户空间.</p>
<ul>
<li>内核空间具有最高权限,可以访问所有资源</li>
<li>用户空间只能访问受限资源,不能直接访问内存等硬件设备,必须通过系统调用陷入到内核中,才能访问这些资源</li>
</ul>
<p>即:进程既可以在用户空间运行,又可以在内核空间运行,进程在用户空间运行称为进程的用户态,陷入到内核空间的时候,称为进程的内核态<br>从用户态到内核态的转变,需要通过系统调用完成.<br><strong>系统调用会发生2次CPU上下文的切换</strong>,从用户态到内核态,CPU寄存器里用户态的指令位置需要先保存起来,CPU寄存器再更新为内核态指令的新位置,最后跳到内核态运行内核任务.系统调用后,CPU寄存器需要恢复原来保存用户态,然后再切换到用户空间,继续运行程序.<br><strong>系统调用过程不涉及虚拟内存等进程用户态的资源,也不切换进程</strong></p>
<ul>
<li>进程上下文切换是指从一个进程切换到另一个进程运行</li>
<li>系统调用过程一直在同一个进程运行</li>
</ul>
<p>进程是由内核来管理和调度,进程的切换只能发生在内核态,进程的上下文包括虚拟内存,栈,全局变量等用户空间的资源和内核堆栈,寄存器等内核空间的状态<br>进程的上下文切换:在保存当前进程的内核状态和CPU寄存器之前,需要将该进程的虚拟内存,栈等保存下来,加载了下一个进程的内核态后,需要刷下进程的虚拟内存和用户栈<br><img src="/Picture/cpu_2.png" alt="进程上下文切换"><br>进程上下文切换频繁,很容易导致CPU将大量时间耗费在寄存器,内核栈以及虚拟内存等资源的保存和恢复上,缩短了真正运行进程的时间,导致平均负载升高<br>Linux通过TLB(快表,虚拟地址到物理地址的转换表)管理虚拟内存到物理内存的映射关系,当虚拟内存更新后,TLB也需要更新,内存访问也会随之变慢.多处理器系统,缓存被多个处理器共享,刷新缓存不仅影响当前处理器的进程,也影响共享缓存其它处理器的进程.<br>进程上下文切换的时机:</p>
<ol>
<li>进程时间片耗尽</li>
<li>系统资源不足,进程被挂起,先执行其他进程,等资源满足时再运行</li>
<li>进程sleep主动挂起</li>
<li>有更高优先级进程时</li>
<li>有硬件中断时,CPU上进程被挂起,转而执行内核中的中断服务程序</li>
</ol>
<h3 id="线程上下文切换"><a href="#线程上下文切换" class="headerlink" title="线程上下文切换"></a>线程上下文切换</h3><p>线程和进程的最大区别:<strong>线程是调度的基本单位,进程是资源拥有的基本单位</strong></p>
<ul>
<li>当进程只有一个线程时,可以认为进程就等于线程</li>
<li>当进程拥有多个线程时,这些线程共享相同的虚拟内存和全局变量资源,这些资源在上下文切换中不需要修改</li>
<li>线程也有自己的私有数据(例如栈和寄存器等),在上下文切换时需要保存</li>
</ul>
<p>线程上下文切换:</p>
<ol>
<li>两个线程数据不同进程,资源不共享,上下文切换过程与进程上下文切换一样</li>
<li>两个线程属于同一个进程,有许多共享资源,切换时,虚拟内存等共享资源保持不动,只切换线程的私有数据,寄存器等不共享资源.</li>
</ol>
<h3 id="中断上下文切换"><a href="#中断上下文切换" class="headerlink" title="中断上下文切换"></a>中断上下文切换</h3><p><strong>中断处理会打断进程的正常调度和执行</strong>,转而调用中断处理程序,响应设备事件<br>中断上下文切换不涉及进程的用户态,中断上下文只包括内核态中断服务程序处理所必须的状态,包括CPU寄存器,内核堆栈,硬件中断参数等</p>
<h2 id="系统上下文切换情况的查看"><a href="#系统上下文切换情况的查看" class="headerlink" title="系统上下文切换情况的查看"></a>系统上下文切换情况的查看</h2><p><a href="http://man.linuxde.net/vmstat" target="_blank" rel="noopener">vmstat</a>主要用来分析系统内存使用情况,也可分析CPU上下文切换和中断次数<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#每隔5s输出一次数据</span><br><span class="line">$ vmstat 5</span><br><span class="line">procs -----------memory---------- ---swap-- -----io---- -system-- ------cpu-----</span><br><span class="line"> r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa st</span><br><span class="line"> 2  0    520 894220 230456 519308    0    0     2    29   33   53  0  0 99  0  0</span><br><span class="line"> 0  0    520 893940 230460 519348    0    0     0    13   46   66  0  0 99  0  0</span><br></pre></td></tr></table></figure></p>
<ul>
<li>cs(context switch)是每秒上下文切换次数</li>
<li>in(interrupt)是每秒中断次数</li>
<li>r(Running or Runnable)是就绪队列长度(正在运行或等待CPU的进程数)</li>
<li>b(Blocked)是处于不可中断睡眠状态的进程数</li>
</ul>
<p>vmstat给出系统总体的上下文切换情况,每个进程的详细情况,需要使用pisstat查看<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#每隔5s输出一组数据 -w参数报告任务切换情况</span><br><span class="line">$ pidstat -w 5</span><br><span class="line">Linux 3.10.0-862.14.4.el7.x86_64 (VM_187_252_centos) 	01/15/2019 	_x86_64_	(1 CPU)</span><br><span class="line"></span><br><span class="line">11:55:15 PM   UID       PID   cswch/s nvcswch/s  Command</span><br><span class="line">11:55:20 PM     0         3      0.80      0.00  ksoftirqd/0</span><br><span class="line">11:55:20 PM     0         9      9.38      0.00  rcu_sched</span><br><span class="line">11:55:20 PM     0        11      0.20      0.00  watchdog/0</span><br><span class="line">11:55:20 PM     0        31      0.20      0.00  khugepaged</span><br><span class="line">11:55:20 PM     0       219      0.80      0.00  kworker/0:1H</span><br><span class="line">11:55:20 PM     0       221      0.20      0.00  kworker/u2:2</span><br><span class="line">11:55:20 PM     0       249      0.80      0.00  jbd2/vda1-8</span><br><span class="line">11:55:20 PM     0       698      1.20      0.00  smbd</span><br><span class="line">11:55:20 PM     0      1306      0.40      0.00  cleanupd</span><br><span class="line">11:55:20 PM  1000     25163      1.00      0.00  python36</span><br><span class="line">11:55:20 PM  1000     25355      0.40      0.00  sshd</span><br><span class="line">11:55:20 PM  1000     25634      0.20      0.00  sshd</span><br><span class="line">11:55:20 PM     0     26461      1.20      0.00  kworker/0:0</span><br><span class="line">11:55:20 PM  1000     26575      0.20      0.00  pidstat</span><br></pre></td></tr></table></figure></p>
<ul>
<li>cswch 每秒自愿上下文切换的次数 指进程无法获取所需资源,导致的上下文切换</li>
<li>nvcswch 每秒非自愿上下文切换的次数 指进程由于时间片已到等原因,被系统强制调度,进而发生的上下文切换</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#-wt参数输出线程的上下文切换指标</span><br><span class="line">$ pidstat -wt 5</span><br><span class="line">Linux 3.10.0-862.14.4.el7.x86_64 (VM_187_252_centos) 	01/16/2019 	_x86_64_	(1 CPU)</span><br><span class="line"></span><br><span class="line">12:10:12 AM   UID      TGID       TID   cswch/s nvcswch/s  Command</span><br><span class="line">12:10:17 AM     0         3         -      0.40      0.00  ksoftirqd/0</span><br><span class="line">12:10:17 AM     0         -         3      0.40      0.00  |__ksoftirqd/0</span><br><span class="line">12:10:17 AM     0         9         -      0.80      0.00  rcu_sched</span><br><span class="line">12:10:17 AM     0         -         9      0.80      0.00  |__rcu_sched</span><br><span class="line">12:10:17 AM     0        11         -      0.40      0.00  watchdog/0</span><br><span class="line">12:10:17 AM     0         -        11      0.40      0.00  |__watchdog/0</span><br><span class="line">12:10:17 AM     0        31         -      0.20      0.00  khugepaged</span><br><span class="line">12:10:17 AM     0         -        31      0.20      0.00  |__khugepaged</span><br><span class="line">12:10:17 AM     0       219         -      0.80      0.00  kworker/0:1H</span><br><span class="line">12:10:17 AM     0         -       219      0.80      0.00  |__kworker/0:1H</span><br><span class="line">12:10:17 AM     0       221         -      0.20      0.00  kworker/u2:2</span><br><span class="line">12:10:17 AM     0         -       221      0.20      0.00  |__kworker/u2:2</span><br><span class="line">12:10:17 AM     0       249         -      0.60      0.00  jbd2/vda1-8</span><br><span class="line">12:10:17 AM     0         -       249      0.60      0.00  |__jbd2/vda1-8</span><br><span class="line">12:10:17 AM     0         -      1308      1.00      0.00  |__tuned</span><br><span class="line">12:10:17 AM     0         -       901      1.20      0.00  |__in:imjournal</span><br><span class="line">12:10:17 AM    27         -      1278      1.99      0.00  |__mysqld</span><br><span class="line">12:10:17 AM    27         -      1279      1.99      0.00  |__mysqld</span><br><span class="line">12:10:17 AM    27         -      1280      1.99      0.00  |__mysqld</span><br><span class="line">12:10:17 AM    27         -      1281      1.99      0.00  |__mysqld</span><br><span class="line">12:10:17 AM    27         -      1282      1.99      0.00  |__mysqld</span><br><span class="line">12:10:17 AM    27         -      1283      1.99      0.00  |__mysqld</span><br><span class="line">12:10:17 AM    27         -      1284      1.99      0.00  |__mysqld</span><br><span class="line">12:10:17 AM    27         -      1285      1.99      0.00  |__mysqld</span><br><span class="line">12:10:17 AM    27         -      1286      1.99      0.00  |__mysqld</span><br><span class="line">12:10:17 AM    27         -      1287      1.99      0.00  |__mysqld</span><br><span class="line">12:10:17 AM    27         -      1289      1.00      0.00  |__mysqld</span><br><span class="line">12:10:17 AM    27         -      1290      1.00      0.00  |__mysqld</span><br><span class="line">12:10:17 AM    27         -      1291      0.20      0.00  |__mysqld</span><br><span class="line">12:10:17 AM    27         -      1292      0.20      0.00  |__mysqld</span><br></pre></td></tr></table></figure>
<h1 id="CPU使用率"><a href="#CPU使用率" class="headerlink" title="CPU使用率"></a>CPU使用率</h1><ul>
<li>user(us),用户态CPU时间,不包含nice时间,包括了guest时间</li>
<li>nice(ni),低优先级用户态时间,即进程优先级被调整为1-19(nice取值范围为-20到19,数值越大优先级反而越低)之间时的CPU时间</li>
<li>system(sys),内核态CPU时间</li>
<li>idle(id),空闲时间,不包括等待I/O的时间(iowait)</li>
<li>iowait(wa),等待I/O的CPU时间</li>
<li>irq(hi),处理硬中断的CPU时间</li>
<li>softirq(si),处理软中断的CPU时间</li>
<li>steal(st),当系统运行在虚拟机中的时候,被其他虚拟机占用的CPU时间</li>
<li>guest(guest),代表通过虚拟化运行其他操作系统的时间(运行虚拟机的CPU时间)</li>
<li>guest_nice(gnice),代表以低优先级运行虚拟机的时间</li>
</ul>
<p><strong>CPU使用率:除了空闲时间外的其他时间占总CPU时间的百分比</strong><br>性能工具计算CPU使用率取一段时间的两次值,做差后,再计算这段时间内的平均CPU使用率<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">平均CPU使用率=1-((空闲时间new-空间时间old)/(总CPU时间new-总CPU时间old))</span><br></pre></td></tr></table></figure></p>
<p>由于性能工具给出的都是一段时间平均CPU使用率,所以要注意间隔时间的设置.(多个性能工具对比分析时,要保证它们用的相同的间隔)</p>
<h2 id="CPU使用率查看"><a href="#CPU使用率查看" class="headerlink" title="CPU使用率查看"></a>CPU使用率查看</h2><ul>
<li>top显示系统总体的CPU和内存使用情况,以及各个进程的资源使用情况</li>
<li>ps只显示各个进程的资源使用情况</li>
<li>pidstat专门分析每个进程占用系统资源的工具</li>
</ul>
<h2 id="CPU使用过高使用perf分析"><a href="#CPU使用过高使用perf分析" class="headerlink" title="CPU使用过高使用perf分析"></a>CPU使用过高使用perf分析</h2><p><a href="http://linux.51yip.com/search/perf" target="_blank" rel="noopener">perf</a>是Linux下的性能分析工具,能够进行函数与指令级的热点查找</p>
<ul>
<li>perf top实时显示占用CPU时钟最多的函数或指令,用来查找热点函数或者指令</li>
<li>perf record提供保存数据功能</li>
<li>perf report解析展示record的数据</li>
</ul>
<p>perf top和perf record添加<code>-g</code>参数开启调用关系采样,方便根据调用链分析性能问题</p>
<h2 id="常规方法无法找到CPU使用率问题"><a href="#常规方法无法找到CPU使用率问题" class="headerlink" title="常规方法无法找到CPU使用率问题"></a>常规方法无法找到CPU使用率问题</h2><ol>
<li>应用直接调用了其他二进制程序,运行时间较短,通过top等工具不易发现</li>
<li>应用本身不断崩溃重启,启动过程资源初始化,很可能占用相当多的CPU</li>
</ol>
<p>可以通过<a href="http://man.linuxde.net/pstree" target="_blank" rel="noopener">pstree</a>找到进程的父进程,再从父进程所在应用入手,排查问题根源</p>
<h1 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h1><h2 id="进程状态"><a href="#进程状态" class="headerlink" title="进程状态"></a>进程状态</h2><ol>
<li>R(Running或Runnable)表示进程在CPU的就绪队列中,正在运行或正在等待运行</li>
<li>D(Disk Sleep)<strong>不可中断睡眠状态</strong>,一般表示进程正在跟硬件交互,并且交互过程不允许被其他进程或中断打断</li>
<li>Z(Zombie)<strong>僵尸进程</strong>,进程实际已经结束了,但父进程还没有回收它的资源</li>
<li>S(Interruptible Sleep)可中断睡眠状态,表示进程因为等待某个事件而被系统挂起.当进程等待的事件发生时,它将被唤醒并进入R状态</li>
<li>I(Idle)空闲状态,用在不可中断睡眠的内核线程上.</li>
<li>T或t(Stopped或Traced),表示进程处于暂停或者跟踪状态</li>
<li>X(Dead)表示进程已经消亡(top或者ps命令中不会看到它)</li>
</ol>
<p><a href="http://man.linuxde.net/dstat" target="_blank" rel="noopener">dstat</a>是一个全能系统信息统计工具<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ dstat </span><br><span class="line">You did not select any stats, using -cdngy by default.</span><br><span class="line">----total-cpu-usage---- -dsk/total- -net/total- ---paging-- ---system--</span><br><span class="line">usr sys idl wai hiq siq| read  writ| recv  send|  in   out | int   csw </span><br><span class="line">  9   2  72  17   0   0|6902k   88k|   0     0 |1550B   22k| 501   500 </span><br><span class="line"> 96   4   0   0   0   0|   0     0 |  54B  154B|   0     0 |1120   450 </span><br><span class="line"> 96   4   0   0   0   0|   0     0 | 164B 1188B|   0     0 |1163   462 </span><br><span class="line"> 88  12   0   0   0   0|   0     0 | 164B  456B|   0     0 |1156   579 </span><br><span class="line"> 23   4  70   3   0   0|  12k  192k| 164B  456B|   0     0 | 503   631 </span><br><span class="line">  1   2  95   2   0   0| 116k    0 |1090B 1300B|   0     0 | 267   353</span><br></pre></td></tr></table></figure></p>
<p>僵尸进程使用pstree找出其父进程,在父进程中解决        </p>
<h1 id="软中断"><a href="#软中断" class="headerlink" title="软中断"></a>软中断</h1><p>中断是一种<strong>异步的事件处理机制</strong>,可以提高系统的并发处理能力<br>中断处理程序会打断其他进程的进行,所以,<strong>中断处理程序需要尽可能快的运行,减少对正常进程运行调度的影响</strong><br>Linux将中断过程分为两个阶段,解决中断处理程序执行过长和中断丢失的问题</p>
<ul>
<li>上半部:快速处理中断,在中断禁止模式运行,主要处理跟硬件紧密相关的或时间敏感的工作,<strong>直接处理硬件请求,硬中断,快速执行</strong></li>
<li>下半部:延迟处理上半部未完成的工作,通常以内核线程的方式运行,<strong>由内核触发,软中断,延迟执行</strong></li>
</ul>
<h2 id="软中断和内核线程查看"><a href="#软中断和内核线程查看" class="headerlink" title="软中断和内核线程查看"></a>软中断和内核线程查看</h2><p>/proc/softirqs 软中断运行情况<br>/proc/interrupts 硬中断运行情况</p>
<p>软中断内核线程 ksoftirqd/CPU 编号<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ ps aux | grep ksoftirqd | grep -v grep</span><br><span class="line">root         3  0.0  0.0      0     0 ?        S    Feb19   0:08 [ksoftirqd/0]</span><br></pre></td></tr></table></figure></p>
<h1 id="CPU性能"><a href="#CPU性能" class="headerlink" title="CPU性能"></a>CPU性能</h1><h2 id="CPU性能指标"><a href="#CPU性能指标" class="headerlink" title="CPU性能指标"></a>CPU性能指标</h2><p><img src="/Picture/cpu_3.png" alt="CPU性能指标"></p>
<h2 id="CPU性能工具"><a href="#CPU性能工具" class="headerlink" title="CPU性能工具"></a>CPU性能工具</h2><h3 id="根据指标找工具"><a href="#根据指标找工具" class="headerlink" title="根据指标找工具"></a>根据指标找工具</h3><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">性能指标</th>
<th style="text-align:left">工具</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">平均负载</td>
<td style="text-align:left">uptime top</td>
<td style="text-align:left">uptime最简单; top提供更全的指标</td>
</tr>
<tr>
<td style="text-align:left">系统整体CPU使用率</td>
<td style="text-align:left">vmstat mpstat top sar /proc/stat</td>
<td style="text-align:left">top vmstat mpstat只可以动态查看,sar可以记录历史数据 /proc/stat是其它性能工具的数据来源</td>
</tr>
<tr>
<td style="text-align:left">进程CPU使用率</td>
<td style="text-align:left">top pidstat ps htop atop</td>
<td style="text-align:left">top和ps可以按CPU使用率给进程排序,而pidstat只显示实际用了CPU的进程 htop和atop以不同颜色显示更直观</td>
</tr>
<tr>
<td style="text-align:left">系统上下文切换</td>
<td style="text-align:left">vmstat</td>
<td style="text-align:left">除了系统上下文切换数,还提供运行状态和不可中断状态进程数量</td>
</tr>
<tr>
<td style="text-align:left">进程上下文切换</td>
<td style="text-align:left">pidstat</td>
<td style="text-align:left">-w参数</td>
</tr>
<tr>
<td style="text-align:left">软中断</td>
<td style="text-align:left">top /proc/softirqs mpstat</td>
<td style="text-align:left">top提供软中断CPU使用率 /proc/softirqs和mpstat提供各种软中断在每个CPU上的运行次数</td>
</tr>
<tr>
<td style="text-align:left">硬中断</td>
<td style="text-align:left">vmstat /proc/interrupts</td>
<td style="text-align:left">vmstat提供总的中断次数 /proc/interrupts提供各个中断在每个CPU上运行的基类次数</td>
</tr>
<tr>
<td style="text-align:left">网络</td>
<td style="text-align:left">dstat sar tcpdump</td>
<td style="text-align:left">dstat sar提供总的网络接收和发送情况 tcpdump动态抓取正在进行的网络通信</td>
</tr>
<tr>
<td style="text-align:left">I/O</td>
<td style="text-align:left">dstat sar</td>
<td style="text-align:left">dstat和sar都提供了I/O的整体情况</td>
</tr>
<tr>
<td style="text-align:left">CPU个数</td>
<td style="text-align:left">/proc/cpuinfo lscpu</td>
<td style="text-align:left">lscpu更直观</td>
</tr>
<tr>
<td style="text-align:left">事件剖析</td>
<td style="text-align:left">perf execsnoop</td>
<td style="text-align:left">perf可以用来分析CPU的缓存以及内核调用链,execsnoop用来监控短时进程</td>
</tr>
</tbody>
</table>
</div>
<h3 id="根据工具查指标"><a href="#根据工具查指标" class="headerlink" title="根据工具查指标"></a>根据工具查指标</h3><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">性能指标</th>
<th style="text-align:left">CPU性能指标</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">uptime</td>
<td style="text-align:left">平均负载</td>
</tr>
<tr>
<td style="text-align:left">top</td>
<td style="text-align:left">平均负载、运行队列、整体的CPU使用率以及每个进程的状态和CPU使用率</td>
</tr>
<tr>
<td style="text-align:left">htop</td>
<td style="text-align:left">top增强版,以不同颜色区分不同类型的进程,更直观</td>
</tr>
<tr>
<td style="text-align:left">atop</td>
<td style="text-align:left">CPU/内存/磁盘/网络等各种资源的全面监控</td>
</tr>
<tr>
<td style="text-align:left">vmstat</td>
<td style="text-align:left">系统整体的CPU使用率/上下文切换次数/中断次数,包括处于运行和不可中断状态的进程数量</td>
</tr>
<tr>
<td style="text-align:left">mpstat</td>
<td style="text-align:left">每个CPU的使用率和软中断次数</td>
</tr>
<tr>
<td style="text-align:left">pidstat</td>
<td style="text-align:left">进程和线程的CPU使用率/中断上下文切换次数</td>
</tr>
<tr>
<td style="text-align:left">/proc/softirqs</td>
<td style="text-align:left">软中断类型和在每个CPU上的累计中断次数</td>
</tr>
<tr>
<td style="text-align:left">/proc/interrupts</td>
<td style="text-align:left">硬中断类型和在每个CPU上的累计中断次数</td>
</tr>
<tr>
<td style="text-align:left">ps</td>
<td style="text-align:left">每个进程的状态和CPU使用率</td>
</tr>
<tr>
<td style="text-align:left">pstree</td>
<td style="text-align:left">进程的父子关系</td>
</tr>
<tr>
<td style="text-align:left">dstat</td>
<td style="text-align:left">系统整体的CPU使用率</td>
</tr>
<tr>
<td style="text-align:left">sar</td>
<td style="text-align:left">系统整体CPU使用率,包括可配置的历史数据</td>
</tr>
<tr>
<td style="text-align:left">strace</td>
<td style="text-align:left">进程的系统调用</td>
</tr>
<tr>
<td style="text-align:left">perf</td>
<td style="text-align:left">CPU性能事件剖析,调用链/CPU缓存/CPU调度等</td>
</tr>
<tr>
<td style="text-align:left">execsnoop</td>
<td style="text-align:left">监控短时进程</td>
</tr>
</tbody>
</table>
</div>
<h3 id="性能分析"><a href="#性能分析" class="headerlink" title="性能分析"></a>性能分析</h3><p><img src="/Picture/cpu_4.png" alt="CPU性能分析"></p>
<h2 id="CPU性能优化"><a href="#CPU性能优化" class="headerlink" title="CPU性能优化"></a>CPU性能优化</h2><h3 id="CPU优化"><a href="#CPU优化" class="headerlink" title="CPU优化"></a>CPU优化</h3><ol>
<li>应用程序优化<ol>
<li>编译器优化,编译器优化选项 例如:gcc优化选项-O2</li>
<li>算法优化</li>
<li>异步处理</li>
<li>多线程代替多进程</li>
<li>善用缓存</li>
</ol>
</li>
<li>系统优化<ol>
<li>CPU绑定</li>
<li>CPU独占</li>
<li>优先级调整</li>
<li>为进程设置资源限制</li>
<li>NUMA(Non-Uniform Memory Access)优化</li>
<li>中断负载均衡</li>
</ol>
</li>
</ol>
<h2 id="Linux内存"><a href="#Linux内存" class="headerlink" title="Linux内存"></a>Linux内存</h2><h3 id="Linux内存原理"><a href="#Linux内存原理" class="headerlink" title="Linux内存原理"></a>Linux内存原理</h3><p><a href="https://www.casezheng.date/2019/02/24/linux-ram/#more">Linux内存简介</a></p>
<h3 id="Linux内存使用情况查看"><a href="#Linux内存使用情况查看" class="headerlink" title="Linux内存使用情况查看"></a>Linux内存使用情况查看</h3><p><a href="http://man.linuxde.net/free" target="_blank" rel="noopener">free</a>命令可以查看系统内存使用情况<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ free</span><br><span class="line">            total        used        free      shared  buff/cache   available</span><br><span class="line">Mem:        1882860      589828      387196         112      905836     1090592</span><br><span class="line">Swap:       2047996      105736     1942260</span><br><span class="line">$ free -m</span><br><span class="line">            total        used        free      shared  buff/cache   available</span><br><span class="line">Mem:        1838         576         377           0         885        1064</span><br><span class="line">Swap:       1999         103        1896</span><br></pre></td></tr></table></figure></p>
<p>Mem物理内存使用情况,Swap交换分区使用情况</p>
<ol>
<li>total总内存大小</li>
<li>used已使用内存大小,包含共享内存</li>
<li>free未使用内存大小</li>
<li>shared共享内存大小</li>
<li>buff/cache缓存和缓冲区大小</li>
<li>available新进程可用内存大小,不仅包含未使用内存,也包括可回收的缓存,一般会比未使用内存大,但并不是所有缓存都可以被回收.</li>
</ol>
<p>free显示整个系统内存使用情况,进程内存使用情况用<a href="http://man.linuxde.net/top" target="_blank" rel="noopener">top</a>或ps等工具查看.<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Tasks:  88 total,   1 running,  87 sleeping,   0 stopped,   0 zombie</span><br><span class="line">%Cpu(s):  1.7 us,  0.7 sy,  0.0 ni, 97.7 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</span><br><span class="line">KiB Mem :  1882860 total,   384436 free,   590704 used,   907720 buff/cache</span><br><span class="line">KiB Swap:  2047996 total,  1942260 free,   105736 used.  1089708 avail Mem </span><br><span class="line">  PID USER      PR  NI    VIRT    RES    SHR S %CPU %MEM     TIME+ COMMAND</span><br><span class="line">22272 root      20   0 3438356 326068   6172 S  0.3 17.3  27:45.68 java</span><br><span class="line">16200 root      20   0 2488224  55908   6636 S  0.3  3.0   8:51.48 java</span><br><span class="line">  538 CaseZhe+  20   0  945436  52264   7216 S  0.3  2.8   1:31.74 vim</span><br><span class="line">  547 CaseZhe+  20   0 1113148  51592  25008 S  0.0  2.7   0:00.80 python36</span><br></pre></td></tr></table></figure></p>
<ol>
<li>VIRT进程虚拟内存大小,只要是进程申请过的内存,即使还没有真正分配物理内存,也计算在内</li>
<li>RES常驻进程内存大小,进程实际使用的物理内存大小,但不包括Swap和共享内存</li>
<li>SHR共享内存大小(和其他进程共同使用的共享内存/加载的动态链接库/程序代码段等)</li>
<li>%MEM进程使用物理内存占系统总内存的百分比</li>
</ol>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul>
<li><a href="https://time.geekbang.org/column/140" target="_blank" rel="noopener">Linux性能优化实战</a></li>
<li><a href="http://man.linuxde.net/" target="_blank" rel="noopener">Linux命令大全</a></li>
<li><a href="http://linux.51yip.com/" target="_blank" rel="noopener">Linux命令手册</a></li>
</ul>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>进程、线程、协程</title>
    <url>/2019/02/27/process-thread-coroutine/</url>
    <content><![CDATA[<h2 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h2><p>进程是系统进行资源分配和资源调度的基本单位.<br>进程有独立的资源.<br>不同进程通过进程间通信来通信.<br>进程的上下文切换开销大.<br><img src="/Picture/进程状态转移图.png" alt="进程状态转移图"><br><img src="/Picture/进程状态图.jpg" alt="进程状态图"><br>新进程由父进程fork而来,fork结束后并不立即复制父进程的内容,等真正使用的时候再复制,即<strong>写时拷贝(copy-on-write COW)</strong>.为了效率,子进程一般会先父进程一步进行调用.<br>孤儿进程:父进程先退出,子进程还没退出,那么子进程将被托孤给init进程,此时的子进程就是孤儿进程.<br>僵死进程:在每个进程退出的时候,内核释放该进程所有的资源(包括打开的文件、占用的内存等),但是仍然为其保留一定的信息(包括进程号,退出状态,运行时间等),直到父进程通过外wait/waitpid来取时才释放.此时该进程处于僵死状态.<br>守护进程:守护进程是后台常驻内存的一种特殊进程,不和任何终端关联.守护进程是一个孤儿进程.守护进程的标准输入输出和错误输出都会被丢到<code>/dev/null</code>中.守护进程一般用作服务器进程.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="comment">//获取进程自身PID</span></span><br><span class="line"><span class="function"><span class="keyword">pid_t</span> <span class="title">getpid</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="comment">//获取进程自身父进程的ID PPID</span></span><br><span class="line"><span class="function"><span class="keyword">pid_t</span> <span class="title">getppid</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="comment">//创建一个子进程</span></span><br><span class="line"><span class="comment">//返回值有两次  1.子进程返回0   2.父进程返回子进程的PID</span></span><br><span class="line"><span class="function"><span class="keyword">pid_t</span> <span class="title">fork</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="comment">//创建一个子进程,但子进程共享父进程的空间.返回值有两次,子进程返回0,父进程返回子进程的进程号.vfork创建子进程后,父进程阻塞,直到子进程执行exec()或exit().</span></span><br><span class="line"><span class="comment">//vfork最初因为fork没有COW机制,而很多情况下fork后会紧接着执行exec,而exec的执行相当于之前fork复制的空间做了无用功,所以设计了vfork.</span></span><br><span class="line"><span class="comment">//fork有了COW机制后,唯一的代价仅仅是复制父进程页表的代价,所以vfork渐渐被废弃</span></span><br><span class="line"><span class="function"><span class="keyword">pid_t</span> <span class="title">vfork</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">pid_t</span> <span class="title">wait</span><span class="params">(<span class="keyword">int</span> *status)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">pid_t</span> <span class="title">waitpid</span><span class="params">(<span class="keyword">pid_t</span> pid, <span class="keyword">int</span> *status, <span class="keyword">int</span> options)</span></span>;</span><br></pre></td></tr></table></figure>
<h3 id="进程的销毁"><a href="#进程的销毁" class="headerlink" title="进程的销毁"></a>进程的销毁</h3><ol>
<li>主动<ol>
<li><code>main</code>函数的自然返回 注意:main返回return不是结束,只是main函数结束,main函数结束后还需要调用全局变量、静态局部变量和main函数的局部变量的析构函数.</li>
<li>调用<code>exit</code>函数,标准函数 退出时会检查文件的打开情况,把文件缓冲区内容写回文件</li>
<li>调用<code>_exit</code>函数,系统调用函数 不会检测文件打开情况,直接退出</li>
<li>调用<code>abort</code>函数,产生<code>SIGABRT</code>信号</li>
</ol>
</li>
<li>被动<ol>
<li>收到信号</li>
</ol>
</li>
</ol>
<p><code>vfork</code>创建的子进程中在<code>main</code>函数中<code>return</code>会导致进程异常结束,而调用<code>exit</code>则不会正是由于子进程和父进程公用栈空间,子进程<code>return</code>后导致栈空间被释放,而<code>exit</code>不会释放栈空间.</p>
<h3 id="进程替换"><a href="#进程替换" class="headerlink" title="进程替换"></a>进程替换</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">char</span> **environ;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">execl</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *path, <span class="keyword">const</span> <span class="keyword">char</span> *arg, ...)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">execlp</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *file, <span class="keyword">const</span> <span class="keyword">char</span> *arg, ...)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">execle</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *path, <span class="keyword">const</span> <span class="keyword">char</span> *arg, ..., <span class="keyword">char</span> * <span class="keyword">const</span> envp[])</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">execv</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *path, <span class="keyword">char</span> *<span class="keyword">const</span> argv[])</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">execvp</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *file, <span class="keyword">char</span> *<span class="keyword">const</span> argv[])</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">execvpe</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *file, <span class="keyword">char</span> *<span class="keyword">const</span> argv[], <span class="keyword">char</span> *<span class="keyword">const</span> envp[])</span></span>;</span><br></pre></td></tr></table></figure>
<h3 id="进程间通信"><a href="#进程间通信" class="headerlink" title="进程间通信"></a>进程间通信</h3><p>进程间通信方式:</p>
<ol>
<li>共享内存</li>
<li>消息队列</li>
<li>信号量</li>
<li>有名管道</li>
<li>无名管道</li>
<li>信号</li>
<li>socket</li>
<li>文件</li>
</ol>
<h3 id="守护进程的创建"><a href="#守护进程的创建" class="headerlink" title="守护进程的创建"></a>守护进程的创建</h3><p>Linux有一个daemon函数用来创建守护进程.<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">daemon</span><span class="params">(<span class="keyword">int</span> nochdir, <span class="keyword">int</span> noclose)</span></span>;</span><br><span class="line">nochdir 如果为<span class="number">0</span>,将当前工作目录切换到根目录/,否则工作目录不改变</span><br><span class="line">noclose 如果为<span class="number">0</span>,将<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>重定向到/dev/null,否则不变</span><br></pre></td></tr></table></figure></p>
<p>守护进程的创建过程</p>
<ol>
<li>屏蔽控制终端操作信号</li>
<li>处理SIGCHLD信号</li>
<li>后台运行(调用fork函数,然后让父进程退出运行,子进程继续在后台运行)</li>
<li>脱离控制终端,登陆会话和进程组<code>setsid()</code></li>
<li>禁止会话重新打开控制终端(子进程调用fork函数,然后让子进程退出运行孙进程继续在后台运行)</li>
<li>重设文件创建掩码<code>umask(0)</code></li>
<li>关闭打开的文件描述符</li>
<li>改变当前工作目录<code>chdir(&quot;/&quot;)</code></li>
</ol>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;signal.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">daemon</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//屏蔽控制终端操作信号</span></span><br><span class="line">    signal(SIGTTOU, SIG_IGN);</span><br><span class="line">    signal(SIGTTIN, SIG_IGN);</span><br><span class="line">    signal(SIGTSTP, SIG_IGN);</span><br><span class="line">    signal(SIGHUP,  SIG_IGN);</span><br><span class="line"></span><br><span class="line">    signal(SIGCHLD, SIG_IGN);    <span class="comment">//忽略子进程结束信号，避免僵死进程产生</span></span><br><span class="line">    <span class="keyword">pid_t</span> pid = fork(); <span class="comment">//创建子进程</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="number">-1</span> == pid)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="number">0</span> != pid)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; __LINE__ &lt;&lt; <span class="string">"父进程:"</span> &lt;&lt; getpid() &lt;&lt; <span class="string">"退出"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">std</span>::fflush(<span class="built_in">stdout</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);        <span class="comment">//父进程退出,子进程继续运行</span></span><br><span class="line">    &#125;</span><br><span class="line">    setsid();       <span class="comment">//子进程脱离控制终端,登陆会话和进程组,成为无终端的会话组长</span></span><br><span class="line">    pid = fork();       <span class="comment">//创建孙进程</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="number">-1</span> == pid)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="number">0</span> != pid)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; __LINE__ &lt;&lt; <span class="string">"子进程:"</span> &lt;&lt; getpid() &lt;&lt; <span class="string">"退出"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">std</span>::fflush(<span class="built_in">stdout</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);        <span class="comment">//让子进程退出,孙进程继续运行,孙进程不再是会话组长,禁止程序重新打开控制终端</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; __LINE__ &lt;&lt; <span class="string">"孙进程:"</span> &lt;&lt; getpid() &lt;&lt; <span class="string">"继续运行"</span> &lt;&lt; <span class="string">" PPID:"</span> &lt;&lt; getppid() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">std</span>::fflush(<span class="built_in">stdout</span>);</span><br><span class="line">    chdir(<span class="string">"/"</span>);     <span class="comment">//改变工作目录</span></span><br><span class="line">    umask(<span class="number">0</span>);       <span class="comment">//重设文件创建掩码</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">unsigned</span> i=<span class="number">0</span>; i&lt;<span class="number">3</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        close(i);       <span class="comment">//关闭标准输入,标准输出,标准错误输出</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; __LINE__ &lt;&lt; <span class="string">"关闭标准输入,标准输出,标准错误输出"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">std</span>::fflush(<span class="built_in">stdout</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="线程-轻量级进程"><a href="#线程-轻量级进程" class="headerlink" title="线程(轻量级进程)"></a>线程(轻量级进程)</h2><p>线程是CPU调度和分派的基本单位.<br>一个进程中可以有多个线程(最少一个线程).它们共享代码空间和数据空间(全局变量和静态变量),文件描述符,信号,malloc分配的内存.<br>每个线程有自己独立的栈空间和程序计数器.<br>同进程内线程上下文切换快,资源消耗少.<br>线程的实现调用clone系统调用.</p>
<p>线程相关函数<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="comment">//线程的创建</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_create</span><span class="params">(<span class="keyword">pthread_t</span> *thread, <span class="keyword">const</span> <span class="keyword">pthread_attr_t</span> *attr, <span class="keyword">void</span> *(*start_routine)(<span class="keyword">void</span> *), <span class="keyword">void</span> *arg)</span></span>;</span><br><span class="line"><span class="comment">//等待线程结束 返回等待线程的返回值</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_join</span><span class="params">(<span class="keyword">pthread_t</span> thread, <span class="keyword">void</span> **retval)</span></span>;</span><br><span class="line"><span class="comment">//终止线程</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pthread_exit</span><span class="params">(<span class="keyword">void</span> *retval)</span></span>;</span><br><span class="line"><span class="comment">//获取线程自身id</span></span><br><span class="line"><span class="function"><span class="keyword">pthread_t</span> <span class="title">pthread_self</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="comment">//将指定线程转变为detach状态</span></span><br><span class="line"><span class="comment">//1. 线程缺省情况下是joinable,其线程ID和退出状态将留给另一个线程对它调用pthread_join</span></span><br><span class="line"><span class="comment">//2. detach线程在终止时,所有资源将自动释放</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_detach</span><span class="params">(<span class="keyword">pthread_t</span> thread)</span></span>;</span><br></pre></td></tr></table></figure></p>
<p>linux下获取线程Id有两种方式</p>
<ol>
<li>gettid</li>
<li>pthread_self<br>gettid获取的是内核中线程Id,pthread_self获取的是posix描述的线程Id</li>
</ol>
<p>对于单线程的进程,内核中tid和pid相等,对于多线程的进程,它们的pid相等,tid则不相同.tid用于描述内核中真实的pid和tid信息.<br>pthread_self返回的是posix定义的线程Id,只是用来区分某个进程中不同的线程,当一个线程退出后,新创建的线程可以复用原来的id.pthread_self返回的线程控制块TCB首地址相对于进程数据段的偏移(pthread_create也是返回该值),只是用来描述同一进程中的不同线程.</p>
<p><img src="/Picture/pthread_create.png" alt="线程创建函数调用图"><br><img src="/Picture/线程状态图.jpg" alt="线程状态图"></p>
<h3 id="线程间通信和同步方式"><a href="#线程间通信和同步方式" class="headerlink" title="线程间通信和同步方式"></a>线程间通信和同步方式</h3><ol>
<li>共享内存</li>
<li>消息队列</li>
<li>信号量</li>
<li>有名管道</li>
<li>无名管道</li>
<li>socket</li>
<li>文件</li>
<li>互斥量</li>
<li>自旋锁</li>
<li>条件变量</li>
<li>读写锁</li>
<li>线程信号</li>
<li>全局变量</li>
</ol>
<h2 id="协程-微线程"><a href="#协程-微线程" class="headerlink" title="协程(微线程)"></a>协程(微线程)</h2><p>协程是用户态的轻量级线程.<br>协程调度完全由用户控制,上下文切换比线程快,占用资源少.<br>协程不需要多线程的锁机制,执行效率比多线程高.</p>
<h2 id="进程学习代码"><a href="#进程学习代码" class="headerlink" title="进程学习代码"></a>进程学习代码</h2><p><a href="https://github.com/CaseZheng/Study/blob/master/Concurrent/process_study.cpp" target="_blank" rel="noopener">代码Git地址</a><br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"start fork"</span> &lt;&lt; <span class="string">" PID:"</span> &lt;&lt; getpid() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">pid_t</span> iPid = fork();</span><br><span class="line">    <span class="keyword">if</span>(iPid &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"fork error"</span> &lt;&lt; <span class="string">" PID:"</span> &lt;&lt; getpid() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (iPid == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"child process"</span> &lt;&lt; <span class="string">" PID:"</span> &lt;&lt; getpid() &lt;&lt; <span class="string">" PPID:"</span> &lt;&lt; getppid() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"parent process"</span> &lt;&lt; <span class="string">" PID:"</span> &lt;&lt; getpid() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sleep(<span class="number">300</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>运行情况<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ ./process_study</span><br><span class="line">start fork PID:12128</span><br><span class="line">parent process PID:12128</span><br><span class="line">child process PID:12129 PPID:12128</span><br><span class="line"></span><br><span class="line">$ pstree -p -a</span><br><span class="line">... ...</span><br><span class="line">  ├─sshd,724 -D</span><br><span class="line">  │   ├─sshd,609</span><br><span class="line">  │   │   └─sshd,611</span><br><span class="line">  │   │       └─bash,620</span><br><span class="line">  │   │           └─process_study,12128</span><br><span class="line">  │   │               └─process_study,12129</span><br><span class="line">... ...</span><br></pre></td></tr></table></figure></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"start fork"</span> &lt;&lt; <span class="string">" PID:"</span> &lt;&lt; getpid() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">3</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">pid_t</span> iPid = fork();</span><br><span class="line">        <span class="keyword">if</span>(iPid &lt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"fork error"</span> &lt;&lt; <span class="string">" PID:"</span> &lt;&lt; getpid() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (iPid == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"child process"</span> &lt;&lt; <span class="string">" PID:"</span> &lt;&lt; getpid() &lt;&lt; <span class="string">" PPID:"</span> &lt;&lt; getppid() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"parent process"</span> &lt;&lt; <span class="string">" PID:"</span> &lt;&lt; getpid() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    sleep(<span class="number">300</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行情况<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ ./process_study </span><br><span class="line">start fork PID:16030</span><br><span class="line">parent process PID:16030</span><br><span class="line">parent process PID:16030</span><br><span class="line">parent process PID:16030</span><br><span class="line">child process PID:16033 PPID:16030</span><br><span class="line">child process PID:16032 PPID:16030</span><br><span class="line">parent process PID:16032</span><br><span class="line">child process PID:16031 PPID:16030</span><br><span class="line">parent process PID:16031</span><br><span class="line">parent process PID:16031</span><br><span class="line">child process PID:16034 PPID:16032</span><br><span class="line">child process PID:16036 PPID:16031</span><br><span class="line">child process PID:16035 PPID:16031</span><br><span class="line">parent process PID:16035</span><br><span class="line">child process PID:16037 PPID:16035</span><br><span class="line"></span><br><span class="line">$ pstree -p -a</span><br><span class="line">... ...</span><br><span class="line">  │   │           └─process_study,16030</span><br><span class="line">  │   │               ├─process_study,16031</span><br><span class="line">  │   │               │   ├─process_study,16035</span><br><span class="line">  │   │               │   │   └─process_study,16037</span><br><span class="line">  │   │               │   └─process_study,16036</span><br><span class="line">  │   │               ├─process_study,16032</span><br><span class="line">  │   │               │   └─process_study,16034</span><br><span class="line">  │   │               └─process_study,16033</span><br><span class="line">... ...</span><br></pre></td></tr></table></figure></p>
<p>分析流程<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PID:16030 --fork--&gt; PID:16030   --fork--&gt; PID:16030 --fork--&gt; PID:16030</span><br><span class="line">                                                              PID:16033</span><br><span class="line">                                          PID:16032 --fork--&gt; PID:16032</span><br><span class="line">                                                              PID:16034</span><br><span class="line">                    PID:16031   --fork--&gt; PID:16031 --fork--&gt; PID:16031</span><br><span class="line">                                                              PID:16036</span><br><span class="line">                                          PID:16035 --fork--&gt; PID:16035</span><br><span class="line">                                                              PID:16037</span><br></pre></td></tr></table></figure></p>
<h2 id="线程学习代码"><a href="#线程学习代码" class="headerlink" title="线程学习代码"></a>线程学习代码</h2><p><a href="https://github.com/CaseZheng/Study/blob/master/Concurrent/thread_study.cpp" target="_blank" rel="noopener">代码Git地址</a><br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">Print</span><span class="params">(<span class="keyword">void</span> *pArg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> *pCount = (<span class="keyword">int</span>*)pArg;</span><br><span class="line">    <span class="keyword">for</span>(;*pCount&lt;<span class="number">10</span>;++(*pCount))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"PID:"</span> &lt;&lt; getpid() &lt;&lt; <span class="string">" TID:"</span> &lt;&lt; pthread_self() &lt;&lt; <span class="string">"  "</span> &lt;&lt; *pCount &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">pthread_t</span> t1;</span><br><span class="line">    <span class="keyword">pthread_t</span> t2;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> iCount = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(pthread_create(&amp;t1, <span class="literal">NULL</span>, Print, &amp;iCount) == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"thread create error"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(pthread_create(&amp;t2, <span class="literal">NULL</span>, Print, &amp;iCount) == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"thread create error"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    pthread_join(t1, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_join(t2, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>运行结果<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ ./thread_study </span><br><span class="line">PID:31384 TID:140122741049088  0</span><br><span class="line">PID:31384 TID:140122749441792  0</span><br><span class="line">PID:31384 TID:140122741049088  1</span><br><span class="line">PID:31384 TID:140122749441792  2</span><br><span class="line">PID:31384 TID:140122741049088  3</span><br><span class="line">PID:31384 TID:140122749441792  4</span><br><span class="line">PID:31384 TID:140122741049088  5</span><br><span class="line">PID:31384 TID:140122749441792  6</span><br><span class="line">PID:31384 TID:140122741049088  7</span><br><span class="line">PID:31384 TID:140122749441792  8</span><br><span class="line">PID:31384 TID:140122741049088  9</span><br></pre></td></tr></table></figure></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;boost/thread/thread.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;boost/chrono.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;boost/ref.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Print1</span><span class="params">(<span class="keyword">int</span> *pCount)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(;(*pCount)&lt;<span class="number">10</span>;++(*pCount))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"PID:"</span> &lt;&lt; getpid() &lt;&lt; <span class="string">" TID:"</span> &lt;&lt; pthread_self() &lt;&lt; <span class="string">"  "</span> &lt;&lt; *pCount &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        boost::this_thread::sleep_for(boost::chrono::seconds(<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Print2</span><span class="params">(<span class="keyword">int</span> &amp;count)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(;count&lt;<span class="number">10</span>;++count)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"PID:"</span> &lt;&lt; getpid() &lt;&lt; <span class="string">" TID:"</span> &lt;&lt; pthread_self() &lt;&lt; <span class="string">"  "</span> &lt;&lt; count &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        boost::this_thread::sleep_for(boost::chrono::seconds(<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">1</span>;</span><br><span class="line">    <span class="function">boost::thread <span class="title">t1</span><span class="params">(Print1, &amp;count)</span></span>;</span><br><span class="line">    <span class="function">boost::thread <span class="title">t2</span><span class="params">(Print2, boost::ref(count))</span></span>;</span><br><span class="line">    t1.join();</span><br><span class="line">    t2.join();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ ./thread_study </span><br><span class="line">PID:11311 TID:140043269957376  1</span><br><span class="line">PID:11311 TID:140043278350080  1</span><br><span class="line">PID:11311 TID:140043269957376  2</span><br><span class="line">PID:11311 TID:140043278350080  3</span><br><span class="line">PID:11311 TID:140043269957376  4</span><br><span class="line">PID:11311 TID:140043278350080  5</span><br><span class="line">PID:11311 TID:140043269957376  6</span><br><span class="line">PID:11311 TID:140043278350080  7</span><br><span class="line">PID:11311 TID:140043269957376  8</span><br><span class="line">PID:11311 TID:140043278350080  9</span><br></pre></td></tr></table></figure></p>
<h2 id="协程学习代码"><a href="#协程学习代码" class="headerlink" title="协程学习代码"></a>协程学习代码</h2><p>C++协程库基于两种方案:</p>
<ol>
<li>利用汇编代码控制协程的上下文切换 (libco, Boost.context)</li>
<li>利用操作系统提供的API来实现协程上下文切换</li>
</ol>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul>
<li><a href="https://www.cnblogs.com/wanghuaijun/p/7953481.html" target="_blank" rel="noopener">linux进程、调度、线程、进程上下文等几点理解</a></li>
<li><a href="https://blog.csdn.net/daaikuaichuan/article/details/82951084" target="_blank" rel="noopener">进程、线程和协程之间的区别和联系</a></li>
<li><a href="https://blog.csdn.net/ivalue/article/details/81945616" target="_blank" rel="noopener">关于进程，线程，协程，一点心得</a></li>
<li><a href="https://blog.csdn.net/runner668/article/details/80512664" target="_blank" rel="noopener">linux进程-线程-协程上下文环境的切换与实现</a></li>
<li><a href="https://www.cnblogs.com/1932238825qq/p/7373443.html" target="_blank" rel="noopener">fork和vfork</a></li>
<li><a href="https://blog.csdn.net/gogokongyin/article/details/51178257" target="_blank" rel="noopener">fork()、vfork()、clone()的区别</a></li>
<li><a href="https://blog.csdn.net/qq_39835338/article/details/81778446" target="_blank" rel="noopener">pthread_detach</a></li>
<li><a href="https://blog.csdn.net/z961968549/article/details/80189737" target="_blank" rel="noopener">linux进程相关函数(获取、销毁、切换···)</a></li>
<li><a href="https://blog.csdn.net/rsyp2008/article/details/45150621" target="_blank" rel="noopener">gettid和pthread_self区别</a></li>
</ul>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux内存</title>
    <url>/2019/02/24/linux-ram/</url>
    <content><![CDATA[<h1 id="内存映射"><a href="#内存映射" class="headerlink" title="内存映射"></a>内存映射</h1><p>只有内核可以访问物理内存<br>内核给每个进程提供独立虚拟地址空间,虚拟地址空间连续,进程通过访问虚拟地址空间访问内存<br>虚拟地址空间分为<strong>内核空间和用户空间</strong><br><img src="/Picture/Linux内存分布.png" alt="Linux内存分布"><br>进程在用户态只能访问用户空间内存,只有进入内核态后,才能访问内核空间内存.<br>每个进程的地址空间都包含内核空间,但各个进程的内核空间其实关联的是相同的物理内存,当进程切换到内核态后,可以很方便地访问内核空间内存.<br>虚拟内存通过<strong>内存映射</strong>来管理,只有实际使用的虚拟内存才会分配物理内存.<br>内存映射将<strong>虚拟内存地址映射到物理内存地址</strong>,内核为每个进程维护一张页表,记录虚拟内存与物理地址的映射关系<br><img src="/Picture/linux_ram_1.png" alt="linux虚拟内存和物理内存的映射"><br>页面实际存储在CPU的<strong>内存管理单元MMU</strong>中<br>当进程直接访问的虚拟内存在页表中查不到时,系统产生<strong>缺页异常</strong>,进入内核空间分配物理内存,更新进程页表,最后返回用户空间,恢复进程运行.<br>TLB是MMU中页表的高速缓存,由于进程的虚拟内存地址独立,TLB的访问速度比MMU快,通过减少进程的上下文切换,减少TLB的刷新次数,提供TLB缓存的使用率,提高CPU访问内存的性能.<br>MMU以页(通常为4K)为内存映射的最小单位,每次内存映射都需要关联4KB或4KB整数倍的内存空间.<br>页的大小只有4K,导致页表非常大,Linux使用多级页表和大页解决这个问题.<br>多级页表:把内存分为区块来管理,将原来的映射关系改为区块索引和区块的偏移.<br>Linux使用四级页表管理内存页.虚拟内存分为5个部分<br><img src="/Picture/linux_ram_2.png" alt="linux多级页表"><br>大页:比普通页更大的内存块,常见大小2MB和1GB.大页使用在大量内存的进程上,比如Oracle,DPDK等.</p>
<h1 id="虚拟内存空间分布"><a href="#虚拟内存空间分布" class="headerlink" title="虚拟内存空间分布"></a>虚拟内存空间分布</h1><p>虚拟内存空间用户空间内存,从低到高分别是五种不同的内存段</p>
<ol>
<li>只读段,包括代码和常量等</li>
<li>数据段,包括全局变量等</li>
<li>堆,包括动态分配的内存,从低地址开始向上增长</li>
<li>文件映射段,包括动态库,共享内存等,从高地址向低地址向下增长</li>
<li>栈,包括局部变量和函数调用上下文等.栈的大小是固定的,一般为8MB,从高地址向低地址向下增长</li>
</ol>
<p>堆和文件映射段的内存是动态分配的.</p>
<h1 id="内存分配与回收"><a href="#内存分配与回收" class="headerlink" title="内存分配与回收"></a>内存分配与回收</h1><p>malloc()是C标准库提供的内存分配函数,对应系统调用brk()和mmap().<br>小块内存(小于128K)用brk()分配,通过移动堆顶的位置来分配内存,内存释放后不立即归还系统,先缓存起来,重复利用.<br>大块内存(大于128K)用mmap()分配,直接用内存映射mmap()来分配,在文件映射段找一块空闲分配出来.<br>brk()方式缓存可以减少缺页异常的发生,提高内存访问效率.由于内存未归还系统,在内存工作繁忙时,频繁的内存分配和释放会造成内存碎片.<br>mmap()方式释放直接归还系统,但mmap()都会发生缺页异常,内存工作繁忙时,频繁的内存分配会导致大量的缺页异常,使内核的管理负担增大.<br>当brk()和mmap()被调用时,其实并没有分配内存,只有首次访问这些内存时才分配,即通过缺页异常进入内核,再有内核来分配内存.<br>Linux使用伙伴系统管理内存.伙伴系统以页为单位管理内存,并通过相邻页的合并减少内存碎片.<br>Linux内核通过slab分配器管理小内存,主要作用是分配和释放内核中的小对象.<br>内存只分配不释放会造成内存泄漏,甚至耗尽系统内存,在应用程序使用完内存后,需要调用free()或unmap()释放不用的内存.</p>
<p>系统在发现内存紧张时会通过一系列机制回收内存:</p>
<ol>
<li>回收缓存</li>
<li>回收不常使用内存,把不常使用的内存通过交换分区(Swap)写到磁盘.Swap是把一块磁盘当作内存使用,把进程暂时不用的数据写入磁盘(换出),当进程访问这些内存时,再从磁盘读取数据到内存(换入).Swap使系统可用内存变大了,只有内存不足时才会发生Swap交换,由于磁盘读写速度远慢于内存,Swap会导致严重内存性能问题.</li>
<li>杀死进程,内存紧张时系统通过OOM(Out of Memory)直接杀死占用大量内存的进程.OOM是一种内核保护机制,监控进程内存使用情况,使用oom_soure为每个进程内存使用情况评分.  1. 进程消耗内存越大,oom_soure越大 2. 进程运行占用CPU越多,oom_soure就越小. oom_soure越大表示占用内存越多,越容易被OOM杀死.进程的oom_soure可以在/proc/PID/oom_soure进行查看,可以手动修改/proc/PId/oom_adj进行调整,oom_adj范围为[-17,15],-17表示禁用OOM.<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ ll /proc/15571/oom_*</span><br><span class="line">-rw-r--r-- 1 root root 0 Feb 26 13:20 /proc/15571/oom_adj</span><br><span class="line">-r--r--r-- 1 root root 0 Feb 26 13:20 /proc/15571/oom_score</span><br><span class="line">-rw-r--r-- 1 root root 0 Feb 26 13:20 /proc/15571/oom_score_adj</span><br><span class="line">$ cat /proc/15571/oom_*</span><br><span class="line">0</span><br><span class="line">16</span><br><span class="line">0</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p><img src="/Picture/Linux内存管理.jpg" alt="Linux内存管理"><br><img src="/Picture/Linux内存管理2.gif" alt="Linux内存管理2"><br><img src="/Picture/缺页处理程序流程图.png" alt="缺页处理程序流程图"><br><img src="/Picture/缺页异常处理程序的总体方案.png" alt="缺页异常处理程序的总体方案"><br><!--![分区页框分配器的组成](/Picture/分区页框分配器的组成.png)--><br><!--![虚存管理数据结构联系图](/Picture/虚存管理数据结构联系图.png)--></p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="https://blog.csdn.net/liukuan73/article/details/43238623" target="_blank" rel="noopener">Linux内核OOM机制的详细分析</a></li>
</ul>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>elasticsearch入门学习</title>
    <url>/2018/06/08/elasticsearch/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Elasticsearch是一个分布式、可扩展、实时的搜索和数据分析引擎。支持全文索引、结构化搜索、数据分析。</p>
<ul>
<li>一个分布式的实时文档存储，每个字段 可以被索引与搜索</li>
<li>一个分布式实时分析搜索引擎</li>
<li>能胜任上百个服务节点的扩展，并支持 PB 级别的结构化或者非结构化数据</li>
</ul>
<h1 id="Elasticsearch和Lucene关系"><a href="#Elasticsearch和Lucene关系" class="headerlink" title="Elasticsearch和Lucene关系"></a>Elasticsearch和Lucene关系</h1><p>Elasticsearch基于Lucene开发而来,Lucene是一个搜索引擎框架,基于Lucene开发需要做大量工作,调用各种API接口.<br>Elasticsearch隐藏了Lucene的复杂性,提供了分布式方案.</p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>从官网下载最新版本安装,步骤看官网文档即可</p>
<h1 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">./bin/elasticsearch</span><br></pre></td></tr></table></figure>
<p>可以在后面添加参数 -d, 使Elasticsearch作为一个守护进程在后台运行<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl &apos;http://localhost:9200/?pretty&apos;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot; : &quot;YZ_zxCT&quot;,</span><br><span class="line">  &quot;cluster_name&quot; : &quot;elasticsearch&quot;,</span><br><span class="line">  &quot;cluster_uuid&quot; : &quot;BKMvoXKrTW-4mj2OyOfibw&quot;,</span><br><span class="line">  &quot;version&quot; : &#123;</span><br><span class="line">    &quot;number&quot; : &quot;5.6.3&quot;,</span><br><span class="line">    &quot;build_hash&quot; : &quot;1a2f265&quot;,</span><br><span class="line">    &quot;build_date&quot; : &quot;2017-10-06T20:33:39.012Z&quot;,</span><br><span class="line">    &quot;build_snapshot&quot; : false,</span><br><span class="line">    &quot;lucene_version&quot; : &quot;6.6.1&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;tagline&quot; : &quot;You Know, for Search&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>具体可查看Elasticsearch<a href="https://www.elastic.co/guide/en/elasticsearch/reference/6.0/getting-started.html" target="_blank" rel="noopener">官方文档</a></p>
<p>Elasticsearch中文资料</p>
<ol>
<li><a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/index.html" target="_blank" rel="noopener">Elasticsearch: 权威指南</a></li>
<li><a href="https://www.yiibai.com/elasticsearch" target="_blank" rel="noopener">Elasticsearch教程</a></li>
</ol>
]]></content>
      <categories>
        <category>other</category>
      </categories>
      <tags>
        <tag>elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构</title>
    <url>/2019/03/15/data-structure/</url>
    <content><![CDATA[<h1 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h1><p><a href="https://www.casezheng.date/2017/06/14/stl-heap-priority_queue-5/">STL中的堆 优先级队列的底层算法</a></p>
<h1 id="二叉排序树"><a href="#二叉排序树" class="headerlink" title="二叉排序树"></a>二叉排序树</h1><p>二叉树是指任何节点最多只允许两个子节点的树。两个子节点称为左子节点和右子节点。<br>二叉排序树提供对数时间的元素插入和访问，二叉排序树的节点放置规则：任何检点的键值一定大于其左子树的每个节点的键值，并小于其右子树的每一个节点的键值。因此，从根节点一直向左走，直至左路可走，即得最小元素；从根节点一直向右走，直至无右路可走，即得最大元素。</p>
<p>二叉排序树的搜索时间复杂度为$O(log_2n)$到$O(n)$</p>
<h1 id="AVL树"><a href="#AVL树" class="headerlink" title="AVL树"></a>AVL树</h1><p>AVL树是”加上额外平衡条件”的二叉搜索树。平衡条件的建立是为了确保整棵树的深度为$O(logN)$。AVL-tree要求任何节点的左右子树高度相差最多1。<br>AVL树的搜索时间复杂度为$O(log_2n)$</p>
<h1 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h1><p>RB-tree不仅是二叉搜索树，而且必须满足以下规则：</p>
<ol>
<li>每个节点不是红色就是黑色。</li>
<li>根节点为黑色。</li>
<li>如果节点为红色，其子节点必须为黑色。</li>
<li>任一节点到NULL(树尾端)的任何路径，所含黑节点数目必须相同。</li>
</ol>
<p>红黑树的搜索时间复杂度为$O(log_2n)$<br><a href="https://www.casezheng.date/2017/06/16/stl-tree-rb_tree-7/">STL中的红黑树是map、set、multiset、multimap的底层</a><br><a href="https://www.casezheng.date/2017/09/21/io-5-epoll/">epoll底层内核事件表对文件描述符的管理使用红黑树</a></p>
<h1 id="B树-B-树"><a href="#B树-B-树" class="headerlink" title="B树(B-树)"></a>B树(B-树)</h1><p>一个m阶的B树具有如下几个特征：</p>
<ol>
<li>根结点至少有两个子女。</li>
<li>每个中间节点都包含k-1个元素和k个孩子,其中 $m/2 \le k \le m$</li>
<li>每一个叶子节点都包含k-1个元素,其中 $m/2 \le k \le m$</li>
<li>所有的叶子结点都位于同一层。</li>
<li>每个节点中的元素从小到大排列，节点当中k-1个元素正好是k个孩子包含的元素的值域分划。</li>
</ol>
<h1 id="B-树"><a href="#B-树" class="headerlink" title="B+树"></a>B+树</h1><p>一个m阶的B+树具有如下几个特征：</p>
<ol>
<li>有k个子树的中间节点包含有k个元素（B树中是k-1个元素），每个元素不保存数据，只用来索引，所有数据都保存在叶子节点。</li>
<li>所有的叶子结点中包含了全部元素的信息，及指向含这些元素记录的指针，且叶子结点本身依关键字的大小自小而大顺序链接。</li>
<li>所有的中间节点元素都同时存在于子节点，在子节点元素中是最大（或最小）元素</li>
</ol>
<p>MySQL索引就是使用B+树<br>B+树相比B树的优势:</p>
<ol>
<li>I/O次数更少(单一节点存储更多元素)</li>
<li>查找性能更稳定(搜索查找都要查找到叶子节点)</li>
<li>范围查找简便(所有叶子节点形成有序链表)</li>
</ol>
<h1 id="B-树-1"><a href="#B-树-1" class="headerlink" title="B*树"></a>B*树</h1><h1 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h1><p>哈希表查找、插入、删除只需要接近$O(1)$的时间复杂度.<br><a href="https://www.casezheng.date/2017/06/20/stl-hashtable-9/">SGI STL提供的hashset、hashmap、hashmultiset、hashmultimap使用的底层结构即为哈希表</a><br>缺点:</p>
<ol>
<li>哈希表基于数组,创建后扩展困难,hash表表基本填满时,性能下降严重.</li>
<li>一个关键字可能对应多个散列地址</li>
<li>需要范围查找时,效果不好</li>
</ol>
<h1 id="跳表"><a href="#跳表" class="headerlink" title="跳表"></a>跳表</h1><p>跳表具有如下性质：</p>
<ol>
<li>由很多层结构组成</li>
<li>每一层都是一个有序的链表</li>
<li>最底层(Level 1)的链表包含所有元素</li>
<li>如果一个元素出现在 Level i 的链表中，则它在 Level i 之下的链表也都会出现。</li>
<li>每个节点包含两个指针，一个指向同一链表中的下一个元素，一个指向下面一层的元素</li>
</ol>
<p>跳表的搜索时间复杂度为$O(log_2n)$到$O(n)$,其搜索时间复杂度大部分情况下与红黑树相当,但实现难度比红黑树低</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">         Top</span><br><span class="line">          |</span><br><span class="line">Level 3   2-----------&gt;21-------&gt;37------------------&gt;</span><br><span class="line">          |             |         |</span><br><span class="line">Level 2   2--&gt;7-------&gt;21-------&gt;37--&gt;71-------------&gt;</span><br><span class="line">          |   |         |         |    |</span><br><span class="line">Level l   2--&gt;7--&gt;14--&gt;21--&gt;32--&gt;37--&gt;71--&gt;85--&gt;117--&gt;</span><br></pre></td></tr></table></figure>
<p><a href="https://www.casezheng.date/2017/06/01/redis_skiplist_note/">Redis底层使用跳表</a></p>
<h1 id="倒排表"><a href="#倒排表" class="headerlink" title="倒排表"></a>倒排表</h1><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="https://www.cnblogs.com/a8457013/p/8251967.html" target="_blank" rel="noopener">SkipList跳表基本原理</a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>协程库学习</title>
    <url>/2019/03/01/coroutine/</url>
    <content><![CDATA[<h1 id="协程简介"><a href="#协程简介" class="headerlink" title="协程简介"></a>协程简介</h1><p><a href="https://www.casezheng.date/2019/02/27/process-thread-coroutine/">进程、线程、协程</a></p>
<h1 id="libco简介"><a href="#libco简介" class="headerlink" title="libco简介"></a>libco简介</h1><p>libco是腾讯开源的一个协程库.<br>主要结构和方法介绍:<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// co_routine.h</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1.struct</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stCoRoutine_t</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stShareStack_t</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stCoRoutineAttr_t</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">int</span> stack_size;</span><br><span class="line">	stShareStack_t*  share_stack;</span><br><span class="line">	stCoRoutineAttr_t()</span><br><span class="line">	&#123;</span><br><span class="line">		stack_size = <span class="number">128</span> * <span class="number">1024</span>;</span><br><span class="line">		share_stack = <span class="literal">NULL</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;__attribute__ ((packed));</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stCoEpoll_t</span>;</span></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">int</span> <span class="params">(*<span class="keyword">pfn_co_eventloop_t</span>)</span><span class="params">(<span class="keyword">void</span> *)</span></span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">void</span> *(*<span class="keyword">pfn_co_routine_t</span>)( <span class="keyword">void</span> * );</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.co_routine</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个新协程</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> 	<span class="title">co_create</span><span class="params">( stCoRoutine_t **co,<span class="keyword">const</span> stCoRoutineAttr_t *attr,<span class="keyword">void</span> *(*routine)(<span class="keyword">void</span>*),<span class="keyword">void</span> *arg )</span></span>;</span><br><span class="line"><span class="comment">//执行一个协程</span></span><br><span class="line"><span class="function"><span class="keyword">void</span>    <span class="title">co_resume</span><span class="params">( stCoRoutine_t *co )</span></span>;</span><br><span class="line"><span class="comment">//让某个协程yield(让出时间片)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span>    <span class="title">co_yield</span><span class="params">( stCoRoutine_t *co )</span></span>;</span><br><span class="line"><span class="comment">//让当前协程yield</span></span><br><span class="line"><span class="function"><span class="keyword">void</span>    <span class="title">co_yield_ct</span><span class="params">()</span></span>; <span class="comment">//ct = current thread</span></span><br><span class="line"><span class="function"><span class="keyword">void</span>    <span class="title">co_release</span><span class="params">( stCoRoutine_t *co )</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">stCoRoutine_t *<span class="title">co_self</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span>		<span class="title">co_poll</span><span class="params">( stCoEpoll_t *ctx,struct pollfd fds[], <span class="keyword">nfds_t</span> nfds, <span class="keyword">int</span> timeout_ms )</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> 	<span class="title">co_eventloop</span><span class="params">( stCoEpoll_t *ctx,<span class="keyword">pfn_co_eventloop_t</span> pfn,<span class="keyword">void</span> *arg )</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.specific</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> 	<span class="title">co_setspecific</span><span class="params">( <span class="keyword">pthread_key_t</span> key, <span class="keyword">const</span> <span class="keyword">void</span> *value )</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> *	<span class="title">co_getspecific</span><span class="params">( <span class="keyword">pthread_key_t</span> key )</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//4.event</span></span><br><span class="line"></span><br><span class="line"><span class="function">stCoEpoll_t * 	<span class="title">co_get_epoll_ct</span><span class="params">()</span></span>; <span class="comment">//ct = current thread</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//5.hook syscall ( poll/read/write/recv/send/recvfrom/sendto )</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> 	<span class="title">co_enable_hook_sys</span><span class="params">()</span></span>;  </span><br><span class="line"><span class="function"><span class="keyword">void</span> 	<span class="title">co_disable_hook_sys</span><span class="params">()</span></span>;  </span><br><span class="line"><span class="function"><span class="keyword">bool</span> 	<span class="title">co_is_enable_sys_hook</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//6.sync</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stCoCond_t</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="function">stCoCond_t *<span class="title">co_cond_alloc</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">co_cond_free</span><span class="params">( stCoCond_t * cc )</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">co_cond_signal</span><span class="params">( stCoCond_t * )</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">co_cond_broadcast</span><span class="params">( stCoCond_t * )</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">co_cond_timedwait</span><span class="params">( stCoCond_t *,<span class="keyword">int</span> timeout_ms )</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//7.share stack</span></span><br><span class="line"><span class="function">stShareStack_t* <span class="title">co_alloc_sharestack</span><span class="params">(<span class="keyword">int</span> iCount, <span class="keyword">int</span> iStackSize)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//8.init envlist for hook get/set env</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">co_set_env_list</span><span class="params">( <span class="keyword">const</span> <span class="keyword">char</span> *name[],<span class="keyword">size_t</span> cnt)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">co_log_err</span><span class="params">( <span class="keyword">const</span> <span class="keyword">char</span> *fmt,... )</span></span>;</span><br></pre></td></tr></table></figure></p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="https://github.com/Tencent/libco" target="_blank" rel="noopener">libco github仓库</a></li>
<li><a href="https://blog.csdn.net/u011579138/article/details/81839840" target="_blank" rel="noopener">libco简介</a></li>
<li><a href="https://blog.csdn.net/qq_25424545/article/details/81529717" target="_blank" rel="noopener">C/C++协程学习笔记</a></li>
<li><a href="https://my.oschina.net/yyzybb/blog/1817226" target="_blank" rel="noopener">Why c++ coroutine？Why libgo？</a></li>
</ul>
]]></content>
      <categories>
        <category>网络库</category>
      </categories>
      <tags>
        <tag>协程</tag>
      </tags>
  </entry>
  <entry>
    <title>服务器开发-框架与架构概述</title>
    <url>/2019/03/23/server-framework/</url>
    <content><![CDATA[<h1 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h1><h2 id="1-网络通信"><a href="#1-网络通信" class="headerlink" title="1. 网络通信"></a>1. 网络通信</h2><ol>
<li>客户端连接检测</li>
<li>接受客户端连接</li>
<li>客户端数据检测</li>
<li>客户端数据接收</li>
<li>发送数据给客户端 </li>
<li>连接异常检测</li>
<li>连接的关闭</li>
<li>客户端连接的发起</li>
</ol>
<h2 id="2-I-O复用"><a href="#2-I-O复用" class="headerlink" title="2. I/O复用"></a>2. I/O复用</h2><p>select/poll/epoll</p>
<h2 id="3-检测网络事件"><a href="#3-检测网络事件" class="headerlink" title="3. 检测网络事件"></a>3. 检测网络事件</h2><h2 id="4-连接关闭-主动-被动"><a href="#4-连接关闭-主动-被动" class="headerlink" title="4. 连接关闭(主动/被动)"></a>4. 连接关闭(主动/被动)</h2><p>被动关闭连接:检测到连接异常事件(例如:EPOLLERR)或对端关闭连接(send或recv返回0)<br>主动关闭连接:主动调用close或shutdown</p>
<h2 id="5-发送缓冲区-接收缓冲区"><a href="#5-发送缓冲区-接收缓冲区" class="headerlink" title="5. 发送缓冲区/接收缓冲区"></a>5. 发送缓冲区/接收缓冲区</h2><p>发送缓冲区和接收缓冲区每一个socket连接都存在一个,应该可以动态增长,按需分配</p>
<h2 id="6-协议设计"><a href="#6-协议设计" class="headerlink" title="6. 协议设计"></a>6. 协议设计</h2><ol>
<li>Json<ol>
<li>优点<ol>
<li>跨语言</li>
<li>文本协议 可读性好</li>
<li>简单易用,开发成本低</li>
</ol>
</li>
<li>缺点<ol>
<li>体积大</li>
<li>无版本检查,自己做兼容</li>
<li>数据解析复杂</li>
<li>文本格式,安全性差</li>
</ol>
</li>
</ol>
</li>
<li>Protobuf 二进制协议 可读性差 <ol>
<li>优点<ol>
<li>跨语言,自定义数据结构</li>
<li>字段被编号,新添加字段不影响老结构,向后兼容</li>
<li>简单易用,自动生成代码</li>
<li>二进制消息,效率高,性能好,安全性高</li>
</ol>
</li>
<li>缺点<ol>
<li>二进制格式,可读性差</li>
<li>对象冗余,字段很多,生成类较大,占用空间</li>
</ol>
</li>
</ol>
</li>
</ol>
<h2 id="7-服务器程序结构组织"><a href="#7-服务器程序结构组织" class="headerlink" title="7. 服务器程序结构组织"></a>7. 服务器程序结构组织</h2><h2 id="8-多进程-多线程-协程"><a href="#8-多进程-多线程-协程" class="headerlink" title="8. 多进程/多线程/协程"></a>8. 多进程/多线程/协程</h2><h2 id="9-内存管理"><a href="#9-内存管理" class="headerlink" title="9. 内存管理"></a>9. 内存管理</h2><ol>
<li>内存分片和内存碎片 gcc默认内存管理器ptmalloc</li>
<li>更好的内存管理器tcmalloc<ol>
<li>tcmalloc在链接时替代标准libc中的malloc和free,不改动代码的情况下解决内存碎片问题</li>
<li>tcmalloc的malloc和free函数速度快</li>
<li>tcmalloc优化了小对象存储</li>
<li>tcmalloc对多线程做了优化</li>
</ol>
</li>
<li>内存池(自己管理内存)<h2 id="10-连接池"><a href="#10-连接池" class="headerlink" title="10. 连接池"></a>10. 连接池</h2><h2 id="11-线程池"><a href="#11-线程池" class="headerlink" title="11. 线程池"></a>11. 线程池</h2></li>
</ol>
<h1 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h1><h2 id="1-接入层"><a href="#1-接入层" class="headerlink" title="1. 接入层"></a>1. 接入层</h2><h2 id="2-负载均衡"><a href="#2-负载均衡" class="headerlink" title="2. 负载均衡"></a>2. 负载均衡</h2><ol>
<li>求余法</li>
<li>一致性哈希</li>
</ol>
<h2 id="3-缓存"><a href="#3-缓存" class="headerlink" title="3. 缓存"></a>3. 缓存</h2><h2 id="4-数据库"><a href="#4-数据库" class="headerlink" title="4. 数据库"></a>4. 数据库</h2><h2 id="5-日志上报"><a href="#5-日志上报" class="headerlink" title="5. 日志上报"></a>5. 日志上报</h2><h2 id="6-名字服务"><a href="#6-名字服务" class="headerlink" title="6. 名字服务"></a>6. 名字服务</h2><h2 id="7-配置服务"><a href="#7-配置服务" class="headerlink" title="7. 配置服务"></a>7. 配置服务</h2><h2 id="8-队列-解耦合"><a href="#8-队列-解耦合" class="headerlink" title="8. 队列(解耦合)"></a>8. 队列(解耦合)</h2><h1 id="开源组件"><a href="#开源组件" class="headerlink" title="开源组件"></a>开源组件</h1><h2 id="zookeeper"><a href="#zookeeper" class="headerlink" title="zookeeper"></a>zookeeper</h2><p>zooKeeper是一个分布式的，开放源码的分布式应用程序协调服务,是hadoop和hbase的重要组件,为分布式应用提供一致性服务.提供java和c的客户端.</p>
<h2 id="etcd"><a href="#etcd" class="headerlink" title="etcd"></a>etcd</h2><p>etcd是一个开源的、分布式的键值对数据存储系统，提供共享配置、服务的注册和发现。etcd相比zookeeper是轻量级的.etcd基于HTTP+JSON的API易于使用<br>raft算法,保证数据一致性,协议简单,容易实现</p>
<h2 id="rabbitmq"><a href="#rabbitmq" class="headerlink" title="rabbitmq"></a>rabbitmq</h2><h2 id="kafka"><a href="#kafka" class="headerlink" title="kafka"></a>kafka</h2><h2 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h2><h2 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h2><h2 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h2><h2 id="tcmalloc"><a href="#tcmalloc" class="headerlink" title="tcmalloc"></a>tcmalloc</h2>]]></content>
      <categories>
        <category>高性能服务器</category>
      </categories>
  </entry>
  <entry>
    <title>数值计算溢出判断</title>
    <url>/2019/04/01/overflow-detection-value/</url>
    <content><![CDATA[<h1 id="数值计算溢出"><a href="#数值计算溢出" class="headerlink" title="数值计算溢出"></a>数值计算溢出</h1><p>在进行数值计算时可能会导致计算后的结果过大或过小,超出数值类型的范围,此处封装数据计算类,在计算前先对计算后的结果进行判断,防止溢出,并给出错误提醒</p>
<a id="more"></a>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _Overflow_Detection_Value_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _Overflow_Detection_Value_H_</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;limits&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> OverflowErrorCode</span><br><span class="line">&#123;</span><br><span class="line">    NoError = <span class="number">0</span>,</span><br><span class="line">    AdditionOverflow,</span><br><span class="line">    SubtractionOverflow,</span><br><span class="line">    MultiplicationOverflow,</span><br><span class="line">    DivisionOverflow</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">TOverflowDetectionValue</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">TOverflowDetectionValue</span><span class="params">(T tValue)</span> : <span class="title">m_tValue</span><span class="params">(tValue)</span> </span>&#123; &#125;</span><br><span class="line">    <span class="keyword">virtual</span> ~TOverflowDetectionValue() &#123; &#125;</span><br><span class="line">    TOverflowDetectionValue(<span class="keyword">const</span> TOverflowDetectionValue &amp;tR)</span><br><span class="line">    &#123;</span><br><span class="line">        m_tValue = tR.m_tValue;</span><br><span class="line">    &#125;</span><br><span class="line">    TOverflowDetectionValue&amp; <span class="keyword">operator</span> =(<span class="keyword">const</span> TOverflowDetectionValue &amp;tR)</span><br><span class="line">    &#123;</span><br><span class="line">        m_tValue = tR.m_tValue;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">inline</span> TOverflowDetectionValue&amp; <span class="keyword">operator</span> =(<span class="keyword">const</span> T &amp;tR)</span><br><span class="line">    &#123;</span><br><span class="line">        m_tValue = tR;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">inline</span> TOverflowDetectionValue <span class="keyword">operator</span> +(<span class="keyword">const</span> TOverflowDetectionValue &amp;tR)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(m_tValue&gt;<span class="number">0</span> &amp;&amp; tR.m_tValue&gt;<span class="number">0</span> &amp;&amp; m_tValue &gt; <span class="built_in">std</span>::numeric_limits&lt;T&gt;::max()-tR.m_tValue)</span><br><span class="line">        &#123;</span><br><span class="line">            m_eError = AdditionOverflow;</span><br><span class="line">            <span class="keyword">return</span> TOverflowDetectionValue(<span class="built_in">std</span>::numeric_limits&lt;T&gt;::max());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(m_tValue&lt;<span class="number">0</span> &amp;&amp; tR.m_tValue&lt;<span class="number">0</span> &amp;&amp; m_tValue &lt; <span class="built_in">std</span>::numeric_limits&lt;T&gt;::min()-tR.m_tValue)</span><br><span class="line">        &#123;</span><br><span class="line">            m_eError = AdditionOverflow;</span><br><span class="line">            <span class="keyword">return</span> TOverflowDetectionValue(<span class="built_in">std</span>::numeric_limits&lt;T&gt;::min());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            TOverflowDetectionValue tTmp;</span><br><span class="line">            tTmp.m_tValue = m_tValue + tR.m_tValue;</span><br><span class="line">            <span class="keyword">return</span> tTmp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">inline</span> TOverflowDetectionValue <span class="keyword">operator</span> +(<span class="keyword">const</span> T &amp;tR)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> (*<span class="keyword">this</span>) + TOverflowDetectionValue(tR);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">inline</span> TOverflowDetectionValue <span class="keyword">operator</span> -(<span class="keyword">const</span> TOverflowDetectionValue &amp;tR)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(m_tValue&gt;<span class="number">0</span> &amp;&amp; tR.m_tValue&lt;<span class="number">0</span> &amp;&amp; m_tValue &gt; <span class="built_in">std</span>::numeric_limits&lt;T&gt;::max()+tR.m_tValue)</span><br><span class="line">        &#123;</span><br><span class="line">            m_eError = SubtractionOverflow;</span><br><span class="line">            <span class="keyword">return</span> TOverflowDetectionValue(<span class="built_in">std</span>::numeric_limits&lt;T&gt;::max());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(m_tValue&lt;<span class="number">0</span> &amp;&amp; tR.m_tValue&gt;<span class="number">0</span> &amp;&amp; m_tValue &lt; <span class="built_in">std</span>::numeric_limits&lt;T&gt;::min()+tR.m_tValue)</span><br><span class="line">        &#123;</span><br><span class="line">            m_eError = SubtractionOverflow;</span><br><span class="line">            <span class="keyword">return</span> TOverflowDetectionValue(<span class="built_in">std</span>::numeric_limits&lt;T&gt;::min());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            TOverflowDetectionValue tTmp;</span><br><span class="line">            tTmp.m_tValue = m_tValue - tR.m_tValue;</span><br><span class="line">            <span class="keyword">return</span> tTmp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">inline</span> TOverflowDetectionValue <span class="keyword">operator</span> -(<span class="keyword">const</span> T &amp;tR)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> (*<span class="keyword">this</span>) - TOverflowDetectionValue(tR);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">inline</span> TOverflowDetectionValue <span class="keyword">operator</span> *(<span class="keyword">const</span> TOverflowDetectionValue &amp;tR)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>((m_tValue&gt;<span class="number">0</span> &amp;&amp; tR.m_tValue&gt;<span class="number">0</span> &amp;&amp; <span class="built_in">std</span>::numeric_limits&lt;T&gt;::max()/m_tValue &lt; tR.m_tValue)</span><br><span class="line">            || (m_tValue&lt;<span class="number">0</span> &amp;&amp; tR.m_tValue&lt;<span class="number">0</span> &amp;&amp; <span class="built_in">std</span>::numeric_limits&lt;T&gt;::max()/m_tValue &gt; tR.m_tValue))     <span class="comment">// MAX &gt; a * b</span></span><br><span class="line">        &#123;</span><br><span class="line">            m_eError = MultiplicationOverflow;</span><br><span class="line">            <span class="keyword">return</span> TOverflowDetectionValue(<span class="built_in">std</span>::numeric_limits&lt;T&gt;::max());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>((m_tValue&gt;<span class="number">0</span> &amp;&amp; tR.m_tValue&lt;<span class="number">0</span> &amp;&amp; <span class="built_in">std</span>::numeric_limits&lt;T&gt;::min()/m_tValue &gt; tR.m_tValue)</span><br><span class="line">            || (m_tValue&lt;<span class="number">0</span> &amp;&amp; tR.m_tValue&gt;<span class="number">0</span> &amp;&amp; <span class="built_in">std</span>::numeric_limits&lt;T&gt;::min()/m_tValue &lt; tR.m_tValue))     <span class="comment">// MIN &lt; a * b</span></span><br><span class="line">        &#123;</span><br><span class="line">            m_eError = MultiplicationOverflow;</span><br><span class="line">            <span class="keyword">return</span> TOverflowDetectionValue(<span class="built_in">std</span>::numeric_limits&lt;T&gt;::min());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">        &#123;</span><br><span class="line">            TOverflowDetectionValue tTmp;</span><br><span class="line">            tTmp.m_tValue = m_tValue * tR.m_tValue;</span><br><span class="line">            <span class="keyword">return</span> tTmp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">inline</span> TOverflowDetectionValue <span class="keyword">operator</span> *(<span class="keyword">const</span> T &amp;tR)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> (*<span class="keyword">this</span>) * TOverflowDetectionValue(tR);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">inline</span> TOverflowDetectionValue <span class="keyword">operator</span> /(<span class="keyword">const</span> TOverflowDetectionValue &amp;tR)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(tR.m_tValue == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            m_eError = DivisionOverflow;</span><br><span class="line">            <span class="keyword">return</span> TOverflowDetectionValue(<span class="built_in">std</span>::numeric_limits&lt;T&gt;::max());</span><br><span class="line">        &#125;</span><br><span class="line">        TOverflowDetectionValue tTmp;</span><br><span class="line">        tTmp.m_tValue = m_tValue / tR.m_tValue;</span><br><span class="line">        <span class="keyword">return</span> tTmp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">inline</span> TOverflowDetectionValue <span class="keyword">operator</span> /(<span class="keyword">const</span> T &amp;tR)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> (*<span class="keyword">this</span>) / TOverflowDetectionValue(tR);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">ResetErrorCode</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        m_eError = NoError;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> T <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m_tValue;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">inline</span> OverflowErrorCode <span class="title">GetErrorCode</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        OverflowErrorCode eRet = m_eError;</span><br><span class="line">        m_eError = NoError;</span><br><span class="line">        <span class="keyword">return</span> eRet;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="built_in">std</span>::<span class="built_in">string</span> <span class="title">GetErrorMsgByErrorCode</span><span class="params">(OverflowErrorCode eCode)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(eCode == NoError) &#123; <span class="keyword">return</span> <span class="string">"No error"</span>; &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (eCode == AdditionOverflow) &#123; <span class="keyword">return</span> <span class="string">"Addition overflow"</span>; &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (eCode == SubtractionOverflow) &#123; <span class="keyword">return</span> <span class="string">"Subtraction overflow"</span>; &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (eCode == MultiplicationOverflow) &#123; <span class="keyword">return</span> <span class="string">"Multiplication overflow"</span>; &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (eCode == DivisionOverflow) &#123; <span class="keyword">return</span> <span class="string">"Division overflowNoError"</span>; &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="string">"Undefined error code"</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    TOverflowDetectionValue()&#123; &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    T m_tValue;</span><br><span class="line">    <span class="keyword">static</span> __thread OverflowErrorCode m_eError;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">__thread OverflowErrorCode TOverflowDetectionValue&lt;T&gt;::m_eError = NoError;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>cpp</category>
      </categories>
      <tags>
        <tag>cpp</tag>
      </tags>
  </entry>
  <entry>
    <title>jsoncpp Reader::parse线程不安全</title>
    <url>/2019/06/05/thread-unsafe-jsoncpp-reader-parse/</url>
    <content><![CDATA[<h1 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h1><p>线上服务异常终止,通过分析core dump信息,对应用层的数据进行分析,排除了应用层的问题,然后怀疑是json库存在问题</p>
<a id="more"></a>
<p>部分core日志信息如下:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">... ...</span><br><span class="line">saveBackTrace|19|CoreTime:2019-06-04 20:05:03 ThreadId:140319607437056 SignalId:6</span><br><span class="line">saveBackTrace|24|backtrace rank:37 addr2line -f -C -e 应用名 地址</span><br><span class="line">saveBackTrace|32|37: program_name(_Z13saveBackTracei+0x436) [0x579926]</span><br><span class="line">saveBackTrace|32|36: /lib64/libc.so.6(+0x32510) [0x7f9f10cfb510]</span><br><span class="line">saveBackTrace|32|35: /lib64/libc.so.6(gsignal+0x35) [0x7f9f10cfb495]</span><br><span class="line">saveBackTrace|32|34: /lib64/libc.so.6(abort+0x175) [0x7f9f10cfcc75]</span><br><span class="line">saveBackTrace|32|33: /usr/lib64/libstdc++.so.6(_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x41) [0x7f9f115b59a1]</span><br><span class="line">saveBackTrace|32|32: /usr/lib64/libstdc++.so.6(+0xbcbe6) [0x7f9f115b3be6]</span><br><span class="line">saveBackTrace|32|31: /usr/lib64/libstdc++.so.6(+0xbcc13) [0x7f9f115b3c13]</span><br><span class="line">saveBackTrace|32|30: /usr/lib64/libstdc++.so.6(+0xbcd32) [0x7f9f115b3d32]</span><br><span class="line">saveBackTrace|32|29: program_name(_ZN4Json17throwRuntimeErrorERKSs+0x3a) [0x6cc8ba]</span><br><span class="line">saveBackTrace|32|28: program_name(_ZN4Json6Reader9readValueEv+0x2a4) [0x6c3404]</span><br><span class="line">saveBackTrace|32|27: program_name(_ZN4Json6Reader9readArrayERNS0_5TokenE+0xb2) [0x6c3532]</span><br><span class="line">saveBackTrace|32|26: program_name(_ZN4Json6Reader9readValueEv+0x15b) [0x6c32bb]</span><br><span class="line">saveBackTrace|32|25: program_name(_ZN4Json6Reader10readObjectERNS0_5TokenE+0x18a) [0x6c2caa]</span><br><span class="line">saveBackTrace|32|24: program_name(_ZN4Json6Reader9readValueEv+0x14b) [0x6c32ab]</span><br><span class="line">saveBackTrace|32|23: program_name(_ZN4Json6Reader9readArrayERNS0_5TokenE+0xb2) [0x6c3532]</span><br><span class="line">saveBackTrace|32|22: program_name(_ZN4Json6Reader9readValueEv+0x15b) [0x6c32bb]</span><br><span class="line">saveBackTrace|32|21: program_name(_ZN4Json6Reader10readObjectERNS0_5TokenE+0x18a) [0x6c2caa]</span><br><span class="line">saveBackTrace|32|20: program_name(_ZN4Json6Reader9readValueEv+0x14b) [0x6c32ab]</span><br><span class="line">saveBackTrace|32|19: program_name(_ZN4Json6Reader5parseEPKcS2_RNS_5ValueEb+0x291) [0x6c3ae1]</span><br><span class="line">... ...</span><br></pre></td></tr></table></figure></p>
<p>可以看到在调用<code>Json::Reader::parse</code>后经过<code>Json::Reader::readValue</code>等调用,最后再调用<code>Json::Reader::readValue</code>时调用<code>Json::throwRuntimeError</code>抛出异常</p>
<p>在<a href="https://github.com/open-source-parsers/jsoncpp" target="_blank" rel="noopener">github jsoncpp</a>下载<a href="https://github.com/open-source-parsers/jsoncpp/archive/0.10.7.zip" target="_blank" rel="noopener">jsoncpp源码</a></p>
<p>查看函数<code>Reader::readValue()</code><br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Reader::readValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (stackDepth_g &gt;= stackLimit_g) throwRuntimeError(<span class="string">"Exceeded stackLimit in readValue()."</span>);</span><br><span class="line">  ++stackDepth_g;</span><br><span class="line">  ... ...</span><br><span class="line">  --stackDepth_g;</span><br><span class="line">  <span class="keyword">return</span> successful;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>可以看到只有一个地方会调用<code>Json::throwRuntimeError</code>抛出异常,而<code>stackDepth_g</code>是个坑爹的静态全局变量,线程不安全,而出问题的服务是多线程的<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> <span class="keyword">const</span> stackLimit_g = <span class="number">1000</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span>       stackDepth_g = <span class="number">0</span>;  <span class="comment">// see readValue()</span></span><br></pre></td></tr></table></figure></p>
<h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//stackDepth_是OurReader的成员变量</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">OurReader::readValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (stackDepth_ &gt;= features_.stackLimit_) throwRuntimeError(<span class="string">"Exceeded stackLimit in readValue()."</span>);</span><br><span class="line">  ++stackDepth_;</span><br><span class="line">  ... ...</span><br><span class="line">  --stackDepth_;</span><br><span class="line">  <span class="keyword">return</span> successful;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>分析源码,找到一个线程安全的Json解析类<code>Json::OurReader</code>,但该类在<code>reader.h</code>未声明,通过查看代码可以使用以下方法使用<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Json::FromString</span><span class="params">(Json::Value &amp;value, <span class="keyword">const</span> <span class="built_in">string</span> &amp;data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(data.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> Json::CharReaderBuilder oBuilder;</span><br><span class="line">    <span class="function"><span class="built_in">std</span>::<span class="built_in">auto_ptr</span>&lt;Json::CharReader&gt; <span class="title">pReader</span><span class="params">(oBuilder.newCharReader())</span></span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="literal">NULL</span> == pReader.get())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* begin = data.c_str();</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* end = begin + data.length();</span><br><span class="line">    <span class="built_in">string</span> strError;</span><br><span class="line">    <span class="keyword">bool</span> bRet = pReader-&gt;parse(begin, end, &amp;value, &amp;strError);</span><br><span class="line">    <span class="keyword">return</span> bRet;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>cpp</category>
      </categories>
      <tags>
        <tag>cpp</tag>
      </tags>
  </entry>
  <entry>
    <title>服务器开发-网络通信API和注意事项</title>
    <url>/2019/03/23/server-network-api/</url>
    <content><![CDATA[<h1 id="Linux下网络编程常用函数"><a href="#Linux下网络编程常用函数" class="headerlink" title="Linux下网络编程常用函数"></a>Linux下网络编程常用函数</h1><p>需要包含头文件<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br></pre></td></tr></table></figure></p>
<h2 id="socket"><a href="#socket" class="headerlink" title="socket"></a>socket</h2><p>socket函数建立协议簇为aomain 协议类型为type 协议类型的某个特定类型为protocol的套接字文件描述符<br>成功返回标识套接字的文件描述符 失败返回-1,错误原因通过查看errno获得<br>常用协议簇 domain</p>
<ol>
<li>AF_UNIX 本机通信</li>
<li>AF_INET IPV4</li>
<li>AF_INET6 IPV6</li>
</ol>
<p>常用协议类型 type</p>
<ol>
<li>SOCK_STREAM TCP套接字</li>
<li>SOCK_DGRAM UDP套接字</li>
<li>SOCK_RAM 原始套接字</li>
</ol>
<p>协议类型的特定类型 protocol 一般置为0即可<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">socket</span><span class="params">(<span class="keyword">int</span> domain, <span class="keyword">int</span> type, <span class="keyword">int</span> protocol)</span></span>;</span><br></pre></td></tr></table></figure></p>
<h2 id="fcntl"><a href="#fcntl" class="headerlink" title="fcntl"></a>fcntl</h2><p>fcntl函数针对文件描述符提供各种操作控制以改变已打开文件的各种属性<br>网络编程中主要使用其设置为阻塞和设置为非阻塞功能<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fcntl</span><span class="params">(<span class="keyword">int</span> fd, <span class="keyword">int</span> cmd, <span class="keyword">long</span> arg)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置为非阻塞</span></span><br><span class="line"><span class="keyword">int</span> flags = fcntl(sockfd, F_GETFL, <span class="number">0</span>);</span><br><span class="line">fcntl(sockfd, F_SETFL, flags | O_NONBLOCK);</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置为阻塞</span></span><br><span class="line"><span class="keyword">int</span> flags = fcntl(sockfd, F_GETFL, <span class="number">0</span>);</span><br><span class="line">fcntl(sockfd, F_SETFL, flags &amp; ~O_NONBLOCK);</span><br></pre></td></tr></table></figure></p>
<h2 id="getsockopt和setsockopt"><a href="#getsockopt和setsockopt" class="headerlink" title="getsockopt和setsockopt"></a>getsockopt和setsockopt</h2><h3 id="getsockopt"><a href="#getsockopt" class="headerlink" title="getsockopt"></a>getsockopt</h3><p>getsockopt()函数用于获取任意类型、任意状态套接口的选项当前值，并把结果存入optval<br>sockfd 套接字文件描述符<br>level 选项定义的层次<br>optname 需获取的套接字选项<br>optval 指向存放所得选项值的缓冲区<br>optlen 指向optval缓冲区的长度值<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getsockopt</span><span class="params">(<span class="keyword">int</span> sockfd, <span class="keyword">int</span> level, <span class="keyword">int</span> optname, <span class="keyword">void</span> *optval, <span class="keyword">socklen_t</span> *optlen)</span></span>;</span><br></pre></td></tr></table></figure></p>
<h3 id="setsockopt"><a href="#setsockopt" class="headerlink" title="setsockopt"></a>setsockopt</h3><p>setsockopt()函数用于任意类型、任意状态套接口的设置选项值。<br>sockfd 套接字文件描述符<br>level 选项定义的层次<br>optname 需获取的套接字选项<br>optval 指向存放所得选项值的缓冲区<br>optlen 指向optval缓冲区的长度值<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">setsockopt</span><span class="params">(<span class="keyword">int</span> sockfd, <span class="keyword">int</span> level, <span class="keyword">int</span> optname, <span class="keyword">const</span> <span class="keyword">void</span> *optval, <span class="keyword">socklen_t</span> optlen)</span></span>;</span><br></pre></td></tr></table></figure></p>
<h3 id="常用level和选项"><a href="#常用level和选项" class="headerlink" title="常用level和选项"></a>常用level和选项</h3><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">level级别</th>
<th style="text-align:center">optname选项名</th>
<th style="text-align:center">选项值数据类型</th>
<th style="text-align:center">适用函数</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">SOL_SOCKET</td>
<td style="text-align:center">SO_ERROR</td>
<td style="text-align:center">int</td>
<td style="text-align:center">getsockopt</td>
<td style="text-align:left">获取并清除套接字错误</td>
</tr>
<tr>
<td style="text-align:center">SOL_SOCKET</td>
<td style="text-align:center">SO_REUSEADDR</td>
<td style="text-align:center">int</td>
<td style="text-align:center">setsockopt</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:center">SOL_SOCKET</td>
<td style="text-align:center">SO_REUSEPORT</td>
<td style="text-align:center">int</td>
<td style="text-align:center">setsockopt</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:center">SOL_SOCKET</td>
<td style="text-align:center">SO_KEEPALIVE</td>
<td style="text-align:center">int</td>
<td style="text-align:center">setsockopt</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:center">SOL_SOCKET</td>
<td style="text-align:center">SO_LINGER</td>
<td style="text-align:center">struct linger</td>
<td style="text-align:center">setsockopt</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:center">IPPROTO_TCP</td>
<td style="text-align:center">TCP_DEFER_ACCEPT</td>
<td style="text-align:center">int</td>
<td style="text-align:center">setsockopt</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:center">IPPROTO_TCP</td>
<td style="text-align:center">TCP_NODELAY</td>
<td style="text-align:center">int</td>
<td style="text-align:center">setsockopt</td>
<td style="text-align:left">禁用Nagle算法</td>
</tr>
</tbody>
</table>
</div>
<h2 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h2><p>bind函数绑定套接字和地址, 成功返回0, 失败返回-1, 错误原因可以通过errno获得 地址为32位的IPv4地址或128位的IPv6地址与16位的TCP或UDP端口的组合<br>sockfd 套接字文件描述符 通过socket函数获得<br>addr 指向特定协议的地址结构的指针 绑定0.0.0.0则绑定该机器上任意网卡地址,绑定127.0.0.1则只会绑定本地回环地址127.0.0.1<br>addrlen 该地址结构的长度<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr</span> &#123;</span></span><br><span class="line">   <span class="keyword">sa_family_t</span> sa_family;</span><br><span class="line">   <span class="keyword">char</span>        sa_data[<span class="number">14</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bind</span><span class="params">(<span class="keyword">int</span> sockfd, <span class="keyword">const</span> struct sockaddr *addr, <span class="keyword">socklen_t</span> addrlen)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//示例</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">addr</span>;</span></span><br><span class="line"><span class="comment">/*设置sockaddr结构*/</span></span><br><span class="line">addr.sin_family=AF_INET;</span><br><span class="line">addr.sin_port=htons(SERVPORT);</span><br><span class="line">addr.sin_addr.s_addr=INADDR_ANY;</span><br><span class="line">bzero(&amp;(addr.sin_zero), <span class="number">8</span>);</span><br><span class="line">bind(sockfd,(struct sockaddr*)&amp;addr, <span class="keyword">sizeof</span>(struct sockaddr))</span><br></pre></td></tr></table></figure></p>
<h2 id="listen"><a href="#listen" class="headerlink" title="listen"></a>listen</h2><p>listen监听函数,将一个套接字转化为监听套接字<br>sockfd 套接字文件描述符<br>backlog 连接建立完成的队列的长度<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">listen</span><span class="params">(<span class="keyword">int</span> sockfd, <span class="keyword">int</span> backlog)</span></span>;</span><br></pre></td></tr></table></figure></p>
<h2 id="accept"><a href="#accept" class="headerlink" title="accept"></a>accept</h2><p>accept接受连接 成功则返回建立了连接的套接字文件描述符 失败返回-1 错误原因通过查看errno获得<br>当监听的sockfd被设置为非阻塞而errno为<code>EWOULDBLOCK</code>、<code>ECONNABORTED</code>、<code>EPROTO</code>、<code>EINTR</code>时需要忽略错误<br>sockfd 套接字文件描述符<br>addr 用来保存发起连接的主机的IP和端口号<br>addrlen addr指向的长度<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">accept</span><span class="params">(<span class="keyword">int</span> sockfd, struct sockaddr *addr, <span class="keyword">socklen_t</span> *addrlen)</span></span>;</span><br></pre></td></tr></table></figure></p>
<h2 id="connect"><a href="#connect" class="headerlink" title="connect"></a>connect</h2><p>connect用于主动建立一个连接 成功返回0 失败返回-1 错误原因可以通过errno获得<br>当发起连接的sockfd被设置为非阻塞而errno为<code>EINPROGRESS</code>表示连接操作正在进行中,但是仍未完成.然后将sockfd的加入到I/O复用中,监听sockfd是否可读或者可写,如果只可写说明连接成功,如果即可读又可写分为两种情况:</p>
<ol>
<li>sockfd连接错误</li>
<li>sockfd连接成功,socket读缓冲区得到了远程主机发送的数据</li>
</ol>
<p>通过<code>getsockopt(sockfd, SOL_SOCKET, SO_ERROR, (void*)&amp;e, &amp;elen)</code>获取sockfd错误信息 如果e为0表示连接成功 否则连接失败<br>sockfd 套接字文件描述符<br>addr 指向特定协议的地址结构的指针<br>addrlen 该地址结构的长度<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">connect</span><span class="params">(<span class="keyword">int</span> sockfd, <span class="keyword">const</span> struct sockaddr *addr, <span class="keyword">socklen_t</span> addrlen)</span></span>;</span><br></pre></td></tr></table></figure></p>
<h1 id="如何将一个sockfd设为非阻塞"><a href="#如何将一个sockfd设为非阻塞" class="headerlink" title="如何将一个sockfd设为非阻塞"></a>如何将一个sockfd设为非阻塞</h1><ol>
<li><p>调用socket函数时设置</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> s = socket(AF_INET, SOCK_STREAM | SOCK_NONBLOCK, IPPROTO_TCP);</span><br></pre></td></tr></table></figure>
</li>
<li><p>accept改为调用accept4设置最后的标记位为SOCK_NONBLOCK</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">accept</span><span class="params">(<span class="keyword">int</span> sockfd, struct sockaddr *addr, <span class="keyword">socklen_t</span> *addrlen)</span></span>; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">accept4</span><span class="params">(<span class="keyword">int</span> sockfd, struct sockaddr *addr, <span class="keyword">socklen_t</span> *addrlen, <span class="keyword">int</span> flags)</span></span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>调用fcntl或ioctl函数(常用fcntl)</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">fcntl(sockfd, F_SETFL, fcntl(sockfd, F_GETFL, <span class="number">0</span>) | O_NONBLOCK);</span><br><span class="line">ioctl(sockfd, FIONBIO, <span class="number">1</span>);  <span class="comment">//1:非阻塞 0:阻塞</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="connect非阻塞代码编写"><a href="#connect非阻塞代码编写" class="headerlink" title="connect非阻塞代码编写"></a>connect非阻塞代码编写</h1><p>connect能立即连接成功,则返回0;如果连接操作正在进行中或连接出错,则返回-1,连接操作正在进行中可通过<code>errno</code>为<code>EINPROGRESS</code>或<code>EINTR</code>(中断)判断.然后将该sockfd放入I/O复用中进行,监听sockfd可读</p>
<h1 id="非阻塞socket正确收发数据"><a href="#非阻塞socket正确收发数据" class="headerlink" title="非阻塞socket正确收发数据"></a>非阻塞socket正确收发数据</h1><p>非阻塞情况下recv数据</p>
<ol>
<li>返回值大于0表示接收数据的大小</li>
<li>返回值等于0表示对端关闭连接</li>
<li>返回值为-1,<code>errno</code>为<code>EWOULDBLOCK</code>或<code>EINTR</code>时接收完毕</li>
</ol>
<p>在epoll的ET(边缘触发)模式下,一定要循环收取数据,直到收取干净为止.</p>
<p>非阻塞情况下send数据</p>
<ol>
<li>返回值大于0表示发送数据的大小</li>
<li>返回值等于0表示对端关闭连接</li>
<li>返回值为-1,<code>errno</code>为<code>EWOULDBLOCK</code>表示TCP窗口容量不足,<code>errno</code>为<code>EINTR</code>表示中断,继续发送数据</li>
</ol>
<h1 id="丢包-粘包-包不完整"><a href="#丢包-粘包-包不完整" class="headerlink" title="丢包/粘包/包不完整"></a>丢包/粘包/包不完整</h1><p>丢包:TCP是可靠的,不会丢包,也不存在包顺序错乱的问题<br>粘包:收取一个固定大小的包头信息,根据包头里面指定的包体大小收取包体大小<br>包不完整:循环接受数据,当发现包头或包体大小不够,数目数据不完整,继续等待新的数据到来</p>
<h1 id="Nagle算法"><a href="#Nagle算法" class="headerlink" title="Nagle算法"></a>Nagle算法</h1><p>nagle是操作系统网络通信层的一种发送数据包的机制.开启nagle算法后,一次放入网卡缓冲区的数据较小时,可能不会立即发出,只有当多次send或write之后,网卡缓冲区数据足够多时,才一次性发出.操作系统利用nagle算法减少网络通信次数,提供网络利用率,对于实时性要求比较高的应用,可以禁用nagle算法.<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">long</span> noDelay = <span class="number">1</span>;</span><br><span class="line">setsockopt(sockfd, IPPROTO_TCP, TCP_NODELAY,(LPSTR)&amp;noDelay, <span class="keyword">sizeof</span>(<span class="keyword">long</span>));     <span class="comment">//noDelay为1禁用nagle算法，为0启用nagle算法</span></span><br></pre></td></tr></table></figure></p>
<h1 id="SO-REUSEADDR和SO-REUSEPORT"><a href="#SO-REUSEADDR和SO-REUSEPORT" class="headerlink" title="SO_REUSEADDR和SO_REUSEPORT"></a>SO_REUSEADDR和SO_REUSEPORT</h1><p>套接字由相关五元组组成:协议、本地地址、本地端口、远程地址、远程端口<br>解决一个socket被系统回收以后,在一个最大存活期(MSL，大约2分钟)内,该socket绑定的地址和端口号不能被重复利用的情况</p>
<h1 id="心跳包"><a href="#心跳包" class="headerlink" title="心跳包"></a>心跳包</h1><p>TCP协议的keepalive机制(开启<code>SO_KEEPALIVE</code>选项)<br>应用层心跳:</p>
<ol>
<li>定时发送心跳包(只在两端没有数据往来的N秒后才需要发送,减轻服务器压力,减少网络通信流量)</li>
<li>由客户端发给服务端</li>
</ol>
<h1 id="重连"><a href="#重连" class="headerlink" title="重连"></a>重连</h1><h1 id="错误码EINTR"><a href="#错误码EINTR" class="headerlink" title="错误码EINTR"></a>错误码EINTR</h1><p>Linux网络函数(connect/send/recv/epoll_wait等)在出错时一定要检查错误是不是EINTR,如果是EINTR,操作其实只是被信号中断了,函数调用并没有出错.</p>
<h1 id="减少系统调用"><a href="#减少系统调用" class="headerlink" title="减少系统调用"></a>减少系统调用</h1><p>系统调用伴随着从用户空间到内核空间的切换.</p>
<h1 id="忽略SIGPIPE信息"><a href="#忽略SIGPIPE信息" class="headerlink" title="忽略SIGPIPE信息"></a>忽略SIGPIPE信息</h1><p>对一个已经收到FIN包的socket调用read方法,如果接收缓冲已空,则返回0,即连接已关闭.对一个已经收到FIN包的socket第一次调用write方法时,如果发送缓冲没问题,则write调用会返回写入的数据量,同时进行数据发送.但是发送出去的报文会导致对端发回RST报文.因为对端的socket已经调用了close进行了完全关闭,已经处于既不发送,也不接收数据的状态.所以第二次调用write方法时(假设在收到RST之后)会生成SIGPIPE信号,导致进程退出.<br>通俗点:对一个对端已经关闭的socket调用两次write,第二次将生成SIGPIPE信号.在写管道时,读进程已经终止,也将产生SIGPIPE信号<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">signal(SIGPIPE, SIG_IGN);       <span class="comment">//屏蔽SIGPIPE信号后,第二次调用write方法时,会返回-1,并设置errno为EPIPE.</span></span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>高性能服务器</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>cpp</tag>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>服务器负载均衡</title>
    <url>/2019/07/04/load-balance/</url>
    <content><![CDATA[<h1 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h1><a id="more"></a>
<h1 id="负载均衡常见方式"><a href="#负载均衡常见方式" class="headerlink" title="负载均衡常见方式"></a>负载均衡常见方式</h1><h2 id="基于DNS的负载均衡"><a href="#基于DNS的负载均衡" class="headerlink" title="基于DNS的负载均衡"></a>基于DNS的负载均衡</h2><p>利用域名转化为IP由DNS服务器完成的特点，将一个域名绑定多个IP，DNS服务器按照特定的算法返回其中一个IP给用户，实现服务器集群的负载均衡。</p>
<p>优点:</p>
<ol>
<li>配置简单，只需要在DNS服务器配置域名和IP的映射</li>
<li>扩展性强，服务器增加只需要增加域名映射的IP</li>
<li>就近访问，可以根据用户的地理位置，选择一个地理位置近的服务器IP</li>
</ol>
<p>缺点：</p>
<ol>
<li>DNS有缓存机制，服务器故障时由于DNS服务缓存了故障服务器的IP，用户请求时，DNS任然返回故障的服务器IP<ol>
<li>缩短IP缓存时间</li>
<li>自建DNS服务器</li>
</ol>
</li>
<li>只能将所有请求平均分配，无法动态的了解每台服务器的负载情况</li>
</ol>
<p>动态DNS：通过程序动态修改DNS服务器的域名解析，当监控程序发现某台服务器挂掉后，立即通知DNS将其删掉。</p>
<h2 id="七层负载均衡器"><a href="#七层负载均衡器" class="headerlink" title="七层负载均衡器"></a>七层负载均衡器</h2><p>基于<strong>应用层</strong>协议中的信息进行负载均衡。<br>代表为Nginx的反向代理负载均衡，性能大致为5万QPS<br>反向代理服务器是一个位于实际服务器的之前的服务器，所有请求都需要经过反向代理服务器，由反向代理服务器判断直接返回结果，或者再请求后端的服务器进行处理，得到处理结果再返回。<br>反向代理服务器也可以承担后盾服务器集群的负载均衡工作，根据特定策略将请求转发到一台后端服务器，处理完毕后将结果再转发给用户。</p>
<p>优点：</p>
<ol>
<li>隐藏后端服务器。</li>
<li>故障转移，一台后端服务器出现问题，反向代理服务器可以迅速感知，并将其下线。</li>
<li>合理的负载均衡，反向代理服务器可以设定后台服务器的权重，根据权重进行更合理的负载均衡。</li>
</ol>
<p>缺点：</p>
<ol>
<li>调度者压力过大，所有请求都要过反向代理服务器，反向代理服务器成为瓶颈</li>
<li>扩展性不足，反向代理服务器的吞吐制约后台服务器的增加</li>
</ol>
<p>粘滞会话：如果后台服务器是有状态的，那么一个用户的请求应该始终落到该后台服务器</p>
<ol>
<li>使用唯一标识进行请求的分配，按策略将相同标识的请求分发到同一台后台服务器</li>
<li>在请求中标注要访问的后台服务器，请求时按照标注的后台服务器进行转发</li>
</ol>
<h2 id="四层负载均衡器"><a href="#四层负载均衡器" class="headerlink" title="四层负载均衡器"></a>四层负载均衡器</h2><p>基于<strong>IP和端口</strong>的负载均衡。<br>代表为LVS的VIP（Virtual IP 虚拟IP技术）<br>一般IP和物理网卡是绑定的，VIP则不然，当外网的请求访问该VIP时，VIP不和任何具体的设备相关，而是动态的映射到不同的机器设备上，起到负载均衡的效果。</p>
<h1 id="负载均衡常见算法"><a href="#负载均衡常见算法" class="headerlink" title="负载均衡常见算法"></a>负载均衡常见算法</h1><ul>
<li>随机</li>
<li>加权随机</li>
<li>轮询</li>
<li>加权轮询</li>
<li>键值范围法：按照键的范围进行负载</li>
<li>Hash法：根据键进行哈希，选定一个后台服务器</li>
<li>最小连接数：将请求分发到连接数最少的服务器</li>
<li>最快响应速度：将请求分发到返回响应时间最少的服务器</li>
<li>观察算法：根据连接数和响应速度计算出机器负载，选负载低的一个服务分发请求</li>
<li>预判算法：在观察算法的基础上增加预判算法，预判负载低的一个服务分发请求</li>
</ul>
<h1 id="一致性Hash"><a href="#一致性Hash" class="headerlink" title="一致性Hash"></a>一致性Hash</h1><h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><ul>
<li><a href="https://cloud.tencent.com/developer/news/245104" target="_blank" rel="noopener">浅谈负载均衡</a></li>
<li><a href="https://blog.csdn.net/github_37515779/article/details/79953788" target="_blank" rel="noopener">高并发解决方案之一 ——负载均衡</a></li>
<li><a href="https://www.jianshu.com/p/8a61de3f8be9" target="_blank" rel="noopener">LVS原理介绍</a></li>
<li><a href="https://www.cnblogs.com/xujiming/p/5448748.html" target="_blank" rel="noopener">负载均衡的基本算法</a></li>
<li><a href="https://www.jianshu.com/p/e3ac7d42c408" target="_blank" rel="noopener">一篇读懂分布式架构下的负载均衡</a></li>
<li><a href="https://www.jianshu.com/p/e968c081f563" target="_blank" rel="noopener">深入浅出一致性Hash原理</a></li>
</ul>
]]></content>
      <categories>
        <category>基础</category>
      </categories>
      <tags>
        <tag>负载均衡</tag>
      </tags>
  </entry>
  <entry>
    <title>libmysqlclient 常用api学习</title>
    <url>/2019/06/20/study-libmysqlclient/</url>
    <content><![CDATA[<p>在开始、提交、回滚事务时推荐使用SQL语句<code>START TRANSACTION</code>、<code>COMMIT</code>、<code>ROLLBACK</code>然后执行进行操作，可以统一断线重连的处理逻辑。</p>
<a id="more"></a>
<h1 id="api使用流程图"><a href="#api使用流程图" class="headerlink" title="api使用流程图"></a>api使用流程图</h1><p><img src="/Picture/libmysqlclient_api.png" alt="libmysqlclient api"></p>
<h1 id="mysql-init"><a href="#mysql-init" class="headerlink" title="mysql_init"></a>mysql_init</h1><p>原型: <code>MYSQL *mysql_init(MYSQL *mysql)</code><br>描述: 分配或初始化与<code>mysql_real_connect()</code>相适应的MYSQL对象.如果mysql是NULL指针,该函数将分配、初始化、并返回新对象.否则,将初始化对象,并返回对象的地址. 如果<code>mysql_init()</code>分配了新的对象,当调用<code>mysql_close()</code>来关闭连接时.将释放该对象.<br>返回值: 初始化的MYSQL*句柄.如果无足够内存以分配新的对象,返回NULL.<br>错误: 在内存不足的情况下,返回NULL.</p>
<h1 id="mysql-close"><a href="#mysql-close" class="headerlink" title="mysql_close"></a>mysql_close</h1><p>原型: <code>void mysql_close(MYSQL *mysql)</code><br>描述: 关闭前面打开的连接.如果句柄是由<code>mysql_init()</code>或<code>mysql_connect()</code>自动分配的,<code>mysql_close()</code>还将解除分配由mysql指向的连接句柄.<br>返回值: 无<br>错误: 无</p>
<h1 id="mysql-options"><a href="#mysql-options" class="headerlink" title="mysql_options"></a>mysql_options</h1><h1 id="mysql-real-connect"><a href="#mysql-real-connect" class="headerlink" title="mysql_real_connect"></a>mysql_real_connect</h1><p>原型: <code>MYSQL *mysql_real_connect(MYSQL *mysql, const char *host, const char *user, const char *passwd, const char *db, unsigned int port, const char *unix_socket, unsigned long client_flag)</code><br>描述: <code>mysql_real_connect()</code>尝试与运行在主机上的MySQL数据库引擎建立连接.在执行需要有效MySQL连接句柄结构的任何其他API函数之前,<code>mysql_real_connect()</code>必须成功完成.<br>参数的指定方式如下:</p>
<pre><code>* `mysql`应是已有MYSQL结构的地址.调用`mysql_real_connect()`之前,必须调用`mysql_init()`来初始化MYSQL结构.通过`mysql_options()`调用,可更改多种连接选项.
* `host`的值必须是主机名或IP地址
* `user`用户的MySQL登录名
* `passwd`用户的密码
* `db`数据库名称
* `port`端口号
* `unix_socket`表示连接类型
* `client_flag`通常为0
</code></pre><p>返回值:</p>
<pre><code>1. 如果连接成功,返回MYSQL*连接句柄.如果连接失败,返回NULL.对于成功的连接,返回值与第1个参数的值相同.
2. 错误
    1. CR_CONN_HOST_ERROR 无法连接到MySQL服务器
    2. CR_CONNECTION_ERROR 无法连接到本地MySQL服务器
    3. CR_IPSOCK_ERROR 无法创建IP套接字
    4. CR_OUT_OF_MEMORY 内存溢出
    5. CR_SOCKET_CREATE_ERROR 无法创建Unix套接字
    6. CR_UNKNOWN_HOST 无法找到主机名的IP地址
    7. CR_VERSION_ERROR 协议不匹配
    8. CR_NAMEDPIPEOPEN_ERROR 无法在Windows平台下创建命名管道
    9. CR_NAMEDPIPEWAIT_ERROR 在Windows平台下等待命名管道失败
    10. CR_NAMEDPIPESETSTATE_ERROR 在Windows平台下获取管道处理程序失败
    11. CR_SERVER_LOST 如果`connect_timeout&gt;0`,而且在连接服务器时所用时间长于`connect_timeout`秒,或在执行init-command时服务器消失.
</code></pre><h1 id="mysql-real-query"><a href="#mysql-real-query" class="headerlink" title="mysql_real_query"></a>mysql_real_query</h1><p>原型: <code>int mysql_real_query(MYSQL *mysql, const char *query, unsigned long length)</code><br>描述: 执行由<code>query</code>指向的SQL查询,<code>length</code>是字符串<code>query</code>的长度<br>返回值: 如果查询成功,返回0.如果出现错误,返回非0值.<br>错误: </p>
<ul>
<li>CR_COMMANDS_OUT_OF_SYNC 以不恰当的顺序执行了命令</li>
<li>CR_SERVER_GONE_ERROR MySQL服务器不可用</li>
<li>CR_SERVER_LOST 在查询过程中,与服务器的连接丢失</li>
<li>CR_UNKNOWN_ERROR 出现未知错误</li>
</ul>
<h1 id="mysql-store-result"><a href="#mysql-store-result" class="headerlink" title="mysql_store_result"></a>mysql_store_result</h1><p>原型: <code>MYSQL_RES *mysql_store_result(MYSQL *mysql)</code><br>描述: 对于成功检索了数据的每个查询(SELECT、SHOW、DESCRIBE、EXPLAIN、CHECK TABLE等),必须调用<code>mysql_store_result()</code>或<code>mysql_use_result()</code>获得返回结果集.mysql_store_result()将查询的全部结果读取到客户端,分配1个MYSQL_RES结构,并将结果置于该结构中.如果未返回行,将返回空的结果集.(空结果集设置不同于作为返回值的空指针)<br>返回值: 具有多个结果的MYSQL_RES结果集合.如果出现错误,返回NULL.<br>错误:</p>
<ol>
<li>成功,<code>mysql_store_result()</code>将复位<code>mysql_error()</code>和<code>mysql_errno()</code></li>
<li>错误:<ul>
<li>CR_COMMANDS_OUT_OF_SYNC 以不恰当的顺序执行了命令</li>
<li>CR_OUT_OF_MEMORY 内存溢出</li>
<li>CR_SERVER_GONE_ERROR MySQL服务器不可用</li>
<li>CR_SERVER_LOST 在查询过程中,与服务器的连接丢失</li>
<li>CR_UNKNOWN_ERROR 出现未知错误</li>
</ul>
</li>
</ol>
<h1 id="mysql-free-result"><a href="#mysql-free-result" class="headerlink" title="mysql_free_result"></a>mysql_free_result</h1><p>原型: <code>void mysql_free_result(MYSQL_RES *result)</code><br>描述: 释放由<code>mysql_store_result()</code>、<code>mysql_use_result()</code>、<code>mysql_list_dbs()</code>等为结果集分配的内存.完成对结果集的操作后,必须调用<code>mysql_free_result()</code>释放结果集使用的内存.释放完成后,不要尝试访问结果集.<br>返回值: 无<br>错误: 无</p>
<h1 id="mysql-field-count"><a href="#mysql-field-count" class="headerlink" title="mysql_field_count"></a>mysql_field_count</h1><p>原型: <code>unsigned int mysql_field_count(MYSQL *mysql)</code><br>描述: 返回作用在连接上的最近一次查询结果集的列数.<br>返回值: 表示结果集中列数的无符号整数.<br>错误: 无.</p>
<h1 id="mysql-num-fields"><a href="#mysql-num-fields" class="headerlink" title="mysql_num_fields"></a>mysql_num_fields</h1><p>原型: <code>unsigned int mysql_num_fields(MYSQL_RES *result)</code><br>描述: 返回结果集中的列数.<br>返回值: 表示结果集中列数的无符号整数.<br>错误: 无</p>
<h1 id="mysql-fetch-fields"><a href="#mysql-fetch-fields" class="headerlink" title="mysql_fetch_fields"></a>mysql_fetch_fields</h1><p>原型: <code>MYSQL_FIELD *mysql_fetch_fields(MYSQL_RES *result)</code><br>描述: 对于结果集,返回所有MYSQL_FIELD结构的数组.每个结构提供了结果集中列的字段定义.<br>返回值: 关于结果集所有列的MYSQL_FIELD结构的数组.<br>错误: 无</p>
<h1 id="mysql-num-rows"><a href="#mysql-num-rows" class="headerlink" title="mysql_num_rows"></a>mysql_num_rows</h1><p>原型: <code>my_ulonglong mysql_num_rows(MYSQL_RES *result)</code><br>m描述: 返回结果集中的行数.<br>返回值: 结果集中的行数.<br>错误: 无.</p>
<h1 id="mysql-data-seek"><a href="#mysql-data-seek" class="headerlink" title="mysql_data_seek"></a>mysql_data_seek</h1><p>原型: <code>void mysql_data_seek(MYSQL_RES *result, my_ulonglong offset)</code><br>描述: 在查询结果集中寻找任意行.偏移值为行号,范围从0到<code>mysql_num_rows(result)-1</code>.该函数要求结果集结构包含查询的所有结果,因此,<code>mysql_data_seek()</code>仅应与<code>mysql_store_result()</code>联合使用,而不是与<code>mysql_use_result()</code>联合使用.<br>返回值: 无<br>错误: 无</p>
<h1 id="mysql-fetch-row"><a href="#mysql-fetch-row" class="headerlink" title="mysql_fetch_row"></a>mysql_fetch_row</h1><p>原型: <code>MYSQL_ROW mysql_fetch_row(MYSQL_RES *result)</code><br>描述: 检索结果集的下一行.在<code>mysql_store_result()</code>之后使用时,如果没有要检索的行,<code>mysql_fetch_row()</code>返回NULL;在<code>mysql_use_result()</code>之后使用时,如果没有要检索的行或出现了错误,mysql_fetch_row()返回NULL.行内值的数目由<code>mysql_num_fields(result)</code>给出.如果行中保存了调用<code>mysql_fetch_row()</code>返回的值,将按照<code>row[0]</code>到<code>row[mysql_num_fields(result)-1]</code>,访问这些值的指针.行中的NULL值由NULL指针指明.可以通过调用<code>mysql_fetch_lengths()</code>来获得行中字段值的长度.对于空字段以及包含NULL的字段,长度为0.通过检查字段值的指针,能够区分它们.如果指针为NULL,字段为NULL,否则字段为空.<br>返回值: 下一行的MYSQL_ROW结构.如果没有更多要检索的行或出现了错误,返回NULL.<br>错误: 注意,在对mysql_fetch_row()的两次调用之间,不会复位错误.</p>
<ul>
<li>CR_SERVER_LOST 在查询过程中,与服务器的连接丢失</li>
<li>CR_UNKNOWN_ERROR 出现未知错误</li>
</ul>
<h1 id="mysql-use-result"><a href="#mysql-use-result" class="headerlink" title="mysql_use_result"></a>mysql_use_result</h1><p>原型: <code>MYSQL_RES *mysql_use_result(MYSQL *mysql)</code><br>描述: 对于成功检索数据的每个查询(SELECT、SHOW、DESCRIBE、EXPLAIN),必须调用<code>mysql_store_result()</code>或<code>mysql_use_result()</code>.<code>mysql_use_result()</code>将初始化结果集检索,然后必须通过对<code>mysql_fetch_row()</code>的调用,对每一行分别进行检索.将直接从服务器读取结果,而不会将其保存在临时表或本地缓冲区内.使用<code>mysql_use_result()</code>时,必须执行<code>mysql_fetch_row()</code>,直至返回NULL值,否则,未获取的行将作为下一个检索的一部分返回.C API给出命令不同步错误,如果忘记了执行该操作,将不能运行该命令.不应与从<code>mysql_use_result()</code>返回的结果一起使用<code>mysql_data_seek()</code>、<code>mysql_row_seek()</code>、<code>mysql_row_tell()</code>、<code>mysql_num_rows()</code>或<code>mysql_affected_rows()</code>,也不应发出其他查询,直至<code>mysql_use_result()</code>完成为止,当提取了所有行后,<code>mysql_num_rows()</code>将准确返回提取的行数.一旦完成了对结果集的操作,必须调用<code>mysql_free_result()</code><br>返回值: MYSQL_RES结果结构.如果出现错误,返回NULL.<br>错误: </p>
<ol>
<li>如果成功,<code>mysql_use_result()</code>将复位<code>mysql_error()</code>和<code>mysql_errno()</code>.</li>
<li>错误:<ul>
<li>CR_COMMANDS_OUT_OF_SYNC 以不恰当的顺序执行了命令. </li>
<li>CR_OUT_OF_MEMORY 内存溢出. </li>
<li>CR_SERVER_GONE_ERROR MySQL服务器不可用. </li>
<li>CR_SERVER_LOST 在查询过程中,与服务器的连接丢失. </li>
<li>CR_UNKNOWN_ERROR 出现未知错误. </li>
</ul>
</li>
</ol>
<h1 id="mysql-fetch-lengths"><a href="#mysql-fetch-lengths" class="headerlink" title="mysql_fetch_lengths"></a>mysql_fetch_lengths</h1><p>原型: <code>unsigned long *mysql_fetch_lengths(MYSQL_RES *result)</code><br>描述: 返回结果集内当前行的列的长度(避免<code>strlen()</code>的调用,提高效率; 确定二进制数据长度). 对于空列以及包含NULL值的列,其长度为0.<br>返回值: 无符号长整数的数组表示各列的大小(不包括任何终结NULL字符).如果出现错误,返回NULL.<br>错误: <code>mysql_fetch_lengths()</code>仅对结果集的当前行有效.如果在调用<code>mysql_fetch_row()</code>之前或检索了结果集中的所有行后调用了它,将返回NULL.</p>
<h1 id="mysql-affected-rows"><a href="#mysql-affected-rows" class="headerlink" title="mysql_affected_rows"></a>mysql_affected_rows</h1><p>原型: <code>my_ulonglong mysql_affected_rows(MYSQL *mysql)</code><br>描述: 返回上次<code>UPDATE</code>更改的行数或上次<code>DELETE</code>删除的行数或上次<code>INSERT</code>语句插入的行数.对于<code>UPDATE</code>、<code>DELETE</code>或<code>INSERT</code>语句,可在<code>mysql_query()</code>后立刻调用.<br>返回值: 大于0的整数表明受影响或检索的行数.”0”表示UPDATE语句未更新记录,在查询中没有与WHERE匹配的行,或未执行查询.<br>错误: 无</p>
<h1 id="mysql-autocommit"><a href="#mysql-autocommit" class="headerlink" title="mysql_autocommit"></a>mysql_autocommit</h1><p>原型: <code>my_bool mysql_autocommit(MYSQL *mysql, my_bool mode)</code><br>描述: 如果模式为<code>1</code>,启用autocommit模式;如果模式为<code>0</code>,禁止autocommit模式.<br>返回值: 如果成功,返回0;如果出现错误,返回非0值.<br>错误: 无</p>
<h1 id="mysql-commit"><a href="#mysql-commit" class="headerlink" title="mysql_commit"></a>mysql_commit</h1><p>原型: <code>my_bool mysql_commit(MYSQL *mysql)</code><br>描述: 提交当前事务.<br>返回值: 如果成功,返回0;如果出现错误,返回非0值.<br>错误: 无</p>
<h1 id="mysql-rollback"><a href="#mysql-rollback" class="headerlink" title="mysql_rollback"></a>mysql_rollback</h1><p>原型: <code>my_bool mysql_rollback(MYSQL *mysql)</code><br>描述: 回滚当前事务<br>返回值: 如果成功,返回0;如果出现错误,返回非0值.<br>错误: 无</p>
<h1 id="mysql-real-escape-string"><a href="#mysql-real-escape-string" class="headerlink" title="mysql_real_escape_string"></a>mysql_real_escape_string</h1><p>原型: <code>unsigned long mysql_real_escape_string(MYSQL *mysql, char *to, const char *from, unsigned long length)</code><br>描述: 该函数用于创建可在SQL语句中使用的合法SQL字符串.按照连接的当前字符集,将<code>from</code>中的字符串编码为转义SQL字符串.将结果置于<code>to</code>中,并添加1个终结用Null字符.<br>返回值: 置于<code>to</code>中的值的长度,不包括终结用Null字符.<br>错误: 无.</p>
<h1 id="mysql-errno"><a href="#mysql-errno" class="headerlink" title="mysql_errno"></a>mysql_errno</h1><p>原型: <code>unsigned int mysql_errno(MYSQL *mysql)</code><br>描述: 对于由mysql指定的连接,<code>mysql_errno()</code>返回最近调用的API函数的错误代码,该函数调用可能成功也可能失败.<code>0</code>返回值表示未出现错误.<br>返回值: 如果失败,返回上次<code>mysql_xxx()</code>调用的错误代码.<code>0</code>表示未出现错误<br>错误: 无</p>
<h1 id="mysql-error"><a href="#mysql-error" class="headerlink" title="mysql_error"></a>mysql_error</h1><p>原型: <code>const char *mysql_error(MYSQL *mysql)</code><br>描述: 对于由mysql指定的连接,对于失败的最近调用的API函数,<code>mysql_error()</code>返回包含错误消息的、由Null终结的字符串.如果该函数未失败,<code>mysql_error()</code>的返回值可能是以前的错误,或指明无错误的空字符串.<br>返回值: 返回描述错误的、由Null终结的字符串.如果未出现错误,返回空字符串.<br>错误: 无.</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>cpp</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL InnoDB存储引擎学习</title>
    <url>/2019/06/18/study-mysql-innodb/</url>
    <content><![CDATA[<p>数据库:物理操作系统文件或其它形式文件类型的集合.<br>数据库实例:由数据库后台进程/线程以及一个共享内存区组成.<br>数据库实例才是真正用来操作数据库文件的.</p>
<a id="more"></a>
<h1 id="MySQL数据库架构"><a href="#MySQL数据库架构" class="headerlink" title="MySQL数据库架构"></a>MySQL数据库架构</h1><h1 id="InnoDB存储引擎介绍"><a href="#InnoDB存储引擎介绍" class="headerlink" title="InnoDB存储引擎介绍"></a>InnoDB存储引擎介绍</h1><p>MySQL5.5.5后默认的存储引擎</p>
<h2 id="InnoDB内存"><a href="#InnoDB内存" class="headerlink" title="InnoDB内存"></a>InnoDB内存</h2><p>InnoDB存储引擎内存:</p>
<ol>
<li>缓冲池(buffer pool)<ol>
<li>索引页</li>
<li>数据页</li>
<li>undo页</li>
<li>插入缓存(insert buffer)</li>
<li>自适应哈希索引(adaptive hash index)</li>
<li>InnoDB存储的锁信息(lock info)</li>
<li>数据字典信息(data dictionary)</li>
</ol>
</li>
<li>重做日志缓冲池(redo log buffer)</li>
<li>额外内存池(additional memory pool)<br><img src="/Picture/innodb_memory_struct.png" alt="InnoDB存储引擎内存结构"></li>
</ol>
<p>缓冲池是占用内存最多的部分,用来存放各种数据的缓存.InnoDB将数据库文件按页读取到缓冲池,再按最近最少使用(LRU)算法保留缓冲区的缓存数据.数据库的修改总是先修改缓冲池中的页,修改完后该页即为脏页,再按一定频率将脏页刷新到文件中.<br>重做日志缓存将重做日志信息放在该缓存区,按照一定频率将其刷新到重做日志文件.</p>
<p>查看内存池配置大小<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; show variables like 'innodb_buffer_pool_size';</span><br><span class="line">+<span class="comment">-------------------------+-----------+</span></span><br><span class="line">| Variable_name           | Value     |</span><br><span class="line">+<span class="comment">-------------------------+-----------+</span></span><br><span class="line">| innodb_buffer_pool_size | 134217728 |</span><br><span class="line">+<span class="comment">-------------------------+-----------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line">mysql&gt; <span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">'innodb_log_buffer_size'</span>;</span><br><span class="line">+<span class="comment">------------------------+---------+</span></span><br><span class="line">| Variable_name          | Value   |</span><br><span class="line">+<span class="comment">------------------------+---------+</span></span><br><span class="line">| innodb_log_buffer_size | 8388608 |</span><br><span class="line">+<span class="comment">------------------------+---------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line">mysql&gt; <span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">'innodb_additional_mem_pool_size'</span>;</span><br><span class="line">+<span class="comment">---------------------------------+---------+</span></span><br><span class="line">| Variable_name                   | Value   |</span><br><span class="line">+<span class="comment">---------------------------------+---------+</span></span><br><span class="line">| innodb_additional_mem_pool_size | 8388608 |</span><br><span class="line">+<span class="comment">---------------------------------+---------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure></p>
<p>通过<code>show engine innodb status\G</code>查看缓冲池的使用情况(并不是实时的,而是过去某段时间的)<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; show engine innodb status\G</span><br><span class="line">... ...</span><br><span class="line">Per second averages calculated from the last 52 seconds             过去53秒内的数据库状态</span><br><span class="line">... ...</span><br><span class="line"><span class="comment">----------------------</span></span><br><span class="line">BUFFER POOL AND MEMORY</span><br><span class="line"><span class="comment">----------------------</span></span><br><span class="line">Total memory allocated 137363456; in additional pool allocated 0</span><br><span class="line">Dictionary memory allocated 21773263</span><br><span class="line">Buffer pool size   8192                                             缓冲帧(buffer frame) 每个buffer frame为16K</span><br><span class="line">Free buffers       0                                                当前空闲的buffer frame</span><br><span class="line">Database pages     8151                                             已经使用的缓冲帧</span><br><span class="line">Old database pages 2988</span><br><span class="line">Modified db pages  0                                                脏页的数量</span><br><span class="line">Pending reads 0</span><br><span class="line">Pending writes: LRU 0, <span class="keyword">flush</span> <span class="keyword">list</span> <span class="number">0</span>, single page <span class="number">0</span></span><br><span class="line">Pages made young <span class="number">9725418</span>, <span class="keyword">not</span> young <span class="number">0</span></span><br><span class="line"><span class="number">0.00</span> youngs/s, <span class="number">0.00</span> non-youngs/s</span><br><span class="line">Pages <span class="keyword">read</span> <span class="number">6612986</span>, created <span class="number">56449</span>, written <span class="number">624295</span></span><br><span class="line"><span class="number">0.00</span> <span class="keyword">reads</span>/s, <span class="number">0.00</span> creates/s, <span class="number">0.00</span> writes/s</span><br><span class="line">Buffer pool hit rate <span class="number">1000</span> / <span class="number">1000</span>, young-making rate <span class="number">0</span> / <span class="number">1000</span> <span class="keyword">not</span> <span class="number">0</span> / <span class="number">1000</span></span><br><span class="line">Pages <span class="keyword">read</span> ahead <span class="number">0.00</span>/s, evicted <span class="keyword">without</span> <span class="keyword">access</span> <span class="number">0.00</span>/s, Random <span class="keyword">read</span> ahead <span class="number">0.00</span>/s</span><br><span class="line">LRU <span class="keyword">len</span>: <span class="number">8151</span>, unzip_LRU <span class="keyword">len</span>: <span class="number">0</span></span><br><span class="line">I/O <span class="keyword">sum</span>[<span class="number">0</span>]:cur[<span class="number">0</span>], unzip <span class="keyword">sum</span>[<span class="number">0</span>]:cur[<span class="number">0</span>]</span><br><span class="line">... ...</span><br></pre></td></tr></table></figure></p>
<h2 id="InnoDB线程"><a href="#InnoDB线程" class="headerlink" title="InnoDB线程"></a>InnoDB线程</h2><p>InnoDB采用多线程模型.默认情况下,InnoDB存储引擎的后台线程有四类:若干<code>IO Thread</code>, 一个<code>Master Thread</code>, 一个<code>Lock</code>监控线程, 一个错误监控线程.可以通过<code>show engine innodb status\G</code>查看InnoDB的线程状态<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; show engine innodb status\G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">... ...</span><br><span class="line"><span class="comment">--------</span></span><br><span class="line">FILE I/O</span><br><span class="line"><span class="comment">--------</span></span><br><span class="line">I/O thread 0 state: waiting for completed aio requests (<span class="keyword">insert</span> buffer <span class="keyword">thread</span>)</span><br><span class="line">I/O <span class="keyword">thread</span> <span class="number">1</span> state: waiting <span class="keyword">for</span> completed aio requests (<span class="keyword">log</span> <span class="keyword">thread</span>)</span><br><span class="line">I/O <span class="keyword">thread</span> <span class="number">2</span> state: waiting <span class="keyword">for</span> completed aio requests (<span class="keyword">read</span> <span class="keyword">thread</span>)</span><br><span class="line">I/O <span class="keyword">thread</span> <span class="number">3</span> state: waiting <span class="keyword">for</span> completed aio requests (<span class="keyword">read</span> <span class="keyword">thread</span>)</span><br><span class="line">I/O <span class="keyword">thread</span> <span class="number">4</span> state: waiting <span class="keyword">for</span> completed aio requests (<span class="keyword">read</span> <span class="keyword">thread</span>)</span><br><span class="line">I/O <span class="keyword">thread</span> <span class="number">5</span> state: waiting <span class="keyword">for</span> completed aio requests (<span class="keyword">read</span> <span class="keyword">thread</span>)</span><br><span class="line">I/O <span class="keyword">thread</span> <span class="number">6</span> state: waiting <span class="keyword">for</span> completed aio requests (write <span class="keyword">thread</span>)</span><br><span class="line">I/O <span class="keyword">thread</span> <span class="number">7</span> state: waiting <span class="keyword">for</span> completed aio requests (write <span class="keyword">thread</span>)</span><br><span class="line">I/O <span class="keyword">thread</span> <span class="number">8</span> state: waiting <span class="keyword">for</span> completed aio requests (write <span class="keyword">thread</span>)</span><br><span class="line">I/O <span class="keyword">thread</span> <span class="number">9</span> state: waiting <span class="keyword">for</span> completed aio requests (write <span class="keyword">thread</span>)</span><br><span class="line">Pending <span class="keyword">normal</span> aio <span class="keyword">reads</span>: <span class="number">0</span> [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>] , aio writes: <span class="number">0</span> [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>] ,</span><br><span class="line"> ibuf aio <span class="keyword">reads</span>: <span class="number">0</span>, <span class="keyword">log</span> i/o<span class="string">'s: 0, sync i/o'</span>s: <span class="number">0</span></span><br><span class="line">Pending flushes (fsync) <span class="keyword">log</span>: <span class="number">0</span>; buffer pool: 0</span><br><span class="line">6614275 OS file reads, 661776 OS file writes, 44313 OS fsyncs</span><br><span class="line">0.00 reads/s, 0 avg bytes/read, 0.00 writes/s, 0.00 fsyncs/s</span><br><span class="line"><span class="comment">-------------------------------------</span></span><br><span class="line">... ...</span><br></pre></td></tr></table></figure></p>
<p><code>IO Thread</code>分为<code>insert buffer thread</code>、<code>log thread</code>、<code>read thread</code>、<code>write thread</code></p>
<ol>
<li><p><code>Master Thread</code>将缓冲池的数据异步刷新到磁盘,保证数据一致性(刷新脏页、合并插入缓存、undo页回收)</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; show engine innodb status\G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">... ...</span><br><span class="line">srv_master_thread loops: 2084267 1_second, 2084267 sleeps, 190202 10_second, 182347 background, 182347 <span class="keyword">flush</span></span><br><span class="line">srv_master_thread <span class="keyword">log</span> <span class="keyword">flush</span> <span class="keyword">and</span> writes: <span class="number">2082683</span></span><br><span class="line">... ...</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>IO Thread</code>负责IO请求的回调处理</p>
</li>
<li><code>Purge Thread</code>事物提交后的<code>undo log</code>不再需要,由<code>Purge Thread</code>负责回收已经使用并分配的<code>undo page</code></li>
<li><code>Page Cleaner Thread</code>在<code>InnoDB 1.2.x</code>版本引入,将脏页的刷新操作放在这个线程中进行处理,减轻<code>Master Thread</code>的工作,减少用户查询线程的阻塞,提高InnoDB的性能</li>
</ol>
<h2 id="InnoDB关键特性"><a href="#InnoDB关键特性" class="headerlink" title="InnoDB关键特性"></a>InnoDB关键特性</h2><p>插入缓存提高性能,两次写提高可靠性</p>
<h3 id="插入缓存"><a href="#插入缓存" class="headerlink" title="插入缓存"></a>插入缓存</h3><p>主键是行唯一的标识符,应用程序中行记录的插入一般是按照主键递增的顺序进行插入,因此,插入聚集索引一般是顺序的,不需要磁盘的随机读取,可以很快完成,但表上可能会同时存在多个非聚集索引非唯一的索引,在插入时数据页的存放按照主键的递增顺序存放,但对于非聚集索引,叶子节点的插入可能不再是顺序的,需要离散的访问非聚集索引页,插入性能降低.<br>InnoDB使用插入缓存的方式,对非聚集索引的插入或更新操作,不是每一次直接插入索引页,而是先判断非聚集索引页是否在缓存池中,如果在,直接插入,如果不在先放入一个插入缓冲区,再以一定频率执行插入缓冲和非聚集索引页子几点的合并操作.<br>插入缓存的使用需满足两个条件:</p>
<ol>
<li>索引是非聚集索引</li>
<li>索引不是唯一索引</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; show engine innodb status\G</span><br><span class="line">... ...</span><br><span class="line"><span class="keyword">INSERT</span> BUFFER <span class="keyword">AND</span> ADAPTIVE <span class="keyword">HASH</span> <span class="keyword">INDEX</span></span><br><span class="line"><span class="comment">-------------------------------------</span></span><br><span class="line">Ibuf: <span class="keyword">size</span> <span class="number">1</span>, free <span class="keyword">list</span> <span class="keyword">len</span> <span class="number">5</span>, seg <span class="keyword">size</span> <span class="number">7</span>, <span class="number">201</span> merges</span><br><span class="line">merged <span class="keyword">operations</span>:</span><br><span class="line"> <span class="keyword">insert</span> <span class="number">1846</span>, <span class="keyword">delete</span> mark <span class="number">2126</span>, <span class="keyword">delete</span> <span class="number">0</span></span><br><span class="line">discarded <span class="keyword">operations</span>:</span><br><span class="line"> <span class="keyword">insert</span> <span class="number">0</span>, <span class="keyword">delete</span> mark <span class="number">0</span>, <span class="keyword">delete</span> <span class="number">0</span></span><br><span class="line">... ...</span><br></pre></td></tr></table></figure>
<h3 id="两次写"><a href="#两次写" class="headerlink" title="两次写"></a>两次写</h3><p>当数据库宕机时,可能发生数据库正在写一个页面,而该页面只写了一部分(比如16K,只写了前4K的情况),称为部分写失效<br>发生写失效时,需要通过这个页的副本来还原该页,再进行重做.<br><img src="/Picture/innodb_doublewrite.png" alt="InnoDB两次写"></p>
<h3 id="自适应哈希索引"><a href="#自适应哈希索引" class="headerlink" title="自适应哈希索引"></a>自适应哈希索引</h3><p>当InnoDB注意到索引值使用非常频繁便会自动在内存中再建立一个哈希索引<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; show engine innodb status\G</span><br><span class="line">... ...</span><br><span class="line">Hash table size 276707, node heap has 41 buffer(s)</span><br><span class="line">0.00 hash searches/s, 0.00 non-hash searches/s</span><br><span class="line">... ...</span><br></pre></td></tr></table></figure></p>
<h1 id="数据库和表的建立"><a href="#数据库和表的建立" class="headerlink" title="数据库和表的建立"></a>数据库和表的建立</h1><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> case_test_db;</span><br><span class="line"></span><br><span class="line"><span class="keyword">USE</span> case_test_db;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t_user(</span><br><span class="line">    Fid <span class="built_in">int</span> PRIMARY <span class="keyword">KEY</span> <span class="keyword">COMMENT</span> <span class="string">'用户ID'</span>,</span><br><span class="line">    Fname <span class="built_in">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'姓名'</span>,</span><br><span class="line">    Famount <span class="built_in">bigint</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> <span class="keyword">COMMENT</span> <span class="string">'金额'</span>,</span><br><span class="line">    Fcreate_time DATETIME <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span>,</span><br><span class="line">    Fmodify_time DATETIME <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'修改时间'</span>,</span><br><span class="line">    <span class="keyword">INDEX</span> idx_mdftime(Fmodify_time)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8 <span class="keyword">COMMENT</span>=<span class="string">'用户表'</span> ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t_user</span><br><span class="line">    (Fid, Fname, Famount, Fcreate_time, Fmodify_time)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">10000</span>, <span class="string">"用户1"</span>, <span class="number">0</span>, <span class="string">"2019-06-18 15:55:00"</span>, <span class="string">"2019-06-18 15:55:00"</span>),</span><br><span class="line">    (<span class="number">10001</span>, <span class="string">"用户2"</span>, <span class="number">0</span>, <span class="string">"2019-06-18 15:55:04"</span>, <span class="string">"2019-06-18 15:55:04"</span>),</span><br><span class="line">    (<span class="number">10002</span>, <span class="string">"用户3"</span>, <span class="number">0</span>, <span class="string">"2019-06-18 15:55:05"</span>, <span class="string">"2019-06-18 15:55:05"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> Fid, Fname, Famount, Fcreate_time, Fmodify_time <span class="keyword">FROM</span> case_test_db.t_user;</span><br></pre></td></tr></table></figure>
<h1 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h1><p>索引使用B+树或哈希表建立.<br>InnoDB不能显式的指定哈希索引,InnoDB引擎<strong>自适应哈希索引</strong>,哈希索引只适用于字典查找,如<code>SELECT Famount FROM t_user WHERE Fid=10001;</code>.</p>
<h2 id="聚集索引"><a href="#聚集索引" class="headerlink" title="聚集索引"></a>聚集索引</h2><p>InnoDB存储引擎类型的表,表中数据按照主键顺序存放.聚集索引就是按照表的主键构建一颗B+树,并在叶子节点存放行的全部数据.<br>InnoDB存储引起类型的表,有且仅有一个聚齐索引.<br>当使用聚齐索引对表中数据进行检索时,可以直接获得聚集索引所对应的整条行记录数据所在的页.</p>
<h2 id="非聚齐索引-辅助聚集索引"><a href="#非聚齐索引-辅助聚集索引" class="headerlink" title="非聚齐索引(辅助聚集索引)"></a>非聚齐索引(辅助聚集索引)</h2><p>非聚齐索引叶子节点不包含行的全部数据,只包含一个用于查找行数据的书签,在InnoDB中这个标签就是数据行的主键,因此通过非聚齐索引只能查找到数据行的主键,再通过主键查找数据行所在的数据页,比聚集索引多了一次操作.</p>
<h2 id="按功能的索引"><a href="#按功能的索引" class="headerlink" title="按功能的索引"></a>按功能的索引</h2><ol>
<li>普通索引 最基础的索引类型</li>
<li>唯一索引 在普通索引的基础上加入唯一性限制,索引列的所有值只能出现一次</li>
<li>全文索引 <code>MySQL 5.6.24</code>在InnoDB加入全文索引,但对中文支持不友好,<code>MySQL 5.7.6</code>提供支持中文的内置的ngram解析器</li>
<li>空间索引 <code>MySQL 5.7</code>开始支持空间索引</li>
</ol>
<h1 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h1><h2 id="事务的属性-ACID"><a href="#事务的属性-ACID" class="headerlink" title="事务的属性(ACID)"></a>事务的属性(ACID)</h2><ol>
<li>原子性(Atomic) 一个事务中的SQL,要么全部成功,要么全部失败,不存在部分成功的情况</li>
<li>一致性(Consistency) 一个事务使系统从一个一致状态转移到另外一个一致状态</li>
<li>隔离性(Isolation) 并发事务互相影响的程度</li>
<li>持久性(Durability) 一旦事务提交,对数据的修改是永久的,及时系统故障也不会数据丢失</li>
</ol>
<h2 id="隔离性"><a href="#隔离性" class="headerlink" title="隔离性"></a>隔离性</h2><h3 id="事务并发存在的问题"><a href="#事务并发存在的问题" class="headerlink" title="事务并发存在的问题"></a>事务并发存在的问题</h3><p>数据库测试前,将两个Serssion的隔离级别置为<code>Read Uncommitted</code><br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> tx_isolation = <span class="string">'read-uncommitted'</span>;</span><br></pre></td></tr></table></figure></p>
<h4 id="更新丢失-Lost-Update"><a href="#更新丢失-Lost-Update" class="headerlink" title="更新丢失(Lost Update)"></a>更新丢失(Lost Update)</h4><p>同时有两个事务对同一条数据库记录进行操作,事务A读取数据库数据后,数据被事务B进行了更新,事务A基于最初读取的值进行运算并将运算结果写回到数据库,导致事务B的更新被覆盖,导致更新丢失的问题</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">事务A</th>
<th style="text-align:center">事务B</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>START TRANSACTION;</code></td>
<td style="text-align:center"><code>START TRANSACTION;</code></td>
</tr>
<tr>
<td style="text-align:center"><code>SELECT Famount FROM t_user WHERE Fid=10001;</code> 值为0</td>
<td style="text-align:center"><code>SELECT Famount FROM t_user WHERE Fid=10001;</code> 值为0</td>
</tr>
<tr>
<td style="text-align:center">运算 对<code>Famount</code>加100</td>
<td style="text-align:center"><code>UPDATE t_user SET Famount=1 WHERE Fid=10001;</code> 对<code>Famount</code>加1</td>
</tr>
<tr>
<td style="text-align:center"><code>UPDATE t_user SET Famount=100 WHERE Fid=10001;</code></td>
<td style="text-align:center"><code>COMMIT;</code></td>
</tr>
<tr>
<td style="text-align:center"><code>COMMIT;</code></td>
<td style="text-align:center">-</td>
</tr>
<tr>
<td style="text-align:center"><code>SELECT Famount FROM t_user WHERE Fid=10001;</code> 值为100</td>
<td style="text-align:center"><code>SELECT Famount FROM t_user WHERE Fid=10001;</code> 值为100</td>
</tr>
</tbody>
</table>
</div>
<h4 id="脏读-Dirty-Reads"><a href="#脏读-Dirty-Reads" class="headerlink" title="脏读(Dirty Reads)"></a>脏读(Dirty Reads)</h4><p>事务A在事务的过程中修改了一条记录,在A提交前,该记录处于中间状态,如果事务B访问该记录,读到了这个中间状态,可能出现数据不一致的状态,叫做脏读.</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">事务A</th>
<th style="text-align:center">事务B</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>START TRANSACTION;</code></td>
<td style="text-align:center">-</td>
</tr>
<tr>
<td style="text-align:center"><code>SELECT Famount FROM t_user WHERE Fid=10001;</code> 值为100</td>
<td style="text-align:center">-</td>
</tr>
<tr>
<td style="text-align:center">运算 对<code>Famount</code>加100</td>
<td style="text-align:center">-</td>
</tr>
<tr>
<td style="text-align:center"><code>UPDATE t_user SET Famount=200 WHERE Fid=10001;</code></td>
<td style="text-align:center"><code>START TRANSACTION;</code></td>
</tr>
<tr>
<td style="text-align:center">运算 对<code>Famount</code>再加100</td>
<td style="text-align:center"><code>SELECT Famount FROM t_user WHERE Fid=10001;</code> 此时读到事务A<code>Famount</code>字段的中间状态200</td>
</tr>
<tr>
<td style="text-align:center"><code>UPDATE t_user SET Famount=300 WHERE Fid=10001;</code></td>
<td style="text-align:center">运算 对<code>Famount</code>加20</td>
</tr>
<tr>
<td style="text-align:center"><code>COMMIT;</code></td>
<td style="text-align:center"><code>UPDATE t_user SET Famount=220 WHERE Fid=10001;</code></td>
</tr>
<tr>
<td style="text-align:center">-</td>
<td style="text-align:center"><code>COMMIT;</code></td>
</tr>
<tr>
<td style="text-align:center"><code>SELECT Famount FROM t_user WHERE Fid=10001;</code> 值为220</td>
<td style="text-align:center"><code>SELECT Famount FROM t_user WHERE Fid=10001;</code> 值为220</td>
</tr>
</tbody>
</table>
</div>
<p>使用InnoDB引擎避免脏读</p>
<ol>
<li>通过共享锁或排他锁避免脏读,对于所有更新操作,在读取数据库记录前都获得该记录的排他锁获取共享锁</li>
<li>通过InnoDB的事务隔离级别避免脏读</li>
</ol>
<h4 id="不可重复读-Non-Repeatable-Reads"><a href="#不可重复读-Non-Repeatable-Reads" class="headerlink" title="不可重复读(Non-Repeatable Reads)"></a>不可重复读(Non-Repeatable Reads)</h4><p>事务A读取某条记录后,记录被事务B进行修改,事务A再次读取该记录,该记录的数据和事务A初次读取的记录不一致.</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">事务A</th>
<th style="text-align:center">事务B</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>START TRANSACTION;</code></td>
<td style="text-align:center">-</td>
</tr>
<tr>
<td style="text-align:center"><code>SELECT Famount FROM t_user WHERE Fid=10001;</code> 值为220</td>
<td style="text-align:center"><code>START TRANSACTION;</code></td>
</tr>
<tr>
<td style="text-align:center">-</td>
<td style="text-align:center"><code>UPDATE t_user SET Famount=100 WHERE Fid=10001;</code></td>
</tr>
<tr>
<td style="text-align:center">-</td>
<td style="text-align:center"><code>COMMIT;</code></td>
</tr>
<tr>
<td style="text-align:center"><code>SELECT Famount FROM t_user WHERE Fid=10001;</code> 值为100</td>
<td style="text-align:center">-</td>
</tr>
<tr>
<td style="text-align:center">读取到的数据和初次读取的数据不一致</td>
<td style="text-align:center">-</td>
</tr>
<tr>
<td style="text-align:center"><code>ROLLBACK;</code></td>
<td style="text-align:center">-</td>
</tr>
</tbody>
</table>
</div>
<p>和脏读的区别:脏读是读到事务中间过程的临时数据,可能会被事务再次修改或回滚.不可重复读是由于两个读取时间点的间隙,数据被其它事务修改而导致的数据不一致.<br>可以通过设置InnoDB的事务隔离级别避免不可重复读</p>
<h4 id="幻读-Phantom-Reads"><a href="#幻读-Phantom-Reads" class="headerlink" title="幻读(Phantom Reads)"></a>幻读(Phantom Reads)</h4><p>幻读发生在多条记录的查询中.当事务A用同样的查询条件读取之间某个时间点查询过的数据时,读取到了被其它事务在其两次读取中间插入的新数据(或者少了被其它事务删除的记录).称为幻读<br>幻读和不可重复读本质一样,都是在两次读取间隙由于其它事务的操作导致的记录数据变更,区别在于不可重复度针对单条记录,幻读针对一个结果集而言.</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">事务A</th>
<th style="text-align:center">事务B</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>START TRANSACTION;</code></td>
<td style="text-align:center">-</td>
</tr>
<tr>
<td style="text-align:center"><code>SELECT Fid FROM t_user WHERE Fid&gt;10001;</code> 读到10002</td>
<td style="text-align:center"><code>START TRANSACTION;</code></td>
</tr>
<tr>
<td style="text-align:center">-</td>
<td style="text-align:center"><code>INSERT INTO t_user (Fid, Fname, Famount, Fcreate_time, Fmodify_time) VALUES(10003, &quot;用户4&quot;, 0, &quot;2019-06-18 15:55:00&quot;, &quot;2019-06-18 15:55:00&quot;);</code></td>
</tr>
<tr>
<td style="text-align:center">-</td>
<td style="text-align:center"><code>COMMIT;</code></td>
</tr>
<tr>
<td style="text-align:center"><code>SELECT Fid FROM t_user WHERE Fid&gt;10001;</code> 读到10002、10003</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">读取到的结果集和初次读取的结果集不一致</td>
<td style="text-align:center">-</td>
</tr>
<tr>
<td style="text-align:center"><code>ROLLBACK;</code></td>
<td style="text-align:center">-</td>
</tr>
</tbody>
</table>
</div>
<h3 id="隔离级别"><a href="#隔离级别" class="headerlink" title="隔离级别"></a>隔离级别</h3><p>事务并发问题不能单靠数据库事务控制来解决,需要结合InnoDB的锁机制来解决.<strong>防止出现事务并发问题是应用层需要解决的问题,不能单靠事务机制</strong><br>更新丢失需要完全避免,更新丢失会导致严重的数据不一致性,数据库记录表现出随机性、不可预测性<br>脏读、不可重复读、幻读是数据库读一致性问题,需要由数据库提供一定的事务隔离机制解决.<br>数据库实现事务隔离的方式:</p>
<ol>
<li>读取数据前对数据加锁,阻止其它事务对其进行修改</li>
<li>通过数据库机制生成一个时间点的一致性数据快照,从用户角度看,数据库提供了一个数据的多个版本,数据库多版本并发控制(MultiVersion Concurrency Control)或多版本数据库</li>
</ol>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">隔离级别</th>
<th style="text-align:center">读一致性</th>
<th style="text-align:center">脏读</th>
<th style="text-align:center">不可重复读</th>
<th style="text-align:center">幻读</th>
<th style="text-align:center">读加锁</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">未提交读(Read Uncommitted)</td>
<td style="text-align:center">最低级别</td>
<td style="text-align:center">是</td>
<td style="text-align:center">是</td>
<td style="text-align:center">是</td>
<td style="text-align:center">否</td>
</tr>
<tr>
<td style="text-align:center">已提交读(Read Committed)</td>
<td style="text-align:center">语句级别</td>
<td style="text-align:center">否</td>
<td style="text-align:center">是</td>
<td style="text-align:center">是</td>
<td style="text-align:center">否</td>
</tr>
<tr>
<td style="text-align:center">可重复读(Repeatable Read)</td>
<td style="text-align:center">事务级别</td>
<td style="text-align:center">否</td>
<td style="text-align:center">否</td>
<td style="text-align:center">是</td>
<td style="text-align:center">否</td>
</tr>
<tr>
<td style="text-align:center">串行化(Serializable)</td>
<td style="text-align:center">最高级别,事务级</td>
<td style="text-align:center">否</td>
<td style="text-align:center">否</td>
<td style="text-align:center">否</td>
<td style="text-align:center">是</td>
</tr>
</tbody>
</table>
</div>
<h4 id="未提交读-Read-Uncommitted"><a href="#未提交读-Read-Uncommitted" class="headerlink" title="未提交读(Read Uncommitted)"></a>未提交读(Read Uncommitted)</h4><p>最低的事务隔离级别,事务B可能读取到事务A未提交的中间状态数据</p>
<h4 id="已提交读-Read-Committed"><a href="#已提交读-Read-Committed" class="headerlink" title="已提交读(Read Committed)"></a>已提交读(Read Committed)</h4><p>事务B可能读取到事务开始时到读取操作点之间被事务A提交的修改<br>可避免脏读的发生</p>
<h4 id="可重复读-Repeatable-Read"><a href="#可重复读-Repeatable-Read" class="headerlink" title="可重复读(Repeatable Read)"></a>可重复读(Repeatable Read)</h4><p>MySQL InnoDB的默认隔离模式,事务B只能读到事务开始时的数据,及时数据已经被事务A修改<br>可避免脏读和不可重复读</p>
<h4 id="串行化-Serializable"><a href="#串行化-Serializable" class="headerlink" title="串行化(Serializable)"></a>串行化(Serializable)</h4><p>最高的事务隔离级别,避免脏读、不可重复读、幻读.</p>
<p>如下示例演示在不同隔离级别下,事务A读到<code>Famount</code>的值的不同</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">事务A</th>
<th style="text-align:center">事务B</th>
<th style="text-align:center">未提交读</th>
<th style="text-align:center">已提交读</th>
<th style="text-align:center">可重复读</th>
<th style="text-align:center">串行化</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>START TRANSACTION;</code></td>
<td style="text-align:center"><code>START TRANSACTION;</code></td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
</tr>
<tr>
<td style="text-align:center"><code>SELECT Famount FROM t_user WHERE Fid=10001;</code></td>
<td style="text-align:center">-</td>
<td style="text-align:center">100</td>
<td style="text-align:center">100</td>
<td style="text-align:center">100</td>
<td style="text-align:center">100</td>
</tr>
<tr>
<td style="text-align:center">-</td>
<td style="text-align:center"><code>UPDATE t_user SET Famount=200 WHERE Fid=10001;</code></td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
</tr>
<tr>
<td style="text-align:center"><code>SELECT Famount FROM t_user WHERE Fid=10001;</code></td>
<td style="text-align:center">-</td>
<td style="text-align:center">200</td>
<td style="text-align:center">100</td>
<td style="text-align:center">100</td>
<td style="text-align:center">100</td>
</tr>
<tr>
<td style="text-align:center">-</td>
<td style="text-align:center"><code>COMMIT;</code></td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
</tr>
<tr>
<td style="text-align:center"><code>SELECT Famount FROM t_user WHERE Fid=10001;</code></td>
<td style="text-align:center">-</td>
<td style="text-align:center">200</td>
<td style="text-align:center">200</td>
<td style="text-align:center">100</td>
<td style="text-align:center">100</td>
</tr>
<tr>
<td style="text-align:center"><code>COMMIT;</code></td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
</tr>
<tr>
<td style="text-align:center"><code>SELECT Famount FROM t_user WHERE Fid=10001;</code></td>
<td style="text-align:center">-</td>
<td style="text-align:center">200</td>
<td style="text-align:center">200</td>
<td style="text-align:center">200</td>
<td style="text-align:center">200</td>
</tr>
</tbody>
</table>
</div>
<p>隔离级别为串行化时,事务B执行<code>UPDATE</code>操作的时候,提交事务会被锁住,直到事务A提交后,事务B才可以继续进行.</p>
<p>读未提交:别人改数据的事务尚未提交,我在我的事务中也能读到.<br>读已提交:别人改数据的事务已经提交,我在我的事务中才能读到.<br>可重复读:别人改数据的事务已经提交,我在我的事务中也不去读.<br>串行:我的事务尚未提交,别人就别想改数据.<br>四种隔离级别,并行性能依次降低,安全性依次提高</p>
<h4 id="隔离级别的实现"><a href="#隔离级别的实现" class="headerlink" title="隔离级别的实现"></a>隔离级别的实现</h4><p>隔离级别是通过视图(read-view)来实现的并发版本控制(MVCC),不同隔离级别创建视图的时间点不同.</p>
<ol>
<li>未提交读 不创建视图,直接返回记录上的最新值</li>
<li>已提交读 给每条SQL创建视图,在每个SQL语句开始执行时创建视图,隔离作用域仅限该条SQL.</li>
<li>可重复读 每个事务创建一个视图,整个事务存在期间都用该视图</li>
<li>串行化 直接加锁,不创建视图<br>视图可以理解为数据副本,每次创建视图时,将当前已持久化数据创建副本,后续直接从副本读取,达到数据隔离效果.</li>
</ol>
<h4 id="InnoDB隔离级别的查看-修改"><a href="#InnoDB隔离级别的查看-修改" class="headerlink" title="InnoDB隔离级别的查看/修改"></a>InnoDB隔离级别的查看/修改</h4><ol>
<li><p>隔离级别的查看</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; select @@tx_isolation;</span><br><span class="line">+<span class="comment">-----------------+</span></span><br><span class="line">| @@tx_isolation  |</span><br><span class="line">+<span class="comment">-----------------+</span></span><br><span class="line">| REPEATABLE-READ |</span><br><span class="line">+<span class="comment">-----------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>
</li>
<li><p>隔离级别的设置</p>
<ol>
<li>全局<ol>
<li>修改配置文件,重启数据库</li>
<li><code>set global transaction isolation level repeatable read;</code></li>
</ol>
</li>
<li>当前Session<ol>
<li><code>set tx_isolation = &#39;repeatable-read&#39;;</code></li>
<li><code>set session transaction isolation level repeatable read;</code></li>
</ol>
</li>
<li>下一个事务<code>set transaction isolation level repeatable read;</code></li>
</ol>
</li>
</ol>
<h2 id="事务控制"><a href="#事务控制" class="headerlink" title="事务控制"></a>事务控制</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">START</span> <span class="keyword">TRANSACTION</span> | <span class="keyword">BEGIN</span> [<span class="keyword">WORK</span>]</span><br><span class="line"><span class="keyword">COMMIT</span> [<span class="keyword">WORK</span>] [<span class="keyword">AND</span> [<span class="keyword">NO</span>] <span class="keyword">CHAIN</span>] [[<span class="keyword">NO</span>] <span class="keyword">RELEASE</span>]</span><br><span class="line"><span class="keyword">ROLLBACK</span> [<span class="keyword">WORK</span>] [<span class="keyword">AND</span> [<span class="keyword">NO</span>] <span class="keyword">CHAIN</span>] [[<span class="keyword">NO</span>] <span class="keyword">RELEASE</span>]</span><br><span class="line"><span class="keyword">SET</span> AUTOCOMMIT = &#123;<span class="number">0</span> | <span class="number">1</span>&#125;</span><br></pre></td></tr></table></figure>
<p>在InnoDB中,任何SQL语句都在一个事务当中. 如果在没有显式的调用开始事务的命令,MySQL会自动加上开始事务命令,再执行SQL语句.<br>MySQL默认使用自动提交模式,即一条SQL语句执行完毕,自动<code>COMMIT</code>.当MySQL显式执行开始事务的命令后,会自动设置为非自动提交模式,<code>ROLLBACK</code>或<code>COMMENT</code>后恢复到<code>START TRANSACTION</code>之前的事务提交模式.</p>
<h2 id="事务的开始"><a href="#事务的开始" class="headerlink" title="事务的开始"></a>事务的开始</h2><p>当执行<code>START TRANSACTION;</code>或<code>BEGIN;</code>后事务并没有真正的开始,当事务真正的执行操作后才会生成事务ID,事务才真正开始.<br>如果想<code>START TRANSACTION;</code>后就真正开启事务,需要以<code>START TRANSACTION WITH CONSISTENT SNAPSHOT;</code>开始事务</p>
<p>数据库测试前,将两个Serssion的隔离级别置为<code>Repeatable Read</code>, <code>set tx_isolation = &#39;repeatable-read&#39;;</code></p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">事务A</th>
<th style="text-align:center">事务B</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>SELECT Famount FROM t_user WHERE Fid=10001;</code> 值为200</td>
<td style="text-align:center">-</td>
</tr>
<tr>
<td style="text-align:center"><code>START TRANSACTION;</code></td>
<td style="text-align:center"><code>START TRANSACTION;</code></td>
</tr>
<tr>
<td style="text-align:center">-</td>
<td style="text-align:center"><code>UPDATE t_user SET Famount=300 WHERE Fid=10001;</code></td>
</tr>
<tr>
<td style="text-align:center">-</td>
<td style="text-align:center"><code>COMMIT;</code></td>
</tr>
<tr>
<td style="text-align:center"><code>SELECT Famount FROM t_user WHERE Fid=10001;</code> 值为<strong>300</strong></td>
<td style="text-align:center">-</td>
</tr>
<tr>
<td style="text-align:center"><code>COMMIT;</code></td>
<td style="text-align:center">-</td>
</tr>
</tbody>
</table>
</div>
<p>复原<code>Famount</code>的值为200<code>UPDATE t_user SET Famount=200 WHERE Fid=10001;</code> </p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">事务A</th>
<th style="text-align:center">事务B</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>SELECT Famount FROM t_user WHERE Fid=10001;</code> 值为200</td>
<td style="text-align:center">-</td>
</tr>
<tr>
<td style="text-align:center"><code>START TRANSACTION WITH CONSISTENT SNAPSHOT;</code></td>
<td style="text-align:center"><code>START TRANSACTION;</code></td>
</tr>
<tr>
<td style="text-align:center">-</td>
<td style="text-align:center"><code>UPDATE t_user SET Famount=300 WHERE Fid=10001;</code></td>
</tr>
<tr>
<td style="text-align:center">-</td>
<td style="text-align:center"><code>COMMIT;</code></td>
</tr>
<tr>
<td style="text-align:center"><code>SELECT Famount FROM t_user WHERE Fid=10001;</code> 值为<strong>200</strong></td>
<td style="text-align:center">-</td>
</tr>
<tr>
<td style="text-align:center"><code>COMMIT;</code></td>
<td style="text-align:center">-</td>
</tr>
</tbody>
</table>
</div>
<h2 id="事务的实现"><a href="#事务的实现" class="headerlink" title="事务的实现"></a>事务的实现</h2><p>事务的隔离性由锁和MVCC实现,原子性、一致性、持久性通过数据库的redo和undo来完成.</p>
<h3 id="redo"><a href="#redo" class="headerlink" title="redo"></a>redo</h3><p>在InnoDB存储引擎中,事务日志通过重做(redo)日志文件和InnoDB存储引擎的日志缓冲(InnoDB Log Buffer)来实现.当开始一个事务时,会记录该事务的LSN(Log Sequence Number, 日志序列号);当事务执行时,会往InnoDB存储引擎的日志缓冲里插入事务日志;当事务提交时,必须将InnoDB存储引擎的日志缓冲写入磁盘.即写数据前,需要先写日志,称为预写日志方式(Write-Ahead Logging, WAL).InnoDB通过WAL方式保证事务的完整性,导致磁盘存储的数据页和内存缓冲池中的页不同步,对于内存缓冲池中页的修改,先是写入重做日志文件,然后再写入磁盘.<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">mysql&gt; show engine innodb status\G</span><br><span class="line">... ...</span><br><span class="line"><span class="comment">---</span></span><br><span class="line">LOG</span><br><span class="line"><span class="comment">---</span></span><br><span class="line">Log sequence number 592623868976    当前LSN</span><br><span class="line">Log flushed up to   592623868976    刷新到重做日志文件的LSN</span><br><span class="line">Last checkpoint at  592623868976    刷新到磁盘的LSN</span><br><span class="line">0 pending log writes, 0 pending chkp writes</span><br><span class="line">19876 log i/o's done, 0.00 log i/o's/second</span><br><span class="line"><span class="comment">----------------------</span></span><br><span class="line">... ...</span><br></pre></td></tr></table></figure></p>
<h3 id="undo"><a href="#undo" class="headerlink" title="undo"></a>undo</h3><p>事务的撤销使用undo,undo存放在数据库内部的一个特殊段中,称为undo段(undo segment),undo段存放在共享表空间中.数据库undo只是进行逻辑上的恢复,恢复后的数据结构可能可原先不同.</p>
<h1 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h1><p>乐观锁:总认为没有别人会对资源进行修改,当回写时再对初次拿到的资源和当前资源进行判断,如果没有发生变化就写回,否则进行重试,<strong>整个过程并没有对数据加锁</strong>.<br>悲观锁:在获取资源前对资源加锁,确保同一时刻只有有限的线程可以访问该资源,其它想获取改资源的操作进入等待状态,直到该进程完成对资源的操作并释放锁,其它线程再重新争夺锁.</p>
<p>InnoDB使用的都是悲观锁</p>
<h2 id="锁的种类"><a href="#锁的种类" class="headerlink" title="锁的种类"></a>锁的种类</h2><p>对数据的操作包括读和写,InnoDB实现锁时,对读和写使用不同的锁.<br>InnoDB实现了标准的行级锁,即共享锁(Shared Lock)和互斥锁(Exclusive Lock).</p>
<ol>
<li>共享锁(读锁 S Lock):允许事务对一条数据进行读取.</li>
<li>互斥锁(写锁 X Lock):允许事务对一条数据进行删除/更新.</li>
</ol>
<h2 id="锁的粒度"><a href="#锁的粒度" class="headerlink" title="锁的粒度"></a>锁的粒度</h2><p>InnoDB除了支持行锁,还支持表锁,称为意向锁(Intention Lock).意向锁针对读和写也分为两种:</p>
<ol>
<li>意向共享锁(IS Lock):事务想要获得一个表中某几行的共享锁</li>
<li>意向排他锁(IX Lock):事务想要获得一个表中某几行的互斥锁<br>由于InnoDB支持行锁,所以意向锁并不会阻塞除全表扫之外的任何请求,意向锁主要是为了表示有人请求锁定表中的某一行数据.<blockquote>
<p>单单使用行锁,一个请求对全表进行操作时需要判断表中所有行的锁定状态,效率太差.引入意向锁后,当有人使用行锁对表中某行进行修改前,先对表添加意向锁互斥锁(IX),在对记录添加互斥锁(X),当有人对全表进行操作时,不需要再判断表中所有行的锁定状态,只需要等待意向锁被释放即可.</p>
</blockquote>
</li>
</ol>
<p>锁的兼容</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">-</th>
<th style="text-align:center">IS Lock</th>
<th style="text-align:center">IX Lock</th>
<th style="text-align:center">S Lock</th>
<th style="text-align:center">X Lock</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">IS Lock</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
<td style="text-align:center">×</td>
</tr>
<tr>
<td style="text-align:center">IX Lock</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
<td style="text-align:center">×</td>
<td style="text-align:center">×</td>
</tr>
<tr>
<td style="text-align:center">S Lock</td>
<td style="text-align:center">√</td>
<td style="text-align:center">×</td>
<td style="text-align:center">√</td>
<td style="text-align:center">×</td>
</tr>
<tr>
<td style="text-align:center">X Lock</td>
<td style="text-align:center">×</td>
<td style="text-align:center">×</td>
<td style="text-align:center">×</td>
<td style="text-align:center">×</td>
</tr>
</tbody>
</table>
</div>
<h2 id="锁的算法"><a href="#锁的算法" class="headerlink" title="锁的算法"></a>锁的算法</h2><p>InnoDB的锁实际上是对索引进行加锁.<br>InnoDB的三种锁的算法设计:</p>
<ul>
<li>Record Lock(记录锁): 单个行记录上的锁</li>
<li>Gap Lock(间隙锁): 锁定一个范围,但不包含记录本身 间隙锁也分为共享锁和互斥锁,但间隙共享锁和间隙互斥锁并不互斥,不同的事务可以同时持有一段相同范围的共享锁和互斥锁,唯一阻止的是其它事务在范围中添加/删除纪录</li>
<li>Next-Key Lock(): Gap Lock + Record Lock,锁定一个范围,并且锁定记录本身</li>
</ul>
<h2 id="加锁语句"><a href="#加锁语句" class="headerlink" title="加锁语句"></a>加锁语句</h2><ol>
<li><code>LOCK IN SHARED MODE</code>用于给记录加共享锁</li>
<li><code>FOR UPDATE</code>用于给记录加互斥锁</li>
</ol>
<p>不同SQL语句在各种隔离级别下的锁方式</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">-</th>
<th style="text-align:center">条件</th>
<th style="text-align:center">未提交读</th>
<th style="text-align:center">已提交读</th>
<th style="text-align:center">可重复读</th>
<th style="text-align:center">串行化</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>SELECT</code></td>
<td style="text-align:center">唯一索引</td>
<td style="text-align:center">不加锁</td>
<td style="text-align:center">一致性读</td>
<td style="text-align:center">一致性读</td>
<td style="text-align:center">共享锁</td>
</tr>
<tr>
<td style="text-align:center"><code>SELECT</code></td>
<td style="text-align:center">范围索引</td>
<td style="text-align:center">不加锁</td>
<td style="text-align:center">一致性读</td>
<td style="text-align:center">一致性读</td>
<td style="text-align:center">间隙共享锁</td>
</tr>
<tr>
<td style="text-align:center"><code>UPDATE</code></td>
<td style="text-align:center">唯一索引</td>
<td style="text-align:center">互斥锁</td>
<td style="text-align:center">互斥锁</td>
<td style="text-align:center">互斥锁</td>
<td style="text-align:center">互斥锁</td>
</tr>
<tr>
<td style="text-align:center"><code>UPDATE</code></td>
<td style="text-align:center">范围索引</td>
<td style="text-align:center">互斥锁</td>
<td style="text-align:center">间隙互斥锁</td>
<td style="text-align:center">间隙互斥锁</td>
<td style="text-align:center">间隙互斥锁</td>
</tr>
<tr>
<td style="text-align:center"><code>INSERT</code></td>
<td style="text-align:center">-</td>
<td style="text-align:center">互斥锁</td>
<td style="text-align:center">互斥锁</td>
<td style="text-align:center">互斥锁</td>
<td style="text-align:center">互斥锁</td>
</tr>
<tr>
<td style="text-align:center"><code>REPLACE</code></td>
<td style="text-align:center">无键冲突</td>
<td style="text-align:center">互斥锁</td>
<td style="text-align:center">互斥锁</td>
<td style="text-align:center">互斥锁</td>
<td style="text-align:center">互斥锁</td>
</tr>
<tr>
<td style="text-align:center"><code>REPLACE</code></td>
<td style="text-align:center">键冲突</td>
<td style="text-align:center">间隙互斥锁</td>
<td style="text-align:center">间隙互斥锁</td>
<td style="text-align:center">间隙互斥锁</td>
<td style="text-align:center">间隙互斥锁</td>
</tr>
<tr>
<td style="text-align:center"><code>DELETE</code></td>
<td style="text-align:center">唯一索引</td>
<td style="text-align:center">互斥锁</td>
<td style="text-align:center">互斥锁</td>
<td style="text-align:center">互斥锁</td>
<td style="text-align:center">互斥锁</td>
</tr>
<tr>
<td style="text-align:center"><code>DELETE</code></td>
<td style="text-align:center">范围索引</td>
<td style="text-align:center">间隙互斥锁</td>
<td style="text-align:center">间隙互斥锁</td>
<td style="text-align:center">间隙互斥锁</td>
<td style="text-align:center">间隙互斥锁</td>
</tr>
<tr>
<td style="text-align:center"><code>SELECT LOCK IN SHARE MODE</code></td>
<td style="text-align:center">唯一索引</td>
<td style="text-align:center">共享锁</td>
<td style="text-align:center">共享锁</td>
<td style="text-align:center">共享锁</td>
<td style="text-align:center">共享锁</td>
</tr>
<tr>
<td style="text-align:center"><code>SELECT LOCK IN SHARE MODE</code></td>
<td style="text-align:center">范围索引</td>
<td style="text-align:center">共享锁</td>
<td style="text-align:center">共享锁</td>
<td style="text-align:center">间隙共享锁</td>
<td style="text-align:center">间隙共享锁</td>
</tr>
<tr>
<td style="text-align:center"><code>SELECT FOR UPDATE</code></td>
<td style="text-align:center">唯一索引</td>
<td style="text-align:center">互斥锁</td>
<td style="text-align:center">互斥锁</td>
<td style="text-align:center">互斥锁</td>
<td style="text-align:center">互斥锁</td>
</tr>
<tr>
<td style="text-align:center"><code>SELECT FOR UPDATE</code></td>
<td style="text-align:center">范围索引</td>
<td style="text-align:center">互斥锁</td>
<td style="text-align:center">共享锁</td>
<td style="text-align:center">间隙互斥锁</td>
<td style="text-align:center">间隙互斥锁</td>
</tr>
</tbody>
</table>
</div>
<h2 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h2><p>两个或多个事务在同一资源上相互占用,并请求锁定对方占用的资源.<br>InnoDB有一个专门的锁监控线程,该线程负责查看可能的死锁问题,并自动告知用户.<br>InnoDB在发现死锁后,会马上回滚一个事务(持有最少行级互斥锁的事务),该事物其占用的资源被释放,另一个事务即可获得该资源,并继续向下执行.<br>死锁的四个必要条件:互斥,不可剥夺,请求和保持,循环等待</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">事务A</th>
<th style="text-align:center">事务B</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>START TRANSACTION;</code></td>
<td style="text-align:center"><code>START TRANSACTION;</code></td>
</tr>
<tr>
<td style="text-align:center"><code>SELECT Famount FROM t_user WHERE Fid=10001 FOR UPDATE;</code></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">-</td>
<td style="text-align:center"><code>SELECT Famount FROM t_user WHERE Fid=10002 FOR UPDATE;</code></td>
</tr>
<tr>
<td style="text-align:center"><code>SELECT Famount FROM t_user WHERE Fid=10002 FOR UPDATE;</code> 阻塞 等待10002的释放</td>
<td style="text-align:center">-</td>
</tr>
<tr>
<td style="text-align:center">-</td>
<td style="text-align:center"><code>SELECT Famount FROM t_user WHERE Fid=10001 FOR UPDATE;</code></td>
</tr>
<tr>
<td style="text-align:center">得到10002的锁 执行完毕</td>
<td style="text-align:center">发现死锁 自动回滚该事务<code>ERROR 1213 (40001): Deadlock found when trying to get lock; try restarting transaction</code></td>
</tr>
<tr>
<td style="text-align:center"><code>COMMIT;</code></td>
<td style="text-align:center">-</td>
</tr>
</tbody>
</table>
</div>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li>MySQL技术内幕InnoDB存储引擎</li>
<li><a href="http://blog.itpub.net/31559358/viewspace-2221931/" target="_blank" rel="noopener">这一次，带你搞清楚MySQL的事务隔离级别！</a></li>
<li><a href="https://draveness.me/mysql-innodb" target="_blank" rel="noopener">『浅入浅出』MySQL 和 InnoDB</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/35811482" target="_blank" rel="noopener">MySQL InnoDB 索引原理</a></li>
<li><a href="https://www.jianshu.com/p/1f17a496f14e" target="_blank" rel="noopener">第一章、MySQL架构及历史</a></li>
</ul>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>innodb</tag>
      </tags>
  </entry>
  <entry>
    <title>Hadoop概述</title>
    <url>/2019/01/24/hadoop/</url>
    <content><![CDATA[<p>Hadoop是一个能够<strong>对大量数据进行分布式处理的软件框架</strong>，具有<strong>可靠，高效，可伸缩</strong>的特点</p>
<a id="more"></a>
<h1 id="Hadoop组件"><a href="#Hadoop组件" class="headerlink" title="Hadoop组件"></a>Hadoop组件</h1><ol>
<li>Common一组分布式文件系统和通用I/O的组件和接口(序列化、Java RPC和持久化数据结构)</li>
<li>HDFS(Hadoop Distributed File System)分布式文件系统</li>
<li>MapReduce分布式并行编程模型</li>
<li>Hive分布式、按列存储数据库。Hive管理HDFS中存储的数据，并提供基于SQL的查询语言(由运行时引擎翻译为MapReduce作业)用以查询数据库</li>
<li>HBase一个分布式、按列存储数据库。HBase使用HDFS作为底层存储，支持MapReduce的批量式计算和点查询(随机读取)</li>
<li>Sqoop在数据库和HDFS之间高效传输数据的工具(可以将一个关系型数据库（MySQL ，Oracle ，Postgres等）中的数据导进到Hadoop的HDFS中，也可以将HDFS的数据导进到关系型数据库中。)</li>
<li>Pig一种数据流语言和运行环境，用以检索非常大的数据集.Pig运行在MapReduce和HDFS的集群上</li>
<li>Avro一种支持高效、跨语言的RPC以及永久存储数据的序列化系统</li>
<li>ZooKeeper分布式、高可用的协调服务，提供分布式锁之类的基础服务，用于构建分布式应用</li>
<li>Flume一个分布式、可靠的、高可用的海量日志聚合系统，可用于日志收集，日志数据处理，日志数据传输</li>
<li>Ambari一个基于Web的攻击，用来创建、管理、监视 Hadoop 的集群</li>
</ol>
<h1 id="Hodoop安装"><a href="#Hodoop安装" class="headerlink" title="Hodoop安装"></a>Hodoop安装</h1><h2 id="搭建本地源"><a href="#搭建本地源" class="headerlink" title="搭建本地源"></a>搭建本地源</h2><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><ol>
<li>安装nginx<code>yum install nginx</code></li>
<li>禁用防火墙或打开ambari/hadoop集群所需要使用端口</li>
<li>禁用SELinux 重启服务器 编辑<code>/etc/selinux/config</code>修改SELINUX为<code>SELINUX=disabled</code></li>
<li>在Ambari Server和Hadoop集群所有机器配置hosts IP地址根据实际的IP设置<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">127.0.0.1 ambari.casezhegn.date</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="压缩包下载"><a href="#压缩包下载" class="headerlink" title="压缩包下载"></a>压缩包下载</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Ambari</span><br><span class="line">wget http://public-repo-1.hortonworks.com/ambari/centos7/2.x/updates/2.6.2.2/ambari-2.6.2.2-centos7.tar.gz</span><br><span class="line"># Hadoop</span><br><span class="line">wget http://public-repo-1.hortonworks.com/HDP-UTILS-1.1.0.22/repos/centos7/HDP-UTILS-1.1.0.22-centos7.tar.gz</span><br><span class="line">wget http://public-repo-1.hortonworks.com/HDP/centos7/2.x/updates/2.6.5.0/HDP-2.6.5.0-centos7-rpm.tar.gz</span><br></pre></td></tr></table></figure>
<h3 id="配置Nginx"><a href="#配置Nginx" class="headerlink" title="配置Nginx"></a>配置Nginx</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$cat ambari.casezheng.date.conf </span><br><span class="line">server &#123;</span><br><span class="line">    listen 8088;</span><br><span class="line">    server_name     ambari.casezheng.date 127.0.0.1;</span><br><span class="line"></span><br><span class="line">    root /data/hadoop/repo/;</span><br><span class="line">    location / &#123;</span><br><span class="line">		autoindex on;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>重新加载nginx配置</p>
<h3 id="拷贝文件到配置的nginx根目录下"><a href="#拷贝文件到配置的nginx根目录下" class="headerlink" title="拷贝文件到配置的nginx根目录下"></a>拷贝文件到配置的nginx根目录下</h3><ol>
<li><p>解压文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tar zxvf ambari-2.6.2.2-centos7.tar.gz</span><br><span class="line">tar zxvf HDP-2.6.5.0-centos7-rpm.tar.gz</span><br><span class="line">tar zxvf HDP-UTILS-1.1.0.22-centos7.tar.gz</span><br></pre></td></tr></table></figure>
</li>
<li><p>将解压文件放置在配置的nginx根目录下,目录层次结构如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ pwd</span><br><span class="line">/data/hadoop/repo</span><br><span class="line">$ tree --filelimit 5</span><br><span class="line">.</span><br><span class="line">|-- ambari</span><br><span class="line">|   `-- centos7</span><br><span class="line">|       `-- 2.6.2.2-1 [9 entries exceeds filelimit, not opening dir]</span><br><span class="line">`-- HDP</span><br><span class="line">    |-- HDP</span><br><span class="line">    |   `-- centos7</span><br><span class="line">    |       `-- 2.6.5.0-292 [48 entries exceeds filelimit, not opening dir]</span><br><span class="line">    `-- HDP-UTILS</span><br><span class="line">        `-- centos7</span><br><span class="line">            `-- 1.1.0.22</span><br><span class="line">                |-- hdp-utils.repo</span><br><span class="line">                |-- openblas [12 entries exceeds filelimit, not opening dir]</span><br><span class="line">                |-- repodata [7 entries exceeds filelimit, not opening dir]</span><br><span class="line">                |-- RPM-GPG-KEY</span><br><span class="line">                |   `-- RPM-GPG-KEY-Jenkins</span><br><span class="line">                `-- snappy</span><br><span class="line">                    |-- snappy-1.1.0-3.el7.i686.rpm</span><br><span class="line">                    |-- snappy-1.1.0-3.el7.x86_64.rpm</span><br><span class="line">                    |-- snappy-devel-1.1.0-3.el7.i686.rpm</span><br><span class="line">                    `-- snappy-devel-1.1.0-3.el7.x86_64.rpm</span><br><span class="line"></span><br><span class="line">14 directories, 6 files</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="确保本地源可用"><a href="#确保本地源可用" class="headerlink" title="确保本地源可用"></a>确保本地源可用</h3><p>访问,确保可以看到应有的repo内容(域名访问不通,可通过ip:端口号的方式访问)<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http://ambari.casezheng.date:8088/ambari/centos7/</span><br><span class="line">http://ambari.casezheng.date:8088/hdp/</span><br></pre></td></tr></table></figure></p>
<h3 id="添加ambari-yum-repo"><a href="#添加ambari-yum-repo" class="headerlink" title="添加ambari yum repo"></a>添加ambari yum repo</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cat /etc/yum.repos.d/ambari.repo</span><br><span class="line">#VERSION_NUMBER=2.6.2.2-1</span><br><span class="line">[ambari-2.6.2.2]</span><br><span class="line">name=ambari Version - ambari-2.6.2.2</span><br><span class="line">baseurl=http://ambari.huishoubao.com:8088/Ambari/centos7/2.6.2.2-1</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=http://public-repo-1.hortonworks.com/ambari/centos7/2.x/updates/2.6.2.2/RPM-GPG-KEY/RPM-GPG-KEY-Jenkins</span><br><span class="line">enabled=1</span><br><span class="line">priority=1</span><br></pre></td></tr></table></figure>
<h3 id="确保ambari-yum-repo可用"><a href="#确保ambari-yum-repo可用" class="headerlink" title="确保ambari yum repo可用"></a>确保ambari yum repo可用</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ yum repolist  | grep ambari</span><br><span class="line">ambari-2.6.2.2                  ambari Version - ambari-2.6.2.2               12</span><br><span class="line">$ yum search ambari-server</span><br><span class="line">ambari-server.x86_64 : Ambari Server</span><br></pre></td></tr></table></figure>
<h2 id="Ambari安装"><a href="#Ambari安装" class="headerlink" title="Ambari安装"></a>Ambari安装</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install ambari-server</span><br></pre></td></tr></table></figure>
<h3 id="集群授权"><a href="#集群授权" class="headerlink" title="集群授权"></a>集群授权</h3><p>在ambari server上生成ssh key,并在其它所有节点将pub key设为信任key<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ ssh-keygen -b 4096</span><br><span class="line">cat ~/.ssh/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys</span><br><span class="line">chmod 0600 ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure></p>
<p>然后将<code>~/.ssh/id_rsa.pub</code>加入到集群所有机器的<code>~/.ssh/authorized_keys</code>并确保权限为<code>600</code></p>
<h3 id="配置和启动"><a href="#配置和启动" class="headerlink" title="配置和启动"></a>配置和启动</h3><ol>
<li><p>mysql-connector</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ yum install mysql-connector-java*</span><br><span class="line">$ cd /var/lib/ambari-server/resources/</span><br><span class="line">$ ln -s /usr/share/java/mysql-connector-java.jar mysql-connector-java.jar </span><br><span class="line">$ ll mysql-connector-java.jar </span><br><span class="line">lrwxrwxrwx 1 root root 40 Jan 31 15:18 mysql-connector-java.jar -&gt; /usr/share/java/mysql-connector-java.jar</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置 一路回车 选错了先<code>ambari-server reset</code>再重新执行setup</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ambari-server setup</span><br></pre></td></tr></table></figure>
</li>
<li><p>监听端口号修改</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cat /etc/ambari-server/conf/ambari.properties | grep &apos;client.api.port&apos;</span><br><span class="line">client.api.port=8081</span><br></pre></td></tr></table></figure>
</li>
<li><p>命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#启动</span><br><span class="line">ambari-server start</span><br><span class="line">#停止</span><br><span class="line">ambari-server stop</span><br><span class="line">#重启</span><br><span class="line">ambari-server restart</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>ambari初始帐号/密码为admin,admin</p>
<h2 id="Hadoop安装"><a href="#Hadoop安装" class="headerlink" title="Hadoop安装"></a>Hadoop安装</h2><ol>
<li>登录ambari</li>
<li>进入安装流程 <code>Welcome to Apache Ambari</code> -&gt;  <code>Launch install Wizard</code></li>
<li>输入集群名称</li>
<li>使用本地HDP源 选择<code>Use Local Repository</code></li>
<li><p>os选择redhat7 填入本地源地址</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http://ambari.casezheng.date:8088/HDP/HDP/centos7/2.6.5.0-292/</span><br><span class="line">http://ambari.casezheng.date:8088/HDP/HDP-UTILS/centos7/1.1.0.22/</span><br></pre></td></tr></table></figure>
</li>
<li><p>指定要安装Hadoop的机器  提供ambari server的ssh private key(~/.ssh/id_rsa)</p>
</li>
<li><p>安装会报错 给要安装Hadoop的机器安装ambari agent</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ yum install ambari-agent</span><br><span class="line">#给 /etc/ambari-agent/conf/ambari-agent.ini 在[security]下面添加 </span><br><span class="line">force_https_protocol=PROTOCOL_TLSv1_2</span><br><span class="line">#修改 /etc/python/cert-verification.cfg 中verify的值</span><br><span class="line">verify=disable</span><br><span class="line">#重启ambari-agent</span><br><span class="line">ambari-agent restart</span><br></pre></td></tr></table></figure>
</li>
<li><p>重试安装失败的安装任务</p>
</li>
<li>根据需要安装Hadoop组件</li>
<li>指定hadoop集群所有服务各自的master节点</li>
<li>指定hadoop集群所有服务各自的slave以及client</li>
<li>配置(后期可以修改,主要指定目录,设置帐号,密码,设置MySQL)</li>
<li>安装&amp;启动</li>
<li>参数调整</li>
</ol>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="http://www.cnblogs.com/zhijianliutang/articles/5195045.html" target="_blank" rel="noopener">Hadoop生态圈介绍</a></li>
<li><a href="https://blog.csdn.net/cj_forever/article/details/79775516" target="_blank" rel="noopener">走进hadoop生态圈</a></li>
<li><a href="https://www.jianshu.com/p/01cde7cef230" target="_blank" rel="noopener">大数据技术原理与应用：大数据处理架构Hadoop生态圈</a></li>
<li><a href="http://blog.fens.me/hadoop-family-roadmap/" target="_blank" rel="noopener">Hadoop家族学习路线图</a></li>
<li><a href="https://cloud.tencent.com/developer/news/321538" target="_blank" rel="noopener">Hadoop生态圈初识</a></li>
<li><a href="https://www.cnblogs.com/xiaohuangya/p/3521302.html" target="_blank" rel="noopener">Hortworks Hadoop生态圈简介</a></li>
<li><a href="https://blog.csdn.net/zcb_data/article/details/80402411" target="_blank" rel="noopener">hadoop生态圈各个组件简介</a></li>
<li><a href="https://blog.csdn.net/ronmy/article/details/65063316" target="_blank" rel="noopener">Hadoop初探之Hadoop生态圈</a></li>
<li><a href="https://www.cnblogs.com/tnsay/p/5753551.html" target="_blank" rel="noopener">一文看懂大数据的技术生态圈，Hadoop，hive，spark都有了</a></li>
</ul>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>hadoop</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库建模</title>
    <url>/2019/01/20/database-modeing/</url>
    <content><![CDATA[<h1 id="ER建模"><a href="#ER建模" class="headerlink" title="ER建模"></a>ER建模</h1><p>数据库建设最重要的一步:<strong>需求分析阶段(ER建模阶段)</strong><br>ER建模阶段:数据库开发人员协同需求方以ER图的方式对业务需求进行可视化展现</p>
<ol>
<li>实体(entity):表示客观世界中的众多概念 ER图中矩形表示</li>
<li>属性(attribute):每个实体都有属性 ER图中椭圆表示</li>
<li>联系(relation):实体和实体之间通常具有某种联系 ER图中菱形表示<ol>
<li>一对一</li>
<li>一对多</li>
<li>多对多</li>
</ol>
</li>
</ol>
<h1 id="ER模型到关系表的映射-逻辑模型建模或者关系建模"><a href="#ER模型到关系表的映射-逻辑模型建模或者关系建模" class="headerlink" title="ER模型到关系表的映射(逻辑模型建模或者关系建模)"></a>ER模型到关系表的映射(逻辑模型建模或者关系建模)</h1><h2 id="数据库设计三大范式"><a href="#数据库设计三大范式" class="headerlink" title="数据库设计三大范式"></a>数据库设计三大范式</h2><p><strong>有效避免数据冗余导致的更新异常</strong></p>
<ol>
<li>第一范式(1NF)<br> 每个列都是不可再分的属性值,确保每一列的原子性(确保每列保持原子性)</li>
<li>第二范式(2NF)<br> 在满足第一范式的基础上,必须有主键,没有包含在主键中的列必须完全依赖于主键,而不能只依赖主键的一部分(确保表中的每列都和主键相关)</li>
<li>第三范式(3NF)<br> 在满足第二范式的基础上,非主键必须直接依赖于主键(确保每列都和主键列直接相关，而不是间接相关)</li>
</ol>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li>数据库设计入门经典</li>
<li><a href="https://blog.csdn.net/hanxueyu666/article/details/81587199" target="_blank" rel="noopener">数据库三大范式详解（通俗易懂）</a></li>
<li><a href="https://www.cnblogs.com/1906859953Lucas/p/8299959.html" target="_blank" rel="noopener">数据库设计三大范式（简单易懂）</a></li>
<li><a href="https://www.cnblogs.com/muchen/p/5265305.html" target="_blank" rel="noopener">数据库关系建模</a></li>
<li><a href="http://www.cnblogs.com/muchen/p/5258197.html" target="_blank" rel="noopener">数据库需求与ER建模</a></li>
<li><a href="https://www.cnblogs.com/muchen/p/5272620.html" target="_blank" rel="noopener">更新异常与规范化设计</a></li>
</ul>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>命令行参数的处理 gflags getopt getopt_long</title>
    <url>/2017/09/23/command-line-arguments/</url>
    <content><![CDATA[<p>命令行参数的处理 gflags getopt getopt_long的简单使用与对比</p>
<h1 id="getopt-getopt-long"><a href="#getopt-getopt-long" class="headerlink" title="getopt getopt_long"></a>getopt getopt_long</h1><p>getopt是简单的命令行处理函数。而getopt_long则复杂一些，功能也更加强大。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getopt</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> * <span class="keyword">const</span> argv[],</span></span></span><br><span class="line"><span class="function"><span class="params">          <span class="keyword">const</span> <span class="keyword">char</span> *optstring)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">char</span> *optarg;</span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">int</span> optind, opterr, optopt;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;getopt.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getopt_long</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> * <span class="keyword">const</span> argv[],</span></span></span><br><span class="line"><span class="function"><span class="params">          <span class="keyword">const</span> <span class="keyword">char</span> *optstring,</span></span></span><br><span class="line"><span class="function"><span class="params">          <span class="keyword">const</span> struct option *longopts, <span class="keyword">int</span> *longindex)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getopt_long_only</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> * <span class="keyword">const</span> argv[],</span></span></span><br><span class="line"><span class="function"><span class="params">          <span class="keyword">const</span> <span class="keyword">char</span> *optstring,</span></span></span><br><span class="line"><span class="function"><span class="params">          <span class="keyword">const</span> struct option *longopts, <span class="keyword">int</span> *longindex)</span></span>;</span><br></pre></td></tr></table></figure>
<h2 id="getopt"><a href="#getopt" class="headerlink" title="getopt"></a>getopt</h2><p>函数说明 getopt()用来分析命令行参数。参数argc和argv分别代表参数个数和内容，跟main（）函数的命令行参数是一样的。参数 optstring为选项字符串， 告知 getopt()可以处理哪个选项以及哪个选项需要参数，如果选项字符串里的字母后接着冒号“:”，则表示还有相关的参数，全域变量optarg 即会指向此额外参数。如果在处理期间遇到了不符合optstring指定的其他选项getopt()将显示一个错误消息，并将全域变量optarg设为”?“字符，如果不希望getopt()打印出错信息，则只要将全域变量opterr设为0即可。<br>optarg 指向当前选项参数（如果有）的指针。<br>optind 再次调用getopt()时的下一个argv指针的索引。<br>opterr 是否将错误信息输出到stderr的标志，置为0表示不输出。默认输出。<br>optopt 最后一个未知选项。<br>getopt optstring参数详解：</p>
<ol>
<li>单个字符，表示选项。</li>
<li>单个字符后接一个冒号:表示该选项后必须跟一个参数。参数紧跟在选项后或者以空格隔开。该参数的指针赋给optarg。</li>
<li>单个字符后跟两个冒号::表示该选项后可以跟一个参数。也可以不跟。如果跟一个参数，参数必须紧跟在选项后不能以空格隔开。该参数的指针赋给optarg。</li>
</ol>
<p>getopt调用返回的是解析出的字符的选项。返回-1表示解析完毕。<br>简单示例：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> i=<span class="number">0</span>; i&lt;argc; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"argv "</span>&lt;&lt;i&lt;&lt;<span class="string">" "</span>&lt;&lt;argv[i]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> ch;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"optind:"</span>&lt;&lt;optind&lt;&lt;<span class="string">" opterr:"</span>&lt;&lt;opterr&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">while</span>((ch = getopt(argc, argv, <span class="string">"a:bcde::g"</span>)) != <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"optind:"</span>&lt;&lt;optind&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">switch</span>(ch)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'a'</span>:</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">"option a "</span>&lt;&lt;optarg&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'b'</span>:</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">"option b "</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">"optarg is NULL :"</span>&lt;&lt;(<span class="literal">NULL</span>==optarg)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'c'</span>:</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">"option c "</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'d'</span>:</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">"option d "</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'e'</span>:</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">"option e "</span>&lt;&lt;optarg&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'?'</span>:</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">"unkown option "</span>&lt;&lt;optarg&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">"error option"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> i=<span class="number">0</span>; i&lt;argc; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"after argv "</span>&lt;&lt;i&lt;&lt;<span class="string">" "</span>&lt;&lt;argv[i]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>编译后使用：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[CaseZheng@localhost Other]$ ./run -aef gege -ehaha -b gaga -cd</span><br><span class="line">argv 0 ./run</span><br><span class="line">argv 1 -aef</span><br><span class="line">argv 2 gege</span><br><span class="line">argv 3 -ehaha</span><br><span class="line">argv 4 -b</span><br><span class="line">argv 5 gaga</span><br><span class="line">argv 6 -cd</span><br><span class="line">optind:1 opterr:1</span><br><span class="line">optind:2</span><br><span class="line">option a ef</span><br><span class="line">optind:4</span><br><span class="line">option e haha</span><br><span class="line">optind:5</span><br><span class="line">option b</span><br><span class="line">optarg is NULL :1</span><br><span class="line">optind:6</span><br><span class="line">option c</span><br><span class="line">optind:7</span><br><span class="line">option d</span><br><span class="line">after argv 0 ./run</span><br><span class="line">after argv 1 -aef</span><br><span class="line">after argv 2 -ehaha</span><br><span class="line">after argv 3 -b</span><br><span class="line">after argv 4 -cd</span><br><span class="line">after argv 5 gege</span><br><span class="line">after argv 6 gaga</span><br></pre></td></tr></table></figure>
<p>optind初始值为1, 因为argv[0]存储的时程序名。所以从argv[1]开始解析。而optind表示的是下一次开始解析的位置，所以optind初始值为1。<br>解析a选项，解析出紧跟着的选项参数ef。-a和ef可以紧跟着也可以用空格分割。如果选项参数中有空格需要用” “或’’括起来。例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">./run -a &quot;ef ef&quot;</span><br><span class="line">./run -a&quot;ef ef&quot;</span><br></pre></td></tr></table></figure>
<p>解析e选项，解析e选项的参数haha。e选项使用了::，所以选项和选项参数必须紧跟在一起，不能用空格分割。例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">./run -e&apos;fefe&apos;</span><br><span class="line">./run -efefe</span><br></pre></td></tr></table></figure>
<p>而<code>./run -e fefe</code> 的写法是错误的，fefe无法解析出来。<br>再解析b c d选项，如果选项后不跟参数可以写在一起，例如<code>-cd</code>。<br>解析途中碰到的gege gaga 则不解析，并将其移动到argv参数尾部。即<code>argv[]</code>中的选项和选项的参数会被放置在数组前面，而optind 会指向第一个非选项和参数的位置。</p>
<h2 id="getopt-long"><a href="#getopt-long" class="headerlink" title="getopt_long"></a>getopt_long</h2><p>getopt_long和getopt都是解析命令行参数，但getopt_long支持长选项。<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getopt_long</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> * <span class="keyword">const</span> argv[],</span></span></span><br><span class="line"><span class="function"><span class="params">          <span class="keyword">const</span> <span class="keyword">char</span> *optstring,</span></span></span><br><span class="line"><span class="function"><span class="params">          <span class="keyword">const</span> struct option *longopts, <span class="keyword">int</span> *longindex)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">option</span> &#123;</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *name;       <span class="comment">//长选项名字</span></span><br><span class="line">    <span class="keyword">int</span>         has_arg;    <span class="comment">//no_argument（或0）：选项不携带参数；required_argument（或1）：选项需要参数；optional_argument（或2）：选项携带可选参数</span></span><br><span class="line">    <span class="keyword">int</span>        *flag;       <span class="comment">//指定该长选项的返回值。如果flag是NULL，getopt_long会返回val。否则，getopt_long会返回0，且flag指向的值设置为val的值，前提是该选项成功找到了</span></span><br><span class="line">    <span class="keyword">int</span>         val;        <span class="comment">//当做返回值，或把值加载进flag所指的内存中。</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>longopts用来支持长选项。longopts指向数组的最后一个元素值都设置为0。</p>
<ol>
<li>注意相比getopt，使用getopt_long需要加头文件<code>&lt;getopt.h&gt;</code></li>
<li>getopt_long除了会接受长选项，其他概念和getopt是一样的</li>
<li>如果使用getopt_long想只接受短选项，设置longopts为NULL即可；如果只想接受长选项，相应地设置optstring为NULL即可</li>
<li>长选项名是可以使用缩写方式，比如：选项有<code>--file--create</code>,那么输入<code>--c</code>/<code>--cr</code>/<code>--cre</code>等均会被正确识别为create选项</li>
<li>对于带参数的长选项格式是：<code>--arg=param</code>或<code>--arg param</code></li>
<li>longopts是指向struct option数组的第一个元素的指针，struct option定义在<code>&lt;getopt.h&gt;</code>中</li>
<li>longindex如果非NULL，则是返回识别到struct option数组中元素的位置指针</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;getopt.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//getopt_long示例</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> i=<span class="number">0</span>; i&lt;argc; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"argv "</span>&lt;&lt;i&lt;&lt;<span class="string">" "</span>&lt;&lt;argv[i]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> ch;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"optind:"</span>&lt;&lt;optind&lt;&lt;<span class="string">" opterr:"</span>&lt;&lt;opterr&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">int</span> flag;</span><br><span class="line">    <span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">option</span> <span class="title">long_options</span>[] = &#123;</span></span><br><span class="line">            &#123;  <span class="string">"append"</span>,    <span class="number">1</span>,   <span class="literal">NULL</span>,   <span class="string">'a'</span> &#125;,</span><br><span class="line">            &#123;  <span class="string">"help"</span>,      <span class="number">0</span>,   <span class="literal">NULL</span>,   <span class="string">'h'</span> &#125;,</span><br><span class="line">            &#123;  <span class="string">"verbose"</span>,   <span class="number">0</span>,   <span class="literal">NULL</span>,   <span class="string">'v'</span>  &#125;,</span><br><span class="line">            &#123;  <span class="string">"output"</span>,    <span class="number">1</span>,   &amp;flag,  <span class="string">'o'</span>   &#125;,</span><br><span class="line">            &#123;  <span class="literal">NULL</span>,        <span class="number">0</span>,   <span class="literal">NULL</span>,   <span class="number">0</span>  &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    <span class="keyword">int</span> longindex = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>((ch = getopt_long(argc, argv, <span class="string">"a:hvb:cde::g"</span>, long_options, &amp;longindex)) != <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"optind:"</span>&lt;&lt;optind&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"ch:"</span>&lt;&lt;ch&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">switch</span>(ch)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">"long option "</span>&lt;&lt;longindex&lt;&lt;<span class="string">" "</span>&lt;&lt;long_options[longindex].name;</span><br><span class="line">                <span class="keyword">if</span>(<span class="literal">NULL</span> != optarg)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">cout</span>&lt;&lt;<span class="string">" arg "</span>&lt;&lt;optarg;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'a'</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'h'</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'v'</span>:</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">"ch "</span>&lt;&lt;(<span class="keyword">char</span>)ch&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                <span class="keyword">if</span>(<span class="literal">NULL</span> != optarg)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">cout</span>&lt;&lt;<span class="string">"arg "</span>&lt;&lt;optarg;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'b'</span>:</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">"option b "</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">"optarg is NULL :"</span>&lt;&lt;(<span class="literal">NULL</span>==optarg)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'c'</span>:</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">"option c "</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'d'</span>:</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">"option d "</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'e'</span>:</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">"option e "</span>&lt;&lt;optarg&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'?'</span>:</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">"option ? "</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                <span class="keyword">if</span>(<span class="literal">NULL</span> != optarg)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">cout</span>&lt;&lt;<span class="string">"unkown option "</span>&lt;&lt;optarg&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">"unkown longindex "</span>&lt;&lt;longindex&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">"error option"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> i=<span class="number">0</span>; i&lt;argc; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"after argv "</span>&lt;&lt;i&lt;&lt;<span class="string">" "</span>&lt;&lt;argv[i]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>编译运行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[CaseZheng@localhost Other]$ ./run -a fe -hv -cd -b ff -append --output fe</span><br><span class="line">argv 0 ./run</span><br><span class="line">argv 1 -a</span><br><span class="line">argv 2 fe</span><br><span class="line">argv 3 -hv</span><br><span class="line">argv 4 -cd</span><br><span class="line">argv 5 -b</span><br><span class="line">argv 6 ff</span><br><span class="line">argv 7 -append</span><br><span class="line">argv 8 --output</span><br><span class="line">argv 9 fe</span><br><span class="line">optind:1 opterr:1</span><br><span class="line">optind:3</span><br><span class="line">ch:97</span><br><span class="line">ch a</span><br><span class="line">arg fe</span><br><span class="line">optind:3</span><br><span class="line">ch:104</span><br><span class="line">ch h</span><br><span class="line"></span><br><span class="line">optind:4</span><br><span class="line">ch:118</span><br><span class="line">ch v</span><br><span class="line"></span><br><span class="line">optind:4</span><br><span class="line">ch:99</span><br><span class="line">option c</span><br><span class="line">optind:5</span><br><span class="line">ch:100</span><br><span class="line">option d</span><br><span class="line">optind:7</span><br><span class="line">ch:98</span><br><span class="line">option b</span><br><span class="line">optarg is NULL :0</span><br><span class="line">optind:8</span><br><span class="line">ch:97</span><br><span class="line">ch a</span><br><span class="line">arg ppend</span><br><span class="line">optind:10</span><br><span class="line">ch:0</span><br><span class="line">long option 3 output arg fe</span><br><span class="line">after argv 0 ./run</span><br><span class="line">after argv 1 -a</span><br><span class="line">after argv 2 fe</span><br><span class="line">after argv 3 -hv</span><br><span class="line">after argv 4 -cd</span><br><span class="line">after argv 5 -b</span><br><span class="line">after argv 6 ff</span><br><span class="line">after argv 7 -append</span><br><span class="line">after argv 8 --output</span><br><span class="line">after argv 9 fe</span><br></pre></td></tr></table></figure>
<h1 id="gflags"><a href="#gflags" class="headerlink" title="gflags"></a>gflags</h1><p>gflags 是 google 开源的用于处理命令行参数的项目。</p>
<h2 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;gflags/gflags.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line">DEFINE_bool(daemon, <span class="literal">true</span>, <span class="string">"run daemon mode"</span>);</span><br><span class="line">DEFINE_int32(port, <span class="number">9000</span>, <span class="string">"program listen port"</span>);</span><br><span class="line">DEFINE_string(confpath, <span class="string">"./config.ini"</span>, <span class="string">"program config path"</span>);</span><br><span class="line">DEFINE_double(dou, <span class="number">0</span>, <span class="string">"double"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义对 FLAGS_port 的检查函数</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">ValidatePort</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* name, <span class="keyword">int32_t</span> value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (value &gt; <span class="number">0</span> &amp;&amp; value &lt; <span class="number">32768</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Invalid value for --%s: %d\n"</span>, name, (<span class="keyword">int</span>)value);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用全局 static 变量来注册函数，static 变量会在 main 函数开始时就调用,确保参数检查在main函数进入时已经注册。</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">bool</span> port_dummy = gflags::RegisterFlagValidator(&amp;FLAGS_port, &amp;ValidatePort);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//gflags::RegisterFlagValidator(&amp;FLAGS_port, &amp;ValidatePort);</span></span><br><span class="line">    gflags::ParseCommandLineFlags(&amp;argc, &amp;argv, <span class="literal">true</span>);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"daemon: "</span>&lt;&lt;FLAGS_daemon&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"port: "</span>&lt;&lt;FLAGS_port&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"configpath: "</span>&lt;&lt;FLAGS_confpath&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"dou: "</span>&lt;&lt;FLAGS_dou&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    FLAGS_dou = <span class="number">9999.8</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"after dou: "</span>&lt;&lt;FLAGS_dou&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用 SetCommandLineOption 函数对参数进行设置才会调用检查函数</span></span><br><span class="line">    gflags::SetCommandLineOption(<span class="string">"port"</span>, <span class="string">"-2"</span>);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"after port: "</span>&lt;&lt;FLAGS_port&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    FLAGS_port = <span class="number">-2</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"after2 port: "</span>&lt;&lt;FLAGS_port&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>编译运行：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[CaseZheng@localhost Other]$ g++ -o run CommandLine.cpp -g -lgflags</span><br><span class="line">[CaseZheng@localhost Other]$ ./run -confpath   &quot;./config.txt&quot; -daemon=&quot;true&quot; --port=111 -dou 1.001</span><br><span class="line">1</span><br><span class="line">111</span><br><span class="line">./config.txt</span><br><span class="line">1.001</span><br></pre></td></tr></table></figure></p>
<p>gflags支持的类型：</p>
<ul>
<li>DEFINE_bool: boolean</li>
<li>DEFINE_int32: 32-bit integer</li>
<li>DEFINE_int64: 64-bit integer</li>
<li>DEFINE_uint64: unsigned 64-bit integer</li>
<li>DEFINE_double: double</li>
<li>DEFINE_string: C++ string</li>
</ul>
<p>如定义: <code>DEFINE_bool(daemon, true, &quot;run daemon mode&quot;);</code><br>在命令行可以这样访问：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">./run -daemon</span><br><span class="line">./run -daemon=true</span><br><span class="line">./run -daemon=1</span><br><span class="line">./run -daemon=false</span><br><span class="line">./run --daemon true</span><br><span class="line">./run --daemon &quot;true&quot;</span><br></pre></td></tr></table></figure></p>
<p>在程序中可加前缀<code>FLAGS_</code>来访问，例如: <code>cout&lt;&lt;FLAGS_daemon&lt;&lt;endl;</code><br>gflags变量可以被修改 <code>FLAGS_daemon = true;</code></p>
<p>gflags支持从文件中读取命令行参数。<br>config.flags文件<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-confpath   &quot;./config.txt&quot; -daemon=&quot;true&quot; --port=111 -dou 1.001</span><br></pre></td></tr></table></figure></p>
<p>命令行使用：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[CaseZheng@localhost Other]$ ./run --flagfile config.flags</span><br><span class="line">1</span><br><span class="line">9000</span><br><span class="line">./config.ini</span><br><span class="line">dou: 0</span><br><span class="line">after dou: 9999.8</span><br></pre></td></tr></table></figure></p>
<h2 id="外部引用"><a href="#外部引用" class="headerlink" title="外部引用"></a>外部引用</h2><p>如果希望在别的文件中使用gflags变量，可以使用<code>DECLARE_type</code>（type为变量类型 int string double等）来声明变量。相当与extern声明变量 例如： <code>DECLARE_bool(daemon);</code></p>
<h2 id="参数检查"><a href="#参数检查" class="headerlink" title="参数检查"></a>参数检查</h2><p>可以注册检查函数值的检查函数。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[CaseZheng@localhost Other]$ ./run -port=99</span><br><span class="line">[CaseZheng@localhost Other]$ ./run -port=-1</span><br><span class="line">Invalid value for --port: -1</span><br><span class="line">ERROR: failed validation of new value &apos;-1&apos; for flag &apos;port&apos;</span><br><span class="line">daemon: 1</span><br><span class="line">port: 99</span><br><span class="line">configpath: ./config.ini</span><br><span class="line">dou: 0</span><br><span class="line">after dou: 9999.8</span><br><span class="line">Invalid value for --port: -2</span><br><span class="line">after port: 99</span><br><span class="line">after2 port: -2</span><br></pre></td></tr></table></figure>
<p>可以看到命令行输入错误，程序会直接退出。<br>使用SetCommandLineOption修改参数也会触发参数检测，但如果不合法，程序不退出。如果直接修改参数的值则不会触发参数检测函数。</p>
<h2 id="特殊参数"><a href="#特殊参数" class="headerlink" title="特殊参数"></a>特殊参数</h2><ul>
<li><code>--help</code> 打印定义过的所有参数的帮助信息</li>
<li><code>--version</code> 打印版本信息 通过google::SetVersionString()指定</li>
<li><code>--nodefok</code> 但命令行中出现没有定义的参数时，并不退出（error-exit）</li>
<li><code>--fromenv</code> 从环境变量读取参数值 <code>--fromenv=foo,bar</code>表明要从环境变量读取foo，bar两个参数的值。通过<code>export FLAGS_foo=xxx; export FLAGS_bar=yyy</code> 程序就可读到foo，bar的值分别为xxx，yyy。</li>
<li><code>--tryfromenv</code>与<code>--fromenv</code>类似，当参数的没有在环境变量定义时，不退出（fatal-exit）</li>
<li><code>--flagfile</code> 从文件读取参数值，<code>--flagfile=my.conf</code>表明要从<code>my.conf</code>文件读取参数的值。在配置文件中指定参数值与在命令行方式类似，另外在flagfile里可进一步通过<code>--flagfile</code>来包含其他的文件。</li>
</ul>
<h1 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h1><ol>
<li>getopt <code>getopt_long</code>是Linux标准库中的，可以直接使用，而gflags需要安装。</li>
<li>getopt只支持短选项，<code>getopt_long</code>支持短选项和长选项，<code>getopt_long</code>支持长选项缩写，gflags不支持长选项缩写。</li>
<li>getopt、<code>getopt_long</code>是C函数，通用性强，而gflags使用C++编写，C无法直接使用。</li>
<li>getopt、<code>getopt_long</code>使用不便，gflags使用方便，清晰。</li>
</ol>
]]></content>
      <categories>
        <category>cpp</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>cpp</tag>
      </tags>
  </entry>
  <entry>
    <title>SGI STL 标准库 set map multiset multimap 8</title>
    <url>/2017/06/19/stl-set-map-multiset-multimap-8/</url>
    <content><![CDATA[<p><a href="https://github.com/CaseZheng/SourceCodeAnalysis" target="_blank" rel="noopener">github源码分析仓库</a></p>
<h1 id="set"><a href="#set" class="headerlink" title="set"></a>set</h1><hr>
<p>set特性 所有元素会根据元素的键值自动排序。set元素的键值就是实值，实值就是键值。set不允许两个元素有相同的键值。<br>set无法通过迭代器改变set元素的值，因为set元素值就是键值，关系到set元素的排列规则。set的迭代器<code>set&lt;T&gt;::iterator</code>被定义为底层RB-tree的<code>const_iterator</code>，杜绝写入操作。<br>set当进行元素新增操作或删除操作时，除了被删除元素的迭代器，操作之前的所有迭代器，在操作完成后依然有效。<br>set以RB-tree作为底层容器，set几乎所有的操作，都是转调用RB-tree的操作。<br>set使用RB-tree的<code>insert_unique()</code>，因为set不允许相同键值存在。</p>
<h1 id="map"><a href="#map" class="headerlink" title="map"></a>map</h1><hr>
<p>map特性 所有元素会根据元素的键值进行排序。map的所有元素都是pair，同时拥有实值和键值。pair的第一个元素被视为键值，第二个元素被视为实值。map不允许两个元素拥有相同的键值。<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">T1</span>, <span class="title">class</span> _<span class="title">T2</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">struct</span> <span class="title">pair</span> &#123;</span></span><br><span class="line">  <span class="keyword">typedef</span> _T1 first_type;</span><br><span class="line">  <span class="keyword">typedef</span> _T2 second_type;</span><br><span class="line"></span><br><span class="line">  _T1 first;</span><br><span class="line">  _T2 second;</span><br><span class="line">  pair() : first(_T1()), second(_T2()) &#123;&#125;</span><br><span class="line">  pair(<span class="keyword">const</span> _T1&amp; __a, <span class="keyword">const</span> _T2&amp; __b) : first(__a), second(__b) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __STL_MEMBER_TEMPLATES</span></span><br><span class="line">  <span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">U1</span>, <span class="title">class</span> _<span class="title">U2</span>&gt;</span></span><br><span class="line"><span class="class">  <span class="title">pair</span>(<span class="title">const</span> <span class="title">pair</span>&lt;_U1, _U2&gt;&amp; __<span class="title">p</span>) :</span> first(__p.first), second(__p.second) &#123;&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>可以通过迭代器修改map元素的实值，但不能通过迭代器修改map元素的键值，因为map元素的键值关系到其排序，而其实值不影响。<br>对map进行新增、删除操作，不会影响迭代器的有效性，被删除元素的迭代器除外。<br>map以RB-tree作为底层容器。<br>map的insert()转调用RB-tree的<code>insert_unique()</code>函数，保证元素的键值唯一。<br>map的下标操作符，用法有两种，可作为左值运用(内容可被修改)，也可作右值使用(内容不可被修改)。左值和右值都适用的关键在于返回值采用传引用的传递方式。</p>
<h1 id="multiset"><a href="#multiset" class="headerlink" title="multiset"></a>multiset</h1><hr>
<p>multiset和set的特性与用法完全相同，唯一的差别在于它允许键值重复，因为它的插入采用的是底层容器RB-tree的<code>insert_equal()</code>。</p>
<h1 id="multimap"><a href="#multimap" class="headerlink" title="multimap"></a>multimap</h1><hr>
<p>multimap和map的特性与用法完全相同，唯一的差别在于它允许键值重复，因为它的插入采用的是底层容器RB-tree的<code>insert_equal()</code>。</p>
]]></content>
      <categories>
        <category>cpp</category>
      </categories>
      <tags>
        <tag>cpp</tag>
        <tag>stl</tag>
      </tags>
  </entry>
  <entry>
    <title>fastcgi</title>
    <url>/2019/05/04/fastcgi/</url>
    <content><![CDATA[<h1 id="CGI"><a href="#CGI" class="headerlink" title="CGI"></a>CGI</h1><p>CGI(Common Gateway Interface)通用网关接口,是Web服务器与Server进行数据传递的一种标准协议.<br>Server每次接收到Web服务器的一个CGI请求后<code>fork</code>一个子进程去<code>exec</code>特定的CGI程序,Server收到的参数通过环境变量传递,在<code>fork</code>后对子进程的标准输入/标准输出/标准错误输出进行重定向,重定向到父进程生成的IPC文件描述符.<code>exec</code>特定的CGI程序,替换成功后等待子进程的运算结果,受到结果将其返回给浏览器.其中Web服务器和Server的通信通过标准输入/标准输出/标准错误输出进行,Server从标准输入读取参数,向标准输出输出数据即可.<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Web浏览器       --&gt;        Web服务器           --&gt;             Server</span><br><span class="line">           1.Http Request                     2.stdin            |</span><br><span class="line">                                                             子进程的创建</span><br><span class="line">                                                                 |</span><br><span class="line">                                                            CGI协议解析</span><br><span class="line">                                                                 |</span><br><span class="line">                                                             CGI程序exec</span><br><span class="line">                                                                 |</span><br><span class="line">                                                             环境变量读取</span><br><span class="line">                                                                 |</span><br><span class="line">                                                   标准输入标准输出标准错误输出重定向</span><br><span class="line">                                                                 |</span><br><span class="line">                                                            CGI协议解析</span><br><span class="line">                                                                 |</span><br><span class="line">Web浏览器       &lt;--        Web服务器           &lt;--            逻辑处理</span><br><span class="line">          4.Http Response                3.stdout/stderr         |</span><br><span class="line">                                                                退出</span><br></pre></td></tr></table></figure></p>
<p>CGI程序每处理一个请求都需要创建子进程,然后<code>exec</code>特定的CGI程序,处理完请求子进程自动退出,消耗大量系统资源,性能太差</p>
<a id="more"></a>
<h1 id="FastCGI"><a href="#FastCGI" class="headerlink" title="FastCGI"></a>FastCGI</h1><p>FastCGI是CGI的优化版本,FastCGI再程序启动之初就<code>fork</code>多个子进程,阻塞等待Web服务器的请求,处理完一个请求后不退出,继续阻塞等待下一个请求,通信方式可以使用TCP连接,跨服务器<br><img src="/Picture/fastcgi.jpg" alt="fastcgi"></p>
<h1 id="spawn-fcgi"><a href="#spawn-fcgi" class="headerlink" title="spawn-fcgi"></a>spawn-fcgi</h1><p>spawn-fcgi是一个开源的小程序,用来管理fast-cgi进程,简单小巧.<br><a href="https://github.com/lighttpd/spawn-fcgi" target="_blank" rel="noopener">spawn-fcgi的github地址github.com/lighttpd/spawn-fcgi</a><br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> spawn-fcgi</span></span><br><span class="line">Usage: spawn-fcgi [options] [-- &lt;fcgiapp&gt; [fcgi app arguments]]</span><br><span class="line">spawn-fcgi v1.6.3 (ipv6) - spawns FastCGI processes</span><br><span class="line">Options:</span><br><span class="line"> -f &lt;path&gt;      filename of the fcgi-application (deprecated; ignored if</span><br><span class="line">                &lt;fcgiapp&gt; is given; needs /bin/sh)</span><br><span class="line"> -d &lt;directory&gt; chdir to directory before spawning</span><br><span class="line"> -a &lt;address&gt;   bind to IPv4/IPv6 address (defaults to 0.0.0.0)</span><br><span class="line"> -p &lt;port&gt;      bind to TCP-port</span><br><span class="line"> -s &lt;path&gt;      bind to Unix domain socket</span><br><span class="line"> -M &lt;mode&gt;      change Unix domain socket mode</span><br><span class="line"> -C &lt;children&gt;  (PHP only) numbers of childs to spawn (default: not setting</span><br><span class="line">                the PHP_FCGI_CHILDREN environment variable - PHP defaults to 0)</span><br><span class="line"> -F &lt;children&gt;  number of children to fork (default 1)</span><br><span class="line"> -P &lt;path&gt;      name of PID-file for spawned process (ignored in no-fork mode)</span><br><span class="line"> -n             no fork (for daemontools)</span><br><span class="line"> -v             show version</span><br><span class="line"> -?, -h         show this help</span><br><span class="line">(root only)</span><br><span class="line"> -c &lt;directory&gt; chroot to directory</span><br><span class="line"> -S             create socket before chroot() (default is to create the socket</span><br><span class="line">                in the chroot)</span><br><span class="line"> -u &lt;user&gt;      change to user-id</span><br><span class="line"> -g &lt;group&gt;     change to group-id (default: primary group of user if -u</span><br><span class="line">                is given)</span><br><span class="line"> -U &lt;user&gt;      change Unix domain socket owner to user-id</span><br><span class="line"> -G &lt;group&gt;     change Unix domain socket group to group-id</span><br></pre></td></tr></table></figure></p>
<p><a href="https://github.com/CaseZheng/FastCGI/blob/master/spawn-fcgi/spawn-fcgi.c" target="_blank" rel="noopener">spawn-fcgi.c注释</a></p>
<h1 id="fastcgi"><a href="#fastcgi" class="headerlink" title="fastcgi"></a>fastcgi</h1><p><a href="https://github.com/CaseZheng/FastCGI/tree/master/fastcgi" target="_blank" rel="noopener">fastcgi的阉割版本,只保留Linux环境下的代码,加入注释</a><br>缺点:所有操作都是阻塞的,一个进程同时只能处理一个请求,和web服务器之间的通信只能使用短链接</p>
<h1 id="协程FastCGI"><a href="#协程FastCGI" class="headerlink" title="协程FastCGI"></a>协程FastCGI</h1><p><a href="https://github.com/CaseZheng/FastCGI/tree/master/cocgi" target="_blank" rel="noopener">从fastcgi-async-or-coroutine修改而来的cocgi</a><br>和腾讯的libco相结合,单进程可同时处理多个请求,增加了协程动态新增和销毁的功能</p>
<h1 id="异步FastCGI"><a href="#异步FastCGI" class="headerlink" title="异步FastCGI"></a>异步FastCGI</h1><p><a href="https://github.com/CaseZheng/FastCGI/tree/master/mucgi" target="_blank" rel="noopener">从fastcgi-async-or-coroutine修改而来的mucgi</a><br>借助muduo库,使用I/O复用技术,单进程可以处理多个请求,缺点在于对后端的访问还是同步方式的话会阻塞整个进程</p>
]]></content>
      <categories>
        <category>高性能服务器</category>
      </categories>
      <tags>
        <tag>cpp</tag>
      </tags>
  </entry>
  <entry>
    <title>单元化（SET）架构</title>
    <url>/2019/07/04/server-set/</url>
    <content><![CDATA[<h1 id="什么是单元化"><a href="#什么是单元化" class="headerlink" title="什么是单元化"></a>什么是单元化</h1><p>单元化是将一个系统的架构按照某种数据特征纬度进行垂直的划分。例如：有100万用户，按用户纬度进行划分，分为10个单元，每个单元存储10万个用户资料。<br>一个单元就是一个<strong>能完成所有业务操作</strong>的自包含集合，该集合中包含了业务所需的<strong>所有服务</strong>，以及分配到该单元的<strong>数据</strong>。</p>
<a id="more"></a>
<h1 id="单元化的好处"><a href="#单元化的好处" class="headerlink" title="单元化的好处"></a>单元化的好处</h1><ol>
<li>每个单元数据规模可控</li>
<li>计算离存储更近</li>
<li>提高资源利用率</li>
<li>动态可伸缩</li>
<li>异地多活</li>
<li>线蓝绿发和线上灰度</li>
<li>故障隔离</li>
</ol>
<h1 id="单元化的目标"><a href="#单元化的目标" class="headerlink" title="单元化的目标"></a>单元化的目标</h1><ol>
<li>业务，解决业务遇到的扩展性和容灾等需求，支持业务的高速发展</li>
<li>通用性，架构侧形成统一的解决方案，方便各业务线接入</li>
</ol>
<h1 id="单元化架构原则"><a href="#单元化架构原则" class="headerlink" title="单元化架构原则"></a>单元化架构原则</h1><ol>
<li>对业务透明，对代码业务透明，业务代码不需要关心单元化规则，单元化的部署等问题</li>
<li>单元化划分的规则需要按照业务层面定制，建议优先选最大的业务纬度进行切分</li>
<li>部署规范</li>
</ol>
<h1 id="单元化架构设计"><a href="#单元化架构设计" class="headerlink" title="单元化架构设计"></a>单元化架构设计</h1><p>传统服务化架构（SOA），服务是分层的，每层节点数据不定，上层调用下层时随机选择节点。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">         |1                2|  |3</span><br><span class="line">         |                  |  |</span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line">         |1                2|  |3</span><br><span class="line">        \|/                \|/\|/</span><br><span class="line">        ------             ------             ------</span><br><span class="line">        | W1 |             | W2 |             | W3 |       接口层</span><br><span class="line">        ------             ------             ------</span><br><span class="line">          |                 |  |</span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line">          |1               2|  |3</span><br><span class="line">          ---------         |  -------</span><br><span class="line">                 \|/        |       \|/</span><br><span class="line">                ------      |      ------</span><br><span class="line">                | S1 |      ------&gt;| S2 |--------          业务层</span><br><span class="line">                ------             ------      2|</span><br><span class="line">                  |1                3|          |</span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line">                  |1                 |          |</span><br><span class="line">                  -----------        |          |</span><br><span class="line">                           \|/       |         \|/</span><br><span class="line">        ------            --------   |         ------</span><br><span class="line">        | C1 |            |  C2  | &lt;--         | C3 |      核心层</span><br><span class="line">        ------            --------             ------</span><br><span class="line">                         1|     |3              |2</span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line">                         1|     |3              |</span><br><span class="line">                         \|/   \|/              |</span><br><span class="line">                        ----------    2         |</span><br><span class="line">                        |   DB   |&lt;--------------          数据层</span><br><span class="line">                        ----------</span><br><span class="line"></span><br><span class="line">----------------------------------------------------------------------</span><br></pre></td></tr></table></figure></p>
<p>单元化架构下，服务仍然分层，但每层的任意一个节点都属于且仅数据同一个单元，上层调用下层时仅选项本单元内的节点<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">                          |1       |2        |3</span><br><span class="line">     ----------------------------------------------------------------</span><br><span class="line">     |                         流量路由                             |</span><br><span class="line">     ----------------------------------------------------------------</span><br><span class="line">          |1                       |2                          |3</span><br><span class="line">  ------------------|     ---------------------      -------------------</span><br><span class="line">  |       |1        |     |        |2         |      |         |3      |</span><br><span class="line">--|-----------------|-----|-------------------|------|-----------------|------------</span><br><span class="line">  |       |1        |     |        |2         |      |         |3      |</span><br><span class="line">  |      \|/        |     |       \|/         |      |        \|/      |</span><br><span class="line">  |     ------      |     |     ------        |      |       ------    |</span><br><span class="line">  |     | W1 |      |     |     | W2 |        |      |       | W3 |    |   接口层</span><br><span class="line">  |     ------      |     |     ------        |      |       ------    |</span><br><span class="line">  |       |         |     |       |           |      |         |       |</span><br><span class="line">--|-----------------|-----|-------------------|------|-----------------|------------</span><br><span class="line">  |       |1        |     |       |2          |      |         |3      |</span><br><span class="line">  |      \|/        |     |      \|/          |      |        \|/      |</span><br><span class="line">  |     ------      |     |     ------        |      |       ------    |</span><br><span class="line">  |     | S1 |      |     |     | S2 |        |      |       | S3 |    |   业务层</span><br><span class="line">  |     ------      |     |     ------        |      |       ------    |</span><br><span class="line">  |       |1        |     |       |2          |      |         |3      |</span><br><span class="line">--|-----------------|-----|-------------------|------|-----------------|------------</span><br><span class="line">  |       |1        |     |       |2          |      |         |3      |</span><br><span class="line">  |      \|/        |     |      \|/          |      |        \|/      |</span><br><span class="line">  |     ------      |     |     ------        |      |       ------    |</span><br><span class="line">  |     | C1 |      |     |     | C2 |        |      |       | C3 |    |   核心层</span><br><span class="line">  |     ------      |     |     ------        |      |       ------    |</span><br><span class="line">  |       |1        |     |       |2          |      |         |3      |</span><br><span class="line">--|-----------------|-----|-------------------|------|-----------------|------------</span><br><span class="line">  |       |1        |     |       |2          |      |         |3      |</span><br><span class="line">  |      \|/        |     |      \|/          |      |        \|/      |</span><br><span class="line">  |     ------      |     |     ------        |      |       ------    |</span><br><span class="line">  |     | D1 |      |     |     | D2 |        |      |       | D3 |    |   数据层</span><br><span class="line">  |     ------      |     |     ------        |      |       ------    |</span><br><span class="line">  |                 |     |                   |      |                 |</span><br><span class="line">--|-----------------|-----|-------------------|------|-----------------|------------</span><br><span class="line">  |      SET 1      |     |       SET 2       |      |       SET 3     |</span><br><span class="line">  -------------------     ---------------------      -------------------</span><br></pre></td></tr></table></figure></p>
<p>单元化的系统很容易部署在N个机房<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">                       | 100%</span><br><span class="line">   ----------------------------------------</span><br><span class="line">   |              流量路由                |</span><br><span class="line">   ----------------------------------------</span><br><span class="line">     |25%     |25%            |25%      |25%</span><br><span class="line">     |        |               |         |</span><br><span class="line">-------------------       -------------------</span><br><span class="line">|   \|/      \|/  |       |  \|/       \|/  |</span><br><span class="line">| ------   ------ |       | ------   ------ |</span><br><span class="line">| |    |   |    | |       | |    |   |    | |</span><br><span class="line">| |SET1|   |SET2| |       | |SET3|   |SET4| |</span><br><span class="line">| |    |   |    | |       | |    |   |    | |</span><br><span class="line">| ------   ------ |       | ------   ------ |</span><br><span class="line">|                 |       |                 |</span><br><span class="line">|      IDC 1      |       |      IDC 2      |</span><br><span class="line">-------------------       -------------------</span><br></pre></td></tr></table></figure></p>
<p>单元化架构必须具备<strong>数据分区</strong>的能力，每个数据分区决定了各个单元可承担的业务流量比例。数据分区（Shard）：把全局数据按照某个维度水平划分，每个分区的数据互不重叠，即数据库的水平拆分。<br>单元化结构的必要条件：<strong>所有业务数据分区所用的拆分维度和拆分规则必须一致</strong>。<br>单元化结构的维度选择很重要，该维度应该粒度合适。<br>某个单元中数据分区占数据总量的比例即为该单元承担业务流量的比例。</p>
<h1 id="单元化架构数据的划分"><a href="#单元化架构数据的划分" class="headerlink" title="单元化架构数据的划分"></a>单元化架构数据的划分</h1><p>支付宝对于单元称为Zone，数据也分为三类</p>
<h2 id="可分区数据（RZone，Region-Zone）"><a href="#可分区数据（RZone，Region-Zone）" class="headerlink" title="可分区数据（RZone，Region Zone）"></a>可分区数据（RZone，Region Zone）</h2><p><strong>按照选择好的维度可以真正被单元化的数据</strong>。可分区数据在系统链路中应该处于核心位置，单元化建设最重要的目标就是处理该类数据。</p>
<h2 id="全局数据，不被关键链路业务频繁访问（GZone，Global-Zone）"><a href="#全局数据，不被关键链路业务频繁访问（GZone，Global-Zone）" class="headerlink" title="全局数据，不被关键链路业务频繁访问（GZone，Global Zone）"></a>全局数据，不被关键链路业务频繁访问（GZone，Global Zone）</h2><p>不能被分区的数据，全局只有一份，可能被关键链接访问，但访问频率低，例如：配置类数据。该类数据无法被分区，也就无法单元化。</p>
<h2 id="全局数据，需要被关键链路业务频繁访问（CZone，City-Zone）"><a href="#全局数据，需要被关键链路业务频繁访问（CZone，City-Zone）" class="headerlink" title="全局数据，需要被关键链路业务频繁访问（CZone，City Zone）"></a>全局数据，需要被关键链路业务频繁访问（CZone，City Zone）</h2><p>不能被分区的数据，全局只有一份，频繁被关键链接访问。该类数据在同机房、同城的时候可以通过调用接口的方式获取，但在异地部署的情况下，从A地访问B地的服务，会有很高的延时，在高频率的情况下，系统性能将大大降低。对该类数据的处理，需要将数据本地化，每个城市的数据双向同步。问题在于异地数据同步的延迟问题。</p>
<p>RZone：最符合理论上单元定义的 zone，每个 RZone 都是自包含的，拥有自己的数据，能完成所有业务。<br>GZone：部署不可拆分的数据和服务，数据或服务可能会被RZone依赖。GZone在全局只有一组，数据仅有一份。GZone的数据或服务被RZone访问的频率低。<br>CZone：部署不可拆分的数据和服务，数据或服务可能会被RZone依赖。CZone中的数据或服务会被RZone频繁访问。</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="https://timyang.net/architecture/cell-distributed-system/" target="_blank" rel="noopener">单元化与分布式架构的切分问题</a></li>
<li><a href="https://www.open-open.com/lib/view/open1460364385710.html" target="_blank" rel="noopener">一个单元化架构的例子</a></li>
<li><a href="https://www.jianshu.com/p/4dc45fc5936c" target="_blank" rel="noopener">追前沿，领略SET化架构衍化与设计</a></li>
<li><a href="https://blog.csdn.net/qq_27384769/article/details/80331540" target="_blank" rel="noopener">蚁金服支付宝系统的单元化</a></li>
</ul>
]]></content>
      <categories>
        <category>高性能服务器</category>
      </categories>
      <tags>
        <tag>高性能服务器</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx学习笔记</title>
    <url>/2018/11/20/nginx/</url>
    <content><![CDATA[<h1 id="nginx介绍"><a href="#nginx介绍" class="headerlink" title="nginx介绍"></a>nginx介绍</h1><p>轻量级,高性能,跨平台Web服务器,基于REST架构风格,以统一资源描述符(URI)或统一资源定位符(URL)作为沟通依据,通过HTTP为浏览器等客户端程序提供各种网络服务.</p>
<h1 id="nginx特性"><a href="#nginx特性" class="headerlink" title="nginx特性"></a>nginx特性</h1><ol>
<li>更快<ol>
<li>单次请求得到更快的响应</li>
<li>高并发下比其它web服务器更快地响应请求</li>
</ol>
</li>
<li>高扩展性</li>
<li>高可靠性</li>
<li>低内存消耗</li>
<li>高并发</li>
<li>热部署 不停服升级nginx,不停服更新配置,不停服更快日志文件等</li>
<li>开源(BSD许可)</li>
</ol>
<p>核心:支持高并发的同时保持高效的服务</p>
<h1 id="nginx编译安装"><a href="#nginx编译安装" class="headerlink" title="nginx编译安装"></a>nginx编译安装</h1><h2 id="源码获取"><a href="#源码获取" class="headerlink" title="源码获取"></a>源码获取</h2><p><a href="http://nginx.org/en/download.html" target="_blank" rel="noopener">nginx官网</a><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget http://nginx.org/download/nginx-1.15.6.tar.gz</span><br><span class="line">tar zxvf nginx-1.15.6.tar.gz</span><br><span class="line">cd nginx-1.15.6</span><br></pre></td></tr></table></figure></p>
<h2 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure>
<p>configure命令检测操作系统内核,检测已安装软件,参数解析,中间目录生成,根据参数生成C源码文件和Makefile文件<br>make执行configure命令生成的Makefile文件编译nginx工程,并生成目标文件和最终的二进制文件<br>make install根据configure执行时的参数将nginx部署到指定的安装目录,包括相关目录的建立和二进制文件,配置文件的复制</p>
<h1 id="nginx命令"><a href="#nginx命令" class="headerlink" title="nginx命令"></a>nginx命令</h1><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><p>默认配置文件<code>/usr/local/nginx/conf/nginx.conf</code><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/usr/local/nginx/sbin/nginx</span><br></pre></td></tr></table></figure></p>
<p>可以通过<code>-c</code>参数指定配置文件<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/usr/local/nginx/sbin/nginx -c /etc/nginx.conf</span><br></pre></td></tr></table></figure></p>
<h2 id="测试配置文件信息是否有错误"><a href="#测试配置文件信息是否有错误" class="headerlink" title="测试配置文件信息是否有错误"></a>测试配置文件信息是否有错误</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/usr/local/nginx/sbin/nginx -t</span><br></pre></td></tr></table></figure>
<h2 id="停止服务"><a href="#停止服务" class="headerlink" title="停止服务"></a>停止服务</h2><p>stop强制停止nginx服务<br>quit处理完所有当前请求再停止服务<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/usr/local/nginx/sbin/nginx -s stop</span><br><span class="line">/usr/local/nginx/sbin/nginx -s quit</span><br></pre></td></tr></table></figure></p>
<h2 id="重读配置并生效"><a href="#重读配置并生效" class="headerlink" title="重读配置并生效"></a>重读配置并生效</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/usr/local/nginx/sbin/nginx -s reload</span><br></pre></td></tr></table></figure>
<h2 id="日志文件回滚"><a href="#日志文件回滚" class="headerlink" title="日志文件回滚"></a>日志文件回滚</h2><p>先将当前日志文件改名或转移到别的地址,再执行下面命令生成新的日志文件<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/usr/local/nginx/sbin/nginx -s reopen</span><br></pre></td></tr></table></figure></p>
<h1 id="nginx配置"><a href="#nginx配置" class="headerlink" title="nginx配置"></a>nginx配置</h1><h2 id="nginx进程"><a href="#nginx进程" class="headerlink" title="nginx进程"></a>nginx进程</h2><p>在生产环境部署nginx都是采用一个master进程管理多个worker进程的模式.一般情况下,woker进程的数量和服务器上的CPU核心数相等即可(最好每个worker进程都绑定特定的CPU核心,让进程间切换的代价最小).<br>woker进程提供正在的互联网服务,master进程负责监控woker进程(当worker进程意外退出立即启动新的worker进程继续提供服务),为管理员提供命令行服务(启动服务,停止服务,重新载入配置,平滑升级程序等)<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">                     |--&gt; worker进程 ------HTTP请求---- Client</span><br><span class="line">                     |</span><br><span class="line">                     |--&gt; worker进程 ------HTTP请求---- Client</span><br><span class="line">                     |                 |</span><br><span class="line">master进程 ---管理----                  |---HTTP请求---- Client</span><br><span class="line">                     |</span><br><span class="line">                     |--&gt; worker进程 ------HTTP请求---- Client</span><br><span class="line">                     |</span><br><span class="line">                     |--&gt; worker进程 ------HTTP请求---- Client</span><br></pre></td></tr></table></figure></p>
<h2 id="nginx配置-1"><a href="#nginx配置-1" class="headerlink" title="nginx配置"></a>nginx配置</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#块配置项由一个块配置项名和一对大括号组成 events http server location upstream等都是块配置项</span><br><span class="line">#块配置项一定会用大括号把所属的一系列所属的配置项包含进来,表示大括号内的配置项同时生效</span><br><span class="line">#块配置项可以嵌套,内层块直接继承外层块</span><br><span class="line"></span><br><span class="line">#配置项单位 空间: K或者k千字节 M或m兆字节  时间:ms(毫秒),s(秒),m(分钟),h(小时),d(天),w(周),M(月),y(年)</span><br><span class="line"></span><br><span class="line">#以守护进程方式运行Nginx  默认on</span><br><span class="line">daemon on;</span><br><span class="line"></span><br><span class="line">#以mater/worker(一个master进程管理多个worker进程)方式工作,如果关闭就不会fork出worker子进程,而是master进程自身来处理请求  默认on</span><br><span class="line">master_process on;</span><br><span class="line"></span><br><span class="line">#error日志设置 语法: error_log /path/file level;</span><br><span class="line">#/path/file是一个具体文件, /path/file也可以设置为/dev/null,不再输出任何日志(关闭error日志的唯一手段)</span><br><span class="line">#level是日志等级 debug info notice warn error crit alert emerg 从左到右等级依次增大 如果想把日志等级设置为debug,必须在configure时加入--with-debug配置项</span><br><span class="line">error_log  /var/log/nginx/error.log error;</span><br><span class="line">#error_log  logs/error.log  notice;</span><br><span class="line">#error_log  logs/error.log  info;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#限制coredump核心转储文件的大小,防止core文件过大占满了磁盘 语法: worker_rlimit_core size;</span><br><span class="line">worker_rlimit_core 1024M;</span><br><span class="line"></span><br><span class="line">#指定coredump文件生成目录,worker进程的工作目录,该配置的唯一用途是设置coredump文件防止的目录,协助定位问题,需要确保worke进程有权限向working_directory指定目录写入文件 语法: working_directory path;</span><br><span class="line">working_directory /data/nginx;</span><br><span class="line"></span><br><span class="line">#定义环境变量 语法: env VAR|VAR=VALUE; 该配置让用户直接操作操作系统上的环境变量</span><br><span class="line">#嵌入其他配置文件 语法: inclue /path/file; 将其它配置文件嵌入到当前的nginx.conf文件中,参数可以是绝对路径也可以是相对路径(相对nginx配置目录)</span><br><span class="line">#include nginx.d/http/server.casezheng.com.conf</span><br><span class="line">#include nginx.d/*.conf</span><br><span class="line"></span><br><span class="line">#pid文件路径 保存master进程ID的pid文件存储路径.默认和configure设置的--pid-path所指定位置相同,需要确认nginx有权在相应目录中建立pid文件</span><br><span class="line">pid        /run/nginx.pid;</span><br><span class="line"></span><br><span class="line">#ningx worker进程运行的用户及用户组</span><br><span class="line">user  nginx;</span><br><span class="line"></span><br><span class="line">#设置一个nginx worker进程可以打开的最大文件描述符个数</span><br><span class="line">worker_rlimit_nofile 65535;</span><br><span class="line"></span><br><span class="line">#限制信号队列 设置每个用户发往nginx的信号队列的大小,当某个用户的信号队列满了,该用户发送的信号量将被丢弃</span><br><span class="line">#worker_rlimit_sigpending limit;</span><br><span class="line"></span><br><span class="line">#nginx worker进程个数 在master/worker运行方式下,定义worker进程的个数</span><br><span class="line">worker_processes  auto;</span><br><span class="line"></span><br><span class="line">#绑定nginx worker进程到指定的CPU内核 语法: worker_cpu_affinity cpumask [cpumask...]; 该配置仅针对Linux操作系统有效</span><br><span class="line"></span><br><span class="line">#SSL硬件加速 如果服务器上有SSL硬件加速设备,可以进行配置加快SSL协议的处理速度.用户可以使用OpenSSL提供的命令来查看是否有SSL硬件加速设备: openssl engine -t</span><br><span class="line">#ssl_engine device;</span><br><span class="line"></span><br><span class="line">#nginx worker进程的优先级设置, 优先级有静态优先级和进程执行情况共同决定.这里设置的是静态优先级. 语法: worker_priority nice;   nice -20 ~ +19, -20最高优先级 +19最低优先级 希望nginx占用更多系统资源可以将其设置小点,但不建议比内核进程的nice(-5)小.</span><br><span class="line">#worker_priority 0;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">include /usr/share/nginx/modules/*.conf;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    #对指定的客户端输出debug级别的日志 语法: debug_connection [IP|CIDR];  该配置属于事件类配置,必须放在events配置块中才有效,值可以是IP地址或CIDR地址 可以用于高并发请求下定位问题</span><br><span class="line">    debug_connection 127.0.0.1;</span><br><span class="line">    debug_connection 127.0.0.0/24;</span><br><span class="line">    </span><br><span class="line">    #accept锁 accept_mutex是Nginx的负载均衡锁,让多个worker进程轮流的,序列化地与新的客户端建立TCP连接,当一个worker进程建立的连接达到worker_connections配置的最大连接数的7/8时,大大减少该worker进程试图建立新TCP连接的机会,以此实现所有worker进程上处理的客户端请求数尽量接近. accept锁默认打开,关闭后建立TCP连接的耗时会更短,但worker进程间的负载会不均衡,因此不建议关闭它</span><br><span class="line">    accept_mutex on;</span><br><span class="line"></span><br><span class="line">    #使用accept锁后真正建立连接的延迟时间 语法: accept_mutext_delay Nms;    在使用accept锁后,同一时间只有一个worker进程可以获取到accept锁,accept锁不是阻塞锁,如果获取不到会立即返回.如果有一个worker进程试图获取accept锁而没有获取到,至少要等accept_mutex_delay定义的时间间隔后才能再次试图获取锁.</span><br><span class="line"></span><br><span class="line">    #批量建立新连接 当事件模型通知有新连接时,尽可能对本次调度中客户端发起的所有TCP请求都建立连接. 语法: multi_accept [on|off];</span><br><span class="line">    multi_accept off;</span><br><span class="line"></span><br><span class="line">    #选择事件模型 语法: use [kququ | rtsig | epoll | /dev/poll | select | poll | eventport]; nginx默认会选择最合适的事件模型</span><br><span class="line">    use epoll;</span><br><span class="line"></span><br><span class="line">    #每个worker可以处理的最大连接数</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line"></span><br><span class="line">    log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class="line">                      &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class="line">                      &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</span><br><span class="line"></span><br><span class="line">    access_log  /var/log/nginx/access.log  main;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    #gzip  on;</span><br><span class="line"></span><br><span class="line">    #内存和磁盘资源的分配</span><br><span class="line">    #client_body_in_file_only HTTP包体只存储在磁盘空间中 语法:client_body_in_file_only on|clean|off; 默认off; 适用于配置块:http,server,location 当非off值时,用户请求中的HTTP包体一律存储到磁盘文件中,即使只有0字节也会存储为文件.当请求结束时如果配置为on,则该文件不会被删除(一般用于调试定位问题),若配置为clean,则会删除该文件</span><br><span class="line">    client_body_in_file_only off;</span><br><span class="line">    #client_body_in_single_buffer on|off; HTTP包体尽量写到一个内存buffer中.如果HTTP包体的大小超过了client_body_buffer_size设置的值,包体还是会写入到磁盘文件中 适用于配置块:http,server,location</span><br><span class="line">    client_body_in_single_buffer off;</span><br><span class="line">    #client_header_buffer_size size; 存储HTTP头部的内存buffer大小 配置块:http,server 存储HTTP头部的内存buffer大小 定义了正常情况下Nginx接收用户请求中HTTP header部分(包括HTTP行和HTTP头部)时分配的内存buffer大小.如果请求中的HTTP header部分超过client_header_buffer_size,large_client_header_buffers将会生效</span><br><span class="line">    client_header_buffer_size 1K;</span><br><span class="line">    #large_client_header_buffers number size; 配置块:http,server large_client_header_buffers定义了nginx接收超大HTTP头部请求的buffer个数和每个buffer的大小.如果HTTP请求行的大小超过单个buffer,则返回&quot;Request URI toolager&quot;(414).请求中一般有多个header,每个header的大小也不能超过单个buffer的大小.否则返回&quot;Bad request&quot;(400).请求行和请求头部的总和也不可以超过buffer个数和*buffer大小</span><br><span class="line">    large_client_header_buffers 4 8K;</span><br><span class="line">    #client_body_buffer_size size; 配置块:http,server,location 存储HTTP包体的内存buffer大小 定义了nginx接收HTTP包体的内存缓冲区大小 即HTTP包体会先接收到指定的这块内存中,之后才决定是否写入磁盘.</span><br><span class="line">    #如果用户请求中包含HTTP头部Content-Length,并且其标识长度小于定义的buffer长度,nginx会自动降低本次请求所使用的内存buffer,降低内存消耗.</span><br><span class="line">    client_body_buffer_size 16k;</span><br><span class="line">    #client_body_temp_path dir-path [level1[level2[level3]]]; 配置块:http,server,location 定义HTTP包体存放的临时目录.在请求HTTP包体时,如果包体大小大于client_body_buffer_size,则会以一个递增的整数命名并存放到client_body_temp_path所指定的目录中.其后跟随的level1,level2,level3是为了防止一个目录下文件太多导致性能下降,因此使用level参数,按照临时文件名最多再加三层目录.</span><br><span class="line">    client_body_temp_path client_body_temp 1 2;</span><br><span class="line">    #connection_pool_size size; 配置块:http,server nginx对每个建立的TCP连接会预先分配一个内存池,size指定该内存池的初始大小,用于减少内核对小块内存的分配次数,需谨慎设置.过大的size会使服务器消耗内存增多,更小的size会引发更多的内存分配次数.</span><br><span class="line">    connection_pool_size 256;</span><br><span class="line">    #request_pool_size size; 配置块:http,server nginx开始处理HTTP请求时,会为每个请求分配一个内存池,size配置项指定该内存池的初始大小,用于减少内核对小块内存的分配次数.TCP连接关闭时会销毁connection_pool_size指定的连接池,HTTP请求结束时会销毁request_pool_size指定的HTTP请求内存池.但TCP连接内存池和HTTP请求内存池的创建和销毁时间并不一致,因为一个TCP连接可能被复用于多个HTTP请求.</span><br><span class="line">    request_pool_size 4k;</span><br><span class="line"></span><br><span class="line">    #网络连接的设置</span><br><span class="line">    #client_header_timeout time(默认单位s); 配置块:http,server,location 读取HTTP头部的超时时间 客户端和服务器建立连接后开始接收HTTP头部,如果在一个时间间隔内没有读取到客户端发来的字节,则认为超时,并向客户端返回408(&quot;Request timed out&quot;)响应.</span><br><span class="line">    client_header_timeout 60;</span><br><span class="line">    #client_body_timeout time(默认单位s); 配置块:http,server,location 读取HTTP包体的超时时间</span><br><span class="line">    client_body_timeout 60;</span><br><span class="line">    #send_timeout time; 配置块:http,server,location 发送响应的超时时间 nginx服务器向客户端发送数据包,但客户端一直没有去接收这个数据包.如果某个连接超过send_timeout定义的超时时间,nginx将关闭这个连接</span><br><span class="line">    send_timeout 60;</span><br><span class="line">    #reset_timedout_connection on|off; 配置块:http,server,location 连接超时后将通过向客户端发送RST包来直接重置连接.该选项打开后,nginx会在某个连接超时后,不是使用正常情况下的四次挥手关闭TCP连接,而是直接向用户发送RST重置包,不在等待用户的应答,直接使用nginx服务器上关于该套接字的所有缓存,与正常关闭方式相比,使得服务器避免了产生更多处于FIN_WAIT_1,FIN_WAIT_2,TIME_WAIT状态的TCP连接. 但是,使用RST重置包关闭连接会带来一些问题,默认情况下不会开启.</span><br><span class="line">    reset_timedout_connection off;</span><br><span class="line">    #lingering_close off|on|always; 配置块:http,server,location 控制nginx关闭用户连接的方式.always表示关闭用户连接前必须无条件地处理连接上所有用户发送的请求.off表示关闭连接时完全不管连接上是否有已经准备就绪的来自用户的数据.on是中间值,一般情况下在关闭前都会处理l连接上用户发送的数据,除了有些情况下在业务上认定之后的数据是不必要的.</span><br><span class="line">    lingering_close on;</span><br><span class="line">    #lingering_time time; 配置块:http,server,location lingering_close启用后,对上传大文件很有用,当用户上传的Content-Length大于max_client_body_size时,nginx服务器向用户发送413(Request entity too large)响应,如果客户端不管413返回值继续上传HTTP body,经过lingering_time设置的时间后,nginx将不管用户是否仍在上传,都将连接关闭掉</span><br><span class="line">    lingering_time 30s;</span><br><span class="line">    #lingering_timeout time; 配置块:http,server,location lingering_close生效后,在关闭连接前,会检测是否有用户发送的数据到达服务器,如果超过了lingering_timeout还没有数据可读,就直接关闭连接,否则,必须在读取完连接缓冲区上的数据并丢弃后才能关闭连接</span><br><span class="line">    lingering_timeout 5s;</span><br><span class="line">    #keepalive_disable [msie6|safari|none...]; 配置块:http,server,location HTTP请求的keepalive功能让多个请求复用一个HTTP长连接,对服务器的性能提高很有帮助,但有的浏览器对keepalive功能的POST请求有功能项问题,因此可以对特定浏览器禁用keepalive功能</span><br><span class="line">    keepalive_disable msie6 safari;</span><br><span class="line">    #keepalive_timeout time(秒); 配置块:http,server,location  一个httpalive在闲置一定时间后,服务器和浏览器都会去关闭这个连接,keepalive_timeout配置项用来约束nginx服务器,nginx会按照规范将keepalive_timeout传给浏览器,但每个浏览器对keepalive的策略有可能不同</span><br><span class="line">    keepalive_timeout   65;</span><br><span class="line">    #keepalive_requests n; 配置块:http,server,location 一个keepalive长连接上允许的请求最大数 即一个keepalive连接上最多只能发送n个请求</span><br><span class="line">    keepalive_requests 100;</span><br><span class="line">    #tcp_nodelay on|off; 配置块:http,server,location 确定对keepalive连接是否使用TCP_NODELAY选项</span><br><span class="line">    tcp_nodelay         on;</span><br><span class="line">    #tcp_nopush on|off; 配置块:http,server,location 在打开sendfile选项时,确认是否开启FreeBSD系统的TCP_NOPUSH或Linux系统上的TCP_CORK功能,打开tcp_nopush后,将在发送响应时把真个响应头放在一个TCP包中发送.</span><br><span class="line">    tcp_nopush          on;</span><br><span class="line">    </span><br><span class="line">    #MIME类型的设置</span><br><span class="line">    #MIME type与文件扩展的映射 语法: type &#123;...&#125;; 配置块:http,server,location  定义MIME type到文件拓展名的映射.多个拓展名可映射到同一个MIME type.</span><br><span class="line">    #默认MIME type 语法:default_type MIME-type; 配置块:http,server,location 当找不到相应的MIME type与文件扩展名之间的映射时使用默认的MIME type作为HTTP header中的Content-Type.</span><br><span class="line">    default_type application/octet-stream;</span><br><span class="line">    #types_hash_bucket_size size; 默认type_hash_bucket_size 32|64|128; 配置块:http,server,location 为了快速查找相应MIME type,nginx使用散列表来存储MIME type与文件扩展名.types_hash_bucket_size设置了每个散列桶占用内存大小</span><br><span class="line">    types_hash_bucket_size 64;</span><br><span class="line">    #types_hash_max_size size; 配置块:http,server,location  影响散列表的冲突率,types_hash_max_size越大,消耗内存越大,打散列表的冲突率会降低,检索速度会更快,types_hash_max_size越小,消耗内存越少,但散列表冲突率会上升.</span><br><span class="line">    types_hash_max_size 2048;</span><br><span class="line"></span><br><span class="line">    #文件操作的优化</span><br><span class="line">    #sendfile系统调用 sendfile on|off; 配置块:http,server,location 启用Linux上的sendfile系统调用来发送文件,减少系统内核和用户态之间的两次内存复制,从磁盘中直接读取文件后直接在内核态发送到网卡设备.提高发送文件的效率.</span><br><span class="line">    #sendfile off;</span><br><span class="line">    #AIO系统调用 aio on|off; 配置块:http,server,location 表示是否在FreeBSD或Linux系统上启用内核级别的异步文件I/O功能.该配置和sendfile功能互斥</span><br><span class="line">    aio on;</span><br><span class="line">    #directio size|off; 配置块:http,server,location 在FreeBSD和Linux系统上使用O_DIRECT选项来读文件,缓冲区大小为size,通常对大文件的读取速度有优化功能,与sendfile功能相斥.</span><br><span class="line">    directio off;</span><br><span class="line">    #directio_alignment size; 配置块:http,server,location 与directio配合使用,指定以directio方式读取文件时的对齐方式.</span><br><span class="line">    directio_alignment 512;</span><br><span class="line">    #打开文件缓存 open_file_cache max=N[inactive=time]|off; 配置块:http,server,location 文件缓存会在内存中存储3种信息:1.文件句柄,文件大小和上次修改时间 2.已经打开过的目录结构 3.没有找到的或者没有操作权限的文件信息</span><br><span class="line">    #open_file_cache 后面跟3个参数.max表示在内存中存储元素的最大个数,当达到最大值后,将采用LRU算法从缓存中淘汰最近最少使用的元素.inactive表示在inactive指定的时间段内没有被访问过的元素将被淘汰.默认时间为60秒.off关闭缓存功能</span><br><span class="line">    open_file_cache off;</span><br><span class="line">    #open_file_cache max=100 inactive=20s;</span><br><span class="line">    #缓存打开文件错误的信息 open_file_cache_errors on|off; 配置块:http,server,location</span><br><span class="line">    open_file_cache_errors off;</span><br><span class="line">    #不被淘汰的最小访问次数 open_file_cache_min_uses number; 配置块:http,server,location 与open_file_cache中的inactive参数配合使用.如果在inactive指定时间段内,访问次数超过了open_file_cache_min_uses指定的最小次数,那么将不会被淘汰出缓存.</span><br><span class="line">    open_file_cache_min_uses 1;</span><br><span class="line">    #检查缓存中元素有效性的频率. open_file_cache_valid time; 配置块:http,server,location</span><br><span class="line">    open_file_cache_valid 60s;</span><br><span class="line"></span><br><span class="line">    include             /etc/nginx/mime.types;</span><br><span class="line">    include             /etc/nginx/default.d/*.conf;</span><br><span class="line">    include             /etc/nginx/conf.d/*.conf;</span><br><span class="line"></span><br><span class="line">    #server_names_hash_bucket_size设置nginx存储server_name的散列表每个散列桶占用的内存大小 适用于配置块:http,server,location 取值32,64,128</span><br><span class="line">    server_names_hash_bucket_size 128;</span><br><span class="line">    #server_names_hash_max_size影响散列表的冲突率,值越大消耗内存越多,散列key的冲突率约低,检索速度越快 适用于配置块:http,server,location</span><br><span class="line">    server_names_hash_max_size 512;</span><br><span class="line"></span><br><span class="line">    #对客户端请求的特殊处理</span><br><span class="line">    #忽略不合法的HTTP头部 ignore_invalid_headers on|off; 配置块:http,server 如果将其设置为off,当出现不合法的HTTP头部时,ngin将拒绝服务,并直接想用户发送400(Bad Request)错误,如果设置为on,则将忽略此HTTP头部.</span><br><span class="line">    ignore_invalid_headers on;</span><br><span class="line">    #HTTP头部允许下划线 underscores_in_headers on|off; 配置块:http,server 默认off,表示HTTP头部名称中不允许带&quot;_&quot;</span><br><span class="line">    underscores_in_headers off;</span><br><span class="line">    #If-Modified-Since头部的处理策略 if_modified_since [off|exact|before]; 配置块:http,server,location Web浏览器一般会缓存文件到本地,并存储当时获取的时间,下次向Web服务器获取缓存过的资源时,使用If-Modified-Since头部把上次获取的时间捎带上,而if_modified_since将根据后面的参数决定如何处理If-Modified-Since头部.</span><br><span class="line">    #off: 直接忽略用户请求中的If-Modified-Since头部,如果获取一个文件,会正常返回文件内容,HTTP响应吗通常为200</span><br><span class="line">    #exact: 将If-Modified-Since头部包含的时间和将要返回的文件上次修改时间做精准比较,如果没有匹配上则返回200和文件实际内容,如果匹配上了,则表示浏览器缓存的已经是最新的啦,没有必要再返回文件浪费时间和宽带,返回304 Not Modified,浏览器收到后会直接读取自己的本地缓存</span><br><span class="line">    #before: 比exact更宽松,只要文件上次修改时间等于或早于用户请求中的If-Modified-Since头部的时间,会向客户端返回304Not Modified.</span><br><span class="line">    if_modified_since exact;</span><br><span class="line">    #文件未找到时记录到error日志 log_not_found on|off; 配置块:http,server,location 表示当处理用户请求且需要访问文件时,如果未找到文件,是否将错误记录到error.log日志.可用于定位问题.</span><br><span class="line">    log_not_found on;</span><br><span class="line">    #merge_slashes on|off; 配置块:http,server,location 合并相邻的&quot;/&quot;.</span><br><span class="line">    merge_slashes on;</span><br><span class="line">    #DNS解析地址 resolver address ...; 配置块:http,server,location 设置DNS名字解析服务器地址.</span><br><span class="line">    #DNS解析超时时间 resolver_timeout time; 配置块:http,server,location</span><br><span class="line">    resolver_timeout 30s;</span><br><span class="line">    #server_tokens on|off; 返回错误页面时是否在Server中注明nginx版本 配置块:http,server,location 方便定位问题</span><br><span class="line">    server_tokens on;</span><br><span class="line"></span><br><span class="line">    #server块 虚拟主机定义</span><br><span class="line">    server &#123;</span><br><span class="line">        #监听端口 默认监听80端口 listen决定nginx服务如何监听端口.在listen后面可以只加IP地址,端口或主机名</span><br><span class="line">        #listen 127.0.0.1:8080;</span><br><span class="line">        #listen 127.0.0.1;  #不写端口时,默认监听80端口</span><br><span class="line">        #listen *:80;</span><br><span class="line">        #listen localhost:80;</span><br><span class="line">        #listen后面也可以加其他参数</span><br><span class="line">        #1. default/default_server: 将这个server块作为整个Web服务的默认server块.未设置则将nginx解析配置时找到的第一个server块作为默认块,当一个请求无法匹配配置文件中所有主机域名时,选择默认的虚拟主机.</span><br><span class="line">        #2. backlog=num: 表示TCP中backlog队列的大小,默认为-1,表示不予设置.在TCP三次握手的工程中,进程还没有开始处理监听句柄,这时backlog队列会放置这些新连接.如果backlog队列已满,新的客户端试图建立新连接将会失败.</span><br><span class="line">        #3. rcvbuf=size: 设置监听句柄的SO_RCVBUF参数 </span><br><span class="line">        #4. sndbuf=size: 设置监听句柄的SO_SNDBUF参数</span><br><span class="line">        #5. accept_filter: 设置accept过滤器,只对FreeBSD操作系统有效</span><br><span class="line">        #6. deferred: 设置该参数,若用户发起建立连接请求,并且完成TCP的三次握手,内核也不会调度worker进程来处理这个连接,当用户真的发送请求数据时,内核才会调度worker进程处理这个连接,这个参数适合大并发的情况下,减轻worker进程的负担</span><br><span class="line">        #7. bind: 绑定当前端口/地址对, 只有同时对一个端口监听多个地址才会生效</span><br><span class="line">        #8. ssl: 在当前监听的端口上建立的连接必须基于SSL协议</span><br><span class="line">        listen       80 default_server;</span><br><span class="line">        listen       [::]:80 default_server;</span><br><span class="line"></span><br><span class="line">        #主机名称 server_name可以跟多个主机名称</span><br><span class="line">        #server_name  localhost test.casezheng.date;</span><br><span class="line">        #server_name  localhost 127.0.0.1;</span><br><span class="line">        #当nginx处理一个HTTP请求时,nginx取出header头中的host,与每个server中的server_name匹配.匹配规则如下:</span><br><span class="line">        #1. 完全匹配server_name</span><br><span class="line">        #2. 通配符在前面的server_name</span><br><span class="line">        #3. 通配符在后面的server_name</span><br><span class="line">        #4. 正则表达式才匹配的server_name</span><br><span class="line">        #5. 前面都未匹配到,找listen配置项后加了default或default_server的server块</span><br><span class="line">        #6. 前面都未匹配到,找匹配listen端口的第一个server块</span><br><span class="line">        #server_name后面跟空字符串表示匹配没有host这个HTTP头部的请求</span><br><span class="line">        server_name  localhost test.casezheng.date;</span><br><span class="line"></span><br><span class="line">        #server_name_in_redirect 重定向主机名称 配合server_name使用,当打开时表示重定向请求时会使用server_name里配置的第一个主机名代替原先请求中的Host头部,关闭时表示在重定向请求时使用请求本身的Host头部. 适用于配置块:http,server,location  默认on</span><br><span class="line">        server_name_in_redirect on;</span><br><span class="line"></span><br><span class="line">        #charset koi8-r;</span><br><span class="line"></span><br><span class="line">        #location 语法: location [=|~|~*|^~|@]/uri/ &#123; ... &#125; 适用于配置块:server  location尝试根据用户请求中的URI来匹配/uri表达式,如果可以匹配,就选择location块中的配置处理用户请求, 匹配规则如下:</span><br><span class="line">        #1. =表示把URI作为字符串,以便与参数中的uri做完全匹配</span><br><span class="line">        #2. ~表示匹配URI时是大小写敏感的</span><br><span class="line">        #3. ~*表示匹配URI时忽略字母大小写问题</span><br><span class="line">        #4. ^~表示匹配URI时只需要其前半部分与uri参数匹配即可</span><br><span class="line">        #5. @表示仅用于nginx服务内部请求之间的重定向</span><br><span class="line">        #在uri参数中可以使用正则表达式进行匹配</span><br><span class="line">        #location存在顺序,当一个请求有可能匹配多个location时,该请求将被第一个location处</span><br><span class="line">        </span><br><span class="line">        root /data/nginx/;</span><br><span class="line"></span><br><span class="line">        #对客户端请求的限制</span><br><span class="line">        #对HTTP方法名限制用户请求 limit_except method ... &#123; ... &#125; 配置块:location   nginx通过limit_except后面指定的方法名来限制用户请求.方法名取值包括:GET,HEAD,POST,PUT,DELETE,MKCOL,COPY,MOVE,OPTIONS,PROPFIND,PROPPATCH,LOCK,UNLOCK或者PATCH.</span><br><span class="line">        #请求包体的最大值 client_max_body_size size; 配置块:http,server,location 浏览器发送含较大HTTP包体的请求时,其头部有Content-Length字段,client_max_body_size是用来限制Content-Length所示值的大小的.nginx在接受到包头后,发现Content-Length的值大于client_max_body_size,直接发送403(&quot;Request Entity Too Large&quot;)响应给客户端</span><br><span class="line">        client_max_body_size 1m;</span><br><span class="line"></span><br><span class="line">        #对请求的限制 limit_rate speed; 配置块:http,server,location,if 对客户端请求限制每秒传输的字节数. 0表示不限速.</span><br><span class="line">        limit_rate 0;</span><br><span class="line">        #limit_rate_after length; 表示nginx向客户端发送的请求长度超过limit_rate_after后才开始限速.</span><br><span class="line">        limit_rate_after 100m;</span><br><span class="line"></span><br><span class="line">        location = /test_root &#123;</span><br><span class="line">            #以root方式设置资源路径 适用于配置块:http,server,location,if  root根据完整的URI请求来映射</span><br><span class="line">            #root /data/nginx/;</span><br><span class="line">            limit_except GET &#123;</span><br><span class="line">                allow 192.168.1.0/32;</span><br><span class="line">                deny all;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location = /test_alias &#123;</span><br><span class="line">            #以alias方式设置资源路径 适用于配置块:location alias在URI向实际文件路径的映射过程中,会丢弃掉location后面配置的那部分uri</span><br><span class="line">            alias /data/nginx/test_alias/;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            #访问首页   语法: index file ...; 用ngx_http_index_module模块提供的index配置实现返回网站首页,nginx按照配置的顺序访问index后配置的文件</span><br><span class="line">            root   /data/nginx;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        #error_page code [code...][=|=answer-code]uri|@named_location  适用于配置块:http,server,location,if</span><br><span class="line">        #当某个请求返回错误码时,如果匹配上了erro_page中设置的code,则重定向到新的URI中.</span><br><span class="line">        #error_page  404              /404.html;</span><br><span class="line">        #error_page  404 =200         /404.html;    #重定向后返回的错误码还是原来的,可以通过=更改返回的错误码</span><br><span class="line">        #error_page  404 =            /404.html;    #也可以不指定确切的返回码,由重定向后实际处理的真实结果决定</span><br><span class="line">        #如果不行修改URI,只是将错误请求重定向到另一个location处理,可以如下配置,将错误请求代理到http://test.casezheng.date/test_root上游服务器处理</span><br><span class="line">        location /test_error_fallback &#123;</span><br><span class="line">            error_page 404 @fallback;</span><br><span class="line">        &#125;</span><br><span class="line">        location @fallback &#123;</span><br><span class="line">            proxy_pass http://test.casezheng.date;</span><br><span class="line">        &#125;</span><br><span class="line">        #递归使用error_page  recursive_error_pages [on|off]</span><br><span class="line">        recursive_error_pages off;  #默认不允许递归定义error_page</span><br><span class="line"></span><br><span class="line">        # redirect server error pages to the static page /50x.html</span><br><span class="line">        #</span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   /data/nginx;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location ^~ /test_try_files &#123;</span><br><span class="line">            #try_files后跟若干路径,最后必须有uri参数. nginx尝试按顺序访问每个路径,如果可以有效访问则返回,否则继续读取下一个.如果所有路径都读取不到则重定向到最后的参数uri上.因此最后的uri参数必须存在而且是可以重定向的.</span><br><span class="line">            #try_files适用于server,location配置块</span><br><span class="line">            try_files /test_try1 /test_try2 /test_try3 @fallback;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br><span class="line">        #</span><br><span class="line">        #location ~ \.php$ &#123;</span><br><span class="line">        #    root           html;</span><br><span class="line">        #    fastcgi_pass   127.0.0.1:9000;</span><br><span class="line">        #    fastcgi_index  index.php;</span><br><span class="line">        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span><br><span class="line">        #    include        fastcgi_params;</span><br><span class="line">        #&#125;</span><br><span class="line"></span><br><span class="line">        # deny access to .htaccess files, if Apache&apos;s document root</span><br><span class="line">        # concurs with nginx&apos;s one</span><br><span class="line">        #</span><br><span class="line">        #location ~ /\.ht &#123;</span><br><span class="line">        #    deny  all;</span><br><span class="line">        #&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    # HTTPS server</span><br><span class="line">    #</span><br><span class="line">    #server &#123;</span><br><span class="line">    #    listen       443 ssl;</span><br><span class="line">    #    server_name  localhost;</span><br><span class="line"></span><br><span class="line">    #    ssl_certificate      cert.pem;</span><br><span class="line">    #    ssl_certificate_key  cert.key;</span><br><span class="line"></span><br><span class="line">    #    ssl_session_cache    shared:SSL:1m;</span><br><span class="line">    #    ssl_session_timeout  5m;</span><br><span class="line"></span><br><span class="line">    #    ssl_ciphers  HIGH:!aNULL:!MD5;</span><br><span class="line">    #    ssl_prefer_server_ciphers  on;</span><br><span class="line"></span><br><span class="line">    #    location / &#123;</span><br><span class="line">    #        root   html;</span><br><span class="line">    #        index  index.html index.htm;</span><br><span class="line">    #    &#125;</span><br><span class="line">    #&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="nginx配置反向代理服务器"><a href="#nginx配置反向代理服务器" class="headerlink" title="nginx配置反向代理服务器"></a>nginx配置反向代理服务器</h2><p>反向代理(reverse proxy)方式指用代理服务器接受Internet上的连接请求,然后将请求转发给内部网络中的上游服务器,并将从上游服务器得到的结果返回给Internet上请求连接的客户端.反向代理服务器必须能够能支持大量并发请求</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">                                      Nginx</span><br><span class="line">            ---静态文件请求---&gt;</span><br><span class="line">                                  静态Web服务器</span><br><span class="line">            &lt;---文件内容-------    </span><br><span class="line">Web浏览器                                 </span><br><span class="line">            ---静态文件请求---&gt;                   ---转发动态请求---&gt;</span><br><span class="line">                                  反向代理服务器                      处理复杂业务的动态Web服务器</span><br><span class="line">            &lt;---转发动态应答---                   &lt;----动态应答------</span><br></pre></td></tr></table></figure>
<p>nginx的反向代理特点</p>
<ul>
<li>2 用户发来的请求将会完整地缓存到nginx代理服务器,之后才会向后端服务器转发</li>
<li>3 nginx反向代理服务器可以按照多种方案从上游服务器的集群中选择一台.负载均衡方案包括按IP地址做散列等</li>
<li>5 如果上游服务器返回内容,则不会先完整缓存到nginx代理服务器再发给客户端,而是边接收边转发到客户端</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">                                    2----&gt; 缓存的HTTP包体                   上游服务器</span><br><span class="line">                                    |</span><br><span class="line">            --------1------&gt;        |               ---------3---------&gt; </span><br><span class="line">客户端                         nginx反向代理服务器                              上游服务器</span><br><span class="line">            &lt;-------5-------                        &lt;--------4----------</span><br><span class="line"></span><br><span class="line">                                                                            上游服务器</span><br></pre></td></tr></table></figure>
<p>nginx的反向代理方案主要是为了降低上游服务器的并发压力.缺点是:延长了一个请求的处理时间,并增加了用于缓存请求内容的内存和磁盘空间,增加了nginx的压力.</p>
<h2 id="负载均衡和反向代理的基本配置"><a href="#负载均衡和反向代理的基本配置" class="headerlink" title="负载均衡和反向代理的基本配置"></a>负载均衡和反向代理的基本配置</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">... ...</span><br><span class="line">http &#123;</span><br><span class="line">	... ...</span><br><span class="line">    #upstream name &#123;...&#125; 配置块:http upstream块定义一个上游服务器的集群,便于反向代理中proxy_pass使用.</span><br><span class="line">    #server name [parameters]; 配置块:upstream server配置项指定了一个上游服务器的名字,可以是域名,IP地址端口,UNIX句柄等,其后可跟如下参数</span><br><span class="line">    #1. weight=number:设置向这台上游服务器转发的权重,默认为1</span><br><span class="line">    #2. max_fails=number:与fail_timeout配合使用,指在fail_timeout时间段内,如果向当前的上游服务器转发失败次数超过number,则认为在当前的fail_timeout时间段内这台上游服务器不可用,max_fails默认为1,设置为0表示不检查失败次数</span><br><span class="line">    #3. fail_timeout:表示该时间段内转发失败多少次后就认为上游服务器暂时不可用,用于优化反向代理功能.该值与向上游服务器建立连接的超时时间,读取上游服务器的响应超时时间等完全无关.fail_timeout默认为10s</span><br><span class="line">    #4. down:表示所在的上游服务器永久下线,只在使用ip_hash配置项时才有用</span><br><span class="line">    #5. backup:在使用ip_hash配置时无效,表示所在的上游服务器只是备份服务器,当所有非备份上游服务器都失效后,才会向所在的上游服务器转发请求</span><br><span class="line">    #ip_hash; 配置块:upstream 按ip hash转发,确保同一个客户端的请求只转发到指定的上游服务器, ip_hash不可与weight配置同时使用. 当upstream集群有一台上游服务器不可用时不可直接删除该配置,而是用down参数标识,确保转发的一致性.</span><br><span class="line">    upstream backend1 &#123;</span><br><span class="line">        server example1.casezheng.date weight=5;</span><br><span class="line">        server example2.casezheng.date max_fails=2 fail_timeout=30s;</span><br><span class="line">        server example3.casezheng.date down;</span><br><span class="line">        server example4.casezheng.date;</span><br><span class="line">    &#125;</span><br><span class="line">    upstream backend2 &#123;</span><br><span class="line">        ip_hash;    </span><br><span class="line">        server example1.casezheng.date;</span><br><span class="line">        server example2.casezheng.date;</span><br><span class="line">        server example3.casezheng.date down;</span><br><span class="line">        server example4.casezheng.date;</span><br><span class="line">    &#125;</span><br><span class="line">    #proxy_pass URL; 配置块:location, if 将当前请求反向代理到URL参数指定的服务器上,URL可以是主机名或IP加端口或直接使用upstream块 默认情况下反向代理不转发请求中的Host头部,如果需要转发,需要加上 proxy_set_header Host $host;</span><br><span class="line">    #proxy_method method; 配置块:http,server,location 表示转发时的协议方法名</span><br><span class="line">    #proxy_hide_header the_header; 配置块:http,server,location nginx将上游服务器的响应转发给客户端,但默认不转发以下HTTP头部字段:Data,Server,X-Pad和X-Accel-*.使用proxy_hide_header后k而已任意指定哪些HTTP头部字段不能被转发</span><br><span class="line">    #proxy_pass_header the_header; 配置块:http,server,location 与proxy_hide_header相反,将原本被禁止的header设置为允许转发.</span><br><span class="line">    #proxy_pass_request_body on|off; 配置块:http,server,location 向上游服务器发送HTTP包体</span><br><span class="line">    #proxy_pass_request_headers on|off; 配置块:http,server,location 向上游服务器发送HTTP包头</span><br><span class="line">    #proxy_redirect [default|off|redirect reqlacement]; 配置块:http,server,location</span><br><span class="line">    #proxy_next_upstream [error|timeout|invalid_header|http_500|http_502|http_503|http_504|http_404|off]; 配置块:http,server,location  表示当向一台上游服务器转发请求错误时,继续换一台上游服务器处理这个请求</span><br><span class="line">    server  &#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        server_name exampel.casezheng.date;</span><br><span class="line"></span><br><span class="line">        proxy_method POST;</span><br><span class="line">        proxy_pass_request_body on;</span><br><span class="line">        proxy_pass_request_headers on;</span><br><span class="line">        #proxy_redirect default;</span><br><span class="line">        proxy_next_upstream error timeout;</span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_pass http://backend2;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="nginx-http模块调用的简化流程"><a href="#nginx-http模块调用的简化流程" class="headerlink" title="nginx http模块调用的简化流程"></a>nginx http模块调用的简化流程</h1><p><img src="/Picture/simplified_flow_of_nginx_http_module_calls.svg" alt="nginx http模块调用的简化流程"></p>
<h1 id="nginx基础架构"><a href="#nginx基础架构" class="headerlink" title="nginx基础架构"></a>nginx基础架构</h1><h1 id="nginx数据结构"><a href="#nginx数据结构" class="headerlink" title="nginx数据结构"></a>nginx数据结构</h1><h2 id="ngx-list-t"><a href="#ngx-list-t" class="headerlink" title="ngx_list_t"></a>ngx_list_t</h2><p><img src="/Picture/nginx_ngx_list_t.png" alt="nginx ngx_list_t链表结构内存分布"></p>
<h1 id="nginx源码阅读"><a href="#nginx源码阅读" class="headerlink" title="nginx源码阅读"></a>nginx源码阅读</h1><p><a href="https://github.com/CaseZheng/nginx" target="_blank" rel="noopener">nginx-1.15.6源码阅读注释</a></p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li>深入理解Nginx模块开发与架构解析第2版</li>
</ul>
]]></content>
      <categories>
        <category>高性能服务器</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>nginx</tag>
      </tags>
  </entry>
</search>
